import{_ as n,o as s,c as a,a as t}from"./app-48690364.js";const p={},e=t(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p><code>Vue</code> 提供了一个 <code>&lt;slot&gt;</code> 插槽的内置特殊元素，用来实现为子组件传递一些模板片段，然后由子组件完成对这些模版的渲染工作。一个简单的例子，这里有一个父组件，写入了一段插槽模版内容：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ChildComponent</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 插槽内容 --&gt;</span>
  hello world
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ChildComponent</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在子组件 <code>&lt;ChildComponent&gt;</code> 中则通过 <code>&lt;slot&gt;</code> 元素来实现对插槽内容的出口渲染：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 插槽出口 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>&lt;slot&gt;</code> 元素是一个<strong>插槽出口</strong> (slot outlet)，标示了父元素提供的<strong>插槽内容</strong> (slot content) 将在哪里被渲染。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8979e66c0c914abc9a97c92c228393fd~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>接下来，我们将一起探索，插槽内容是如何被渲染到指定出口的。</p><h2 id="插槽内容渲染" tabindex="-1"><a class="header-anchor" href="#插槽内容渲染" aria-hidden="true">#</a> 插槽内容渲染</h2><p>一个组件如果携带一些插槽内容，那么这个组件在渲染的时候，会有哪些变化。先来看一个较为常规的 <code>&lt;slot&gt;</code> 插槽内容用法：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ChildComponent</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#header</span><span class="token punctuation">&gt;</span></span>header<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#content</span><span class="token punctuation">&gt;</span></span>content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#footer</span><span class="token punctuation">&gt;</span></span>footer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ChildComponent</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>经过编译器转换后，生成的渲染函数如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createTextVNode <span class="token keyword">as</span> _createTextVNode<span class="token punctuation">,</span> resolveComponent <span class="token keyword">as</span> _resolveComponent<span class="token punctuation">,</span> withCtx <span class="token keyword">as</span> _withCtx<span class="token punctuation">,</span> openBlock <span class="token keyword">as</span> _openBlock<span class="token punctuation">,</span> createBlock <span class="token keyword">as</span> _createBlock <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">_ctx<span class="token punctuation">,</span> _cache<span class="token punctuation">,</span> $props<span class="token punctuation">,</span> $setup<span class="token punctuation">,</span> $data<span class="token punctuation">,</span> $options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> _component_ChildComponent <span class="token operator">=</span> <span class="token function">_resolveComponent</span><span class="token punctuation">(</span><span class="token string">&quot;ChildComponent&quot;</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_createBlock</span><span class="token punctuation">(</span>_component_ChildComponent<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">header</span><span class="token operator">:</span> <span class="token function">_withCtx</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
      <span class="token function">_createTextVNode</span><span class="token punctuation">(</span><span class="token string">&quot;header&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token function">_withCtx</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
      <span class="token function">_createTextVNode</span><span class="token punctuation">(</span><span class="token string">&quot;content&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">footer</span><span class="token operator">:</span> <span class="token function">_withCtx</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
      <span class="token function">_createTextVNode</span><span class="token punctuation">(</span><span class="token string">&quot;footer&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">_</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token comment">/* STABLE */</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，<code>createBlock</code> 的第三个参数 <code>children</code> 相对于普通父子节点来说，由一个数组变成一个对象的形式，这个对象包含了以插槽内容名称命名的函数，以及一个 <code>_</code> 属性，这个属性的含义是 <code>slotFlag</code>。</p><p>下面我们再详细看一下 <code>createBlock</code> 这个函数的实现，前面的章节中，我们提到 <code>createBlock</code> 函数本质就是调用了 <code>createVNode</code> 函数创建 <code>vnode</code> 节点，不过会增加一些和编译时优化相关的属性 <code>dynamicChildren</code> 罢了。那么核心看一下在创建 <code>vnode</code> 的时候产生的一些变化：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">_createVNode</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> props<span class="token punctuation">,</span> children<span class="token punctuation">,</span> patchFlag<span class="token punctuation">,</span> dynamicProps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> isBlockNode <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isVNode</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// clone vnode</span>
    <span class="token keyword">const</span> cloned <span class="token operator">=</span> <span class="token function">cloneVNode</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> props<span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token comment">/* mergeRef: true */</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 标准化子节点</span>
      <span class="token function">normalizeChildren</span><span class="token punctuation">(</span>cloned<span class="token punctuation">,</span> children<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> cloned
  <span class="token punctuation">}</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>createVNode</code> 函数在执行的时候，针对 <code>vnode</code> 节点如果存在子节点的话，会调用 <code>normalizeChildren</code> 函数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">normalizeChildren</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> children</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> type <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> shapeFlag <span class="token punctuation">}</span> <span class="token operator">=</span> vnode
  <span class="token keyword">if</span> <span class="token punctuation">(</span>children <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    children <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isArray</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//  子节点是数组的情况</span>
    type <span class="token operator">=</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">ARRAY_CHILDREN</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> children <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 针对 children 是对象的处理内容</span>
    <span class="token comment">// 对于 ELEMENT 或者 TELEPORT slot 的处理</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>shapeFlag <span class="token operator">&amp;</span> <span class="token punctuation">(</span>ShapeFlags<span class="token punctuation">.</span><span class="token constant">ELEMENT</span> <span class="token operator">|</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">TELEPORT</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> slot <span class="token operator">=</span> <span class="token punctuation">(</span>children <span class="token keyword">as</span> any<span class="token punctuation">)</span><span class="token punctuation">.</span>default
      <span class="token keyword">if</span> <span class="token punctuation">(</span>slot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        slot<span class="token punctuation">.</span>_c <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>slot<span class="token punctuation">.</span>_d <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
        <span class="token function">normalizeChildren</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> <span class="token function">slot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        slot<span class="token punctuation">.</span>_c <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>slot<span class="token punctuation">.</span>_d <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 标记子节点类型为 SLOTS_CHILDREN</span>
      type <span class="token operator">=</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">SLOTS_CHILDREN</span>
      <span class="token keyword">const</span> slotFlag <span class="token operator">=</span> <span class="token punctuation">(</span>children <span class="token keyword">as</span> RawSlots<span class="token punctuation">)</span><span class="token punctuation">.</span>_
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>slotFlag <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>InternalObjectKey <span class="token keyword">in</span> children<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果 slots 还没有被标准化，添加上下文实例</span>
        <span class="token punctuation">;</span><span class="token punctuation">(</span>children <span class="token keyword">as</span> RawSlots<span class="token punctuation">)</span><span class="token punctuation">.</span>_ctx <span class="token operator">=</span> currentRenderingInstance
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>slotFlag <span class="token operator">===</span> SlotFlags<span class="token punctuation">.</span><span class="token constant">FORWARDED</span> <span class="token operator">&amp;&amp;</span> currentRenderingInstance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 处理 slotFlag 为 FORWARDED 的情况</span>
        <span class="token comment">// 处理 STABLE slot</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>
          <span class="token punctuation">(</span>currentRenderingInstance<span class="token punctuation">.</span>slots <span class="token keyword">as</span> RawSlots<span class="token punctuation">)</span><span class="token punctuation">.</span>_ <span class="token operator">===</span> SlotFlags<span class="token punctuation">.</span><span class="token constant">STABLE</span>
        <span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token punctuation">;</span><span class="token punctuation">(</span>children <span class="token keyword">as</span> RawSlots<span class="token punctuation">)</span><span class="token punctuation">.</span>_ <span class="token operator">=</span> SlotFlags<span class="token punctuation">.</span><span class="token constant">STABLE</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token comment">// 添加 DYNAMIC slot</span>
          <span class="token punctuation">;</span><span class="token punctuation">(</span>children <span class="token keyword">as</span> RawSlots<span class="token punctuation">)</span><span class="token punctuation">.</span>_ <span class="token operator">=</span> SlotFlags<span class="token punctuation">.</span><span class="token constant">DYNAMIC</span>
          vnode<span class="token punctuation">.</span>patchFlag <span class="token operator">|=</span> PatchFlags<span class="token punctuation">.</span><span class="token constant">DYNAMIC_SLOTS</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// ...</span>
  vnode<span class="token punctuation">.</span>children <span class="token operator">=</span> children
  vnode<span class="token punctuation">.</span>shapeFlag <span class="token operator">|=</span> type
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们只需要关注，如果传入的子节点类型是个 <code>Object</code> 的情况下，会为 <code>vnode.shapeFlag</code> 属性添加 <code>SLOTS_CHILDREN</code> 类型。那这个 <code>shapeFlag</code> 在哪里会被用到了？再回到我们之前的组件挂载过程中的 <code>setupComponent</code> 函数中：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">setupComponent</span><span class="token punctuation">(</span><span class="token parameter">instance</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 1. 处理 props</span>
  <span class="token comment">// 取出存在 vnode 里面的 props</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> props<span class="token punctuation">,</span> children <span class="token punctuation">}</span> <span class="token operator">=</span> instance<span class="token punctuation">.</span>vnode<span class="token punctuation">;</span>
  <span class="token function">initProps</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 2. 处理 slots</span>
  <span class="token function">initSlots</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> children<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 3. 调用 setup 并处理 setupResult</span>
  <span class="token function">setupStatefulComponent</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们重点看一下是如何处理 <code>slots</code> 的：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">initSlots</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">instance<span class="token punctuation">,</span> children</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// shapeFlag 有 SLOTS_CHILDREN 类型</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>vnode<span class="token punctuation">.</span>shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">SLOTS_CHILDREN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 对于我们的示例中，slotFlag 类型是 STABLE</span>
    <span class="token keyword">const</span> type <span class="token operator">=</span> <span class="token punctuation">(</span>children <span class="token keyword">as</span> RawSlots<span class="token punctuation">)</span><span class="token punctuation">.</span>_
    <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 用户可以使用 this.$slots 来获取 slots 对象的浅拷贝内部实例上的 slots</span>
      <span class="token comment">// 所以这里应该避免 proxy 对象污染</span>
      <span class="token comment">// 为 instance slots 属性赋值 children</span>
      instance<span class="token punctuation">.</span>slots <span class="token operator">=</span> <span class="token function">toRaw</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span>
      <span class="token comment">// 标记不可枚举</span>
      <span class="token function">def</span><span class="token punctuation">(</span>children<span class="token punctuation">,</span> <span class="token string">&#39;_&#39;</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    instance<span class="token punctuation">.</span>slots <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>
  <span class="token function">def</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>slots<span class="token punctuation">,</span> InternalObjectKey<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>针对我们上面的示例，首先 <code>slots</code> 渲染的 <code>slotFlag</code> 类型为 <code>STABLE</code>，所以这里的 <code>initSlot</code> 所做的操作就是为 <code>instance.slots</code> 赋值为 <code>toRaw(children)</code>。</p><p>到这里，我们可以认为，对于一个组件中如果包含 <code>slot</code> 内容，那么这个组件实例在被渲染的时候，这些内容将会被添加到当前组件实例的 <code>instance.slots</code> 属性上：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ChildComponent 组件实例</span>
<span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;ChildComponent&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">render</span><span class="token operator">:</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">_ctx<span class="token punctuation">,</span> _cache</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">slots</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">header</span><span class="token operator">:</span> <span class="token function">_withCtx</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
      <span class="token function">_createTextVNode</span><span class="token punctuation">(</span><span class="token string">&quot;header&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token function">_withCtx</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
      <span class="token function">_createTextVNode</span><span class="token punctuation">(</span><span class="token string">&quot;content&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">footer</span><span class="token operator">:</span> <span class="token function">_withCtx</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
      <span class="token function">_createTextVNode</span><span class="token punctuation">(</span><span class="token string">&quot;footer&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">vnode</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意，<code>slots</code> 是被挂载到了子组件实例 <code>ChildComponent</code> 中，而非父组件中。</p></blockquote><h2 id="插槽出口渲染" tabindex="-1"><a class="header-anchor" href="#插槽出口渲染" aria-hidden="true">#</a> 插槽出口渲染</h2><p>插槽除了有内容外，还需要制定对象的出口，我们再一起看一下上述示例中对应的出口内容：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>header<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>content<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>footer<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的模版会被编译器编译成如下渲染函数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> renderSlot <span class="token keyword">as</span> _renderSlot<span class="token punctuation">,</span> openBlock <span class="token keyword">as</span> _openBlock<span class="token punctuation">,</span> createElementBlock <span class="token keyword">as</span> _createElementBlock <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">_ctx<span class="token punctuation">,</span> _cache<span class="token punctuation">,</span> $props<span class="token punctuation">,</span> $setup<span class="token punctuation">,</span> $data<span class="token punctuation">,</span> $options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_createElementBlock</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
    <span class="token function">_renderSlot</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>$slots<span class="token punctuation">,</span> <span class="token string">&quot;header&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">_renderSlot</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>$slots<span class="token punctuation">,</span> <span class="token string">&quot;content&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">_renderSlot</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>$slots<span class="token punctuation">,</span> <span class="token string">&quot;footer&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，带有 <code>&lt;slot&gt;</code> 内容的元素，会被 <code>renderSlot</code> 函数进行包裹，一起来看一下这个函数的实现：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">renderSlot</span><span class="token punctuation">(</span><span class="token parameter">slots<span class="token punctuation">,</span> name<span class="token punctuation">,</span> props<span class="token punctuation">,</span> fallback<span class="token punctuation">,</span> noSlotted</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token comment">// 根据 name 获取 slot 内容</span>
  <span class="token keyword">let</span> slot <span class="token operator">=</span> slots<span class="token punctuation">[</span>name<span class="token punctuation">]</span>
  <span class="token function">openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> validSlotContent <span class="token operator">=</span> slot <span class="token operator">&amp;&amp;</span> <span class="token function">ensureValidVNode</span><span class="token punctuation">(</span><span class="token function">slot</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token comment">// 创建 slot vnode</span>
  <span class="token keyword">const</span> rendered <span class="token operator">=</span> <span class="token function">createBlock</span><span class="token punctuation">(</span>
    Fragment<span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">key</span><span class="token operator">:</span>
        props<span class="token punctuation">.</span>key <span class="token operator">||</span>
        <span class="token punctuation">(</span>validSlotContent <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>validSlotContent <span class="token keyword">as</span> any<span class="token punctuation">)</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">||</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    validSlotContent <span class="token operator">||</span> <span class="token punctuation">(</span>fallback <span class="token operator">?</span> <span class="token function">fallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    validSlotContent <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>slots <span class="token keyword">as</span> RawSlots<span class="token punctuation">)</span><span class="token punctuation">.</span>_ <span class="token operator">===</span> SlotFlags<span class="token punctuation">.</span><span class="token constant">STABLE</span>
      <span class="token operator">?</span> PatchFlags<span class="token punctuation">.</span><span class="token constant">STABLE_FRAGMENT</span>
      <span class="token operator">:</span> PatchFlags<span class="token punctuation">.</span><span class="token constant">BAIL</span>
  <span class="token punctuation">)</span>
  <span class="token comment">// ...</span>
  <span class="token comment">// 返回 slot vnode</span>
  <span class="token keyword">return</span> rendered
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，<code>renderSlot</code> 函数核心功能就是根据 <code>slot</code> 的 <code>name</code> 属性去子组件实例上的 <code>slots</code> 中查找对应的执行函数，然后创建一个以 <code>slot</code> 为子节点的 <code>Fragment</code> 类型的 <code>vnode</code> 节点。</p><p>上述 <code>slot</code> 容器中的内容是通过 <code>withCtx(...)</code> 函数进行封装执行的，那么这个函数的作用是什么呢？先来看一下这个函数的实现：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">withCtx</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> ctx<span class="token operator">=</span> currentRenderingInstance<span class="token punctuation">,</span> isNonScopedSlot</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token keyword">const</span> <span class="token literal-property property">renderFnWithContext</span><span class="token operator">:</span> <span class="token function-variable function">ContextualRenderFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>renderFnWithContext<span class="token punctuation">.</span>_d<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">setBlockTracking</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 暂存子组件实例</span>
    <span class="token keyword">const</span> prevInstance <span class="token operator">=</span> <span class="token function">setCurrentRenderingInstance</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
    <span class="token keyword">let</span> res
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token comment">// 运行创建 vnode 的函数</span>
      res <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
      <span class="token comment">// 重置回子组件实例</span>
      <span class="token function">setCurrentRenderingInstance</span><span class="token punctuation">(</span>prevInstance<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res
  <span class="token punctuation">}</span>
  <span class="token comment">// ...</span>
  <span class="token keyword">return</span> renderFnWithContext
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>withCtx</code> 函数巧妙的利用了闭包的特性，在运行父组件的时候，通过 <code>withCtx</code> 保存了父组件的实例到 <code>currentRenderingInstance</code> 变量上，然后在子组件执行 <code>renderFnWithContext</code> 函数时，先恢复父组件的实例上下文，再执行生成 <code>vnode</code> 函数，执行完成后，再重置回子组件的实例。这样做的好处是在做 <code>&lt;slot&gt;</code> 渲染内容的时候，让 <code>slot</code> 的内容可以访问到父组件的实例，因为 <code>slot</code> 内容本身也是在父组件中定义的，只是被渲染到了指定的子组件中而已。</p><h2 id="dynamic-slots" tabindex="-1"><a class="header-anchor" href="#dynamic-slots" aria-hidden="true">#</a> Dynamic Slots</h2><p>什么是 <code>dynamic slots</code> ? 我们之前还有一种动态类型叫做 <code>dynamic children</code> 在 <code>DOM</code> 更新时做靶向更新。而 <code>dynamic slots</code> 则是用于判断 <code>slot</code> 内容是否需要更新。</p><p>那么 <code>Vue 3</code> 会为哪些组价添加 <code>dynamic slots</code> 属性呢？</p><p><code>Vue 3</code> 中，对于动态的插槽名、条件判断、循环等场景的 <code>&lt;slot&gt;</code>，则会被标记为 <code>dynamic slots</code>，拿动态的插槽名举例：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child-component</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#[dynamicSlotName]</span><span class="token punctuation">&gt;</span></span>header<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child-component</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>则会被渲染成：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createTextVNode <span class="token keyword">as</span> _createTextVNode<span class="token punctuation">,</span> resolveComponent <span class="token keyword">as</span> _resolveComponent<span class="token punctuation">,</span> withCtx <span class="token keyword">as</span> _withCtx<span class="token punctuation">,</span> openBlock <span class="token keyword">as</span> _openBlock<span class="token punctuation">,</span> createBlock <span class="token keyword">as</span> _createBlock <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">_ctx<span class="token punctuation">,</span> _cache<span class="token punctuation">,</span> $props<span class="token punctuation">,</span> $setup<span class="token punctuation">,</span> $data<span class="token punctuation">,</span> $options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> _component_child_component <span class="token operator">=</span> <span class="token function">_resolveComponent</span><span class="token punctuation">(</span><span class="token string">&quot;child-component&quot;</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_createBlock</span><span class="token punctuation">(</span>_component_child_component<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>_ctx<span class="token punctuation">.</span>dynamicSlotName<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token function">_withCtx</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
      <span class="token function">_createTextVNode</span><span class="token punctuation">(</span><span class="token string">&quot;header&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">_</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token comment">/* DYNAMIC */</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1024</span> <span class="token comment">/* DYNAMIC_SLOTS */</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，对于动态的插槽名，组件渲染函数会为 <code>patchFlag</code> 标记为 <code>DYNAMIC_SLOTS</code>。在执行组件更新时，则会根据这个标记来判断当前组件是否需要更新：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">updateComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> vnode</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldUpdateComponent</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> optimized<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token comment">//  执行更新逻辑</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">shouldUpdateComponent</span><span class="token punctuation">(</span><span class="token parameter">prevVNode<span class="token punctuation">,</span> nextVNode<span class="token punctuation">,</span> optimized</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">props</span><span class="token operator">:</span> nextProps<span class="token punctuation">,</span> <span class="token literal-property property">children</span><span class="token operator">:</span> nextChildren<span class="token punctuation">,</span> patchFlag <span class="token punctuation">}</span> <span class="token operator">=</span> nextVNode
  <span class="token comment">// patchFlag 是 DYNAMIC_SLOTS 的情况，shouldUpdateComponent 返回 true</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>optimized <span class="token operator">&amp;&amp;</span> patchFlag <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>patchFlag <span class="token operator">&amp;</span> PatchFlags<span class="token punctuation">.</span><span class="token constant">DYNAMIC_SLOTS</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>这里我们介绍了关于 <code>&lt;slot&gt;</code> 内置元素的实现原理，本质上就是父组件在渲染的时候，如果遇到了 <code>&lt;slot&gt;</code> 内容，则会暂时将其缓存到组件实例上，然后在组件实例化的过程中，从父组件中取出对应的 <code>slots</code> 按照名称进行渲染到指定位置。</p><p>同时配合 <code>PatchFlags</code> 属性，可以做到只有在 <code>DYNAMIC_SLOTS</code> 的情况下，才去更新含有 <code>slot</code> 的组件，减少了不必要的渲染性能负担。</p>`,49),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","21 teshuyuansu_zhiling：slot chacaoyuansushiruheshixiande？.html.vue"]]);export{k as default};
