import{_ as e,r as o,o as c,c as l,b as n,d as s,e as t,a as p}from"./app-48690364.js";const i={},u=p(`<h1 id="json、ajax、跨域请求、xhr-对象、axios-与-fetch" tabindex="-1"><a class="header-anchor" href="#json、ajax、跨域请求、xhr-对象、axios-与-fetch" aria-hidden="true">#</a> JSON、Ajax、跨域请求、XHR 对象、Axios 与 Fetch</h1><p>从本节内容我们开始学习未来实际开发中最最常用的 Ajax（从入门到自定义封装，Promise 改造封装 Ajax，Ajax 在实际项目中应用实践）、JSON、跨域请求、XHR 对象、Axios 与 Fetch 完整系统内容。</p><p><strong>JSON</strong></p><ul><li>认识 JSON</li><li>为什么需要 JSON</li><li>JSON 的 3 种形式</li><li>JSON 的常用方法</li></ul><p><strong>原生 Ajax 核心基础</strong></p><ul><li>认识 Ajax</li><li>Ajax 的基本用法</li><li>GET 请求</li><li>POST 请求</li><li>POST 请求提交 Form 表单数据</li></ul><p><strong>跨域请求</strong></p><ul><li>认识 跨域</li><li>CORS 跨域资源共享</li><li>JSONP</li><li>代理跨域</li></ul><p><strong>XHR 核心对象</strong></p><ul><li>XHR 的属性</li><li>XHR 的方法</li><li>XHR 的事件</li></ul><p><strong>Ajax 的进阶（自定义封装 Ajax）</strong></p><ul><li>自定义封装 Ajax</li><li>使用 Promise 改造封装好的 Ajax</li><li>多个 Ajax 请求并发执行</li></ul><p><strong>Ajax 在实际项目开发中的应用与实践</strong></p><ul><li>搜索提示（自动补全）</li><li>动态加载二级菜单</li><li>GET 请求实现搜索课程</li></ul><p><strong>Ajax 扩展</strong></p><ul><li>axios</li><li>Fetch</li></ul><h2 id="一、json-数据" tabindex="-1"><a class="header-anchor" href="#一、json-数据" aria-hidden="true">#</a> 一、JSON 数据</h2><p>深入浅出什么是 JSON，为什么需要 JSON，JSON 的 3 种形式，JSON 的常用方法 等</p><h3 id="_1、json-是什么" tabindex="-1"><a class="header-anchor" href="#_1、json-是什么" aria-hidden="true">#</a> 1、JSON 是什么 ？</h3><p>JSON 全称是 JavaScript Object Notation ，即：JavaScript 对象表示法</p><ul><li>JSON 是 Ajax 发送和接收数据的一种格式</li><li><strong>JSON</strong> 是一种轻量级的数据交换格式，常用来做前后端数据交互，其为<strong>字符串类型</strong>。</li><li><strong>JSON</strong> 是一种语法，用来<strong>序列化</strong>对象、数组、数值、字符串、布尔值和 <code>null</code>，但不能是<code>undefined</code>。</li></ul><p>以下我们之前了解过的，都属于一种数据的格式</p><ul><li>XML</li><li><code>username=icoding&amp;sex=male&amp;age=19</code></li><li>JSON</li></ul><h3 id="_2、序列化-与-反序列化" tabindex="-1"><a class="header-anchor" href="#_2、序列化-与-反序列化" aria-hidden="true">#</a> 2、序列化 与 反序列化</h3><ul><li><strong>序列化：</strong> 将对象转、数组、字符串、布尔值、null 转换成 JSON 字符串</li><li><strong>反序列化（解析）：</strong> 将 JSON 字符串转换为对象、数组、字符串、布尔值、null</li></ul><p><strong>为什么要序列化 ？</strong></p><ul><li>其实序列化最终的目的是为了对象可以<strong>跨平台存储和进行网络传输</strong>。而我们进行跨平台存储和网络传输的方式就是 IO，而我们的 IO 支持的数据格式就是字节数组。</li><li>因为我们单方面的只把对象转成字节数组还不行，因为没有规则的字节数组我们是没办法把对象的本来面目还原回来的，所以我们必须在把对象转成字节数组的时候就制定一种规则 <strong>（序列化）</strong>，那么我们从 IO 流里面读出数据的时候再以这种规则把对象还原回来 <strong>（反序列化）。</strong></li></ul><p>如果我们要把一栋房子从一个地方运输到另一个地方去，<strong>序列化</strong> 就是我把房子拆成一个个的砖块放到车子里，然后留下一张房子原来结构的图纸，<strong>反序列化</strong> 就是我们把房子运输到了目的地以后，根据图纸把一块块砖头还原成房子原来面目的过程</p><blockquote><p>你可以理解为 JSON 是一种特殊的字符串。其特殊性在于，字符串中的内容为对象或数组，但其内的对象与 JS 的对象有些不一样。比如：JSON 字符串中的对象，他的属性名必需用双号号包裹，而 JS 对象中的属性名不用。</p></blockquote><p>以下是常见的 JSON 格式数据（<code>data.json</code>文件内容)</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;status&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;230000201401123540&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;username&quot;</span><span class="token operator">:</span> <span class="token string">&quot;艾编程&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;password&quot;</span><span class="token operator">:</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;email&quot;</span><span class="token operator">:</span> <span class="token string">&quot;g.tkybf@lfsqxivjr.de&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;phone&quot;</span><span class="token operator">:</span> <span class="token number">123456</span><span class="token punctuation">,</span>
    <span class="token property">&quot;role&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">&quot;createTime&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2030-07-31 17:17:38&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;updateTime&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2035-06-30 16:12:53&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;code&quot;</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
  <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;word&quot;</span><span class="token operator">:</span> <span class="token string">&quot;javascript&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;word&quot;</span><span class="token operator">:</span> <span class="token string">&quot;java&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;word&quot;</span><span class="token operator">:</span> <span class="token string">&quot;json&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;word&quot;</span><span class="token operator">:</span> <span class="token string">&quot;python&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;word&quot;</span><span class="token operator">:</span> <span class="token string">&quot;c/c++&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;word&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node.js&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;word&quot;</span><span class="token operator">:</span> <span class="token string">&quot;php&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、为什么需要-json" tabindex="-1"><a class="header-anchor" href="#_3、为什么需要-json" aria-hidden="true">#</a> 3、为什么需要 JSON</h3><p>前后端通信过程中需要交换数据，如果将前端 JS 的数据（对象、数组 等）直接传给后端，后端是无法解析的；后端直接传给前端的数据也是无法解析的，因为他们互相都不认识，因此就需要一种能够进行前后端通信的统一的数据格式作为中转。</p><p>而 JSON 有 3 种形式，每种形式的写法都和 JS 中的数据类型很像，可以很轻松的和 JS 中的数据类型互相转换，同时后端也认识这种 JSON 类型的数据，也有对应解析 JSON 的方式，所以在前后端通信中，用 JSON 来做为传输的数据格式是非常棒的。</p><ul><li>前端将 JS 的数据（对象，数组等）转换成 JSON 的格式发送到后端，后端拿到对应的数据后，用对应的方法来解析 JSON，然后做相关处理。</li></ul><blockquote><p>JS（前端）-&gt; JSON -&gt; Java/Python/GO/PHP/Node.js（后端）</p></blockquote><ul><li>后端向前端发送数据时，发送的也是 JSON 格式的数据，前端拿到对应的数据后，也有对应的方法来解析 JSON，然后做相关处理。</li></ul><blockquote><p>Java/Python/GO/PHP/Node.js（后端）-&gt; JSON -&gt; JS（前端）</p></blockquote><h3 id="_4、json-的-3-种形式" tabindex="-1"><a class="header-anchor" href="#_4、json-的-3-种形式" aria-hidden="true">#</a> 4、JSON 的 3 种形式</h3><p>JSON 有 3 种形式：简单值形式、对象形式、数组形式</p><ul><li>JSON 数据文件的后缀名是：<code>.json</code></li><li>JSON 中是不能写注释的</li></ul><h3 id="_4-1、json-简单值形式" tabindex="-1"><a class="header-anchor" href="#_4-1、json-简单值形式" aria-hidden="true">#</a> 4.1、JSON 简单值形式</h3><ul><li>JSON 的简单值形式就对应着 JS 中的基础数据类型</li><li>数字、字符串、布尔值、null</li></ul><p><strong>注意事项</strong></p><ul><li>JSON 中没有<code>undefined</code> 值</li><li>JSON 中的字符串必须使用双引号，单引号会报错</li></ul><p><strong>应用实践</strong></p><p>新建 后缀名为<code>.json</code> 文件，文件中写入 JSON 简单值形式：数字、字符串、布尔值、null，进行体验和测试</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token number">124</span>;
<span class="token string">&quot;JSON字符串&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2、json-对象形式" tabindex="-1"><a class="header-anchor" href="#_4-2、json-对象形式" aria-hidden="true">#</a> 4.2、JSON 对象形式</h3><p>JSON 的对象形式就是对应着 JS 中的对象，但与 JS 中的对象存在以下不同点</p><ul><li>JSON 中对象的属性名必须用双引号，属性值如果是字符串也必须用双引号</li><li>JSON 对象的属性值不能是<code>undefined</code></li></ul><p>新建<code>data.json</code>文件，内容如下</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;username&quot;</span><span class="token operator">:</span> <span class="token string">&quot;艾编程&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;sex&quot;</span><span class="token operator">:</span> <span class="token string">&quot;male&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
  <span class="token property">&quot;hobby&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;篮球&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;乒乓球&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;足球&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;书法&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;family&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;father&quot;</span><span class="token operator">:</span> <span class="token string">&quot;icoding&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;mother&quot;</span><span class="token operator">:</span> <span class="token string">&quot;美美&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下 JS 变量中保存的字符串符合 JSON 格式的有</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> strJson1 <span class="token operator">=</span> <span class="token string">&#39;{&quot;name&quot;:1,&quot;age&quot;:32}&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 正确的JSON字符串</span>
<span class="token keyword">let</span> strJson2 <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">{&quot;name&quot;:1,&quot;age&quot;:32}</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span> <span class="token comment">// 正确的JSON字符串</span>
<span class="token keyword">let</span> strJson3 <span class="token operator">=</span> <span class="token string">&quot;{&#39;name&#39;:1,&#39;age&#39;:32}&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 错误的JSON字符串</span>
<span class="token keyword">let</span> strJson4 <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">{&#39;name&#39;:1,&#39;age&#39;:32}</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span> <span class="token comment">// 错误的JSON字符串</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3、json-数组形式" tabindex="-1"><a class="header-anchor" href="#_4-3、json-数组形式" aria-hidden="true">#</a> 4.3、JSON 数组形式</h3><p>JSON 的数组形式就对应着 JS 中的数组，但也有如下区别：</p><ul><li>数组中的字符串必须用双引号</li><li>如果数组中的成员有对象类型，则需要满足 JSON 对象的格式要求。</li><li>不支持 <code>undefined</code>类型</li></ul><p>新建<code>data.json</code>文件，内容如下，表示简单的 JSON 数组</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;icoding&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>新建<code>user.json</code>文件，内容如下，表示相对复杂些的 JSON 数组</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&quot;艾编程&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">phone</span><span class="token operator">:</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token string">&quot;123@gmail.com&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&quot;小可爱&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">phone</span><span class="token operator">:</span> <span class="token string">&quot;18912368918&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token string">&quot;666@gmail.com&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
    <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&quot;星辰大海&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">phone</span><span class="token operator">:</span> <span class="token string">&quot;18966668888&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token string">&quot;888@gmail.com&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下 JS 变量中保存的字符串符合 JSON 格式的有</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arrStr1 <span class="token operator">=</span> <span class="token string">&quot;[1,2,3,4]&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 正确</span>
<span class="token keyword">let</span> arrStr2 <span class="token operator">=</span> <span class="token string">&#39;[{&quot;name&quot;:&quot;清心&quot;},3,4,5]&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 正确</span>
<span class="token keyword">let</span> arrStr3 <span class="token operator">=</span> <span class="token string">&#39;  [9.1,&quot;A&quot;,[1,3],undefined]&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 错误</span>

<span class="token keyword">let</span> arrStr4 <span class="token operator">=</span> <span class="token string">&quot;[{&#39;name&#39;:清心&#39;},3,4,5]&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 错误</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4、总结-json-数据的注意事项" tabindex="-1"><a class="header-anchor" href="#_4-4、总结-json-数据的注意事项" aria-hidden="true">#</a> 4.4、总结：JSON 数据的注意事项</h3><p>JSON 数据一般是保存在<code>.json</code>的文件中，当然其写法一定要是合法的 JSON 字符串，否则解析会报错。合法即以下规则：</p><ul><li>JSON 中没有 undefined 值</li><li>JSON 中的字符串必须使用双引号</li><li>JSON 中对象的属性名必须用双引号，属性值如果是字符串也必须用双引号</li><li>JSON 中是不能注释的</li></ul><h3 id="_5、json-的常用方法" tabindex="-1"><a class="header-anchor" href="#_5、json-的常用方法" aria-hidden="true">#</a> 5、JSON 的常用方法</h3><p><strong><code>JSON</code></strong> 对象包含以下两个方法</p><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>JSON.stringify()</code></td><td style="text-align:left;">可以将 JS 的基本数据类型、对象或者数组转换成 JSON 格式的字符串</td></tr><tr><td style="text-align:left;"><code>JSON.parse()</code></td><td style="text-align:left;">可以将 JSON 格式的字符串解析成 JS 中的对应值</td></tr></tbody></table><p>注：</p><p>除了上面两个方法，JSON 这个对象本身并没有其他作用，也不能被调用或者作为构造函数调用。</p><h3 id="_5-1、对象与-json-字符串之间相互转换" tabindex="-1"><a class="header-anchor" href="#_5-1、对象与-json-字符串之间相互转换" aria-hidden="true">#</a> 5.1、对象与 JSON 字符串之间相互转换</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&quot;清心&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">33</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 将对象转换为字符串 （对象序列化）</span>
<span class="token keyword">const</span> strJson <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strJson<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> strJson<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 将JSON字符串转换为对象，字符串解析</span>
<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>strJson<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/image-20230302213831362.402cacb7.png" alt="image-20230302213831362"></p><h3 id="_5-2、数组与-json-字符串之间相互转换" tabindex="-1"><a class="header-anchor" href="#_5-2、数组与-json-字符串之间相互转换" aria-hidden="true">#</a> 5.2、数组与 JSON 字符串之间相互转换</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arrStr <span class="token operator">=</span> <span class="token string">&#39;[{&quot;name&quot;:&quot;清心&quot;},3,4,5]&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 正确</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>arrStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 将数组转成JSON字符串</span>
<span class="token keyword">const</span> jsonStr <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/image-20230119190522909.bd3e49f5.png" alt="image-20230119190522909"></p><h2 id="二、原生-ajax" tabindex="-1"><a class="header-anchor" href="#二、原生-ajax" aria-hidden="true">#</a> 二、原生 Ajax</h2><p>深入浅出原生 Ajax ，基本用法，GET 请求、POST 请求 等。</p><h3 id="_1、ajax-是什么" tabindex="-1"><a class="header-anchor" href="#_1、ajax-是什么" aria-hidden="true">#</a> 1、Ajax 是什么</h3><p>Ajax 是 Asynchronous Javascript And XML（异步 JavaScript 和 XML）的简写</p>`,84),r=n("li",null,"Ajax 中的异步：可以异步地向服务器发送请求，在等待响应的过程中，不会阻塞当前页面，浏览器可以做自己的事情。直到成功获取响应后，浏览器才开始处理响应数据。",-1),d=n("li",null,"XML（可扩展标记语言）是前后端数据通信时传输数据的一种格式（早年用的多，现在都用 JSON 了）",-1),k={href:"https://www.arryblog.com/sitemap.xml",target:"_blank",rel:"noopener noreferrer"},v=n("li",null,"XML 现在已经很少使用了，当下比较常用的是 JSON",-1),m=p(`<p><code>Ajax</code> 其实就是浏览器与服务器之间的一种异步通信方式。</p><h3 id="_2、ajax-主要作用" tabindex="-1"><a class="header-anchor" href="#_2、ajax-主要作用" aria-hidden="true">#</a> 2、Ajax 主要作用</h3><p><code>Ajax</code> 最吸引人的就是它的“异步”特性，也就是说它可以在不重新刷新页面的情况下与服务器通信，交换数据，或更新页面。</p><blockquote><p>你可以使用 AJAX 最主要的两个特性做下列事：</p></blockquote><ul><li>在不重新加载页面的情况下发送请求给服务器。</li><li>接受并使用从服务器发来的数据。</li></ul><p><strong>应用场景如下</strong></p><p>以下只是列举出一些简单的常见应用，让大家对 Ajax 有个初步的了解，Ajax 能做的事情非常多，后面我们在项目中主要就是使手 Ajax 来实现前后端通信。</p><p><strong>注册用户名或手机号检测，一般都会使用 Ajax 异步交互</strong></p><p><img src="https://www.arryblog.com/assets/img/image-20221206195427862.79e13eb4.png" alt="image-20221206195427862"></p><p>注：</p><p>以上用户名检测会提示 “名称已被占用”</p><p>本质的过程是 使用 Ajax 向后端发送请求，将用户名一起发送到后端，后端获取到数据后会和数据库中的数据进行比对，查看是否存在该用户名，如果存在就会响应给前端已存在，前端就会给出对应的用户提示信息。如果响应给前端为不存在，就继续注册就好。</p><p><strong>搜索提示，自动补全</strong></p><p><img src="https://www.arryblog.com/assets/img/image-20221206201711204.178446bf.png" alt="image-20221206201711204"></p><blockquote><p>以上同样使用了 Ajax 向后端发送请求，后端会进行一些列的操作，最终将响应回来的数据给到前端，最后展示出来。</p></blockquote><h3 id="_3、搭建-ajax-开发环境" tabindex="-1"><a class="header-anchor" href="#_3、搭建-ajax-开发环境" aria-hidden="true">#</a> 3、搭建 Ajax 开发环境</h3><p>Ajax 需要服务器环境，在非服务器环境下（如本地文件直接打开的形式），浏览器无法正常使用 Ajax</p><p><img src="https://www.arryblog.com/assets/img/image-20221206222202025.c2a9b25f.png" alt="image-20221206222202025"></p><blockquote><p>搭建服务访问就意味着浏览器地址栏访问一定是以 http 或 https 开头的，才可以正常使用 Ajax</p></blockquote><p><strong>使用 VSCode 搭建 Ajax 开发环境</strong></p><p>使用 VSCode 开发，建议使用 <code>Live Server</code> 插件，它会给我们提供一个本地的服务器环境。使用注意事项如下：</p><ul><li>需在当前文件的目录中打开 VSCode ， <code>Live Server</code> 插件才能生效。</li><li>在 VSCode 中，打开需要运行的文件，右键选择 <code>&quot;Open with Live Server&quot;</code> 即可启动本地服务器来运行对应的文件</li><li>也可以使用快捷键 <code>Ctrl + shift + p</code> 在弹窗的命令行窗口中输入<code>Live Server</code> 会自动补全 选择 <code>Open with Live Server</code> 即可，下次再企业其他文件时，会默认出现在第一个。直接使用快捷键 <code>Ctrl + shift + p</code> 再回车 即可运行。</li></ul><p><img src="https://www.arryblog.com/assets/img/image-20221206223653494.6fa5720b.png" alt="image-20221206223653494"></p><p>注：</p><p>当然，VSCode 中的 <code>Live Server</code> 也不是强制一定要用这个</p><ul><li>Windows 可用 phpStudy</li><li>Mac 可用 MAMP</li><li>Windows 和 Mac 上也可直接用 Nginx</li></ul><blockquote><p>为了开发方便，我们选择使用 <code>Live Server</code> 足以，其他知道即可。</p></blockquote><h3 id="_3、ajax-的基本用法" tabindex="-1"><a class="header-anchor" href="#_3、ajax-的基本用法" aria-hidden="true">#</a> 3、Ajax 的基本用法</h3><p>深入浅出 XMLHttpRequest、Ajax 的使用步骤、如何使用 Ajax 完成前后端通信</p><h3 id="_3-1、xmlhttprequest" tabindex="-1"><a class="header-anchor" href="#_3-1、xmlhttprequest" aria-hidden="true">#</a> 3.1、XMLHttpRequest</h3><p>我们要使用 Ajax ，但浏览器是没有直接提供 类似 Ajax 这样对象的。因此</p><ul><li>Ajax 想要实现浏览器与服务器之间的异步通信，就需要依靠 XMLHttpRequest ，它是一个构造函数。</li><li>因为早期前后端通信的数据格式是 XML，所以 XMLHttpRequest 构造函数的命名中带有 XML，但本质上 XMLHttpRequest 在实现前后端通信时，并没有和具体的某种数据格式绑定。</li></ul><blockquote><p>不过我们现在前后端通信，主要使用的还是 JSON 格式的数据</p></blockquote><h3 id="_3-2、ajax-的使用步骤" tabindex="-1"><a class="header-anchor" href="#_3-2、ajax-的使用步骤" aria-hidden="true">#</a> 3.2、Ajax 的使用步骤</h3><ul><li>第一步：创建 xhr 对象</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>第二步：调用用<code>open()</code>方法，准备发送</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> boolean<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 调用 open方法并是真正的发送请求，只是做好发送请求的准备工作</span>
<span class="token comment">/*
 	open方法的三个参数

 	method：表示HTTP请求的方法，如：GET、POST、PUT、DELETE
 	url: 请求的url地址（本地或远程服务器都可以）
 	boolean: 是一个可选的布尔值，表示是否异步执行操作，默认为true。true表示是异步，			false表示同步，但重来不会使用ajax来同步加载，
*/</span>

xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>
  <span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;https://www.fastmock.site/mock/6ec78e345df340241e1f5043f0167833/icode/test&quot;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第三步：调用<code>send()</code>方法，正式发送请求</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*
	body:是一个可选参数，用于你想发送给服务器的任何内容
	主要用于发送POST请求时，发送请求体数据。
	如果采用的是GET请求，其参数写和不写一样，因为写了也不会被处理
*/</span>

<span class="token comment">// 目前常用的几种发送数据形式有以下三种</span>
<span class="token comment">// xhr.send(&#39;123&#39;) //  字符串</span>
<span class="token comment">// xhr.send(&quot;username=icoding&amp;key=1242&quot;);  // 参数字符串</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;{&quot;username&quot;:&quot;icoding&quot;,&quot;key&quot;:1254}&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// JSON格式</span>
<span class="token comment">// xhr.send(new FormData()); // 发送表单数据</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>温馨提示</p><p><code>send()</code>方法中发送数据的格式前后端要协商好，这样后端在接受到参数时就知道以什么格式来解析。</p><ul><li>第四步：通过监听<code>readystatechange()</code>事件，来处理服务器响应</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 当获取到响应后，会触发 xhr 对象的 readystatechange 事件，可以在该事件中对响应进行处理</span>
<span class="token comment">// onreadystatechange() 见名知意，即：状态改变时触发事件,所以我们需要判断当前Ajax的状态。</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 也可以采用 addEventListener 方式来监听事件</span>
<span class="token comment">// xhr.addEventListener(&quot;readystatechange&quot;, () =&gt; {}, false);</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>xhr.readyState</code>属性记录了整个通信过程中的状态，它的值从 <code>0 ~ 4</code>，一共 5 个状态</p><table><thead><tr><th style="text-align:left;">值</th><th style="text-align:left;">状态</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>0</code></td><td style="text-align:left;"><code>UNSENT</code></td><td style="text-align:left;">代理被创建，但尚未调用 open() 方法。</td></tr><tr><td style="text-align:left;"><code>1</code></td><td style="text-align:left;"><code>OPENED</code></td><td style="text-align:left;"><code>open()</code> 方法已经被调用。</td></tr><tr><td style="text-align:left;"><code>2</code></td><td style="text-align:left;"><code>HEADERS_RECEIVED</code></td><td style="text-align:left;"><code>send()</code> 方法已经被调用，并且头部和状态已经可获得。</td></tr><tr><td style="text-align:left;"><code>3</code></td><td style="text-align:left;"><code>LOADING</code></td><td style="text-align:left;">下载中，<code>responseText</code> 属性已经包含部分数据。</td></tr><tr><td style="text-align:left;"><code>4</code></td><td style="text-align:left;"><code>DONE</code></td><td style="text-align:left;">下载操作已完成。</td></tr></tbody></table><blockquote><p>每次状态发生改变，都会触发<code>readystatechange</code>事件</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// readyState 不等于 4，未完成，数据还没有准备好，就没必要继续执行，直接返回null就好</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token comment">// readyState 等于 4，表示完成，并已经接收到全部响应数据</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 请求被发送后，从服务器端返回文本。</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 查看返回值的类型</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3、使用-ajax-完成前后端通信" tabindex="-1"><a class="header-anchor" href="#_3-3、使用-ajax-完成前后端通信" aria-hidden="true">#</a> 3.3、使用 Ajax 完成前后端通信</h3><p>通过以上四个步骤完成 Ajax 前后端通信，不过我们一般会把<code>xhr.onreadystatechange</code>事件写在<code>xhr.open()</code>和<code>xhr.send()</code>代码前面，保证请求发出去后的状态一定能被事件监听到。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 第一步：创建xhr对象</span>
<span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 第四步：通过监听\`readystatechange()\`事件，来处理服务器响应</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// readyState 不等于 4，未完成，数据还没有准备好，就没必要继续执行，直接返回null就好</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token comment">// readyState 等于 4，表示完成，并已经接收到全部响应数据</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 请求被发送后，从服务器端返回文本。</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 查看返回值的类型</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 第二步：调用用open()方法，准备发送</span>
xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>
  <span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;https://www.fastmock.site/mock/6ec78e345df340241e1f5043f0167833/icode/test&quot;</span><span class="token punctuation">,</span>
  <span class="token boolean">true</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 第三步：调用send()方法，正式发送请求</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/image-20230302232918420.d12fb695.png" alt="image-20230302232918420"></p><h3 id="_4、ajax-发送-get-请求" tabindex="-1"><a class="header-anchor" href="#_4、ajax-发送-get-请求" aria-hidden="true">#</a> 4、Ajax 发送 GET 请求</h3><p>前面了解了 Ajax 是如何发送请求的，接下来深入了解 发送 GET 请求时，如何携带数据 和 数据编码</p><ul><li>GET 请求不能通过请求体携带数据，但可以通过请求头携带</li><li>URL 地址中问号后边即为携带的数据，&amp; 符号来分隔多个名值对</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">&quot;http://www.xxx.com/test?keyword=json&amp;type=1&amp;sort=1&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// url地址？号的字符串就是GET请求体携带的数据 keyword=json&amp;type=1&amp;sort=1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>代码演示</strong></p><p>根据参数 num 来决定返回几条用户信息</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> url <span class="token operator">=</span>
  <span class="token string">&quot;https://www.fastmock.site/mock/6ec78e345df340241e1f5043f0167833/icode/users/list?num=3&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 第一步：创建xhr对象</span>
<span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 第四步：通过监听\`readystatechange()\`事件，来处理服务器响应</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// readyState 不等于 4，未完成，数据还没有准备好，就没必要继续执行，直接返回null就好</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token comment">// readyState 等于 4，表示完成，并已经接收到全部响应数据</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 请求被发送后，从服务器端返回文本。</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 查看返回值的类型</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 第二步：调用用open()方法，准备发送</span>
xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 第三步：调用send()方法，正式发送请求</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/GIF2023-3-2-23-55-48.c07980df.gif" alt="GIF2023-3-2 23-55-48"></p><p>注：</p><p>要在浏览器中看到 Ajax 的请求，一定要选中上面的<code>Fetch/XHR</code> 选项</p><h3 id="_5、ajax-发送-post-请求" tabindex="-1"><a class="header-anchor" href="#_5、ajax-发送-post-请求" aria-hidden="true">#</a> 5、Ajax 发送 POST 请求</h3><ul><li>POST 请求主要通过请求体携带数据，同量也可以在请求头携带（不过实际开发不这样用）</li><li>请求体数据作为<code>send()</code>方法的参数（一般是字符串），被传送到服务器端。</li></ul><p>Ajax 发送 POST 请求，请求体携带的数据格式通常为以下两种，但不管那一种，都需要和后端沟通好，这样后端就能以对应的格式来解析数据</p><table><thead><tr><th style="text-align:left;">数据类型</th><th style="text-align:left;">格式</th><th style="text-align:left;">fastmock 接受数据形式</th></tr></thead><tbody><tr><td style="text-align:left;">application/x-www-form-urlencoded</td><td style="text-align:left;"><code>&quot;username=admin&amp;password=123456&quot;</code></td><td style="text-align:left;"><code>_req.body.username</code></td></tr><tr><td style="text-align:left;">JSON</td><td style="text-align:left;"><code>JSON.stringify({username:&quot;admin&quot;,password:&quot;123456&quot;})</code></td><td style="text-align:left;"><code>_req.body.username</code></td></tr></tbody></table><ul><li><code>application/x-www-form-urlencoded</code> 格式</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 请求接口地址</span>
<span class="token keyword">const</span> url <span class="token operator">=</span>
  <span class="token string">&quot;https://www.fastmock.site/mock/6ec78e345df340241e1f5043f0167833/icode/login&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 创建xhr对象</span>
<span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 监听事件，处理响应</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 准备发送</span>
xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 设置请求头，发送内容类型为JSON格式</span>
xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/x-www-form-urlencoded&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 正式发送，并发送请求体数据</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;username=admin&amp;password=123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>JSON 格式</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 请求接口地址</span>
<span class="token keyword">const</span> url <span class="token operator">=</span>
  <span class="token string">&quot;https://www.fastmock.site/mock/6ec78e345df340241e1f5043f0167833/icode/users/login&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 创建xhr对象</span>
<span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 监听事件，处理响应</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 准备发送</span>
xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 设置请求头，发送内容类型为JSON格式</span>
xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 正式发送，并发送请求体数据</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>
  <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/GIF2023-3-317-29-35.7742cc7d.gif" alt="GIF2023-3-317-29-35"></p><h3 id="_6、请求数据编码" tabindex="-1"><a class="header-anchor" href="#_6、请求数据编码" aria-hidden="true">#</a> 6、请求数据编码</h3><p>不管是<code>GET</code>还是<code>POST</code>请求，如果请求携带的数据是非英文字母的，如：中文汉字，就需要编码之后再发送给后端，不然会造成乱码问题</p><p>可以使用 <code>encodeURIComponent()</code> 方法进行编码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// GET请求地址中有中文需要编码</span>
<span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://www.xxx.com/test?wd=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span><span class="token string">&quot;web前端&quot;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token comment">// POST请求体数据中有中文需要编码</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">username=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span><span class="token string">&quot;艾编程&quot;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;age=20</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>代码演示</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://www.fastmock.site/mock/6ec78e345df340241e1f5043f0167833/icode/test?wd=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>
  <span class="token string">&quot;web前端&quot;</span>
<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;username=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span><span class="token string">&quot;艾编程&quot;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

<span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看编码后传递到服务器端的中文字符串</p><p><img src="https://www.arryblog.com/assets/img/GIF2023-3-3-1-21-17.131dd845.gif" alt="GIF2023-3-3 1-21-17"></p><h3 id="_7、form-表单-post-请求携带数据" tabindex="-1"><a class="header-anchor" href="#_7、form-表单-post-请求携带数据" aria-hidden="true">#</a> 7、form 表单 post 请求携带数据</h3><p>form 表单在发送<code>post</code>请求时，请求体数据类型有如下三种，通过<code>enctype</code>属性设置。</p><table><thead><tr><th style="text-align:left;">enctype 属性</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>application/x-www-form-urlencoded</code></td><td style="text-align:left;">默认值，只能上传文本格式的文件。不能用于发送文件。在发送前<strong>会编码所有字符</strong>，即在发送到服务器之前，所有字符都会进行编码</td></tr><tr><td style="text-align:left;"><code>multipart/form-data</code></td><td style="text-align:left;">指定传输数据为二进制类型（不对字符编码），比如图片，mp3，文件。是将文件以二进制的形式上传，可以实现多种类型的文件上传</td></tr><tr><td style="text-align:left;"><code>text/plain</code></td><td style="text-align:left;">纯文本的传输，空格转换为&quot;+&quot;号，但<strong>不对特殊字符编码</strong>，一般用于 email 之类的</td></tr></tbody></table><p>温馨提示</p><p>form 表单只有在发送 post 请求时，需要设置 enctype 属性的值，如果不设置默认为<code>application/x-www-form-urlencoded</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!--
    action: 设置表单请求（提交）的地址
    method: 设置请求的方法
    enctype: 设置以post方法请求时，请求携带的数据类型。
--&gt;</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span>
  <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://www.fastmock.site/mock/6ec78e345df340241e1f5043f0167833/icode/login<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>application/x-www-form-urlencoded<span class="token punctuation">&quot;</span></span>
<span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>提交<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!--
        当 enctype=&quot;application/x-www-form-urlencoded&quot;   
        提交的数据格式： username=admin&amp;password=123456
		
	    当 enctype=&quot;text/plain&quot;  
	    提交的数据格式：  
                username=admin
                password=123456
		
		当enctype=&quot;multipart/form-data&quot; 
		提交的数据格式：
        ------WebKitFormBoundaryCRBfs11AGJrtx0St
        Content-Disposition: form-data; name=&quot;username&quot;

        admin
        ------WebKitFormBoundaryCRBfs11AGJrtx0St
        Content-Disposition: form-data; name=&quot;password&quot;

        123456
        ------WebKitFormBoundaryCRBfs11AGJrtx0St--
 --&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：</p><p>通过提交按扭提交表单数据时，会发生页面的跳转，如果不想发生页面跳转就需要通过 Ajax 来发送请求。</p><p>这里重点讲解下如何利用 Ajax 来提交<code>enctype = &quot;multipart/form-data&quot;</code>类型的表单数据。</p><h3 id="_8、formdata-对象" tabindex="-1"><a class="header-anchor" href="#_8、formdata-对象" aria-hidden="true">#</a> 8、FormData 对象</h3><p>通过 Ajax 来提交 Form 表单，如果提交的数据类型为<code>multipart/form-data</code>类型，则需要利用到 FormData 构造函数来创建对应类型的数据。</p><p>FormData 对象用以将数据编译成键值对，以便用<code>XMLHttpRequest</code>来发送数据</p><p>接下来我们就通过案例来展开 FormData 的学习。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>login<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token attr-name">autocomplete</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>off<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">autocomplete</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>off<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>提交<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// 获取form表单</span>
  <span class="token keyword">const</span> login <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;login&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 获取用户名和密码输入框</span>
  <span class="token comment">//   console.log(login.username);</span>
  <span class="token comment">//   console.log(login.password);</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> username<span class="token punctuation">,</span> password <span class="token punctuation">}</span> <span class="token operator">=</span> login<span class="token punctuation">;</span>
  <span class="token comment">// 获取提交按扭</span>
  <span class="token keyword">const</span> submit <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;submit&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Ajax请求地址</span>
  <span class="token keyword">const</span> url <span class="token operator">=</span>
    <span class="token string">&quot;https://www.fastmock.site/mock/6ec78e345df340241e1f5043f0167833/icode/login&quot;</span><span class="token punctuation">;</span>
  <span class="token comment">// 给提交按扭添加点击事件</span>
  submit<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 阻止点击表单自动提交</span>
    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 表单数据验证（省略）.....</span>

    <span class="token comment">// 创建Ajax发送请求</span>
    <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    xhr<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;readystatechange&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 准备发送</span>
    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 组装数据</span>
    <span class="token comment">// const data = \`username=\${username.value.trim()}&amp;password=\${password.value.trim()}\`;</span>
    <span class="token comment">// 设置请求头 Content-Type</span>
    <span class="token comment">// xhr.setRequestHeader(</span>
    <span class="token comment">//   &quot;Content-Type&quot;,</span>
    <span class="token comment">//   &quot;application/x-www-form-urlencoded&quot;</span>
    <span class="token comment">// );</span>

    <span class="token comment">/*
         目前我们只有两个字段，这样手动组装数据还行，如果一旦字段变多了，就会非常崩溃
         我们想要从重复的劳动中解脱出来，就需要用到 FormData 了
    */</span>

    <span class="token comment">// 组装数据</span>
    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span>login<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 查看获取到的表单中数据</span>
    <span class="token comment">// for (const item of data) {</span>
    <span class="token comment">//   console.log(item);</span>
    <span class="token comment">// }</span>
    <span class="token comment">// 设置请求头 Content-Type</span>
    xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;multipart/form-data&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 正式发送</span>
    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-1、formdata-的基本用法" tabindex="-1"><a class="header-anchor" href="#_8-1、formdata-的基本用法" aria-hidden="true">#</a> 8.1、FormData 的基本用法</h3><p>接下来我们来学习以下几个 FormData 的实例方法</p><table><thead><tr><th style="text-align:left;">实例方法</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>append(key,value)</code></td><td style="text-align:left;">添加一个新的值到 FormData 对象内的一个已存在的键中，如果键不存在则会添加该键</td></tr><tr><td style="text-align:left;">set</td><td style="text-align:left;">对 <code>FormData</code> 对象里的某个 <code>key</code> 设置一个新的值，如果该 <code>key</code> 不存在，则添加。</td></tr><tr><td style="text-align:left;">get</td><td style="text-align:left;"><code>get()</code> 方法用于返回 FormData 对象中和指定的键关联的第一个值</td></tr><tr><td style="text-align:left;">getAll</td><td style="text-align:left;">方法会返回该 <code>FormData</code> 对象指定 key 的所有值</td></tr><tr><td style="text-align:left;"><code>delete(key)</code></td><td style="text-align:left;">根据 key 从 <code>FormData</code> 对象中删除指定键</td></tr></tbody></table>`,96),b={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/FormData/append",target:"_blank",rel:"noopener noreferrer"},g=p(`<ul><li><code>append(key,value)</code> 和 <code>get(key)</code> 和 <code>getAll(key)</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
data<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
data<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
data<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
data<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// data为可迭代对象</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/image-20230307212503092.4fd56af6.png" alt="image-20230307212503092"></p><ul><li>set(key,value)</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
data<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
data<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
data<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
data<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/image-20230307211758212.1d606a73.png" alt="image-20230307211758212"></p><ul><li>delete</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
data<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
data<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token string">&quot;--&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

data<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 所有键为&quot;a&quot;的都删除</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、跨域" tabindex="-1"><a class="header-anchor" href="#三、跨域" aria-hidden="true">#</a> 三、跨域</h2><p>深入浅出什么是跨域，什么是不同域，什么是同域，跨域请求为什么会被阻止，跨域的解决方案，CORS 跨域资源共享，JSONP 等 。</p><h3 id="_1、什么是跨域" tabindex="-1"><a class="header-anchor" href="#_1、什么是跨域" aria-hidden="true">#</a> 1、什么是跨域 ？</h3>`,11),h={href:"https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy",target:"_blank",rel:"noopener noreferrer"},q=n("strong",null,"同源策略",-1),y={href:"https://developer.mozilla.org/zh-CN/docs/Glossary/Origin",target:"_blank",rel:"noopener noreferrer"},f=n("p",null,[n("strong",null,"源（Origin)的定义")],-1),x=n("strong",null,"源",-1),w={href:"https://developer.mozilla.org/zh-CN/docs/Glossary/URL",target:"_blank",rel:"noopener noreferrer"},j=n("strong",null,"方案",-1),_=n("strong",null,"主机名",-1),S=n("strong",null,"端口",-1),O=p(`<h3 id="_2、什么是同域-源-什么是不同域-源" tabindex="-1"><a class="header-anchor" href="#_2、什么是同域-源-什么是不同域-源" aria-hidden="true">#</a> 2、什么是同域（源），什么是不同域（源）</h3><p>我们观察以下 URL 地址</p><p><img src="https://www.arryblog.com/assets/img/image-20221211130442655.e1fa0b5c.png" alt="image-20221211130442655"></p><p>只有当两个 URL 地址的 <strong>protocol（协议）</strong>、<strong>domain（域名）</strong>、<strong>port（端口）</strong> 三者完全相同时，我们才认为他们是同域，只要三者中任何一个不同，就是不同域，与路径（参数、锚点）无关，路径是否一样无所谓</p><p>以下 URL 为同域</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>https://www.icodingedu.com/
https://www.icodingedu.com/goods/
https://www.icodingedu.com/open/course/20
https://www.icodingedu.com/goods/show/81?targetId=90&amp;preview=0

&lt;!--
	以上地址的

	协议都是：https
	域名都是：www.icodingedu.com
	端口号没有写，默认都是 443
--&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下 URL 为不同域</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;!-- 以下URL的 协议不同，即为不同域 --&gt;
https://www.icodingedu.com/
http://www.icodingedu.com/

&lt;!-- 以下URL的 域名不同，即为不同域 --&gt;
http://www.icodingedu.com:80/goods/
http://m.icodingedu.com:80/goods/

&lt;!-- 以下URL的 第1个和第2个的协议 端口号都不同 --&gt;
https://www.icodingedu.com:443/goods/
http://www.icodingedu.com:80/goods/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意事项：</p><ul><li>默认情况下 http 协议的默认端口号是<code>80</code>， 可以省略端口号</li><li>https 的默认端口是<code>443</code>，可以省略端口号</li></ul><p>所以以下情况为同域</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http://www.icodingedu.com:80 与 http://www.icodingedu.com 是同域
https://www.icodingedu.com:443 与 https://www.icodingedu.com 是同域
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、同域请求" tabindex="-1"><a class="header-anchor" href="#_3、同域请求" aria-hidden="true">#</a> 3、同域请求</h3><p>如果请求的 URL 地址和当前 URL 地址是同域，则不会受浏览器的同源策略限制。所以服务端响应的内容前端能正常的接受到。</p><p><strong>代码演示</strong></p><p>在同一目录下，新建 <code>index.html</code> 和 <code>data.json</code> 文件 ，在<code>index.html</code>页面使用 Ajax 异步请求<code>data.json</code>文件</p><ul><li><code>index.html</code>页面核心代码如下</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">&quot;./data.json&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> data <span class="token operator">=</span> xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
  xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>data.json</code> 页面代码如下</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;username&quot;</span><span class="token operator">:</span> <span class="token string">&quot;icoding&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">33</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码解读</p><p>上面的代码，相当于是在 <code>http://127.0.0.1:5500/index.html</code> 路径下向 <code>http://127.0.0.1:5500/data.json</code> 路径发送了 Ajax 请求，因为两者 “协议名，域名，端口号” 三者都相同，所以是同域请求，并不受浏览器同源策略的限止。</p><p><img src="https://www.arryblog.com/assets/img/GIF2023-3-417-54-03.ede11617.gif" alt="GIF2023-3-417-54-03"></p><h3 id="_4、跨域请求" tabindex="-1"><a class="header-anchor" href="#_4、跨域请求" aria-hidden="true">#</a> 4、跨域请求</h3><p>如果请求的 URL 地址和当前 URL 地址是不同域，则会受浏览器的同源策略限制，即服务端响应的会被浏览器给丢弃掉。</p><blockquote><p>也就是说请求发出去了，服务端也响应了内容，但是浏览器在接受到服务端的内容后，发现请求的地址和当前 URL 不是同域的，则会把内容丢弃掉</p></blockquote><p><strong>代码演示</strong></p><ul><li>在同一目录下创建<code>index.html</code>和<code>server.js</code>两个文件</li><li><code>server.js</code>文件，用来创建 HTTP 服务器，服务器的访问地址为 <code>http://127.0.0.1:8887</code></li><li>在<code>index.html</code>页面使用 Ajax 异步请求 <code>http://127.0.0.1:8887</code>来获取内容</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!--index.html的核心代码--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">&quot;http://127.0.0.1:8887&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
  xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
// server.js const http = require(&quot;http&quot;); http .createServer((request,
response) =&gt; { console.log(&quot;请求成功&quot;); // 设置响应头，解决中文乱码
response.writeHead(200, { &quot;Content-Type&quot;: &quot;text/plain; charset=utf-8&quot;, });
response.end(&quot;发送的数据内容&quot;); }) .listen(8887); console.log(&quot;Server running at
http://127.0.0.1:8887&quot;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行代码：</p><ul><li>先在在 VSCode 的命令终端执行 <code>node server.js</code> 命令来运行 node 程序，创建<code>http://127.0.0.1:8887</code>服务</li><li>然后在 VScode 中打开<code>index.html</code>页面，打开后地址为：<code>http://127.0.0.1:5500/index.html</code>，打开后，其内部就会向<code>http://127.0.0.1:8887</code>发送 Ajax 请求。</li><li>所以我们 VSCode 的终端看到，服务端成功响应请求，并输出 <strong>&quot;请求成功&quot;</strong>。</li></ul><blockquote><p>但浏览器端并没有在控制台正确打印服务端响应的内容，而是报如下错误</p></blockquote><p><img src="https://www.arryblog.com/assets/img/image-20230304182643641.4ace1780.png" alt="image-20230304182643641"></p><p>注：</p><p>跨域限制是浏览器的行为，它不限制请求发送到服务端，也没有限制服务端响应内容，只在服务端响应内容后，浏览器会判断当前地址和请求地址是不是同一域，如果不是，则会把响应回来的内容丢弃，并抛出相应错误。</p><blockquote><p>当然，如果后端有相关设置，跨域也是可以的，后面会讲</p></blockquote><h3 id="_5、跨域请求为什么会被阻止" tabindex="-1"><a class="header-anchor" href="#_5、跨域请求为什么会被阻止" aria-hidden="true">#</a> 5、跨域请求为什么会被阻止</h3><p>阻止跨域请求，其实是浏览器本身的一种安全策略，即：同源策略</p><p><strong>本质上</strong></p><p>跨域被阻止的问题就是 浏览器本身的问题（基于安全考虑，帮我们禁止掉了），其他客户端 或 服务器 都不存在跨域被阻止的问题。</p><p>虽然，阻止了跨域请求保障了一定的安全，但有的时候合理的跨域请求也是至关重要的。那我们应该如何跨域请求，还不被浏览器阻止呢 ？</p><blockquote><p>这就是我们接下来为什么要学习 跨域解决方案的原因了 ！</p></blockquote><p><strong>跨域常用解决方案</strong></p><ul><li>CORS 跨域资源共享（最常用）</li><li>JSONP（主要用到 script 标签）</li><li>代理跨域：开启一个代理服务器实现数据转发</li></ul><p>关于跨域请求的解决方案有数十种之多，主要看应用场景，每种方式都有各自的优缺点。</p><blockquote><p>当下我们前端开发中会优先使用 CORS 跨域资源共享。</p></blockquote><h3 id="_6、cors-跨域资源共享" tabindex="-1"><a class="header-anchor" href="#_6、cors-跨域资源共享" aria-hidden="true">#</a> 6、CORS 跨域资源共享</h3><p>深入浅出 CORS 是什么，使用 CORS 跨域的过程，CORS 的兼容性 等</p><p>我们使用 CORS 跨域资源共享 主要是后端来解决的，其实我们前端什么都不用做也帮不上啥忙，只要后端解决了，前端就可以实现跨域了。</p><h3 id="_6-1、cors-是什么" tabindex="-1"><a class="header-anchor" href="#_6-1、cors-是什么" aria-hidden="true">#</a> 6.1、CORS 是什么</h3><p><strong>CORS</strong>（Cross-Origin Resource Sharing）通俗地译为跨域资源共享，定义了浏览器与服务器如何实现跨源通信。背后的基本思路是一种基于 HTTP 头的机制，该机制通过允许服务器标示除了它自己以外的其它源（域、协议或端口），使得浏览器允许这些源访问加载自己的资源。</p><p>我们前面说过，因为浏览器的同源策略，所以不同域之间是不能实现资源共享。如果我们想要不同域之间能实现资源共享，我们只需要在服务端的响应头中添加<code>Access-Control-Allow-Origin</code> 头信息</p><ul><li>允许任意的外源访问该资源</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Access<span class="token operator">-</span>Control<span class="token operator">-</span>Allow<span class="token operator">-</span>Origin<span class="token operator">:</span> <span class="token string">&quot;*&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>只允许指定的外源访问该资源</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Access<span class="token operator">-</span>Control<span class="token operator">-</span>Allow<span class="token operator">-</span>Origin<span class="token operator">:</span> <span class="token string">&quot;https://www.xxx.com&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_6-2、cors-实现资源共享" tabindex="-1"><a class="header-anchor" href="#_6-2、cors-实现资源共享" aria-hidden="true">#</a> 6.2、CORS 实现资源共享</h3><p>接下来我们用代码来演示，CORS 是如何解决不同域之间的资源共享。</p><blockquote><p>在同一目录下新建<code>index.html</code>和<code>server.js</code>文件。</p></blockquote><ul><li><code>server.js</code>文件用来创建一个 HTTP 服务，服务的访问地址 <code>http://127.0.0.1:88806</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;http&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
http
  <span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 设置响应头</span>
    response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token comment">// 允许所有域访问</span>
      <span class="token comment">// &quot;Access-Control-Allow-Origin&quot;:&quot;*&quot;</span>
      <span class="token comment">// 只允许http://127.0.0.1:5500 这个域名下的所有请求</span>
      <span class="token string-property property">&quot;Access-Control-Allow-Origin&quot;</span><span class="token operator">:</span> <span class="token string">&quot;http://127.0.0.1:5500&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 设置响应内容</span>
    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&quot;响应内容&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8886</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Server running at http:127.0.0.1:8886&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>index.html</code>页面，使用 Ajax 向 <code>http://127.0.0.1:88806</code> 发起一个异步的请求</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">&quot;http://127.0.0.1:8886&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
  xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码执行过程</p><ul><li>首先在 VSCode 的终端，执行<code>node server.js</code> 命令来运行 node 程序，创建 Http 服务，服务地址<code>http:127.0.0.1:8886</code></li><li>然后在 VSCode 中打开 <code>index.html</code> 页面，这时地址栏中的地址为<code>http://127.0.0.1:5500</code>,同时内部的 JS 代码执行，发起了 Ajax 请求，因为请求的地址：<code>http:127.0.0.1:8886</code>和<code>http://127.0.0.1:5500</code>不是同域的，所以就会有跨域限制，但是我们在响应头中设置了<code>&quot;Access-Control-Allow-Origin&quot;:&quot;http://127.0.0.1:5500&quot;</code>，相当于允许<code>http://127.0.0.1:5500</code>来访问我的资源，所以在浏览器的控制台能成功的打印出 <strong>”响应内容“</strong> 。</li><li>如果把<code>server.js</code>文件中设置响应头<code>&quot;Access-Control-Allow-Origin&quot;:&quot;http://127.0.0.1:5500&quot;</code>代码去掉，你再次启动 node 服务，刷新<code>index.html</code>页面时，你就发现浏览器的控制台就报出了错误，相当请求失败。</li></ul><h3 id="_6-3、使用-cors-跨域过程" tabindex="-1"><a class="header-anchor" href="#_6-3、使用-cors-跨域过程" aria-hidden="true">#</a> 6.3、使用 CORS 跨域过程</h3><ul><li>①、浏览器发送请求</li><li>②、后端在响应头中添加 <code>Access-Control-Allow-Origin</code> 头信息</li><li>③、浏览器接收到响应</li><li>④、如果是同域下的请求，浏览器不会额外做什么，这次前后端通信就圆满完成了</li><li>⑤、如果是跨域请求，浏览器会从响应头中查找是否允许跨域访问</li><li>⑥、如果允许跨域，通信圆满完成</li><li>⑦、如果没找到或不包含想要跨域的域名，就丢弃响应结果</li></ul><h3 id="_6-4、如何给-cors-设置多域名" tabindex="-1"><a class="header-anchor" href="#_6-4、如何给-cors-设置多域名" aria-hidden="true">#</a> 6.4、如何给 CORS 设置多域名</h3><p>如果想要指定多个外源能访问该资源，其需要一定的办法才能办到，同时我们还需要了解以下两个必要的知识点：</p><ul><li>如果当前请求是跨域请求，则请求头中会有<code>Origin</code> 头字段</li><li>如果当前请求不是跨域请求，则请求头中不会有<code>Origin</code>头字段</li></ul><blockquote><p>了解了这一点，我们就知道如何：指定多个外源访问该资源</p></blockquote><p><strong>具体思路</strong></p><ul><li>在响应断获取请求头中的<code>Origin</code>字段，如果没有值，则说明当前并没跨域，可以不做任何处理</li><li>如果请求头中带有<code>Orign</code>字段，则说明当前为跨域请求，只需要将响应头<code>Access-Control-Allow-Origin</code>字段的值设置为请求头 <code>Orign</code>字段的值</li></ul><p><strong>具体代码实现</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 用来保存响应头信息的对象</span>
<span class="token keyword">const</span> head <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 允许访问该资源的外源</span>
<span class="token keyword">const</span> origin <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;http://127.0.0.1:5500&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://127.0.0.1:5501&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 获取请求头的origin字段中的值，只有在请求是跨域请求是，请求头中才会有该字段，并且该字段的值是发起请求时所在的地址</span>
<span class="token keyword">const</span> requestOrigin <span class="token operator">=</span> request<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>origin<span class="token punctuation">;</span>
<span class="token comment">// 判断origin的值是否在允许的源中，如果在，则将响应头Access-Control-Allow-Origin的值设置为该源</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>origin<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>requestOrigin<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  head<span class="token punctuation">[</span><span class="token string">&quot;Access-Control-Allow-Origin&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> requestOrigin<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 设置 Vary: Origin，避免 CDN 缓存破坏 CORS 配置</span>
<span class="token punctuation">(</span>head<span class="token punctuation">[</span><span class="token string">&quot;Vary&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Origin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token comment">// 设置响应头</span>
  response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>完整的 node 代码</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;http&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
http
  <span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 用来保存响应头信息的对象</span>
    <span class="token keyword">const</span> head <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// 允许访问该资源的外源</span>
    <span class="token keyword">const</span> origin <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;http://127.0.0.1:5500&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://127.0.0.1:5501&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取请求头的origin字段中的值，只有在请求是跨域请求是，请求头中才会有该字段，并且该字段的值是发起请求时所在的地址</span>
    <span class="token keyword">const</span> requestOrigin <span class="token operator">=</span> request<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>origin<span class="token punctuation">;</span>
    <span class="token comment">// 判断origin的值是否在允许的源中，如果在，则将响应头Access-Control-Allow-Origin的值设置为该源</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>origin<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>requestOrigin<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      head<span class="token punctuation">[</span><span class="token string">&quot;Access-Control-Allow-Origin&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> requestOrigin<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 设置 Vary: Origin，避免 CDN 缓存破坏 CORS 配置</span>
    <span class="token punctuation">(</span>head<span class="token punctuation">[</span><span class="token string">&quot;Vary&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Origin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// 设置响应头</span>
      response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 设置响应内容</span>
    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&quot;响应内容&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8886</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Server running at http:127.0.0.1:8886&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7、jsonp-实现跨域" tabindex="-1"><a class="header-anchor" href="#_7、jsonp-实现跨域" aria-hidden="true">#</a> 7、JSONP 实现跨域</h3><p>深入浅出 JSONP 的原理 和 JSONP 实现跨域的具体实践和应用。</p><h3 id="_7-1、jsonp-的原理" tabindex="-1"><a class="header-anchor" href="#_7-1、jsonp-的原理" aria-hidden="true">#</a> 7.1、JSONP 的原理</h3><p>在浏览器中<code>&lt;img&gt; 、&lt;link&gt; 、&lt;video&gt; 、&lt;script&gt;</code>等标签在跨域请求资源时不受浏览器同源策略的影响。</p><p>JSONP 主要就是利用 <code>&lt;script&gt;</code> 标签，加载跨域文件</p><h3 id="_7-2、-使用-jsonp-实现跨域" tabindex="-1"><a class="header-anchor" href="#_7-2、-使用-jsonp-实现跨域" aria-hidden="true">#</a> 7.2、 使用 JSONP 实现跨域</h3><p>为了让大家能理解 JSONP 是如何实现跨域来请求资源，我们先来从一段简单的 JS 代码开始说起</p><ul><li><code>index.html</code>页面的 JS 代码</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// 处理数据的函数  data为需要处理的数据</span>
  <span class="token keyword">function</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 调用函数，并将数据作为参数传入 ，这里的操作，我们是希望服务端返回对应的JS代码来实现</span>
  <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">userName</span><span class="token operator">:</span> <span class="token string">&quot;icoding&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token number">123456</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们希望通过<code>&lt;script&gt;</code>标签来发起请求，返回以下 JS 代码，而不是我们人为写死，因为我们传入函数中的参数数据更希望后端发送给到我们。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">userName</span><span class="token operator">:</span> <span class="token string">&quot;icoding&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token number">123456</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>改造后的<code>index.html</code>页面代码如下</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// 处理数据的函数  data为需要处理的数据</span>
  <span class="token keyword">function</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 服务端通过地址中的参数 callback=handle 来判断返回的函数的名--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://127.0.0.1:8885/callback=handle<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>node.js</code> 搭建 HTTP 服务</strong></p><p>接下来我们来搭建 HTTP 服务，让大家感受完整的处理过程。即后端拿收到<code>http://127.0.0.1:8885/callback=handle</code>这个请求后，会如何响应，才能实现我们想要的结果</p><p>创建<code>server.js</code>文件，用来创建 HTTP 服务</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;http&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
http
  <span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取路径 /callback=handle 中的handle</span>
    <span class="token keyword">const</span> callback <span class="token operator">=</span> request<span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;=&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">userName</span><span class="token operator">:</span> <span class="token string">&quot;icoding&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token number">123456</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>callback<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 上面代码同等于</span>
    <span class="token comment">//   response.end(\`handle({&quot;userName&quot;:&quot;icoding&quot;,&quot;password&quot;:123456})\`)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8885</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Server running at http://127.0.0.1:8885&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务端根据请求地址中的参数，来确定返回的字符串中的函数名，同时把对应的数据做为函数的实参传入。前端的<code>&lt;script&gt;</code>标签收到响应内容后，会把内容当成 JS 代码来编译和执行。</p><p>代码执行过程</p><ul><li>首先在 VSCode 的终端，执行<code>node server.js</code> 命令来运行 node 程序，创建 Http 服务，服务地址<code>http:127.0.0.1:8885</code></li><li>然后在 VSCode 中打开<code>index.html</code>页面，这里你在控制台就能看到函数调用执行后的结果</li></ul><p><img src="https://www.arryblog.com/assets/img/image-20230304232514715.a50f7a02.png" alt="image-20230304232514715"></p><h3 id="_8、代理跨域" tabindex="-1"><a class="header-anchor" href="#_8、代理跨域" aria-hidden="true">#</a> 8、代理跨域</h3><p>深入浅出代理跨域的原理 和 代理跨域的具体实践和应用。</p><h3 id="_8-1、代理跨域的原理" tabindex="-1"><a class="header-anchor" href="#_8-1、代理跨域的原理" aria-hidden="true">#</a> 8.1、代理跨域的原理</h3><p>我们前面说过，跨域请求被阻止是浏览器的行为，服务器和服务器之间是没有这种限制。</p><p>如果在浏览器访问 <code>http:127.0.0.1:5500</code> 页面时，该页面发送 Ajax 请求到<code>http://127.0.0.1:8886</code> 服务下获取资源，受到浏览器同源策略的影响，肯定会被阻止。</p><p>如果我们可以在请求端和服务端之间架设一个代理服务器。这个代理服务器与请求端满足同源策略，那我们请求端就可把请求发给代理服务器，然后代理服务器帮我们把请求转发给真实的服务器，服务器响应内容给到代理服务器，代理服务器再把内容响应给到请求端。</p><blockquote><p>这样就完美的解决了跨域问题。</p></blockquote><p><img src="https://www.arryblog.com/assets/img/image-20230304235201497.c8fe27f9.png" alt="image-20230304235201497"></p><blockquote><p>关于代理服务器，我们后面将到 Vue 时会涉及到。这里我们就用 node 来搭建两个服务器来模拟下中间整个过程。</p></blockquote><h3 id="_8-2、模拟代理跨域的实现过程" tabindex="-1"><a class="header-anchor" href="#_8-2、模拟代理跨域的实现过程" aria-hidden="true">#</a> 8.2、模拟代理跨域的实现过程</h3><ul><li>创建<code>a.js</code>，来创建 HTTP 服务器，服务地址<code>http:127.0.0.1:8881</code></li><li>创建<code>b.js</code>，来创建 HTTP 服务，服务地址<code>http:127.0.0.1:8882</code> 在这个服务器中返回一个 html 页面，这个返回的需要发送 Ajax 请求，获取服务器<code>http:127.0.0.1:8881</code>的响应结果。</li></ul><blockquote><p>因为受到浏览器同源策略的限制，所以请求肯定会失败。</p></blockquote><p><strong>我们模拟代理来实现</strong></p><p>我们把请求转发给<code>http:127.0.0.1:8882/userInfo</code>这个服务器，然后这个服务器就相当于是一个代理服务器，他再发送请求到 <code>http:127.0.0.1:8881</code>，拿到响应结果后，返回给到浏览器端。</p><ul><li>新建<code>index.html</code>网页</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  a.js创建的服务器返回的html内容渲染后页面
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">// 需要获取http:127.0.0.1:8881 服务器响应的内容，因为受到同源策略的限制，所以我们需要把请求发送给到http://127.0.0.1:8882/getInfo,他会在接受到请求后，将请求转发给到http:127.0.0.1:8881，然后拿到响应的结果，返回给到浏览器端。</span>
    <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">&quot;http://127.0.0.1:8882/getInfo&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>新建 <code>a.js</code> 创建 HTTP 服务器，服务地址<code>http:127.0.0.1:8881</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;http&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;fs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
http
  <span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;Content-Type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;text/plain;charset=utf-8&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 发送请求到另一台服务器（目标服务器来获取内容）</span>
    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&quot;目标服务器返回的内容&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8881</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Server running at http:127.0.0.1:8881&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>新建<code>b.js</code>，创建 HTTP 服务器，服务地址<code>http:127.0.0.1:8882</code>，这个地址返回<code>index.html</code>页面。</li></ul><blockquote><p>然后<code>index.html</code>页面发送 Ajax 请求到<code>http://127.0.0.1:8882/getInfo</code> ，这个服务收到请求后，会发送请求到目标服务器<code>http://127.0.0.1:8881</code> 获取响应内容，然后将获取到的内容响应到浏览器端</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;http&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;fs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 需要 npm install axios命令在当前目录下安装axios包</span>
<span class="token keyword">const</span> axios <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;axios&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

http
  <span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获以url路径</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 读取文件内容</span>
      <span class="token keyword">const</span> html <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">&quot;./index.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&quot;Content-Type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;text/html;charset=utf-8&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 发送请求到另一台服务器（目标服务器来获取内容）</span>
      axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;http://127.0.0.1:8881&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 将目标服务器响应的内容作为响应内容返回</span>
        response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8882</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Server running at http:127.0.0.1:8882&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、xhr-对象的属性" tabindex="-1"><a class="header-anchor" href="#四、xhr-对象的属性" aria-hidden="true">#</a> 四、XHR 对象的属性</h2><p>深入浅出 XHR 对象的属性：responseType 和 response 属性、timeout 属性、withCredentials 属性</p><h3 id="_1、responsetype-、esponsetext、-response-属性" tabindex="-1"><a class="header-anchor" href="#_1、responsetype-、esponsetext、-response-属性" aria-hidden="true">#</a> 1、responseType 、esponseText、 response 属性</h3><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">responseType</td><td style="text-align:left;">属性值是一个枚举字符串值，用于指定响应中包含的数据类型。 其常用的类型有：<code>text</code>、<code>json</code>。 如果没有指定，则默认值为 <code>text</code> 文本类型</td></tr><tr><td style="text-align:left;">response</td><td style="text-align:left;">用于返回响应的正文，返回的类型为<code>responseType</code>指定的类型</td></tr><tr><td style="text-align:left;">esponseText</td><td style="text-align:left;">用来返回响应的正文，其接受的内容为文本形式。 所以只有在没有设置 <code>responseType</code> 或者 <code>responseType = &quot;&quot;</code> 或 <code>&quot;text&quot;</code> 的时候才能使用</td></tr></tbody></table><p>提示：</p>`,124),J=n("code",null,"response",-1),T=n("code",null,"responseText",-1),N=n("code",null,"responseType",-1),A={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/responseType",target:"_blank",rel:"noopener noreferrer"},C=p(`<p><strong>代码演示</strong></p><p>如果<code>xhr.responseType=&#39;json&#39;</code>，则 <code>xhr.response</code> 的返回值是经过 json 解析后的 js 对象。</p><blockquote><p>所以如果返回内容不是 json 格式的，则返回值为 <code>null</code></p></blockquote><ul><li><code>server.js</code> 创建 HTTP 服务</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;http&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
http
  <span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;Content-Type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;text/plain;charset=utf-8&quot;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&quot;Access-Control-Allow-Origin&quot;</span><span class="token operator">:</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">{&quot;username&quot;:&quot;icoding&quot;,&quot;age&quot;:12}</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//  response.end(&#39;abc&#39;);</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8885</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Server running at http://127.0.0.1:8885&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">&quot;http://127.0.0.1:8885&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果服务端响应内容不符合JSON格式,则最后的结果为null</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 指定接受过来的响应的数据类型，如果为json字符串，则收到的值为json解析后的js对象</span>
xhr<span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token string">&quot;json&quot;</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/image-20230305021720201.bcac2446.png" alt="image-20230305021720201"></p><h3 id="_2、timeout-属性" tabindex="-1"><a class="header-anchor" href="#_2、timeout-属性" aria-hidden="true">#</a> 2、timeout 属性</h3><p><strong><code>timeout</code></strong> 的值是 是一个无符号长整型数（正整数），代表着一个请求在被自动终止前所消耗的毫秒数。也就是说在规定时间内请求发出去还没有响应，则取消请求。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">//  超时时间为10ms</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>timeout</code>的默认值为 0，意味着没有超时（不设置 timeout 属性，就没有超时一说）</li><li><strong><code>timeout</code></strong> 一般在调用<code>open()</code>方法之后且在调用<code>send()</code>方法之前设置。</li><li>timeout 属性常于<code>timeout</code>事件结合使用，在超时后，就会触发<code>timeout</code>事件，我们可以在<code>timeout</code>事件中来做相关处理</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> url <span class="token operator">=</span>
  <span class="token string">&quot;https://www.fastmock.site/mock/6ec78e345df340241e1f5043f0167833/icode/test&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">ontimeout</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;timeout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span> <span class="token comment">// 请求超过1s还没响应，则取消请求</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、withcredentials-属性" tabindex="-1"><a class="header-anchor" href="#_3、withcredentials-属性" aria-hidden="true">#</a> 3、withCredentials 属性</h3><p><code>withCredentials</code> 属性：指定<strong>Ajax 跨域</strong>请求是要不要携带 cookie 等。</p><blockquote><p>使用 Ajax 发送请求，默认情况下：</p></blockquote><ul><li>同域时，会携带 Cookie</li><li>跨域时，不会携带 Cookie</li></ul><p>同时需要设置 <code>xhr.withCredentials = true;</code> ，但最终能否成功跨域携带 Cookie 还要看服务器是否同意，服务器端默认是不同意的。</p><ul><li>如果在同域请求时，设置<code>xhr.withCredentials = true;</code> 会抛出错误</li><li>如果需要成功携带 Cookie 服务端还需要以下两个设置。</li></ul><p><strong>服务端的设置</strong></p><ul><li>服务端必需要设置<code>Access-Control-Allow-Origin</code>，告诉浏览器允许跨域，而且这个值必须指定域名，不能设置为 <code>*</code></li><li>在响应头中，<code>Access-Control-Allow-Credentials</code>这个值也要设置为<code>true</code></li></ul><p><strong>代码演示</strong></p><p>新建<code>index.html</code>页面，代码如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> url <span class="token operator">=</span>
  <span class="token string">&quot;https://www.fastmock.site/mock/6ec78e345df340241e1f5043f0167833/icode/users/login&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//  允许Ajax跨域请求时携带Cookie，如果把这里去掉，则请求时，请求头中没有Cookie信息</span>
xhr<span class="token punctuation">.</span>withCredentials <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&quot;123456&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>温馨提示：</p><p>在测试这个功能时，建议使用 Firfox（火孤）浏览器，因为 Chrome 80 版本以上的浏览器中仍然在请求头中没有携带 Cookie。原因在于 Chrome 80 以后 SameSite 的默认值为 Lax，导致跨域 Cookie 传输收到限制，在此之前默认值为 none。</p><blockquote><p>此处内容为后端人员需要解决的，所以不讲解（网上也有现成的答案，有兴趣自已了解）</p></blockquote><h2 id="五、xhr-对象的方法" tabindex="-1"><a class="header-anchor" href="#五、xhr-对象的方法" aria-hidden="true">#</a> 五、XHR 对象的方法</h2><p>深入浅出 XHR 对象的方法：<code>abort()</code> 方法、<code>setRequestHeader()</code> 方法</p><h3 id="_1、abort-方法" tabindex="-1"><a class="header-anchor" href="#_1、abort-方法" aria-hidden="true">#</a> 1、abort() 方法</h3><ul><li>如果该请求已被发出，<code>XMLHttpRequest.abort()</code> 方法将终止该请求</li><li>需要<code>send()</code>方法发送请求完之后再调用<code>abort()</code>方法</li><li><code>abort()</code>方法一般与<code>abort</code>事件一起配合使用</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> url <span class="token operator">=</span>
  <span class="token string">&quot;https://www.fastmock.site/mock/6ec78e345df340241e1f5043f0167833/icode/test&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// abort事件，在调用abort方法时，触发</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">onabort</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;abort&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 需要在发送完请求之后来调用 abort() 方法，即：发送完请求后，立马就取消了</span>
<span class="token comment">// abort() 方法用来终止当前请求</span>
<span class="token comment">// 请完成后，马上又终止了请求</span>
xhr<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、setrequestheader-方法" tabindex="-1"><a class="header-anchor" href="#_2、setrequestheader-方法" aria-hidden="true">#</a> 2、setRequestHeader 方法</h3><p><code>XMLHttpRequest.setRequestHeader()</code> 是设置 HTTP 请求头部的方法。</p><blockquote><p>此方法必须在<code>open()</code>方法和 <code>send()</code> 之间调用。</p></blockquote><p><strong>语法</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// header 属性的名称   value属性的值</span>
xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span>header<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,35),R={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/setRequestHeader",target:"_blank",rel:"noopener noreferrer"},H=n("p",null,[s("我们学习"),n("code",null,"setRequestHeader()"),s("主要是为了设置"),n("code",null,"Content-Type"),s("的属性值，在请求中，"),n("code",null,"Content-Type"),s(" 主要是告诉服务器实际发送的数据类型，其值为 MIME 类型。")],-1),L={href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types",target:"_blank",rel:"noopener noreferrer"},P=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> url <span class="token operator">=</span>
  <span class="token string">&quot;https://www.fastmock.site/mock/6ec78e345df340241e1f5043f0167833/icode/users/login&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*
    前后端通信时，需要协商好发送的数据类型（参数），默认不设置&quot;Content-Type&quot;属性时，其值为&quot;text/plain&quot;类型。但是响应端https://www.fastmock.site/.....是以JSON格式来处理接受的参数，所以不设置就会造成数据出错，拿不到结果。
*/</span>
xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="六、xhr-对象的事件" tabindex="-1"><a class="header-anchor" href="#六、xhr-对象的事件" aria-hidden="true">#</a> 六、XHR 对象的事件</h2><p>深入浅出 XHR 对象的 load 事件、error 事件、abort 事件、timeout 事件，这些事件都需要会用。</p><p>XHR 常用的事件有</p><table><thead><tr><th style="text-align:left;">事件</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">loadstart</td><td style="text-align:left;">当调用<code>send()</code>函数，发出请求时触发</td></tr><tr><td style="text-align:left;">load</td><td style="text-align:left;">当请求完成（成功）时触发</td></tr><tr><td style="text-align:left;">loadend</td><td style="text-align:left;">请求结束时触发，无论请求成功 ( <code>load</code>) 还是失败 (<code>abort</code>) 或 （<code>error</code>)</td></tr><tr><td style="text-align:left;">error</td><td style="text-align:left;">当请求或网络错误时触发</td></tr><tr><td style="text-align:left;">timeout</td><td style="text-align:left;">当请求超时时触发</td></tr><tr><td style="text-align:left;">abort</td><td style="text-align:left;">当调用 abort 方 法，终止请求时触发</td></tr><tr><td style="text-align:left;">progress</td><td style="text-align:left;">当服务器响应数据时开始周期性触发</td></tr></tbody></table><p>注：</p><p>对任何请求，浏览器只会触发<code>load</code>、<code>timeout</code>、<code>abort</code>、<code>error</code>事件中的一个</p>`,7),E={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/abort_event",target:"_blank",rel:"noopener noreferrer"},M=p(`<h3 id="_1、load、loadstart、loadend-事件" tabindex="-1"><a class="header-anchor" href="#_1、load、loadstart、loadend-事件" aria-hidden="true">#</a> 1、load、loadstart、loadend 事件</h3><p><code>load</code>事件：用于响应数据成功时触发，相当于 <code>readyState === 4</code>时，才会触发。</p><blockquote><p>所以我们可以用 load 事件代替 readystatechange 监听事件，处理响应。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> url <span class="token operator">=</span>
  <span class="token string">&quot;https://www.fastmock.site/mock/6ec78e345df340241e1f5043f0167833/icode/test&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//   xhr.onreadystatechange = function () {</span>
<span class="token comment">//     if (xhr.readyState !== 4) return;</span>
<span class="token comment">//     if((xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300) || xhr.status === 304 ) {</span>
<span class="token comment">//       console.log(xhr.response);</span>
<span class="token comment">//     }</span>
<span class="token comment">//   };</span>

<span class="token comment">// 用onload代替onreadystatechange,代码如下</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>对比 load、loadstart、loadend 事件</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> url <span class="token operator">=</span>
  <span class="token string">&quot;https://www.fastmock.site/mock/6ec78e345df340241e1f5043f0167833/icode/test&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 当调用send()函数，发出请求时触发</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">onloadstart</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;loadstart&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 当请求完成（成功）时触发</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;load&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 请求结束时触发，无论请求成功 (load) 还是失败 (abort) 或 （error)</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">onloadend</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;loadend&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、error-事件" tabindex="-1"><a class="header-anchor" href="#_2、error-事件" aria-hidden="true">#</a> 2、error 事件</h3><p>error 事件：请求发生错误时触发</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// url地址中的site，错写成了sit</span>
<span class="token keyword">const</span> url <span class="token operator">=</span>
  <span class="token string">&quot;https://www.fastmock.sit/mock/6ec78e345df340241e1f5043f0167833/icode/test&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 请求发生错误时触发，比如上面的url地址错误</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、abort-事件" tabindex="-1"><a class="header-anchor" href="#_3、abort-事件" aria-hidden="true">#</a> 3、abort 事件</h3><p>abort 事件：调用 <code>abort()</code> 终止请求时触发</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> url <span class="token operator">=</span>
  <span class="token string">&quot;https://www.fastmock.site/mock/6ec78e345df340241e1f5043f0167833/icode/test&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;load&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 当调用abort方法终止请求时触发</span>
xhr<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;abort&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;abort&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 调用 abort() 方法终止请求</span>
xhr<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、timeout-事件" tabindex="-1"><a class="header-anchor" href="#_4、timeout-事件" aria-hidden="true">#</a> 4、timeout 事件</h3><p>timeout 事件：当请求超时后触发</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> url <span class="token operator">=</span>
  <span class="token string">&quot;https://www.fastmock.site/mock/6ec78e345df340241e1f5043f0167833/icode/test&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">ontimeout</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;timeout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span> <span class="token comment">// 请求超过1s还没响应，则取消请求</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、progress-事件" tabindex="-1"><a class="header-anchor" href="#_5、progress-事件" aria-hidden="true">#</a> 5、progress 事件</h3><p><code>progress</code> 事件会在请求接收到数据的时候被周期性触发。</p><p>在 <code>progress</code> 事件的事件对象（Event）上存在以下三个重要的属性，可以用来显示资源的下载进度。</p><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">lengthComputable</td><td style="text-align:left;">只读属性，是一个布尔值 表示底层流程将需要完成的总工作量和已经完成的工作量是否可以计算。换句话说，它告诉我们进度是否可以被测量</td></tr><tr><td style="text-align:left;">loaded</td><td style="text-align:left;">只读属性，是一个正整数，表示底层流程已经执行的工作总量</td></tr><tr><td style="text-align:left;">total</td><td style="text-align:left;">只读属性，是一个正整数，表示正在执行的底层流程的工作总量。（需要在响应头中携带<code>Content-Length</code>字段，total 相当于是读取这个字段的信息</td></tr></tbody></table><p>代码演示</p><p>在请求资源时，最好弄一张大的图片，以免因为加载内容太小而看不到效果。同时在控制台把网速调慢和禁用缓存，否则直接从缓存读取或网速过快，也看不到进度效果。</p><p><img src="https://www.arryblog.com/assets/img/image-20230306192845917.9994aad7.png" alt="image-20230306192845917"></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 请求地址</span>
<span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">&quot;./bg.jpg&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 创建xhr对象</span>
<span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 响应成功的操作</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 成功相关的操作可以自己设置</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 数据响应过程中的进度情况</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">onprogress</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 如果进度可以被测量</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>lengthComputable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取当前已执行的工作总量</span>
    <span class="token keyword">const</span> loaded <span class="token operator">=</span> e<span class="token punctuation">.</span>loaded<span class="token punctuation">;</span>
    <span class="token comment">// 获取响应数据的工作总量</span>
    <span class="token keyword">const</span> total <span class="token operator">=</span> e<span class="token punctuation">.</span>total<span class="token punctuation">;</span>
    <span class="token comment">// 计算当前的工作进程（百分比）</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;图片加载进度:&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>loaded <span class="token operator">/</span> total<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;%&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 准备发送</span>
xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 正式发送</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/image-20230306193126800.4017a571.png" alt="image-20230306193126800"></p><h3 id="_6、显示图片加载进度" tabindex="-1"><a class="header-anchor" href="#_6、显示图片加载进度" aria-hidden="true">#</a> 6、显示图片加载进度</h3><p><img src="https://www.arryblog.com/assets/img/GIF2023-3-620-07-28.59f153f1.gif" alt="GIF2023-3-620-07-28"></p><ul><li>html+css 布局</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
  <span class="token selector">html,
  body</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">body</span> <span class="token punctuation">{</span>
    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
    <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.progress</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 80%<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.progress .progress-bar</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 0%<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
    <span class="token property">line-height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>
    <span class="token property">transition</span><span class="token punctuation">:</span> all 0.2<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>progress<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>progress-bar<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>js 实现加载进度条</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> progressEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;.progress&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 获取DOM元素</span>
<span class="token keyword">let</span> bar <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;.progress-bar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 请求地址</span>
<span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">&quot;./bg.jpg&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 创建xhr对象</span>
<span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 响应成功的操作</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 读取响应过来的数据</span>
  <span class="token keyword">let</span> blob <span class="token operator">=</span> xhr<span class="token punctuation">.</span>response<span class="token punctuation">;</span>
  <span class="token comment">// 根据blob创建对象的URL</span>
  <span class="token keyword">let</span> src <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 创建图片标签</span>
  <span class="token keyword">let</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;img&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 给图片添加地址</span>
  img<span class="token punctuation">.</span>src <span class="token operator">=</span> src<span class="token punctuation">;</span>
  <span class="token comment">// 将图片添加到页面中</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 将进度掉隐藏</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>progressEl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>progressEl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    progressEl <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    bar <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 数据响应过程中的进度情况</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">onprogress</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 如果进度可以被测量</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>lengthComputable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取当前已执行的工作总量</span>
    <span class="token keyword">const</span> loaded <span class="token operator">=</span> e<span class="token punctuation">.</span>loaded<span class="token punctuation">;</span>
    <span class="token comment">// 获取响应数据的工作总量</span>
    <span class="token keyword">const</span> total <span class="token operator">=</span> e<span class="token punctuation">.</span>total<span class="token punctuation">;</span>
    <span class="token comment">// 计算当前的工作进程（百分比）</span>
    <span class="token keyword">let</span> progress <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>loaded <span class="token operator">/</span> total<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    bar<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> progress <span class="token operator">+</span> <span class="token string">&quot;%&quot;</span><span class="token punctuation">;</span>
    bar<span class="token punctuation">.</span>innerText <span class="token operator">=</span> progress <span class="token operator">+</span> <span class="token string">&quot;%&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 将接受的数据类型设置为blob,一个包含二进制数据的 Blob 对象</span>
xhr<span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token string">&quot;blob&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 准备发送</span>
xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 正式发送</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：</p><p><strong><code>URL.createObjectURL()</code></strong> 静态方法会创建一个 URL 字符串，表示参数中给出的对象的 URL</p><h2 id="七、ajax-的简单封装" tabindex="-1"><a class="header-anchor" href="#七、ajax-的简单封装" aria-hidden="true">#</a> 七、Ajax 的简单封装</h2><p>接下来就是 Ajax 的进阶内容的学习了，深入浅出 Ajax 封装，接下来在项目实践中就可以轻松的用起来</p><h3 id="_1、promise-简单封装-ajax" tabindex="-1"><a class="header-anchor" href="#_1、promise-简单封装-ajax" aria-hidden="true">#</a> 1、Promise 简单封装 Ajax</h3><p>利用 Promise 来简单封装下 Ajax 请求，关于更完善更复杂的封装后面再讲。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token parameter">method</span> 表示请求的方法，如get或post
 * <span class="token keyword">@param</span> <span class="token parameter">url</span> 请求的地址
 * <span class="token keyword">@param</span> <span class="token parameter">body</span> 如果为post请求，传入的请求体数据，需要传入JSON格式
 */</span>
<span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token parameter">method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> body <span class="token operator">=</span> <span class="token keyword">null</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 返回Promise对象</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    xhr<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;load&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&quot;请求失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 响应过来的数据类型为json格式接受</span>
    xhr<span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token string">&quot;json&quot;</span><span class="token punctuation">;</span>
    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
    xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 发送JSON格式数据</span>
    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> ajax<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、ajax-并发问题" tabindex="-1"><a class="header-anchor" href="#_2、ajax-并发问题" aria-hidden="true">#</a> 2、Ajax 并发问题</h3><p>利用 <code>Promise.all</code> 来处理多个 Ajax 并发的问题</p><blockquote><p>相关伪代码如下：</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> p1<span class="token operator">=</span><span class="token function">ajax</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> p2<span class="token operator">=</span><span class="token function">ajax</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span>url<span class="token punctuation">)</span>

<span class="token keyword">const</span> p<span class="token operator">=</span>Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">[</span>data1<span class="token punctuation">,</span>data2<span class="token punctuation">]</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data1<span class="token punctuation">)</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 以上针对情况是在需要拿到p1和p2的结果后，才能做后续相关操作</span>
<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">&quot;module&quot;</span><span class="token operator">&gt;</span>
  <span class="token keyword">import</span> ajax <span class="token keyword">from</span> <span class="token string">&quot;./ajax.js&quot;</span><span class="token punctuation">;</span>
  <span class="token comment">// get 请求</span>
  <span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token function">ajax</span><span class="token punctuation">(</span>
    <span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;https://www.fastmock.site/mock/6ec78e345df340241e1f5043f0167833/icode/test&quot;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// post 请求</span>
  <span class="token keyword">const</span> p2 <span class="token operator">=</span> <span class="token function">ajax</span><span class="token punctuation">(</span>
    <span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;https://www.fastmock.site/mock/6ec78e345df340241e1f5043f0167833/icode/users/login&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;{&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;123456&quot;}&#39;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>data1<span class="token punctuation">,</span> data2<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="八、ajax-的实践与应用" tabindex="-1"><a class="header-anchor" href="#八、ajax-的实践与应用" aria-hidden="true">#</a> 八、Ajax 的实践与应用</h2><p>深入浅出 Ajax 在实际项目开发中的应用场景和具体实践</p><h3 id="_1、搜索自动补全" tabindex="-1"><a class="header-anchor" href="#_1、搜索自动补全" aria-hidden="true">#</a> 1、搜索自动补全</h3><p><img src="https://www.arryblog.com/assets/img/GIF2023-3-622-29-29.3bf12124.gif" alt="GIF2023-3-622-29-29"></p><p>实现思路</p><ul><li>给输入框绑定<code>input</code>事件,然后在事件中判断文本框输入的内容。如果内容不为空，则把输入的内容作为查询的参数拼接到请求的 url 地址上，然后利用 Ajax 向后端发送 get 请求。</li><li>根据后端返回的数据来创建 DOM，并插入到页面中。</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
  <span class="token selector">.search</span> <span class="token punctuation">{</span>
    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
    <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>
    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.search-input</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>search<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>search-input<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>list<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// 导入模块</span>
  <span class="token keyword">import</span> ajax <span class="token keyword">from</span> <span class="token string">&quot;./ajax.js&quot;</span><span class="token punctuation">;</span>
  <span class="token comment">// 获取DOM</span>
  <span class="token keyword">const</span> list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;.list&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> searchInput <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;.search-input&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 请求地址</span>
  <span class="token keyword">let</span> url <span class="token operator">=</span>
    <span class="token string">&quot;https://www.fastmock.site/mock/6ec78e345df340241e1f5043f0167833/icode/search/keyword&quot;</span><span class="token punctuation">;</span>
  <span class="token comment">// 监听文本框input输入事件</span>
  searchInput<span class="token punctuation">.</span><span class="token function-variable function">oninput</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取内容，并去除字符串前后的空格</span>
    <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 如果输入内容不为空，则发起Ajax请求</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 将搜索的参数拼接在url后面，发送到服务端</span>
      <span class="token keyword">let</span> newUrl <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?keyword=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
      <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span> newUrl<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> data <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
        <span class="token comment">// 根据返回的数据，创建DOM，添加到页面中</span>
        <span class="token function">render</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      list<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// 根据请求的数据创建DOM，添加到页面</span>
  <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> html <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    list<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 重新赋值前，先将原来的内容清空</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">{</span> keyword <span class="token punctuation">}</span> <span class="token keyword">of</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      html <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;li&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>keyword<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/li&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    list<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> html<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想要降低请求的频率，可以结合之间讲的防抖函数，在规定的时间内再次触发 input 事件，则重新计时。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * debounce 防抖函数
 * <span class="token keyword">@param</span> <span class="token parameter">fn</span> 事件处理函数
 * <span class="token keyword">@param</span> <span class="token parameter">delay</span> 延迟时间
 */</span>
<span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay <span class="token operator">=</span> <span class="token number">200</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token comment">// 以下是每次需要执行的代码</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 开启定时器</span>
    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
      timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 这里很多人有争议，要不要置空</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果上一次请求没有响应回来前，又触发了事件，则把上一次请求取消，重新发送请求</p><p>关注以下代码 <code>--------------------------------</code> 部分内容</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> ajax <span class="token keyword">from</span> <span class="token string">&quot;./ajax.js&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 获取输入框</span>
<span class="token keyword">const</span> searchInput <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;.search-input&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 获取ul列表</span>
<span class="token keyword">const</span> list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;.list&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 请求地址</span>
<span class="token keyword">let</span> url <span class="token operator">=</span>
  <span class="token string">&quot;https://www.fastmock.site/mock/6ec78e345df340241e1f5043f0167833/icode/search/keyword&quot;</span><span class="token punctuation">;</span>

<span class="token comment">//---------------------------------</span>
<span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 保证xhr对象</span>
<span class="token keyword">let</span> done <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 当前没有请求</span>
<span class="token comment">// --------------------------------</span>

<span class="token comment">// 给输入框添加input事件</span>
searchInput<span class="token punctuation">.</span><span class="token function-variable function">oninput</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 获取输入框中内容，并去掉前后的空格</span>
  <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// --------------------------------</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    xhr<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  done <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 当前有请求</span>
  <span class="token comment">// --------------------------------</span>

  <span class="token comment">// 如果输入框中的内容不为空，把对应内容作为参数拼接到URL后面，发送到服务端</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> newUrl <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?keyword=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 监听事件</span>
    xhr<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;load&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 响应成功</span>
        <span class="token comment">// --------------------------------</span>
        done <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 请求响应回来，标识目前没有请求</span>
        <span class="token comment">// --------------------------------</span>
        <span class="token function">render</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 响应失败</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 统一响过来的数据只是JSON类型，并把他转换成JS对象返回</span>
    xhr<span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token string">&quot;json&quot;</span><span class="token punctuation">;</span>
    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span> newUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    list<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 用来渲染DOM</span>
<span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> html <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">{</span> keyword <span class="token punctuation">}</span> <span class="token keyword">of</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    html <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;li&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>keyword<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/li&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  list<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> html<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、动态加载二级菜单" tabindex="-1"><a class="header-anchor" href="#_2、动态加载二级菜单" aria-hidden="true">#</a> 2、动态加载二级菜单</h3><ul><li>HTML、CSS 布局</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
  <span class="token selector">html,
  body,
  ul</span> <span class="token punctuation">{</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.menu</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
    <span class="token property">margin-left</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>
    <span class="token property">margin-top</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
    <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #ddd<span class="token punctuation">;</span>
    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.menu ul li</span> <span class="token punctuation">{</span>
    <span class="token property">padding-left</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
    <span class="token property">line-height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>

    <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.menu ul li:hover</span> <span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> tomato<span class="token punctuation">;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.menu ul li:hover .content</span> <span class="token punctuation">{</span>
    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.menu .content</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
    <span class="token property">min-height</span><span class="token punctuation">:</span> 250px<span class="token punctuation">;</span>
    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
    <span class="token property">left</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
    <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> #ddd<span class="token punctuation">;</span>
    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> 0 10px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.menu .content p</span> <span class="token punctuation">{</span>
    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.menu .content p img</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
    <span class="token property">margin-right</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.menu .content p a</span> <span class="token punctuation">{</span>
    <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>menu<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 
        &lt;ul&gt;
            &lt;li&gt;
                一级1
                &lt;div class=&quot;content&quot;&gt;
                    &lt;img src=&quot;./loading-svg/loading-balls.svg&quot; alt=&quot;&quot; /&gt;
                &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;一级2&lt;/li&gt;
            &lt;li&gt;一级3&lt;/li&gt;
            &lt;li&gt;一级4&lt;/li&gt;
            &lt;li&gt;一级5&lt;/li&gt;
        &lt;/ul&gt; 
	--&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JS 实现原理</p><p>第一步：实现一级菜单</p><ul><li><p>利用 Ajax 加载一级菜单数据，然后利用数据渲染出一级菜单。</p></li><li><p>一级菜单</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;li&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>标签身上有两个自定属性，分别为</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>data-id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>和</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>data-done
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>data-id</code>用来保存一级菜单的栏目 id，后面根据这个 id 来确定需要获取的二级菜单数据</li><li><code>data-done</code>属性值为 true 表示 Ajax 请求加载过数据，不需要再次发送请求。如果没有这个属性则表示没有加载过数据，需要发送 Ajax 请求来加载二级菜单数据</li></ul></li></ul><p>第二步：实现动态显示二级菜单</p><ul><li>当利用事件代理来处理，当滑动到<code>li</code>时，先获取<code>data-done</code>属性，如果没有这个属性，则获取 li 身上的<code>data-id</code>属性，来发送 Ajax 请求。</li><li>如果没有<code>data-done</code>属性，则说明之前发送 Ajax 请求到了数据，不需要再发送 Ajax 请求。</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// 导入模块</span>
  <span class="token keyword">import</span> ajax <span class="token keyword">from</span> <span class="token string">&quot;./ajax.js&quot;</span><span class="token punctuation">;</span>
  <span class="token comment">// 获取DOM节点（菜单）</span>
  <span class="token keyword">const</span> menuEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;.menu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 发送Ajax加载一级菜单</span>
  <span class="token keyword">const</span> url <span class="token operator">=</span>
    <span class="token string">&quot;https://www.fastmock.site/mock/6ec78e345df340241e1f5043f0167833/icode/menu&quot;</span><span class="token punctuation">;</span>
  <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// Ajax加载成功的数据</span>
      <span class="token keyword">let</span> data <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
      <span class="token comment">// 拼接html</span>
      <span class="token keyword">let</span> html <span class="token operator">=</span> <span class="token string">&quot;&lt;ul&gt;&quot;</span><span class="token punctuation">;</span>
      <span class="token comment">// for...of遍历</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        html <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;li data-id=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token punctuation">[</span><span class="token string">&quot;category_id&quot;</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token punctuation">.</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">
                        &lt;div class=&quot;content&quot;&gt;
                            &lt;img src=&quot;./loading-svg/loading-bars.svg&quot; alt=&quot;&quot; /&gt;
    &lt;/div&gt;
    &lt;/li&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      html <span class="token operator">+=</span> <span class="token string">&quot;&lt;/ul&gt;&quot;</span><span class="token punctuation">;</span>
      menuEl<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> html<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment">// 处理鼠标滑上一级菜单，显示对应二级菜单</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 利用事件委托</span>
      menuEl<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;mouseover&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> target <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">;</span>
        <span class="token keyword">const</span> tagName <span class="token operator">=</span> target<span class="token punctuation">.</span>tagName<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> url <span class="token operator">=</span>
          <span class="token string">&quot;https://www.fastmock.site/mock/6ec78e345df340241e1f5043f0167833/icode/menu/&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tagName <span class="token operator">===</span> <span class="token string">&quot;li&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 判断li身上是的data-done是否为true，如果为true表示已经加载过了，不再发ajax请求</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>target<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 把数据做为参数传过去</span>
            <span class="token keyword">let</span> newUrl <span class="token operator">=</span> url <span class="token operator">+</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
            <span class="token comment">// 发起Ajax请求</span>
            <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span> newUrl<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
              <span class="token comment">// 添加自定义属性 data-done=true</span>
              target<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>done <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
              <span class="token comment">// 读取Ajax加载的数据，来构建DOM</span>
              <span class="token keyword">let</span> data <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
              <span class="token keyword">const</span> conEl <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;.content&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token keyword">let</span> html <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
              <span class="token comment">// for...of遍历</span>
              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">{</span> productName<span class="token punctuation">,</span> productImg <span class="token punctuation">}</span> <span class="token keyword">of</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                html <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;p&gt;
                                &lt;img src=&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>productImg<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; /&gt;
                                &lt;a href=&quot;&quot;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>productName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/a&gt; 
    &lt;/p&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
              conEl<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> html<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、get-请求实现搜索课程" tabindex="-1"><a class="header-anchor" href="#_3、get-请求实现搜索课程" aria-hidden="true">#</a> 3、GET 请求实现搜索课程</h3><p><img src="https://www.arryblog.com/assets/img/GIF2023-3-3-1-04-53.a3b19a36.gif" alt="GIF2023-3-3 1-04-53"></p><ul><li>新建<code>index.html</code>页面，创建 form 表单，然后选择 get 方式发送请求</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!--
action：表单提交后，发送请求的地址,请求发送到search.html搜索页
method:表示请求的方式，是以get方式发送请求
--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./search.html<span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>get<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>keyword<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>搜索<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：</p><ul><li>以上 input 标签中一定要添加 name 属性，表单中的数据才能以键值对的形式出现在提交的地址栏中。</li><li>所以 GET 提交，action 中的地址后边不需要通过添加问号和名值对的方式来携带数据</li></ul><blockquote><p>因为搜索按扭的内容不需要出现在地址栏中，所以不用加 name 属性。</p></blockquote><ul><li>新建 <code>search.html</code>页面，用来显示搜索到的课程</li></ul><blockquote><p>先获取地址栏中传过来的<code>keyword = xxx</code>参数，然后根据这个参数，再一次发送 Ajax 请求，向后端请求数据，拿到数据，开始根据数据创建 DOM 插入到页面。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导入模块</span>
<span class="token keyword">import</span> ajax <span class="token keyword">from</span> <span class="token string">&quot;./ajax.js&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 获取传递过来的keyword参数对应的值</span>
<span class="token keyword">let</span> url <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">;</span>
<span class="token keyword">const</span> keyword <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;=&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 发送Ajax请求</span>
<span class="token keyword">let</span> newUrl <span class="token operator">=</span>
  <span class="token string">&quot;https://www.fastmock.site/mock/6ec78e345df340241e1f5043f0167833/icode/search&quot;</span><span class="token punctuation">;</span>
<span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>newUrl<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?keyword=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>keyword<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">render</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 渲染函数</span>
<span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 我们可以将所有内容先添加到文档碎片</span>
  <span class="token keyword">const</span> fragment <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createDocumentFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// for(let item of data){</span>
  <span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> h3 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;h3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;img&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  h3<span class="token punctuation">.</span>innerText <span class="token operator">=</span> data<span class="token punctuation">.</span>courseName<span class="token punctuation">;</span>
  p<span class="token punctuation">.</span>innerText <span class="token operator">=</span> data<span class="token punctuation">.</span>desc<span class="token punctuation">;</span>
  img<span class="token punctuation">.</span>src <span class="token operator">=</span> data<span class="token punctuation">.</span>imageUrl<span class="token punctuation">;</span>

  div<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>
  div<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>h3<span class="token punctuation">)</span><span class="token punctuation">;</span>
  div<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>

  fragment<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// }</span>

  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="九、axios" tabindex="-1"><a class="header-anchor" href="#九、axios" aria-hidden="true">#</a> 九、Axios</h2><p>深入浅出 Axios 是什么，基本用法，应用实践。</p><h3 id="_1、axios-是什么" tabindex="-1"><a class="header-anchor" href="#_1、axios-是什么" aria-hidden="true">#</a> 1、Axios 是什么</h3><ul><li>axios 是一个基于 Promise 的 HTTP 库，可以用在浏览器 和 <code>node.js</code> 中</li><li>可理解为 axios 是一个第三方 Ajax 库，这个库是基于 Promise 的</li></ul>`,76),F={href:"https://axios-http.com/zh/docs/intro",target:"_blank",rel:"noopener noreferrer"},X=n("h3",{id:"_2、axios-的基本用法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2、axios-的基本用法","aria-hidden":"true"},"#"),s(" 2、axios 的基本用法")],-1),D=n("p",null,[s("axios 是一个第三个库，所以我们需要引入这个库才能使用。最简单的方式就是通过"),n("code",null,"<script>"),s("标签来引入对应的 "),n("code",null,"axios.js"),s(" 文件来使用。")],-1),I={href:"https://www.bootcdn.cn/",target:"_blank",rel:"noopener noreferrer"},U=p(`<p><img src="https://www.arryblog.com/assets/img/image-20230308163122765.27b7adfb.png" alt="image-20230308163122765"></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 为了提高加载速度，我们使用CDN加速服务 https://www.bootcdn.cn/ --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.bootcdn.net/ajax/libs/axios/1.3.4/axios.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>axios 的基本用法</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> p<span class="token operator">=</span><span class="token function">axios</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> p<span class="token operator">=</span><span class="token function">axios</span><span class="token punctuation">(</span>url<span class="token punctuation">[</span><span class="token punctuation">,</span>config<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*
	axios参数

	url:请求的URL
	config:为可选项,请求相关的配置信息
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>axios 函数的返回值是一个 Promise 对象，所以可以通过<code>then()</code>方法来接受响应数据</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.bootcdn.net/ajax/libs/axios/1.3.4/axios.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// 查看axios</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>axios<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 基本用法</span>
  <span class="token function">axios</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// response 响应相关的数据都在这个对象上</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用 axios 来发送 get 请求</strong></p><p>如果<code>axios</code>只传一个参数，这个参数是一个 url，则默认为 get 请求，其它相关参数会采用默认配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> url <span class="token operator">=</span>
  <span class="token string">&quot;https://www.fastmock.site/mock/6ec78e345df340241e1f5043f0167833/icode/test&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 发送ajax请求</span>
<span class="token function">axios</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// response 响应相关的信息都在response对象上</span>
  <span class="token comment">// 可以打印response,了解这个对象身上的相关属性和方法</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、config-请求配置" tabindex="-1"><a class="header-anchor" href="#_3、config-请求配置" aria-hidden="true">#</a> 3、config 请求配置</h3>`,10),G=n("code",null,"config",-1),z=n("code",null,"axios",-1),V={href:"https://axios-http.com/zh/docs/req_config",target:"_blank",rel:"noopener noreferrer"},B=p(`<blockquote><p>以下列出第个常用的来作为讲解</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// url是用于请求的服务器URL，如果第一个参数为url，这里可以不写</span>
  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&quot;https://www.fastmock.site/mock/6ec78e345df340241e1f5043f0167833/icode/users/list&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// 请求的方法</span>
  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// 自定义请求头</span>
  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">&quot;Content-Type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;application/json&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 通过请求头携带的数据,主要与get方法结合</span>
  <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">//  请求体被发送的数据，主要与&#39;PUT&#39;, &#39;POST&#39;, &#39;DELETE 和 &#39;PATCH&#39; 请求方法</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 请求超时的毫秒数,默认值 0 （永不超时）</span>
  <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>
  <span class="token comment">// 表示跨域请求时是否需要使用凭证（是否携带Cookie)  默认值false</span>
  <span class="token literal-property property">withCredentials</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token comment">// 表示浏览器将要响应的数据类型，默认值 json</span>
  <span class="token literal-property property">responseType</span><span class="token operator">:</span> <span class="token string">&quot;json&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// 浏览器专属 onUploadProgress 允许为上传处理进度事件</span>
  <span class="token function-variable function">onUploadProgress</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">progressEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 处理原生进度事件</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// onDownloadProgress 允许为下载处理进度事件</span>
  <span class="token comment">// 浏览器专属</span>
  <span class="token function-variable function">onDownloadProgress</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">progressEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 处理原生进度事件</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// \`validateStatus\` 定义了对于给定的 HTTP状态码是 resolve 还是 reject promise。</span>
  <span class="token comment">// 如果 \`validateStatus\` 返回 \`true\` (或者设置为 \`null\` 或 \`undefined\`)，</span>
  <span class="token comment">// 则promise 将会 resolved，否则是 rejected。</span>
  <span class="token function-variable function">validateStatus</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">status</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">;</span> <span class="token comment">// 默认值</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>get 请求</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.bootcdn.net/ajax/libs/axios/1.3.4/axios.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">// url是用于请求的服务器URL，如果第一个参数为url，这里可以不写</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&quot;https://www.fastmock.site/mock/6ec78e345df340241e1f5043f0167833/icode/users/list&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// url: &quot;./bg.jpg&quot;,</span>
    <span class="token comment">// 请求的方法</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// 通过请求头携带的数据,主要与get方法结合</span>
    <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 请求超时的毫秒数,默认值 0 （永不超时）</span>
    <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">5000</span><span class="token punctuation">,</span>
    <span class="token comment">// 表示跨域请求时是否需要使用凭证（是否携带Cookie)  默认值false</span>
    <span class="token literal-property property">withCredentials</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// 表示浏览器将要响应的数据类型，默认值 json</span>
    <span class="token literal-property property">responseType</span><span class="token operator">:</span> <span class="token string">&quot;json&quot;</span><span class="token punctuation">,</span>

    <span class="token comment">// onDownloadProgress 允许为下载处理进度事件</span>
    <span class="token comment">// 浏览器专属</span>
    <span class="token function-variable function">onDownloadProgress</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">progressEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 处理原生进度事件</span>
      <span class="token keyword">const</span> e <span class="token operator">=</span> progressEvent<span class="token punctuation">.</span>event<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>lengthComputable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;当前下载量:&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>loaded<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;总下载量&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>post 请求</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.bootcdn.net/ajax/libs/axios/1.3.4/axios.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">// url是用于请求的服务器URL，如果第一个参数为url，这里可以不写</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&quot;https://www.fastmock.site/mock/6ec78e345df340241e1f5043f0167833/icode/users/login&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// url: &quot;./bg.jpg&quot;,</span>
    <span class="token comment">// 设置请求头，请求发送的数据类型</span>
    <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;Content-Type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 请求的方法</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">//  请求体被发送的数据，主要与&#39;PUT&#39;, &#39;POST&#39;, &#39;DELETE 和 &#39;PATCH&#39; 请求方法</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 表示跨域请求时是否需要使用凭证（是否携带Cookie)  默认值false</span>
    <span class="token literal-property property">withCredentials</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// 表示浏览器将要响应的数据类型，默认值 json</span>
    <span class="token literal-property property">responseType</span><span class="token operator">:</span> <span class="token string">&quot;json&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、response-响应对象" tabindex="-1"><a class="header-anchor" href="#_4、response-响应对象" aria-hidden="true">#</a> 4、response 响应对象</h3><p>当请求响应回来后，相关信息保存在 response 响应对象中，响应对象的相关信息如下</p>`,8),$={href:"https://axios-http.com/zh/docs/res_schema",target:"_blank",rel:"noopener noreferrer"},W=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token comment">// \`data\` 由服务器提供的响应</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token comment">// \`status\` 来自服务器响应的 HTTP 状态码</span>
  <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>

  <span class="token comment">// \`statusText\` 来自服务器响应的 HTTP 状态信息</span>
  <span class="token literal-property property">statusText</span><span class="token operator">:</span> <span class="token string">&#39;OK&#39;</span><span class="token punctuation">,</span>

  <span class="token comment">// \`headers\` 是服务器响应头</span>
  <span class="token comment">// 所有的 header 名称都是小写，而且可以使用方括号语法访问</span>
  <span class="token comment">// 例如: \`response.headers[&#39;content-type&#39;]\`</span>
  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token comment">// \`config\` 是 \`axios\` 请求的配置信息</span>
  <span class="token literal-property property">config</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token comment">// \`request\` 是生成此响应的请求</span>
  <span class="token comment">// 在node.js中它是最后一个ClientRequest实例 (in redirects)，</span>
  <span class="token comment">// 在浏览器中则是 XMLHttpRequest 实例</span>
  <span class="token literal-property property">request</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、使用别名方式请求" tabindex="-1"><a class="header-anchor" href="#_5、使用别名方式请求" aria-hidden="true">#</a> 5、使用别名方式请求</h3><p>为了方便起见，已经为所有支持的请求方法提供了别名。</p><ul><li><code>axios.request(config)</code></li><li><code>axios.get(url[, config])</code></li><li><code>axios.delete(url[, config])</code></li><li><code>axios.head(url[, config])</code></li><li><code>axios.options(url[, config])</code></li><li><code>axios.post(url[, data[, config]])</code></li><li><code>axios.put(url[, data[, config]])</code></li><li><code>axios.patch(url[, data[, config]])</code></li></ul><blockquote><p>在使用别名方法时 <code>url</code>、<code>method</code>、<code>data</code> 这些属性都不必在配置中指定。</p></blockquote><p>axios 是别人封装好的，已经是非常成熟了，我们未来企业项目开发中也会经常用到。我们前面自己的封装的 Ajax 主要是为了学习使用，还有很多特殊情况没有考虑到，一般在实际开发中也不会真正使用。在实际开发中就使用 axios 这样成熟的库即可。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.bootcdn.net/ajax/libs/axios/1.3.4/axios.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  axios
    <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>
      <span class="token string">&quot;https://www.fastmock.site/mock/6ec78e345df340241e1f5043f0167833/icode/users/login&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token string-property property">&quot;Content-Type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token comment">// 表示跨域请求时是否需要使用凭证（是否携带Cookie)  默认值false</span>
        <span class="token comment">// withCredentials: true,</span>
        <span class="token comment">// 表示浏览器将要响应的数据类型，默认值 json</span>
        <span class="token literal-property property">responseType</span><span class="token operator">:</span> <span class="token string">&quot;json&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>关于更多内容，暂时目前不讲，因为后面的项目中经常需要和 axios 打交道，到时候在项目中深入学习，目前大家可以看官方文档自行学习。</p></blockquote><h2 id="十、fetch" tabindex="-1"><a class="header-anchor" href="#十、fetch" aria-hidden="true">#</a> 十、Fetch</h2><p>深入浅出 Fetch 是什么，基本用法，应用实践。</p><h3 id="_1、fetch-是什么" tabindex="-1"><a class="header-anchor" href="#_1、fetch-是什么" aria-hidden="true">#</a> 1、Fetch 是什么</h3><ul><li>与 Ajax 类似，Fetch 也是前后端通信的一种方式。Fetch 要比 Ajax 年轻一些</li><li>Fetch 被称为下一代 Ajax 技术（用来替代 XMLHttpRequest），内部是采用 Promise 的方式来处理数据。</li><li>API 语法简洁明了，比 XMLHttpRequest 更加简单易用</li><li>采用了模块化设计，API 分散于多个对象中（如：Response 对象，Request 对象、Header 对象）</li><li>通过数据流（Stream 对象）处理数据，可以分块读取，有利于提高网站性能，对于大文件或者网速慢的场景极为有用。</li></ul><p><strong>兼容性</strong></p>`,13),K={href:"https://caniuse.com/",target:"_blank",rel:"noopener noreferrer"},Q=p(`<p><img src="https://www.arryblog.com/assets/img/image-20230308004933138.9e906f59.png" alt="image-20230308004933138"></p><p>Fetch 缺点</p><ul><li>Fetch 的兼容性没有 Ajax 好</li><li>Fetch 原生没有提供 abort 终止请求方式、timeout 请求超时方式，如果需要用到这些时，需要自己来实现。</li></ul><h3 id="_2、fetch-的基本用法" tabindex="-1"><a class="header-anchor" href="#_2、fetch-的基本用法" aria-hidden="true">#</a> 2、Fetch 的基本用法</h3><p>全局的 <code>fetch()</code> 方法用于发起获取资源的请求。它返回一个 promise，这个 promise 会在请求响应被 resolve，并传回 <code>Response</code>对象。</p><blockquote><p>失败时会被 reject，并传回<code>TypeError</code></p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// fetch 是一个全局函数，是真实存在的</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fetch<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ajax 是不存在的</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ajax<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>语法</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 处理响应回来的数据</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*
	p 为Promise对象,通过then方法可以接受响应后的response对象
	url  :获取资源的URL
	options: 配置对象，包括所有对请求的设置
	response：是一个Response类型的对象，呈现了对一次请求的响应数据
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>利用 fetch 发送 get 请求</strong></p><ul><li>如果<code>fetch()</code>只接受一个<code>url</code>字符串参数，则表示向该网址发送 get 请求，请求返回一个 Promise 对象</li><li>能过 Promise 的 then 方法可以得到一个 response 对象，对象的<code>status</code>属性获取返回响应的状态码，通过这个状态码可以知道响应是成功还是失败。</li><li>调用 response 对象身上的特定方法可以获取到响应回来的数据，如<code>response.json()</code>方法</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 发送Ajax请求，请求方式 get</span>
<span class="token function">fetch</span><span class="token punctuation">(</span>
  <span class="token string">&quot;https://www.fastmock.site/mock/6ec78e345df340241e1f5043f0167833/icode/test&quot;</span>
<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// res 为response对象，res.status 返回响应的状态码</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// res.json() 是一个异步操作 返回响应的数据（一个被解析为JSON格式的Promise对象）</span>
      <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 抛出错误</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;请求错误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 拿到返回的JSON数据</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 捕获错误信息</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、response-对象" tabindex="-1"><a class="header-anchor" href="#_3、response-对象" aria-hidden="true">#</a> 3、response 对象</h3>`,13),Y={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Response",target:"_blank",rel:"noopener noreferrer"},Z=p(`<p>以下是常用到的一些属性和方法</p><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">status</td><td style="text-align:left;">只读属性包含响应的状态代码，如成功为 200</td></tr><tr><td style="text-align:left;">body</td><td style="text-align:left;">body 是一个可读的流， 只能读取一次，读过之后就不让再读了</td></tr><tr><td style="text-align:left;">bodyUsed</td><td style="text-align:left;">表示 response 对象是否读取过 body 流，默认值为 false，如果读取过就变为 true</td></tr></tbody></table><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">json</td><td style="text-align:left;">接收一个 Response 流，并将其读取完成。它返回一个 Promise，Promise 的解析 resolve 结果是将文本体解析为 JSON。</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">fetch</span><span class="token punctuation">(</span>
  <span class="token string">&quot;https://www.fastmock.site/mock/6ec78e345df340241e1f5043f0167833/icode/test&quot;</span>
<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>bodyUsed<span class="token punctuation">)</span><span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 因为body流只能读一次，所以这里读了，后面就没法读</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>bodyUsed<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里拿不到数据</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/image-20230307235448956.3e432f06.png" alt="image-20230307235448956"></p><h3 id="_3、fecth-的参数配置" tabindex="-1"><a class="header-anchor" href="#_3、fecth-的参数配置" aria-hidden="true">#</a> 3、Fecth 的参数配置</h3>`,6),nn=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"属性"),n("th",{style:{"text-align":"left"}},"说明")])],-1),sn=n("tr",null,[n("td",{style:{"text-align":"left"}},"method"),n("td",{style:{"text-align":"left"}},[s("请求使用的方法，如 "),n("code",null,"GET"),s("、"),n("code",null,"POST"),s("、"),n("code",null,"PUT"),s(" 等")])],-1),an=n("tr",null,[n("td",{style:{"text-align":"left"}},"body"),n("td",{style:{"text-align":"left"}},"请求的 body(请求体) 信息，GET 方法不包含 body 信息")],-1),tn=n("td",{style:{"text-align":"left"}},"headers",-1),pn={style:{"text-align":"left"}},en={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Headers",target:"_blank",rel:"noopener noreferrer"},on=n("code",null,"Headers",-1),cn={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String",target:"_blank",rel:"noopener noreferrer"},ln=n("code",null,"ByteString",-1),un=n("tr",null,[n("td",{style:{"text-align":"left"}},"mode"),n("td",{style:{"text-align":"left"}},[s("请求的模式，如 cors"),n("code",null,"、"),s("no-cors 或者 same-origin "),n("code",null,"cors"),s("：跨域请求，且要求后端需要设置 cors 响应头 "),n("code",null,"no-cors"),s("：允许跨域，但服务端不设置 cors 响应头，如果图片、脚本、样式 "),n("code",null,"same-origin"),s("：同源请求，限制了不能跨域")])],-1),rn=n("tr",null,[n("td",{style:{"text-align":"left"}},"credentials"),n("td",{style:{"text-align":"left"}},[s("请求是否携带 Cookie，有三个值："),n("code",null,"omit"),s("、"),n("code",null,"same-origin"),s("、"),n("code",null,"include"),s(),n("code",null,"omit"),s("：缺省值，默认为该值 "),n("code",null,"same-origin"),s(": 同源, 表示同域请求才发送 cookie "),n("code",null,"include"),s("：跨域请求中需要带有 cookie 时 与 Ajax 的 withCredentials 属性一样，设置跨域请求时是否允许携带 Cookie 等，同是后端也要做相关设置")])],-1),dn=p(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> url <span class="token operator">=</span>
    <span class="token string">&quot;https://www.fastmock.site/mock/6ec78e345df340241e1f5043f0167833/icode/users/login&quot;</span><span class="token punctuation">;</span>

  <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token comment">// 请求使用的方法，如 \`GET\`、\`POST\`、\`PUT\` 等</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// post请求体携带数据，不传递就是 null,可以是键值对、JSON、FormData</span>
    <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token string">&quot;username=admin&amp;password=123456&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// 请求的头信息</span>
    <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// Form格式</span>
      <span class="token string-property property">&quot;Content-Type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;application/x-www-form-urlencoded&quot;</span><span class="token punctuation">,</span>
      <span class="token comment">// JSON格式</span>
      <span class="token comment">// &quot;Content-Type&quot;: &quot;application/json&quot;,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 请求的模式：跨域资源共享，默认值：cors 默认支持跨域</span>
    <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&quot;cors&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// 是否携带Cookie</span>
    <span class="token literal-property property">credentials</span><span class="token operator">:</span> <span class="token string">&quot;include&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;请求出错&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="十一、总结" tabindex="-1"><a class="header-anchor" href="#十一、总结" aria-hidden="true">#</a> 十一、总结</h2><p>总结本章重难点知识，理清思路，把握重难点。并能轻松回答以下问题，说明自己就真正的掌握了。</p><p>用于故而知新，快速复习。</p><h3 id="_1、ajax-的使用步骤" tabindex="-1"><a class="header-anchor" href="#_1、ajax-的使用步骤" aria-hidden="true">#</a> 1、Ajax 的使用步骤</h3><p>①、创建 xhr 对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>②、监听事件，处理响应（readystatechange 兼容性很好）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 监听事件，处理响应</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>load 监听事件，处理响应（不考虑 IE6~8 时优先使用）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
  <span class="token string">&quot;load&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token boolean">false</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③、准备发送请求</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>④、发送请求</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 第1种：不需要携带数据 或 GET请求，这是就传 null 或 什么都不传，null 是为了兼容性考虑</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 第2种：名值对的形式</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;username=icoding&amp;sex=male&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 第3种：JSON 格式的字符串形式</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>
  <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&quot;icoding&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、get-和-post-请求" tabindex="-1"><a class="header-anchor" href="#_2、get-和-post-请求" aria-hidden="true">#</a> 2、GET 和 POST 请求</h3><p>GET 请求不能通过请求体携带数据，但可以通过请求头携带</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;./index.html?username=icoding&amp;age=20&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>POST 请求一般通过请求体携带数据，但也可以通过请求头携带</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;./index.html?username=icoding&amp;age=20&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;username=icoding&amp;age=20&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>如果携带的数据是非英文字母，需要编码之后再发送。可以使用 <code>encodeURIComponent()</code> 编码</p></blockquote><h3 id="_3、json-的-3-种形式" tabindex="-1"><a class="header-anchor" href="#_3、json-的-3-种形式" aria-hidden="true">#</a> 3、JSON 的 3 种形式</h3><p>①、简单值形式（对应着 JS 中的基础数据类型）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">6</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token string">&quot;str&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">null</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②、对象形式（对应着 JS 中的对象）</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;username&quot;</span><span class="token operator">:</span> <span class="token string">&quot;艾编程&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;sex&quot;</span><span class="token operator">:</span> <span class="token string">&quot;male&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
  <span class="token property">&quot;hobby&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;篮球&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;乒乓球&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;足球&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;书法&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;family&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;father&quot;</span><span class="token operator">:</span> <span class="token string">&quot;icoding&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;mother&quot;</span><span class="token operator">:</span> <span class="token string">&quot;美美&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③、数组形式（对应着 JS 中的数组）</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token property">&quot;username&quot;</span><span class="token operator">:</span> <span class="token string">&quot;艾编程&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;phone&quot;</span><span class="token operator">:</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;email&quot;</span><span class="token operator">:</span> <span class="token string">&quot;123@gmail.com&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token property">&quot;username&quot;</span><span class="token operator">:</span> <span class="token string">&quot;小可爱&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;phone&quot;</span><span class="token operator">:</span> <span class="token string">&quot;18912368918&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;email&quot;</span><span class="token operator">:</span> <span class="token string">&quot;666@gmail.com&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
    <span class="token property">&quot;username&quot;</span><span class="token operator">:</span> <span class="token string">&quot;星辰大海&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;phone&quot;</span><span class="token operator">:</span> <span class="token string">&quot;18966668888&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;email&quot;</span><span class="token operator">:</span> <span class="token string">&quot;888@gmail.com&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、json-的方法" tabindex="-1"><a class="header-anchor" href="#_4、json-的方法" aria-hidden="true">#</a> 4、JSON 的方法</h3><ul><li><strong><code>JSON.parse()</code></strong></li></ul><blockquote><p>解析 JSON 格式的字符串 -&gt; JS 中的对应值</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong><code>JSON.stringify()</code></strong></li></ul><blockquote><p>JS 中的值 -&gt; JSON 对应形式的字符串</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token string">&quot;str&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&quot;icoding&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">&quot;str&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、跨域" tabindex="-1"><a class="header-anchor" href="#_5、跨域" aria-hidden="true">#</a> 5、跨域</h3><ul><li>协议、域名、端口号，任何一个不一样，就是不同域</li><li>不同域之间的请求，就是跨域请求，会被浏览器阻止</li><li>常用的解决方案：CORS 跨域资源共享 和 JSONP</li></ul><h3 id="_6、cors-跨域资源共享-1" tabindex="-1"><a class="header-anchor" href="#_6、cors-跨域资源共享-1" aria-hidden="true">#</a> 6、CORS 跨域资源共享</h3><ul><li>后端在响应头中添加 Access-Control-Allow-Origin 头信息</li><li>主要是后端来设置，前端无需做任何操作</li><li>优先使用 CORS 解决跨域问题</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 通配符 * 表示所有的域名都可以请求</span>
Access-Control-Allow-Origin: *
<span class="token comment"># 指定域名和端口号不会被阻止，其他都会被阻止（这种方式相对更安全）</span>
Access-Control-Allow-Origin: http://127.0.0.1:5501
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7、jsonp" tabindex="-1"><a class="header-anchor" href="#_7、jsonp" aria-hidden="true">#</a> 7、JSONP</h3><ul><li>JSONP 利用 script 标签加载跨域文件（使用 script 标签将 JSONP 的接口引入）</li><li>JSONP 的接口是需要特殊设计的，如下</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># ?callback= 为固定写法</span>
<span class="token comment"># handleResponse 为自定义写法</span>
https://www.icodingedu.com/api/web?callback<span class="token operator">=</span>handleResponse
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在前端使用对应的函数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// handleResponse 函数名 就是对应的 ?callback= 后边的函数名</span>
<span class="token keyword">function</span> <span class="token function">handleResponse</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// data 就是跨域获取到的数据</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：</p><p>不能使用 CORS 的时候，可以考虑使用 JSONP 解决跨域问题</p><h3 id="_8、xhr-的属性" tabindex="-1"><a class="header-anchor" href="#_8、xhr-的属性" aria-hidden="true">#</a> 8、XHR 的属性</h3><p><strong>response 和 responseText</strong></p><ul><li><code>responseType = &quot;json&quot;</code> ，只能使用 response</li><li><code>responseType = &quot;text&quot;</code> 或 <code>&quot;&quot;</code> ，response 和 responseText 都能用</li><li>IE 10 及以上浏览器开始支持 response，只要浏览器支持 response，就优先使用 response</li></ul><p><strong>timeout 和 withCredentials</strong></p><ul><li>timeout 属性用来设置超时时间，单位 ms</li><li>withCredentials 属性为 true ，跨域时也会携带 Cookie</li><li>IE8 开始支持 timeout ，IE10 开始支持 withCredentials （这些兼容性的内容不需要记忆，知道即可，必要时直接去查询即可）</li></ul><h3 id="_9、xhr-的方法" tabindex="-1"><a class="header-anchor" href="#_9、xhr-的方法" aria-hidden="true">#</a> 9、XHR 的方法</h3><ul><li><code>abort()</code> 用来终止当前请求</li><li><code>setRequestHeader(名称,值)</code> 用来设置请求头信息，常用的设置方式如下</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/x-www-form-urlencoded&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_10、xhr-的事件" tabindex="-1"><a class="header-anchor" href="#_10、xhr-的事件" aria-hidden="true">#</a> 10、XHR 的事件</h3><ul><li>load 事件：响应数据可用时会触发 load 事件，IE9 开始支持该事件</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
  <span class="token string">&quot;load&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token boolean">false</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>请求发生错误时会触发 error 事件，IE10 开始支持该事件</li><li>调用 <code>abort()</code> 终止请求时会触发 abort 事件，IE10 开始支持该事件</li><li>请求超时后会触发 timeout 事件，IE8 开始支持该事件</li></ul><h3 id="_11、formdata" tabindex="-1"><a class="header-anchor" href="#_11、formdata" aria-hidden="true">#</a> 11、FormData</h3><p>可用于发送表单数据，也可以独立于表单，用于发送键值对数据。IE10 开始支持</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 将表单元素传入</span>
<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span>表单元素<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 不传入表单元素，通过 append 添加数据，脱离于表单来使用，也是可以的</span>
<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
data<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;icoding&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
data<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;sex&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;male&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以通过 <code>xhr.send(FormData 数据)</code> 发送</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_12、axios" tabindex="-1"><a class="header-anchor" href="#_12、axios" aria-hidden="true">#</a> 12、axios</h3><p>axios 的基本用法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">axios</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
  <span class="token comment">// 成功</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token comment">// 失败</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>axios 的相关配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">axios</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// 请求头信息</span>
  <span class="token literal-property property">header</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;Content-Type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;application/x-www-form-urlencoded&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 通过请求头携带的数据</span>
  <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">&quot;male&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 通过请求体携带的数据</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">&quot;username=icoding&amp;sex=male&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// 超时时间</span>
  <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  <span class="token comment">// 跨域时携带 Cookie</span>
  <span class="token literal-property property">withCredentials</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>GET 请求：<code>axios.get()</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>axios
  <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&quot;icoding&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>POST 请求：<code>axios.post()</code></p><blockquote><p><code>post()</code>方法中第二个参数是直接传递数据</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>axios
  <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&quot;icoding&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_13、fetch" tabindex="-1"><a class="header-anchor" href="#_13、fetch" aria-hidden="true">#</a> 13、Fetch</h3><p>Fetch 的基本用法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">HTTP CODE 异常 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>response<span class="token punctuation">.</span>status<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Fetch 的相关配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// 请求的头信息</span>
  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;Content-Type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;application/x-www-form-urlencoded&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 请求体携带数据</span>
  <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token string">&quot;username=icoding&amp;sex=male&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// 跨域时设置，默认值 cors</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&quot;cors&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// 跨域时携带 Cookie</span>
  <span class="token literal-property property">credentials</span><span class="token operator">:</span> <span class="token string">&quot;include&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="十二、测试题" tabindex="-1"><a class="header-anchor" href="#十二、测试题" aria-hidden="true">#</a> 十二、测试题</h2><p>自我测试：在不看答案的前提下，看看自己是否真正掌握了本节所学内容。</p><h3 id="_1、下列关于-readystate-状态值-描述正确的选项是" tabindex="-1"><a class="header-anchor" href="#_1、下列关于-readystate-状态值-描述正确的选项是" aria-hidden="true">#</a> 1、下列关于 readyState 状态值，描述正确的选项是 ？</h3><blockquote><p>多选</p></blockquote><ul><li>A、状态值为 0：此时尚未创建 xhr 对象，也没有调用 open 方法</li><li>B、状态值为 1：此时 open 方法已被调用，但是尚未调用 send 方法</li><li>C、状态值为 2：send 方法已被调用，但是尚未接收到响应数据</li><li>D、状态值为 3：已经接收完响应数据了</li></ul><details class="custom-block details" open="" style="display:block;position:relative;border-radius:2px;margin:1.6em 0px;padding:1.6em;background-color:rgb(238, 238, 238);"><summary style="outline:none;cursor:pointer;color:rgb(62, 175, 124);">自己先分析，再点击查看正确答案</summary><p style="line-height:1.7;margin-bottom:0px;padding-bottom:0px;">正确答案：B C</p></details><h3 id="_2、下列-json-数据-格式书写正确的选项是" tabindex="-1"><a class="header-anchor" href="#_2、下列-json-数据-格式书写正确的选项是" aria-hidden="true">#</a> 2、下列 JSON 数据，格式书写正确的选项是 ？</h3><blockquote><p>单选</p></blockquote><p>A、</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
	<span class="token string-property property">&quot;username&quot;</span><span class="token operator">:</span><span class="token string">&quot;icoding&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 用户名</span>
	<span class="token string-property property">&quot;age&quot;</span><span class="token operator">:</span><span class="token number">18</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>B、</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
	<span class="token literal-property property">username</span><span class="token operator">:</span><span class="token string">&quot;icoding&quot;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">18</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>C、</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
	<span class="token string-property property">&quot;username&quot;</span><span class="token operator">:</span><span class="token string">&quot;icoding&quot;</span><span class="token punctuation">,</span>
	<span class="token string-property property">&quot;age&quot;</span><span class="token operator">:</span><span class="token string">&quot;undefined&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>D、</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
	<span class="token string-property property">&#39;username&#39;</span><span class="token operator">:</span><span class="token string">&#39;icoding&#39;</span><span class="token punctuation">,</span>
	<span class="token string-property property">&#39;age&#39;</span><span class="token operator">:</span><span class="token number">18</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="custom-block details" open="" style="display:block;position:relative;border-radius:2px;margin:1.6em 0px;padding:1.6em;background-color:rgb(238, 238, 238);"><summary style="outline:none;cursor:pointer;color:rgb(62, 175, 124);">自己先分析，再点击查看正确答案</summary><p style="line-height:1.7;margin-bottom:0px;padding-bottom:0px;">正确答案：C</p></details><h3 id="_3、下列选项中-描述错误的是" tabindex="-1"><a class="header-anchor" href="#_3、下列选项中-描述错误的是" aria-hidden="true">#</a> 3、下列选项中，描述错误的是 ？</h3><blockquote><p>单选</p></blockquote><ul><li>A、<code>JSON.stringify()</code>的作用是将 JavaScript 中的对象转换为 JSON 字符串</li><li>B、<code>JSON.stringify()</code>方法让 localStorage/sessionStorage 可以存储对象</li><li>C、<code>JSON.parse()</code>作用是将字符串转为一个对象</li><li>D、<code>JSON.stringify()</code>方法可以判断两个数组或对象中的值是否相等</li></ul><details class="custom-block details" open="" style="display:block;position:relative;border-radius:2px;margin:1.6em 0px;padding:1.6em;background-color:rgb(238, 238, 238);"><summary style="outline:none;cursor:pointer;color:rgb(62, 175, 124);">自己先分析，再点击查看正确答案</summary><p style="line-height:1.7;margin-bottom:0px;padding-bottom:0px;">正确答案：C</p></details><h3 id="_4、以下地址的页面-向下列选项中哪个地址发送请求时-不属于跨域" tabindex="-1"><a class="header-anchor" href="#_4、以下地址的页面-向下列选项中哪个地址发送请求时-不属于跨域" aria-hidden="true">#</a> 4、以下地址的页面，向下列选项中哪个地址发送请求时，不属于跨域 ？</h3><p>地址：<code>http://www.icodingedu.com</code></p><blockquote><p>单选</p></blockquote><ul><li>A、<code>http://www.icodingedu.com:8080</code></li><li>B、<code>https://www.icodingedu.com</code></li><li>C、<code>http://www.icodingedu.com/list</code></li><li>D、<code>http://m.icodingedu.com</code></li></ul><details class="custom-block details" open="" style="display:block;position:relative;border-radius:2px;margin:1.6em 0px;padding:1.6em;background-color:rgb(238, 238, 238);"><summary style="outline:none;cursor:pointer;color:rgb(62, 175, 124);">自己先分析，再点击查看正确答案</summary><p style="line-height:1.7;margin-bottom:0px;padding-bottom:0px;">正确答案：C</p></details><h3 id="_5、下列描述正确的选项是" tabindex="-1"><a class="header-anchor" href="#_5、下列描述正确的选项是" aria-hidden="true">#</a> 5、下列描述正确的选项是 ？</h3><ul><li>A、responseType 属性值为空时，不可以使用 response 属性接收</li><li>B、responseType 属性值为 json 时，不可以使用 responseText 属性接收</li><li>C、responseType 属性值为 text 时，只能使用 responseText 属性接收</li><li>D、没有设置 responseType 属性时，可以使用 responseText 或 response 属性接收</li></ul><details class="custom-block details" open="" style="display:block;position:relative;border-radius:2px;margin:1.6em 0px;padding:1.6em;background-color:rgb(238, 238, 238);"><summary style="outline:none;cursor:pointer;color:rgb(62, 175, 124);">自己先分析，再点击查看正确答案</summary><p style="line-height:1.7;margin-bottom:0px;padding-bottom:0px;">正确答案：B D</p></details><h3 id="_6、下列-setrequestheader-和-send-方法对应正确的是" tabindex="-1"><a class="header-anchor" href="#_6、下列-setrequestheader-和-send-方法对应正确的是" aria-hidden="true">#</a> 6、下列 setRequestHeader() 和 send() 方法对应正确的是 ？</h3><blockquote><p>单选</p></blockquote><p>A、</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&quot;icoding&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>B、</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/x-www-form-urlencoded&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">{&quot;username&quot;:&quot;icoding&quot;}</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>C、</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;multipart/form-data&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;username=admin&amp;password=123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>D、</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;{&quot;username&quot;:&quot;icoding&quot;,&quot;password&quot;:123456}&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><details class="custom-block details" open="" style="display:block;position:relative;border-radius:2px;margin:1.6em 0px;padding:1.6em;background-color:rgb(238, 238, 238);"><summary style="outline:none;cursor:pointer;color:rgb(62, 175, 124);">自己先分析，再点击查看正确答案</summary><p style="line-height:1.7;margin-bottom:0px;padding-bottom:0px;">正确答案：D</p></details><p>上次更新时间: 6/8/2023, 9:23:17 PM</p>`,120),kn={href:"https://www.arryblog.com/vip/network/cookie-localstorage-sessionstorage.html",target:"_blank",rel:"noopener noreferrer"},vn={href:"https://www.arryblog.com/vip/network/async-await.html",target:"_blank",rel:"noopener noreferrer"},mn=n("p",null,"大厂最新技术学习分享群",-1),bn=n("p",null,[n("img",{src:"https://www.arryblog.com/bulletin-box.jpg",alt:"大厂最新技术学习分享群"})],-1),gn=n("p",null,"微信扫一扫进群，获取资料",-1),hn=n("p",null,"X",-1),qn={href:"https://github.com/",target:"_blank",rel:"noopener noreferrer"},yn={href:"https://github.com/meteorlxy/vssue",target:"_blank",rel:"noopener noreferrer"},fn=n("p",null,"使用 GitHub 帐号登录后发表评论",-1),xn=n("p",null,"使用 GitHub 登录",-1),wn=n("p",null,"登录后查看评论",-1);function jn(_n,Sn){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("ul",null,[r,d,n("li",null,[s("查看博客网站地图的 xml 文件，可了解语法结构 "),n("a",k,[s("https://www.arryblog.com/sitemap.xml(opens new window)"),t(a)])]),v]),m,n("blockquote",null,[n("p",null,[s("关于 FormData 构造函数相关的实例方法"),n("a",b,[s("查看官方文档(opens new window)"),t(a)])])]),g,n("p",null,[s("跨域问题其实就是浏览器的"),n("a",h,[s("同源策略 (opens new window)"),t(a)]),s("所导致的。")]),n("p",null,[q,s("是一个重要的安全策略，它用于限制一个"),n("a",y,[s("源(Origin) (opens new window)"),t(a)]),s("的文档或者它加载的脚本如何能与另一个源的资源进行交互。它能帮助阻隔恶意文档，减少可能被攻击的媒介")]),f,n("p",null,[s("Web 内容的"),x,s("由用于访问它的 "),n("a",w,[s("URL (opens new window)"),t(a)]),s("的 "),j,s("（协议）、"),_,s("（域名）和 "),S,s(" 定义。只有当协议、主机和端口都匹配时，两个对象才具有相同的源。")]),O,n("p",null,[s("通过上面的了解，我们应该知道"),J,s("完全可以替代 "),T,s(" ，关于 "),N,s("的更多类型，"),n("a",A,[s("可查看 MDN 官方文档(opens new window)"),t(a)])]),C,n("blockquote",null,[n("p",null,[s("为了安全起见，大部分的请求头我们是没办法设置的，"),n("a",R,[s("具体查阅官方文档(opens new window)"),t(a)])])]),H,n("blockquote",null,[n("p",null,[s("MIME 类型 "),n("a",L,[s("参考官方文档(opens new window)"),t(a)])])]),P,n("blockquote",null,[n("p",null,[s("更多事件可 "),n("a",E,[s("查阅官方文档(opens new window)"),t(a)])])]),M,n("blockquote",null,[n("p",null,[s("axios 的官方文档地址："),n("a",F,[s("Axios Docs (axios-http.com)(opens new window)"),t(a)])])]),X,D,n("p",null,[s("为了提高文件的加载速度，我们使用 CDN 加速服务，网址： "),n("a",I,[s("https://www.bootcdn.cn/ (opens new window)"),t(a)]),s("按以下操作，找到对应的引入地址。")]),U,n("p",null,[G,s("为"),z,s(" 创建请求时可用的配置选项，相关的配置项可能参考官方地址："),n("a",V,[s("https://axios-http.com/zh/docs/req_config(opens new window)"),t(a)])]),B,n("blockquote",null,[n("p",null,[s("参考官方文档："),n("a",$,[s("https://axios-http.com/zh/docs/res_schema(opens new window)"),t(a)])])]),W,n("blockquote",null,[n("p",null,[s("关于兼容性也可以使用："),n("a",K,[s("https://caniuse.com/ (opens new window)"),t(a)]),s("查询")])]),Q,n("p",null,[s("关于 fetch 方法发起请求响应成功后，promise 对象返回的 response 对象的相关属性和方法可以"),n("a",Y,[s("查阅官方文档(opens new window)"),t(a)])]),Z,n("table",null,[nn,n("tbody",null,[sn,an,n("tr",null,[tn,n("td",pn,[s("请求的头信息，形式为 "),n("a",en,[on,s(" (opens new window)"),t(a)]),s("的对象或包含 "),n("a",cn,[ln,s(" (opens new window)"),t(a)]),s("值的对象字面量")])]),un,rn])]),dn,n("p",null,[s("← "),n("a",kn,[s("本地存储 Cookie、localStorage、sessionStorage 实践"),t(a)]),n("a",vn,[s("async 和 await 异步编程解决方案 "),t(a)]),s("→")]),mn,bn,gn,hn,n("p",null,[s("评论 Powered by "),n("a",qn,[s("GitHub "),t(a)]),s("& "),n("a",yn,[s("Vssue"),t(a)])]),fn,xn,wn])}const Jn=e(i,[["render",jn],["__file","JSON、Ajax、kuayuqingqiu、XHR duixiang、Axios yu Fetch.html.vue"]]);export{Jn as default};
