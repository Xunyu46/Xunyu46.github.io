import{_ as t,r as o,o as c,c as l,b as s,d as n,e as p,a}from"./app-48690364.js";const i={},u=a(`<h1 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h1><p>在开启本篇章之前，我们先来思考一个问题，假设有以下模板：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{ msg }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中一个 <code>p</code> 标签的节点是一个静态的节点，第二个 <code>p</code> 标签的节点是一个动态的节点，如果当 <code>msg</code> 的值发生了变化，那么理论上肉眼可见最优的更新方案应该是只做第二个动态节点的 <code>diff</code>，而无需进行第一个 <code>p</code> 标签节点的 <code>diff</code>。</p><p>如果熟悉 <code>Vue 2.x</code> 的小伙伴可能会知道，在 <code>Vue 2.x</code> 版本中在编译过程中有一个叫做 <code>optimize</code> 的阶段，会进行标记静态根节点的操作，被标记为静态根节点的节点，一方面会生成一个 <code>staticRenderFns</code>，首次渲染会以这个静态根节点 <code>vnode</code> 进行缓存，后续渲染会直接取缓存中的，从而避免重复渲染；另一方面生成的 <code>vnode</code> 会带有 <code>isStatic = true</code> 的属性，将会在 <code>diff</code> 过程中被跳过。但 <code>Vue 2.x</code> 对静态节点进行缓存就是一种空间换时间的优化策略，为了避免过度优化，在 <code>Vue 2.x</code> 中，识别静态根节点是需要满足：</p><ol><li>子节点是静态节点；</li><li>子节点不是只有一个静态文本节点的节点。</li></ol><p>所以，上面的示例第一个 <code>p</code> 标签在 <code>Vue 2.x</code> 中不会被判定位静态根节点，也就无法进行优化。</p>`,7),d=s("code",null,"Vue 2.x",-1),r={href:"https://github.com/muwoo/blogs/blob/master/src/Vue/8.md",target:"_blank",rel:"noopener noreferrer"},k=a(`<p>那么 <code>Vue 3</code> 呢？还是和 <code>Vue 2</code> 一样吗？答案显然是否定的，首先我们前面介绍了对于静态的节点，<code>Vue 3</code> 首先会进行静态提升，也就是相当于缓存了静态节点的 <code>vnode</code>，那 <code>diff</code> 过程呢？会跳过吗？本小节我们来一探究竟。</p><h2 id="patchflags" tabindex="-1"><a class="header-anchor" href="#patchflags" aria-hidden="true">#</a> PatchFlags</h2><h3 id="是什么" tabindex="-1"><a class="header-anchor" href="#是什么" aria-hidden="true">#</a> 是什么？</h3><p>首先，我们需要认识一个 <code>PatchFlags</code> 这个属性，它是一个枚举类型，里面是一些二进制操作的值，用来标记在节点的 <code>patch</code> 类型。具体的枚举内容如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token keyword">enum</span> PatchFlags <span class="token punctuation">{</span>
  <span class="token comment">// 动态文本的元素</span>
  <span class="token constant">TEXT</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
  
  <span class="token comment">// 动态 class 的元素</span>
  <span class="token constant">CLASS</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span>
  
  <span class="token comment">// 动态 style 的元素</span>
  <span class="token constant">STYLE</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">,</span>
  
  <span class="token comment">// 动态 props 的元素</span>
  <span class="token constant">PROPS</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">,</span>
  
  <span class="token comment">// 动态 props 和有 key 值绑定的元素</span>
  <span class="token constant">FULL_PROPS</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">,</span>
  
  <span class="token comment">// 有事件绑定的元素</span>
  <span class="token constant">HYDRATE_EVENTS</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">,</span>
  
  <span class="token comment">// children 顺序确定的 fragment</span>
  <span class="token constant">STABLE_FRAGMENT</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">,</span>
  
  <span class="token comment">// children 中有带有 key 的节点的 fragment</span>
  <span class="token constant">KEYED_FRAGMENT</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">7</span><span class="token punctuation">,</span>
  
  <span class="token comment">// 没有 key 的 children 的 fragment</span>
  <span class="token constant">UNKEYED_FRAGMENT</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">,</span>
  
  <span class="token comment">// 带有 ref、指令的元素</span>
  <span class="token constant">NEED_PATCH</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">9</span><span class="token punctuation">,</span>
  
  <span class="token comment">// 动态的插槽</span>
  <span class="token constant">DYNAMIC_SLOTS</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">,</span>
  
  <span class="token comment">// 静态节点</span>
  <span class="token constant">HOISTED</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
  
  <span class="token comment">// 不是 render 函数生成的元素，如 renderSlot</span>
  <span class="token constant">BAIL</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),v=s("code",null,"<<",-1),m={href:"https://juejin.cn/book/7146465352120008743/section/7147530994017370127",target:"_blank",rel:"noopener noreferrer"},b=a(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">TEXT</span> <span class="token operator">=</span> <span class="token number">0000000001</span><span class="token punctuation">;</span> 
<span class="token constant">CLASS</span> <span class="token operator">=</span> <span class="token number">0000000010</span><span class="token punctuation">;</span> 
<span class="token constant">STYLE</span> <span class="token operator">=</span> <span class="token number">0000000100</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里通过二进制来表示 <code>PatchFlags</code> 可以方便我们做很多属性的判断，比如 <code>TEXT | STYLE</code> 来得到 <code>0000000101</code>，表示 <code>patchFlag</code> 既有 <code>TEXT</code> 属性也有 <code>STYLE</code> 属性，当需要进行判断有没有 <code>STYLE</code> 属性时，只需要 <code>FLAG &amp; STYLE &gt; 0</code>就行。</p><h3 id="什么时候生成的" tabindex="-1"><a class="header-anchor" href="#什么时候生成的" aria-hidden="true">#</a> 什么时候生成的？</h3><p>在搞清楚 <code>patchFlags</code> 的一些定义和使用基础后，那它是什么时候被赋值到 <code>vnode</code> 节点上的呢？前言中的模板字符串在 <code>compiler</code> 阶段会被转成一个 <code>render</code> 函数的字符串代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createElementVNode <span class="token keyword">as</span> _createElementVNode<span class="token punctuation">,</span> toDisplayString <span class="token keyword">as</span> _toDisplayString<span class="token punctuation">,</span> Fragment <span class="token keyword">as</span> _Fragment<span class="token punctuation">,</span> openBlock <span class="token keyword">as</span> _openBlock<span class="token punctuation">,</span> createElementBlock <span class="token keyword">as</span> _createElementBlock <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span>

<span class="token keyword">const</span> _hoisted_1 <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span><span class="token function">_createElementVNode</span><span class="token punctuation">(</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token comment">/* HOISTED */</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">_ctx<span class="token punctuation">,</span> _cache</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_createElementBlock</span><span class="token punctuation">(</span>_Fragment<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
    _hoisted_1<span class="token punctuation">,</span>
    <span class="token function">_createElementVNode</span><span class="token punctuation">(</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token function">_toDisplayString</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment">/* TEXT */</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">64</span> <span class="token comment">/* STABLE_FRAGMENT */</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里可以看出，<code>render</code> 函数内是通过 <code>createElementVNode</code> 方法来创建 <code>vnode</code> 的，该函数的第四个参数就代表着 <code>patchFlag</code>。对于我们上面的示例，其中 <code>&lt;p&gt;hello world&lt;/p&gt;</code> 是 <code>hoisted</code>，对应的 <code>patchFlag = -1</code>，<code>&lt;p&gt;{{ msg }}&lt;/p&gt;</code> 是动态文字节点，对应的 <code>patchFlag = 1</code>。</p><h3 id="有什么用" tabindex="-1"><a class="header-anchor" href="#有什么用" aria-hidden="true">#</a> 有什么用？</h3><p>接下来看看其实际使用案例，还是拿之前的 <code>patchElement</code> 函数来说：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">patchElement</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> parentComponent<span class="token punctuation">,</span> parentSuspense<span class="token punctuation">,</span> isSVG<span class="token punctuation">,</span> slotScopeIds<span class="token punctuation">,</span> optimized</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> <span class="token punctuation">{</span> patchFlag<span class="token punctuation">,</span> dynamicChildren<span class="token punctuation">,</span> dirs <span class="token punctuation">}</span> <span class="token operator">=</span> n2
  <span class="token comment">// 如果 patchFlag 不存在，那么就设置成 FULL_PROPS，意味着要全量 props 比对</span>
  patchFlag <span class="token operator">|=</span> n1<span class="token punctuation">.</span>patchFlag <span class="token operator">&amp;</span> PatchFlags<span class="token punctuation">.</span><span class="token constant">FULL_PROPS</span>
  <span class="token keyword">const</span> oldProps <span class="token operator">=</span> n1<span class="token punctuation">.</span>props <span class="token operator">||</span> <span class="token constant">EMPTY_OBJ</span>
  <span class="token keyword">const</span> newProps <span class="token operator">=</span> n2<span class="token punctuation">.</span>props <span class="token operator">||</span> <span class="token constant">EMPTY_OBJ</span>

  <span class="token keyword">const</span> areChildrenSVG <span class="token operator">=</span> isSVG <span class="token operator">&amp;&amp;</span> n2<span class="token punctuation">.</span>type <span class="token operator">!==</span> <span class="token string">&#39;foreignObject&#39;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>dynamicChildren<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">patchBlockChildren</span><span class="token punctuation">(</span>
      n1<span class="token punctuation">.</span>dynamicChildren<span class="token operator">!</span><span class="token punctuation">,</span>
      dynamicChildren<span class="token punctuation">,</span>
      el<span class="token punctuation">,</span>
      parentComponent<span class="token punctuation">,</span>
      parentSuspense<span class="token punctuation">,</span>
      areChildrenSVG<span class="token punctuation">,</span>
      slotScopeIds
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>optimized<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// full diff</span>
    <span class="token function">patchChildren</span><span class="token punctuation">(</span>
      n1<span class="token punctuation">,</span>
      n2<span class="token punctuation">,</span>
      el<span class="token punctuation">,</span>
      <span class="token keyword">null</span><span class="token punctuation">,</span>
      parentComponent<span class="token punctuation">,</span>
      parentSuspense<span class="token punctuation">,</span>
      areChildrenSVG<span class="token punctuation">,</span>
      slotScopeIds<span class="token punctuation">,</span>
      <span class="token boolean">false</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>patchFlag <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>patchFlag <span class="token operator">&amp;</span> PatchFlags<span class="token punctuation">.</span><span class="token constant">FULL_PROPS</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 如果元素的 props 中含有动态的 key，则需要全量比较</span>
      <span class="token function">patchProps</span><span class="token punctuation">(</span>
        el<span class="token punctuation">,</span>
        n2<span class="token punctuation">,</span>
        oldProps<span class="token punctuation">,</span>
        newProps<span class="token punctuation">,</span>
        parentComponent<span class="token punctuation">,</span>
        parentSuspense<span class="token punctuation">,</span>
        isSVG
      <span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// class</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>patchFlag <span class="token operator">&amp;</span> PatchFlags<span class="token punctuation">.</span><span class="token constant">CLASS</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldProps<span class="token punctuation">.</span>class <span class="token operator">!==</span> newProps<span class="token punctuation">.</span>class<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">hostPatchProp</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token string">&#39;class&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> newProps<span class="token punctuation">.</span>class<span class="token punctuation">,</span> isSVG<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// style</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>patchFlag <span class="token operator">&amp;</span> PatchFlags<span class="token punctuation">.</span><span class="token constant">STYLE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">hostPatchProp</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token string">&#39;style&#39;</span><span class="token punctuation">,</span> oldProps<span class="token punctuation">.</span>style<span class="token punctuation">,</span> newProps<span class="token punctuation">.</span>style<span class="token punctuation">,</span> isSVG<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// props</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>patchFlag <span class="token operator">&amp;</span> PatchFlags<span class="token punctuation">.</span><span class="token constant">PROPS</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> propsToUpdate <span class="token operator">=</span> n2<span class="token punctuation">.</span>dynamicProps<span class="token operator">!</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> propsToUpdate<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> key <span class="token operator">=</span> propsToUpdate<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
          <span class="token keyword">const</span> prev <span class="token operator">=</span> oldProps<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
          <span class="token keyword">const</span> next <span class="token operator">=</span> newProps<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
          <span class="token comment">// #1471 force patch value</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">!==</span> prev <span class="token operator">||</span> key <span class="token operator">===</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">hostPatchProp</span><span class="token punctuation">(</span>
              el<span class="token punctuation">,</span>
              key<span class="token punctuation">,</span>
              prev<span class="token punctuation">,</span>
              next<span class="token punctuation">,</span>
              isSVG<span class="token punctuation">,</span>
              n1<span class="token punctuation">.</span>children <span class="token keyword">as</span> VNode<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
              parentComponent<span class="token punctuation">,</span>
              parentSuspense<span class="token punctuation">,</span>
              unmountChildren
            <span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// text</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>patchFlag <span class="token operator">&amp;</span> PatchFlags<span class="token punctuation">.</span><span class="token constant">TEXT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>n1<span class="token punctuation">.</span>children <span class="token operator">!==</span> n2<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">hostSetElementText</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> n2<span class="token punctuation">.</span>children <span class="token keyword">as</span> string<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>optimized <span class="token operator">&amp;&amp;</span> dynamicChildren <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">patchProps</span><span class="token punctuation">(</span>
      el<span class="token punctuation">,</span>
      n2<span class="token punctuation">,</span>
      oldProps<span class="token punctuation">,</span>
      newProps<span class="token punctuation">,</span>
      parentComponent<span class="token punctuation">,</span>
      parentSuspense<span class="token punctuation">,</span>
      isSVG
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里涉及到两个比较重点的事儿，一个是和 <code>dynamicChildren</code> 相关，另一个是和动态 <code>props</code> 相关。我们先看和动态 <code>props</code> 相关的内容。</p><p>之前的章节我们跳过了对 <code>PatchFlags</code> 内容的理解，到了这里，我们通过代码可以知道 <code>Vue</code> 在更新子节点时，首先也是利用 <code>patchFlag</code> 的能力，对子节点进行分类做出不同的处理，比如针对以下例子：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>classNames<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>test<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span>
    hello world
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>得到的编译结果：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> normalizeClass <span class="token keyword">as</span> _normalizeClass<span class="token punctuation">,</span> openBlock <span class="token keyword">as</span> _openBlock<span class="token punctuation">,</span> createElementBlock <span class="token keyword">as</span> _createElementBlock <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">_ctx<span class="token punctuation">,</span> _cache</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_createElementBlock</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token keyword">class</span><span class="token operator">:</span> <span class="token function">_normalizeClass</span><span class="token punctuation">(</span>classNames<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&quot;test&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot; hello world &quot;</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token comment">/* CLASS */</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时 <code>patchFlag &amp; PatchFlags.CLASS &gt; 0</code> 则在 <code>diff</code> 过程中，需要进行 <code>class</code> 属性的 <code>diff</code>， 从而减少了对 <code>id</code> 属性的不必要 <code>diff</code>，提升了 <code>props diff</code> 过程中的性能。</p><h2 id="dynamicchildren" tabindex="-1"><a class="header-anchor" href="#dynamicchildren" aria-hidden="true">#</a> dynamicChildren</h2><p>另外，我们注意到，在编译后的 <code>render</code> 函数中会有一个 <code>_openBlock()</code> 函数的执行，我们来一起看一下其实现：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>export const blockStack = []
export let currentBlock = null

export function openBlock(disableTracking = false) {
  blockStack.push((currentBlock = disableTracking ? null : []))
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>openBlock</code> 实现比较通俗易懂，就是向 <code>blockStack</code> 中 <code>push</code> <code>currentBlock</code>。其中 <code>currentBlock</code> 是一个数组，用于存储动态节点。<code>blockStack</code> 则是存储 <code>currentBlock</code> 的一个 <code>Block tree</code>。</p><p>然后我们接着看 <code>createElementBlock</code> 的实现：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createElementBlock</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> props<span class="token punctuation">,</span> children<span class="token punctuation">,</span> patchFlag<span class="token punctuation">,</span> dynamicProps<span class="token punctuation">,</span> shapeFlag</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">setupBlock</span><span class="token punctuation">(</span>
    <span class="token function">createBaseVNode</span><span class="token punctuation">(</span>
      type<span class="token punctuation">,</span>
      props<span class="token punctuation">,</span>
      children<span class="token punctuation">,</span>
      patchFlag<span class="token punctuation">,</span>
      dynamicProps<span class="token punctuation">,</span>
      shapeFlag<span class="token punctuation">,</span>
      <span class="token boolean">true</span> <span class="token comment">/* isBlock */</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">createBaseVNode</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> props <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> children <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> patchFlag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> dynamicProps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> shapeFlag <span class="token operator">=</span> type <span class="token operator">===</span> Fragment <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token punctuation">,</span> isBlockNode <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> needFullChildrenNormalization <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token comment">// 添加动态 vnode 节点到 currentBlock 中</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>
    isBlockTreeEnabled <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>
    <span class="token operator">!</span>isBlockNode <span class="token operator">&amp;&amp;</span>
    currentBlock <span class="token operator">&amp;&amp;</span>
    <span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>patchFlag <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">||</span> shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">COMPONENT</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
    vnode<span class="token punctuation">.</span>patchFlag <span class="token operator">!==</span> PatchFlags<span class="token punctuation">.</span><span class="token constant">HYDRATE_EVENTS</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    currentBlock<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">return</span> vnode
<span class="token punctuation">}</span>


<span class="token keyword">function</span> <span class="token function">setupBlock</span><span class="token punctuation">(</span><span class="token parameter">vnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 在 vnode 上保留当前 Block 收集的动态子节点</span>
  vnode<span class="token punctuation">.</span>dynamicChildren <span class="token operator">=</span>
    isBlockTreeEnabled <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> currentBlock <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token constant">EMPTY_ARR</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span>
  <span class="token comment">// 当前 Block 恢复到父 Block</span>
  <span class="token function">closeBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 节点本身作为父 Block 收集的子节点</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isBlockTreeEnabled <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> currentBlock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    currentBlock<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> vnode
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>createElementBlock</code> 内部首先通过 <code>createBaseVNode</code> 创建 <code>vnode</code> 节点，在创建的过程中，会根据 <code>patchFlag</code> 的值进行判断是否是动态节点，如果发现 <code>vnode</code> 是一个动态节点，那么会被添加到 <code>currentBlock</code> 当中，然后在执行 <code>setupBlock</code> 函数的时候，将 <code>currentBlock</code> 赋值给 <code>vnode.dynamicChildren</code> 属性。</p><p>我们前面看 <code>patchElement</code> 的时候，有注意到函数体内部会进行是否有 <code>dynamicChildren</code> 属性进行不同的逻辑执行，前面的章节，我们只介绍了 <code>patchChildren</code> 完整的子节点 <code>diff</code> 算法，当 <code>dynamicChildren</code> 存在时，这里只会进行 <code>patchBlockChildren</code> 的动态节点 <code>diff</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">patchBlockChildren</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">oldChildren<span class="token punctuation">,</span> newChildren<span class="token punctuation">,</span> fallbackContainer<span class="token punctuation">,</span> parentComponent<span class="token punctuation">,</span> parentSuspense<span class="token punctuation">,</span> isSVG</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> newChildren<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> oldVNode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token keyword">const</span> newVNode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token comment">// 确定待更新节点的容器</span>
    <span class="token keyword">const</span> container <span class="token operator">=</span>
      <span class="token comment">// 对于 Fragment，我们需要提供正确的父容器</span>
      oldVNode<span class="token punctuation">.</span>type <span class="token operator">===</span> Fragment <span class="token operator">||</span>
      <span class="token comment">// 在不同节点的情况下，将有一个替换节点，我们也需要正确的父容器</span>
      <span class="token operator">!</span><span class="token function">isSameVNodeType</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">)</span> <span class="token operator">||</span>
      <span class="token comment">// 组件的情况，我们也需要提供一个父容器</span>
      oldVNode<span class="token punctuation">.</span>shapeFlag <span class="token operator">&amp;</span> <span class="token number">6</span> <span class="token comment">/* COMPONENT */</span>
        <span class="token operator">?</span> <span class="token function">hostParentNode</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">.</span>el<span class="token punctuation">)</span>
        <span class="token operator">:</span>
        <span class="token comment">// 在其他情况下，父容器实际上并没有被使用，所以这里只传递 Block 元素即可</span>
        fallbackContainer
    <span class="token function">patch</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> parentComponent<span class="token punctuation">,</span> parentSuspense<span class="token punctuation">,</span> isSVG<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>patchBlockChildren</code> 的实现很简单，遍历新的动态子节点数组，拿到对应的新旧动态子节点，并执行 <code>patch</code> 更新子节点即可。</p><p>这样一来，更新的复杂度就变成和动态节点的数量正相关，而不与模板大小正相关。这也是 <code>Vue 3</code> 做的一个重要的编译时优化的一部分。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>有了上面的一些介绍，我们还是回到前言的例子中：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;template&gt;
  &lt;p&gt;hello world&lt;/p&gt;
  &lt;p&gt;{{ msg }}&lt;/p&gt;
&lt;/template&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>转成 <code>vnode</code> 后的结果大致为：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span>Fragment<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token string">&#39;hello world&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">children</span><span class="token operator">:</span> ctx<span class="token punctuation">.</span>msg<span class="token punctuation">,</span> <span class="token literal-property property">patchFlag</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token comment">/* 动态的 text */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">dynamicChildren</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">children</span><span class="token operator">:</span> ctx<span class="token punctuation">.</span>msg<span class="token punctuation">,</span> <span class="token literal-property property">patchFlag</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token comment">/* 动态的 text */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时组件内存在了一个静态的节点 <code>&lt;p&gt;hello world&lt;/p&gt;</code>，在传统的 <code>diff</code> 算法里，还是需要对该静态节点进行不必要的 <code>diff</code>。所以 <code>Vue3</code> 先通过 <code>patchFlag</code> 来标记动态节点 <code>&lt;p&gt;{{ msg }}&lt;/p&gt;</code>， 然后配合 <code>dynamicChildren</code> 将动态节点进行收集，从而完成在 <code>diff</code> 阶段只做<strong>靶向更新</strong>的目的。</p>`,32);function h(g,y){const e=o("ExternalLinkIcon");return c(),l("div",null,[u,s("blockquote",null,[s("p",null,[n("关于 "),d,n(" 如何做的编译时优化，这里只是简单进行了介绍，想了解更多的小伙伴可以参考这里："),s("a",r,[n("入口开始，解读 Vue2 源码（七）—— $mount 内部实现 --- compile optimize标记节点"),p(e)]),n("。")])]),k,s("p",null,[n("这些二进制的值是通过左移操作符 "),v,n(" 生成的，关于左移操作符，我们在"),s("a",m,[n("《响应式原理：副作用函数探秘》"),p(e)]),n("篇章中已经介绍过了，在这里也是一种二进制操作的体现：")]),b])}const w=t(i,[["render",h],["__file","15 bianyiqi：bianyiguochengzhongdeyouhuaxijie.html.vue"]]);export{w as default};
