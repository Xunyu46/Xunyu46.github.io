import{_ as p,r as t,o,c,b as s,d as n,e as i,a}from"./app-48690364.js";const l={},u=a('<p>我们前面学习了 Vite 的各种高级应用场景，接下来的几个小节，我们再把目光放到 Vite 的实现本身，来深度剖析 Vite 的内部源码实现。</p><p>可能你会有一个疑问，我们为什么要去读源码？原因主要有两个：一是加深对框架本身的理解，在面对一些项目的疑难杂症时，排查问题效率会更高；二是在遇到类似的开发场景时，可以举一反三，借鉴某个框架源码的实现思路，将技巧应用到其它的项目中。</p><p>本小节我们要介绍 Vite 配置解析服务的源码部分。我们知道，Vite 构建环境分为<code>开发环境</code>和<code>生产环境</code>，不同环境会有不同的构建策略，但不管是哪种环境，Vite 都会首先解析用户配置。那接下来，我就与你分析配置解析过程中 Vite 到底做了什么。</p><p>首先，我会带你梳理整体的实现流程，然后拆解其中的重点细节，即<code>如何加载配置文件</code>，让你不仅对 Vite 的配置解析服务有系统且完整的认识，还能写一个自己的<code>配置文件加载器</code>。</p><h2 id="流程梳理" tabindex="-1"><a class="header-anchor" href="#流程梳理" aria-hidden="true">#</a> 流程梳理</h2>',5),r={href:"https://github.com/vitejs/vite/blob/main/packages/vite/src/node/config.ts#L255",target:"_blank",rel:"noopener noreferrer"},d=a(`<h3 id="_1-加载配置文件" tabindex="-1"><a class="header-anchor" href="#_1-加载配置文件" aria-hidden="true">#</a> 1. 加载配置文件</h3><p>进行一些必要的变量声明后，我们进入到<strong>解析配置</strong>逻辑中:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 这里的 config 是命令行指定的配置，如 vite --configFile=xxx</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span> configFile <span class="token punctuation">}</span> <span class="token operator">=</span> config
<span class="token keyword">if</span> <span class="token punctuation">(</span>configFile <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 默认都会走到下面加载配置文件的逻辑，除非你手动指定 configFile 为 false</span>
  <span class="token keyword">const</span> loadResult <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">loadConfigFromFile</span><span class="token punctuation">(</span>
    configEnv<span class="token punctuation">,</span>
    configFile<span class="token punctuation">,</span>
    config<span class="token punctuation">.</span>root<span class="token punctuation">,</span>
    config<span class="token punctuation">.</span>logLevel
  <span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>loadResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 解析配置文件的内容后，和命令行配置合并</span>
    config <span class="token operator">=</span> <span class="token function">mergeConfig</span><span class="token punctuation">(</span>loadResult<span class="token punctuation">.</span>config<span class="token punctuation">,</span> config<span class="token punctuation">)</span>
    configFile <span class="token operator">=</span> loadResult<span class="token punctuation">.</span>path
    configFileDependencies <span class="token operator">=</span> loadResult<span class="token punctuation">.</span>dependencies
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一步是解析配置文件的内容(这部分比较复杂，本文后续单独分析)，然后与命令行配置合并。值得注意的是，后面有一个记录<code>configFileDependencies</code>的操作。因为配置文件代码可能会有第三方库的依赖，所以当第三方库依赖的代码更改时，Vite 可以通过 HMR 处理逻辑中记录的<code>configFileDependencies</code>检测到更改，再重启 DevServer ，来保证当前生效的配置永远是最新的。</p><h3 id="_2-解析用户插件" tabindex="-1"><a class="header-anchor" href="#_2-解析用户插件" aria-hidden="true">#</a> 2. 解析用户插件</h3><p>第二个重点环节是 <strong>解析用户插件</strong>。首先，我们通过 <code>apply 参数</code> 过滤出需要生效的用户插件。为什么这么做呢？因为有些插件只在开发阶段生效，或者说只在生产环境生效，我们可以通过 <code>apply: &#39;serve&#39; 或 &#39;build&#39;</code> 来指定它们，同时也可以将<code>apply</code>配置为一个函数，来自定义插件生效的条件。解析代码如下:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// resolve plugins</span>
<span class="token keyword">const</span> rawUserPlugins <span class="token operator">=</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>plugins <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">.</span>apply<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> p<span class="token punctuation">.</span>apply <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token comment">// apply 为一个函数的情况</span>
    <span class="token keyword">return</span> <span class="token function">p</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>config<span class="token punctuation">,</span> mode <span class="token punctuation">}</span><span class="token punctuation">,</span> configEnv<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> p<span class="token punctuation">.</span>apply <span class="token operator">===</span> command
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">as</span> Plugin<span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token comment">// 对用户插件进行排序</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>prePlugins<span class="token punctuation">,</span> normalPlugins<span class="token punctuation">,</span> postPlugins<span class="token punctuation">]</span> <span class="token operator">=</span>
  <span class="token function">sortUserPlugins</span><span class="token punctuation">(</span>rawUserPlugins<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着，Vite 会拿到这些过滤且排序完成的插件，依次调用插件 config 钩子，进行配置合并:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// run config hooks</span>
<span class="token keyword">const</span> userPlugins <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>prePlugins<span class="token punctuation">,</span> <span class="token operator">...</span>normalPlugins<span class="token punctuation">,</span> <span class="token operator">...</span>postPlugins<span class="token punctuation">]</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> p <span class="token keyword">of</span> userPlugins<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> p<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> configEnv<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// mergeConfig 为具体的配置合并函数，大家有兴趣可以阅读一下实现</span>
      config <span class="token operator">=</span> <span class="token function">mergeConfig</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> res<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后解析项目的根目录即 <code>root</code> 参数，默认取 <code>process.cwd()</code>的结果:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// resolve root</span>
<span class="token keyword">const</span> resolvedRoot <span class="token operator">=</span> <span class="token function">normalizePath</span><span class="token punctuation">(</span>
  config<span class="token punctuation">.</span>root <span class="token operator">?</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>root<span class="token punctuation">)</span> <span class="token operator">:</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>紧接着处理 <code>alias</code> ，这里需要加上一些内置的 alias 规则，如<code>@vite/env</code>、<code>@vite/client</code>这种直接重定向到 Vite 内部的模块:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// resolve alias with internal client alias</span>
<span class="token keyword">const</span> resolvedAlias <span class="token operator">=</span> <span class="token function">mergeAlias</span><span class="token punctuation">(</span>
  clientAlias<span class="token punctuation">,</span>
  config<span class="token punctuation">.</span>resolve<span class="token operator">?.</span>alias <span class="token operator">||</span> config<span class="token punctuation">.</span>alias <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token literal-property property">resolveOptions</span><span class="token operator">:</span> ResolvedConfig<span class="token punctuation">[</span><span class="token string">&#39;resolve&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">dedupe</span><span class="token operator">:</span> config<span class="token punctuation">.</span>dedupe<span class="token punctuation">,</span>
  <span class="token operator">...</span>config<span class="token punctuation">.</span>resolve<span class="token punctuation">,</span>
  <span class="token literal-property property">alias</span><span class="token operator">:</span> resolvedAlias
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-加载环境变量" tabindex="-1"><a class="header-anchor" href="#_3-加载环境变量" aria-hidden="true">#</a> 3. 加载环境变量</h3><p>现在，我们进入第三个核心环节: <strong>加载环境变量</strong>，它的实现代码如下:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// load .env files</span>
<span class="token keyword">const</span> envDir <span class="token operator">=</span> config<span class="token punctuation">.</span>envDir
  <span class="token operator">?</span> <span class="token function">normalizePath</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>resolvedRoot<span class="token punctuation">,</span> config<span class="token punctuation">.</span>envDir<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token operator">:</span> resolvedRoot
<span class="token keyword">const</span> userEnv <span class="token operator">=</span>
  inlineConfig<span class="token punctuation">.</span>envFile <span class="token operator">!==</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span>
  <span class="token function">loadEnv</span><span class="token punctuation">(</span>mode<span class="token punctuation">,</span> envDir<span class="token punctuation">,</span> <span class="token function">resolveEnvPrefix</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>loadEnv 其实就是扫描 <code>p<wbr>rocess.env</code> 与 <code>.env</code>文件，解析出 env 对象，值得注意的是，这个对象的属性最终会被挂载到<code>i<wbr>mport.meta.env</code> 这个全局对象上。</p><p>解析 env 对象的实现思路如下:</p><ul><li><p>遍历 p<wbr>rocess.env 的属性，拿到<strong>指定前缀</strong>开头的属性（默认指定为<code>VITE_</code>），并挂载 env 对象上</p></li><li><p>遍历 .env 文件，解析文件，然后往 env 对象挂载那些以<strong>指定前缀</strong>开头的属性。遍历的文件先后顺序如下(下面的 <code>mode</code> 开发阶段为 <code>development</code>，生产环境为<code>production</code>):</p><ul><li><code>.env.\${mode}.local</code></li><li><code>.env.\${mode}</code></li><li><code>.env.local</code></li><li><code>.env</code></li></ul></li></ul><blockquote><p>特殊情况: 如果中途遇到 NODE_ENV 属性，则挂到 <code>p<wbr>rocess.env.VITE_USER_NODE_ENV</code>，Vite 会优先通过这个属性来决定是否走<code>生产环境</code>的构建。</p></blockquote><p>接下来是对资源公共路径即<code>base URL</code>的处理，逻辑集中在 resolveBaseUrl 函数当中:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 解析 base url</span>
<span class="token keyword">const</span> <span class="token constant">BASE_URL</span> <span class="token operator">=</span> <span class="token function">resolveBaseUrl</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>base<span class="token punctuation">,</span> command <span class="token operator">===</span> <span class="token string">&#39;build&#39;</span><span class="token punctuation">,</span> logger<span class="token punctuation">)</span>
<span class="token comment">// 解析生产环境构建配置</span>
<span class="token keyword">const</span> resolvedBuildOptions <span class="token operator">=</span> <span class="token function">resolveBuildOptions</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>build<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>resolveBaseUrl</code>里面有这些处理规则需要注意:</p><ul><li>空字符或者 <code>./</code> 在开发阶段特殊处理，全部重写为<code>/</code></li><li><code>.</code>开头的路径，自动重写为 <code>/</code></li><li>以<code>http(s)://</code>开头的路径，在开发环境下重写为对应的 pathname</li><li>确保路径开头和结尾都是<code>/</code></li></ul><p>当然，还有对<code>cacheDir</code>的解析，这个路径相对于在 Vite 预编译时写入依赖产物的路径:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// resolve cache directory</span>
<span class="token keyword">const</span> pkgPath <span class="token operator">=</span> <span class="token function">lookupFile</span><span class="token punctuation">(</span>resolvedRoot<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">package.json</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token comment">/* pathOnly */</span><span class="token punctuation">)</span>
<span class="token comment">// 默认为 node_module/.vite</span>
<span class="token keyword">const</span> cacheDir <span class="token operator">=</span> config<span class="token punctuation">.</span>cacheDir
  <span class="token operator">?</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>resolvedRoot<span class="token punctuation">,</span> config<span class="token punctuation">.</span>cacheDir<span class="token punctuation">)</span>
  <span class="token operator">:</span> pkgPath <span class="token operator">&amp;&amp;</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span>pkgPath<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">node_modules/.vite</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>紧接着处理用户配置的<code>assetsInclude</code>，将其转换为一个过滤器函数:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> assetsFilter <span class="token operator">=</span> config<span class="token punctuation">.</span>assetsInclude
  <span class="token operator">?</span> <span class="token function">createFilter</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>assetsInclude<span class="token punctuation">)</span>
  <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token boolean">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Vite 后面会将用户传入的 assetsInclude 和内置的规则合并:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">assetsInclude</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">file</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token constant">DEFAULT_ASSETS_RE</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">assetsFilter</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个配置决定是否让 Vite 将对应的后缀名视为<code>静态资源文件</code>（asset）来处理。</p><h3 id="_4-路径解析器工厂" tabindex="-1"><a class="header-anchor" href="#_4-路径解析器工厂" aria-hidden="true">#</a> 4. 路径解析器工厂</h3><p>接下来，进入到第四个核心环节: <strong>定义路径解析器工厂</strong>。这里所说的<code>路径解析器</code>，是指调用插件容器进行<code>路径解析</code>的函数。代码结构是这个样子的:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token literal-property property">createResolver</span><span class="token operator">:</span> ResolvedConfig<span class="token punctuation">[</span><span class="token string">&#39;createResolver&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> <span class="token literal-property property">aliasContainer</span><span class="token operator">:</span> PluginContainer <span class="token operator">|</span> <span class="token keyword">undefined</span>
  <span class="token keyword">let</span> <span class="token literal-property property">resolverContainer</span><span class="token operator">:</span> PluginContainer <span class="token operator">|</span> <span class="token keyword">undefined</span>
  <span class="token comment">// 返回的函数可以理解为一个解析器</span>
  <span class="token keyword">return</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">id<span class="token punctuation">,</span> importer<span class="token punctuation">,</span> aliasOnly<span class="token punctuation">,</span> ssr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token literal-property property">container</span><span class="token operator">:</span> PluginContainer
    <span class="token keyword">if</span> <span class="token punctuation">(</span>aliasOnly<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      container <span class="token operator">=</span>
        aliasContainer <span class="token operator">||</span>
        <span class="token comment">// 新建 aliasContainer</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      container <span class="token operator">=</span>
        resolverContainer <span class="token operator">||</span>
        <span class="token comment">// 新建 resolveContainer</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">await</span> container<span class="token punctuation">.</span><span class="token function">resolveId</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> importer<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> ssr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?.</span>id
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个解析器未来会在<strong>依赖预构建</strong>的时候用上，具体用法如下:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> resolve <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">createResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 调用以拿到 react 路径</span>
<span class="token function">rseolve</span><span class="token punctuation">(</span><span class="token string">&#39;react&#39;</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里有<code>aliasContainer</code>和<code>resolverContainer</code>两个工具对象，它们都含有<code>resolveId</code>这个专门解析路径的方法，可以被 Vite 调用来获取解析结果。</p><blockquote><p>两个工具对象的本质是<code>PluginContainer</code>，我们将在「编译流水线」小节详细介绍<code>PluginContainer</code> 的特点和实现。</p></blockquote><p>接着会顺便处理一个 public 目录，也就是 Vite 作为静态资源服务的目录:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> publicDir <span class="token punctuation">}</span> <span class="token operator">=</span> config
<span class="token keyword">const</span> resolvedPublicDir <span class="token operator">=</span>
  publicDir <span class="token operator">!==</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> publicDir <span class="token operator">!==</span> <span class="token string">&#39;&#39;</span>
    <span class="token operator">?</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>
        resolvedRoot<span class="token punctuation">,</span>
        <span class="token keyword">typeof</span> publicDir <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span> <span class="token operator">?</span> publicDir <span class="token operator">:</span> <span class="token string">&#39;public&#39;</span>
      <span class="token punctuation">)</span>
    <span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，配置已经基本上解析完成，最后通过 resolved 对象来整理一下:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token literal-property property">resolved</span><span class="token operator">:</span> ResolvedConfig <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>config<span class="token punctuation">,</span>
  <span class="token literal-property property">configFile</span><span class="token operator">:</span> configFile <span class="token operator">?</span> <span class="token function">normalizePath</span><span class="token punctuation">(</span>configFile<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  configFileDependencies<span class="token punctuation">,</span>
  inlineConfig<span class="token punctuation">,</span>
  <span class="token literal-property property">root</span><span class="token operator">:</span> resolvedRoot<span class="token punctuation">,</span>
  <span class="token literal-property property">base</span><span class="token operator">:</span> <span class="token constant">BASE_URL</span>
  <span class="token comment">// 其余配置不再一一列举</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-生成插件流水线" tabindex="-1"><a class="header-anchor" href="#_5-生成插件流水线" aria-hidden="true">#</a> 5. 生成插件流水线</h3><p>最后，我们进入第五个环节: <strong>生成插件流水线</strong>。代码如下:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">(</span>resolved<span class="token punctuation">.</span>plugins <span class="token keyword">as</span> Plugin<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">resolvePlugins</span><span class="token punctuation">(</span>
  resolved<span class="token punctuation">,</span>
  prePlugins<span class="token punctuation">,</span>
  normalPlugins<span class="token punctuation">,</span>
  postPlugins
<span class="token punctuation">)</span>

<span class="token comment">// call configResolved hooks</span>
<span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>userPlugins<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>configResolved<span class="token operator">?.</span><span class="token punctuation">(</span>resolved<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先生成完整插件列表传给<code>resolve.plugins</code>，而后调用每个插件的 <code>configResolved</code> 钩子函数。其中 <code>resolvePlugins</code> 内部细节比较多，插件数量比较庞大，我们暂时不去深究具体实现，编译流水线这一小节再来详细介绍。</p><p>至此，所有核心配置都生成完毕。不过，后面 Vite 还会处理一些边界情况，在用户配置不合理的时候，给用户对应的提示。比如：用户直接使用<code>alias</code>时，Vite 会提示使用<code>resolve.alias</code>。</p><p>最后，<code>resolveConfig</code> 函数会返回 resolved 对象，也就是最后的配置集合，那么配置解析服务到底也就结束了。</p><h2 id="加载配置文件详解" tabindex="-1"><a class="header-anchor" href="#加载配置文件详解" aria-hidden="true">#</a> 加载配置文件详解</h2><p>配置解析服务的流程梳理完，但刚开始<code>加载配置文件(loadConfigFromFile)</code>的实现我们还没有具体分析，先来回顾下代码。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> loadResult <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">loadConfigFromFile</span><span class="token punctuation">(</span><span class="token comment">/*省略传参*/</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里的逻辑稍微有点复杂，很难梳理清楚，所以我们不妨借助刚才梳理的配置解析流程，深入<code>loadConfigFromFile</code> 的细节中，研究下 Vite 对于配置文件加载的实现思路。</p><p>首先，我们来分析下需要处理的配置文件类型，根据<code>文件后缀</code>和<code>模块格式</code>可以分为下面这几类:</p><ul><li>TS + ESM 格式</li><li>TS + CommonJS 格式</li><li>JS + ESM 格式</li><li>JS + CommonJS 格式</li></ul><p>那么，Vite 是如何加载配置文件的？一共分两个步骤:</p><ol><li>识别出配置文件的类别</li><li>根据不同的类别分别解析出配置内容</li></ol><h3 id="_1-识别配置文件的类别" tabindex="-1"><a class="header-anchor" href="#_1-识别配置文件的类别" aria-hidden="true">#</a> 1. 识别配置文件的类别</h3><p>首先 Vite 会检查项目的 package.json ，如果有<code>type: &quot;module&quot;</code>则打上 <code>isESM</code> 的标识:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> pkg <span class="token operator">=</span> <span class="token function">lookupFile</span><span class="token punctuation">(</span>configRoot<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;package.json&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>pkg <span class="token operator">&amp;&amp;</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>pkg<span class="token punctuation">)</span><span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;module&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    isMjs <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，Vite 会寻找配置文件路径，代码简化后如下:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> isTS <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token keyword">let</span> isESM <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token keyword">let</span> <span class="token literal-property property">dependencies</span><span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token comment">// 如果命令行有指定配置文件路径</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>configFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  resolvedPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>configFile<span class="token punctuation">)</span>
  <span class="token comment">// 根据后缀判断是否为 ts 或者 esm，打上 flag</span>
  isTS <span class="token operator">=</span> configFile<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;.ts&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>configFile<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;.mjs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      isESM <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token comment">// 从项目根目录寻找配置文件路径，寻找顺序:</span>
  <span class="token comment">// - vite.config.js</span>
  <span class="token comment">// - vite.config.mjs</span>
  <span class="token comment">// - vite.config.ts</span>
  <span class="token comment">// - vite.config.cjs</span>
  <span class="token keyword">const</span> jsconfigFile <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>configRoot<span class="token punctuation">,</span> <span class="token string">&#39;vite.config.js&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>jsconfigFile<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    resolvedPath <span class="token operator">=</span> jsconfigFile
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>resolvedPath<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> mjsconfigFile <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>configRoot<span class="token punctuation">,</span> <span class="token string">&#39;vite.config.mjs&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>mjsconfigFile<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      resolvedPath <span class="token operator">=</span> mjsconfigFile
      isESM <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>resolvedPath<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> tsconfigFile <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>configRoot<span class="token punctuation">,</span> <span class="token string">&#39;vite.config.ts&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>tsconfigFile<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      resolvedPath <span class="token operator">=</span> tsconfigFile
      isTS <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>resolvedPath<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> cjsConfigFile <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>configRoot<span class="token punctuation">,</span> <span class="token string">&#39;vite.config.cjs&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>cjsConfigFile<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      resolvedPath <span class="token operator">=</span> cjsConfigFile
      isESM <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在寻找路径的同时， Vite 也会给当前配置文件打上<code>isESM</code>和<code>isTS</code>的标识，方便后续的解析。</p><h3 id="_2-根据类别解析配置" tabindex="-1"><a class="header-anchor" href="#_2-根据类别解析配置" aria-hidden="true">#</a> 2. 根据类别解析配置</h3><h4 id="esm-格式" tabindex="-1"><a class="header-anchor" href="#esm-格式" aria-hidden="true">#</a> ESM 格式</h4><p>对于 ESM 格式配置的处理代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token literal-property property">userConfig</span><span class="token operator">:</span> UserConfigExport <span class="token operator">|</span> <span class="token keyword">undefined</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>isESM<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> fileUrl <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;url&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pathToFileURL</span><span class="token punctuation">(</span>resolvedPath<span class="token punctuation">)</span>
  <span class="token comment">// 首先对代码进行打包</span>
  <span class="token keyword">const</span> bundled <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">bundleConfigFile</span><span class="token punctuation">(</span>resolvedPath<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
  dependencies <span class="token operator">=</span> bundled<span class="token punctuation">.</span>dependencies
  <span class="token comment">// TS + ESM</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isTS<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>resolvedPath <span class="token operator">+</span> <span class="token string">&#39;.js&#39;</span><span class="token punctuation">,</span> bundled<span class="token punctuation">.</span>code<span class="token punctuation">)</span>
    userConfig <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">dynamicImport</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>fileUrl<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.js?t=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span>default
    fs<span class="token punctuation">.</span><span class="token function">unlinkSync</span><span class="token punctuation">(</span>resolvedPath <span class="token operator">+</span> <span class="token string">&#39;.js&#39;</span><span class="token punctuation">)</span>
    <span class="token function">debug</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">TS + native esm config loaded in </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> fileUrl<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> 
  <span class="token comment">//  JS + ESM</span>
  <span class="token keyword">else</span> <span class="token punctuation">{</span>
    userConfig <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">dynamicImport</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>fileUrl<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?t=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default
    <span class="token function">debug</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">native esm config loaded in </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> fileUrl<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先通过 Esbuild 将配置文件编译打包成 js 代码:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> bundled <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">bundleConfigFile</span><span class="token punctuation">(</span>resolvedPath<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token comment">// 记录依赖</span>
dependencies <span class="token operator">=</span> bundled<span class="token punctuation">.</span>dependencies
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于 TS 配置文件来说，Vite 会将编译后的 js 代码写入<code>临时文件</code>，通过 Node 原生 ESM Import 来读取这个临时的内容，以获取到配置内容，再直接删掉临时文件:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>resolvedPath <span class="token operator">+</span> <span class="token string">&#39;.js&#39;</span><span class="token punctuation">,</span> bundled<span class="token punctuation">.</span>code<span class="token punctuation">)</span>
userConfig <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">dynamicImport</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>fileUrl<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.js?t=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default
fs<span class="token punctuation">.</span><span class="token function">unlinkSync</span><span class="token punctuation">(</span>resolvedPath <span class="token operator">+</span> <span class="token string">&#39;.js&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>以上这种先编译配置文件，再将产物写入临时目录，最后加载临时目录产物的做法，也是 AOT (Ahead Of Time)编译技术的一种具体实现。</p></blockquote><p>而对于 JS 配置文件来说，Vite 会直接通过 Node 原生 ESM Import 来读取，也是使用 dynamicImport 函数的逻辑。<code>dynamicImport</code> 的实现如下:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> dynamicImport <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">&#39;file&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;return import(file)&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你可能会问，为什么要用 new Function 包裹？这是为了避免打包工具处理这段代码，比如 <code>Rollup</code> 和 <code>TSC</code>，类似的手段还有 <code>eval</code>。</p><p>你可能还会问，为什么 import 路径结果要加上时间戳 query？这其实是为了让 dev server 重启后仍然读取最新的配置，避免缓存。</p><h3 id="commonjs-格式" tabindex="-1"><a class="header-anchor" href="#commonjs-格式" aria-hidden="true">#</a> CommonJS 格式</h3><p>对于 CommonJS 格式的配置文件，Vite 集中进行了解析:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 对于 js/ts 均生效</span>
<span class="token comment">// 使用 esbuild 将配置文件编译成 commonjs 格式的 bundle 文件</span>
<span class="token keyword">const</span> bundled <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">bundleConfigFile</span><span class="token punctuation">(</span>resolvedPath<span class="token punctuation">)</span>
dependencies <span class="token operator">=</span> bundled<span class="token punctuation">.</span>dependencies
<span class="token comment">// 加载编译后的 bundle 代码</span>
userConfig <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">loadConfigFromBundledFile</span><span class="token punctuation">(</span>resolvedPath<span class="token punctuation">,</span> bundled<span class="token punctuation">.</span>code<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>bundleConfigFile</code> 的逻辑上文中已经说了，主要是通过 Esbuild 将配置文件打包，拿到打包后的 bundle 代码以及配置文件的依赖(dependencies)。</p><p>而接下来的事情就是考虑如何加载 bundle 代码了，这也是<code>loadConfigFromBundledFile</code> 要做的事情。我们来看一下这个函数具体的实现:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">loadConfigFromBundledFile</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">fileName</span><span class="token operator">:</span> string<span class="token punctuation">,</span>
  <span class="token literal-property property">bundledCode</span><span class="token operator">:</span> string</span>
<span class="token punctuation">)</span><span class="token operator">:</span> Promise<span class="token operator">&lt;</span>UserConfig<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> extension <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span>
  <span class="token keyword">const</span> defaultLoader <span class="token operator">=</span> require<span class="token punctuation">.</span>extensions<span class="token punctuation">[</span>extension<span class="token punctuation">]</span><span class="token operator">!</span>
  require<span class="token punctuation">.</span>extensions<span class="token punctuation">[</span>extension<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">module</span><span class="token operator">:</span> NodeModule<span class="token punctuation">,</span> <span class="token literal-property property">filename</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>filename <span class="token operator">===</span> fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token punctuation">;</span><span class="token punctuation">(</span>module <span class="token keyword">as</span> NodeModuleWithCompile<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">_compile</span><span class="token punctuation">(</span>bundledCode<span class="token punctuation">,</span> filename<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">defaultLoader</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> filename<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 清除 require 缓存</span>
  <span class="token keyword">delete</span> require<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">]</span>
  <span class="token keyword">const</span> raw <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span>
  <span class="token keyword">const</span> config <span class="token operator">=</span> raw<span class="token punctuation">.</span>__esModule <span class="token operator">?</span> raw<span class="token punctuation">.</span>default <span class="token operator">:</span> raw
  require<span class="token punctuation">.</span>extensions<span class="token punctuation">[</span>extension<span class="token punctuation">]</span> <span class="token operator">=</span> defaultLoader
  <span class="token keyword">return</span> config
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大体的思路是通过拦截原生 require.extensions 的加载函数来实现对 bundle 后配置代码的加载。代码如下:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 默认加载器</span>
<span class="token keyword">const</span> defaultLoader <span class="token operator">=</span> require<span class="token punctuation">.</span>extensions<span class="token punctuation">[</span>extension<span class="token punctuation">]</span><span class="token operator">!</span>
<span class="token comment">// 拦截原生 require 对于\`.js\`或者\`.ts\`的加载</span>
require<span class="token punctuation">.</span>extensions<span class="token punctuation">[</span>extension<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">module</span><span class="token operator">:</span> NodeModule<span class="token punctuation">,</span> <span class="token literal-property property">filename</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 针对 vite 配置文件的加载特殊处理</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>filename <span class="token operator">===</span> fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">;</span><span class="token punctuation">(</span>module <span class="token keyword">as</span> NodeModuleWithCompile<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">_compile</span><span class="token punctuation">(</span>bundledCode<span class="token punctuation">,</span> filename<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">defaultLoader</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> filename<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而原生 require 对于 js 文件的加载代码是这样的:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Module<span class="token punctuation">.</span>_extensions<span class="token punctuation">[</span><span class="token string">&#39;.js&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> filename</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> content <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span>
  module<span class="token punctuation">.</span><span class="token function">_compile</span><span class="token punctuation">(</span><span class="token function">stripBOM</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Node.js 内部也是先读取文件内容，然后编译该模块。当代码中调用 <code>module._compile</code> 相当于手动编译一个模块，该方法在 Node 内部的实现如下:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Module</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_compile</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">content<span class="token punctuation">,</span> filename</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span>
  <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> require<span class="token punctuation">,</span> self<span class="token punctuation">,</span> filename<span class="token punctuation">,</span> dirname<span class="token punctuation">]</span>
  <span class="token keyword">return</span> <span class="token function">compiledWrapper</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>等同于下面的形式:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">exports<span class="token punctuation">,</span> require<span class="token punctuation">,</span> module<span class="token punctuation">,</span> __filename<span class="token punctuation">,</span> __dirname</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 执行 module._compile 方法中传入的代码</span>
  <span class="token comment">// 返回 exports 对象</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在调用完 <code>module._compile</code> 编译完配置代码后，进行一次手动的 require，即可拿到配置对象:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> raw <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span>
<span class="token keyword">const</span> config <span class="token operator">=</span> raw<span class="token punctuation">.</span>__esModule <span class="token operator">?</span> raw<span class="token punctuation">.</span>default <span class="token operator">:</span> raw
<span class="token comment">// 恢复原生的加载方法</span>
require<span class="token punctuation">.</span>extensions<span class="token punctuation">[</span>extension<span class="token punctuation">]</span> <span class="token operator">=</span> defaultLoader
<span class="token comment">// 返回配置</span>
<span class="token keyword">return</span> config
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这种运行时加载 TS 配置的方式，也叫做 <code>JIT</code>(即时编译)，这种方式和 <code>AOT</code> 最大的区别在于不会将内存中计算出来的 js 代码写入磁盘再加载，而是通过拦截 Node.js 原生 require.extension 方法实现即时加载。</p></blockquote><p>至此，配置文件的内容已经读取完成，等后处理完成再返回即可:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 处理是函数的情况</span>
<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> userConfig <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span>
  <span class="token operator">?</span> <span class="token function">userConfig</span><span class="token punctuation">(</span>configEnv<span class="token punctuation">)</span>
  <span class="token operator">:</span> userConfig<span class="token punctuation">)</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">config must export or return an object.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 接下来返回最终的配置信息</span>
<span class="token keyword">return</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token function">normalizePath</span><span class="token punctuation">(</span>resolvedPath<span class="token punctuation">)</span><span class="token punctuation">,</span>
  config<span class="token punctuation">,</span>
  <span class="token comment">// esbuild 打包过程中搜集的依赖</span>
  dependencies
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>配置解析的源码精读部分到这里就结束了，再次恭喜你，学习完了本小节的内容。本小节中，你需要重点掌握<code>Vite 配置解析的整体流程</code>和<code>加载配置文件的方法</code>。</p><p>首先，Vite 配置文件解析的逻辑由 <code>resolveConfig</code> 函数统一实现，其中经历了加载配置文件、解析用户插件、加载环境变量、创建路径解析器工厂和生成插件流水线这几个主要的流程。</p><p>其次，在<code>加载配置文件</code>的过程中，Vite 需要处理四种类型的配置文件，其中对于 ESM 和 CommonJS 两种格式的 TS 文件，分别采用了<code>AOT</code>和<code>JIT</code>两种编译技术实现了配置加载。</p><p>最后，我想留一个问题: 如果现在让你设计一个 cli 工具，用来支持 TS 的配置文件，你会如何进行配置解析呢？</p>`,99);function k(v,m){const e=t("ExternalLinkIcon");return o(),c("div",null,[u,s("p",null,[n("我们先来梳理整体的流程，Vite 中的配置解析由 "),s("a",r,[n("resolveConfig"),i(e)]),n(" 函数来实现，你可以对照源码一起学习。")]),d])}const g=p(l,[["render",k],["__file","di20zhang—peizhijiexifuwu：peizhiwenjianzaiVitenabubeizhuanhuanchengshimeyangziliao.html.vue"]]);export{g as default};
