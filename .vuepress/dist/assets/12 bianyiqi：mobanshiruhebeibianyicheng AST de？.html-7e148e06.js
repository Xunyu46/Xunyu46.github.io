import{_ as p,r as e,o,c,b as s,d as n,e as l,a}from"./app-48690364.js";const i={},u=a('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>通过前面的小节，我们知道，组件的渲染成 <code>vnode</code> 的过程，其实就是组件的 <code>render</code> 函数调用执行的结果。但是我们写 <code>Vue</code> 项目时，经常会使用 <code>&lt;template&gt;</code> 的模版式写法，很少使用 <code>render</code> 函数的写法，那么 <code>Vue</code> 是如何实现从 <code>模版</code> 转成 <code>render</code> 函数的呢？</p>',2),r=s("code",null,"render",-1),d={href:"https://vue-next-template-explorer.netlify.app/#eyJzcmMiOiI8ZGl2PkhlbGxvIFdvcmxkPC9kaXY+Iiwib3B0aW9ucyI6e319",target:"_blank",rel:"noopener noreferrer"},k=a(`<p><code>Vue3</code> 的核心编译源码文件在 <code>packages/compiler-dom/src/index.ts</code> 中：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">compile</span><span class="token punctuation">(</span><span class="token parameter">template<span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
  <span class="token keyword">return</span> <span class="token function">baseCompile</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> <span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> parserOptions<span class="token punctuation">,</span> options<span class="token punctuation">,</span> <span class="token punctuation">{</span> 
    <span class="token literal-property property">nodeTransforms</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>DOMNodeTransforms<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>nodeTransforms <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
    <span class="token literal-property property">directiveTransforms</span><span class="token operator">:</span> <span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> DOMDirectiveTransforms<span class="token punctuation">,</span> options<span class="token punctuation">.</span>directiveTransforms <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
    <span class="token literal-property property">transformHoist</span><span class="token operator">:</span>  <span class="token keyword">null</span> 
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其核心调用的就是 <code>baseCompile</code> 函数，接下来一起看一下 <code>baseCompile</code> 的实现：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>export function baseCompile(template, options = {}) {
  // 如果是字符串模版，则直接进行解析，转成 AST
  const ast = isString(template) ? baseParse(template, options) : template
  const [nodeTransforms, directiveTransforms] =
    getBaseTransformPreset(prefixIdentifiers)
  
  // AST 转换成 JS AST
  transform(
    ast,
    extend({}, options, {
      prefixIdentifiers,
      nodeTransforms: [
        ...nodeTransforms,
        ...(options.nodeTransforms || []) // user transforms
      ],
      directiveTransforms: extend(
        {},
        directiveTransforms,
        options.directiveTransforms || {} // user transforms
      )
    })
  )
  
  // JS AST 生成代码
  return generate(
    ast,
    extend({}, options, {
      prefixIdentifiers
    })
  )
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到 <code>baseCompile</code> 函数核心就只有 3 步：</p><ol><li>对 <code>template</code> 模版进行词法和语法分析，生成 <code>AST</code></li><li><code>AST</code> 转换成附有 <code>JS</code> 语义的 <code>JavaScript AST</code></li><li>解析 <code>JavaScript AST</code> 生成代码</li></ol><p>本小节着重来介绍下第一步</p><h2 id="解析-template-生成-ast" tabindex="-1"><a class="header-anchor" href="#解析-template-生成-ast" aria-hidden="true">#</a> 解析 <code>template</code> 生成 <code>AST</code></h2><p>一个简单的模版如下：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 这是一段注释 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{ msg }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个模版经过 <code>baseParse</code> 后转成的 <code>AST</code> 结果如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token property">&quot;children&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
      <span class="token property">&quot;content&quot;</span><span class="token operator">:</span> <span class="token string">&quot; 这是一段注释 &quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;loc&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token property">&quot;column&quot;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
          <span class="token property">&quot;line&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
          <span class="token property">&quot;offset&quot;</span><span class="token operator">:</span> <span class="token number">3</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token property">&quot;end&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token property">&quot;column&quot;</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
          <span class="token property">&quot;line&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
          <span class="token property">&quot;offset&quot;</span><span class="token operator">:</span> <span class="token number">18</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token property">&quot;source&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&lt;!-- 这是一段注释 --&gt;&quot;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token property">&quot;ns&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      <span class="token property">&quot;tag&quot;</span><span class="token operator">:</span> <span class="token string">&quot;p&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;tagType&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      <span class="token property">&quot;props&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token property">&quot;isSelfClosing&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token property">&quot;children&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
          <span class="token property">&quot;content&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
            <span class="token property">&quot;isStatic&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
            <span class="token property">&quot;constType&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token property">&quot;content&quot;</span><span class="token operator">:</span> <span class="token string">&quot;msg&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;loc&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
              <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token property">&quot;column&quot;</span><span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span>
                <span class="token property">&quot;line&quot;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
                <span class="token property">&quot;offset&quot;</span><span class="token operator">:</span> <span class="token number">27</span>
              <span class="token punctuation">}</span><span class="token punctuation">,</span>
              <span class="token property">&quot;end&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token property">&quot;column&quot;</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
                <span class="token property">&quot;line&quot;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
                <span class="token property">&quot;offset&quot;</span><span class="token operator">:</span> <span class="token number">30</span>
              <span class="token punctuation">}</span><span class="token punctuation">,</span>
              <span class="token property">&quot;source&quot;</span><span class="token operator">:</span> <span class="token string">&quot;msg&quot;</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token property">&quot;loc&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
              <span class="token property">&quot;column&quot;</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>
              <span class="token property">&quot;line&quot;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
              <span class="token property">&quot;offset&quot;</span><span class="token operator">:</span> <span class="token number">24</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token property">&quot;end&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
              <span class="token property">&quot;column&quot;</span><span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">,</span>
              <span class="token property">&quot;line&quot;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
              <span class="token property">&quot;offset&quot;</span><span class="token operator">:</span> <span class="token number">33</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token property">&quot;source&quot;</span><span class="token operator">:</span> <span class="token string">&quot;{{ msg }}&quot;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token property">&quot;loc&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token property">&quot;column&quot;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
          <span class="token property">&quot;line&quot;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
          <span class="token property">&quot;offset&quot;</span><span class="token operator">:</span> <span class="token number">21</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token property">&quot;end&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token property">&quot;column&quot;</span><span class="token operator">:</span> <span class="token number">19</span><span class="token punctuation">,</span>
          <span class="token property">&quot;line&quot;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
          <span class="token property">&quot;offset&quot;</span><span class="token operator">:</span> <span class="token number">37</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token property">&quot;source&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&lt;p&gt;{{ msg }}&lt;/p&gt;&quot;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;helpers&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;components&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;directives&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;hoists&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;imports&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;cached&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token property">&quot;temps&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token property">&quot;loc&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;column&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token property">&quot;line&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token property">&quot;offset&quot;</span><span class="token operator">:</span> <span class="token number">0</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;end&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;column&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token property">&quot;line&quot;</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
      <span class="token property">&quot;offset&quot;</span><span class="token operator">:</span> <span class="token number">38</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;source&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\\n  &lt;!-- 这是一段注释 --&gt;\\n  &lt;p&gt;{{ msg }}&lt;/p&gt;\\n&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中有一个 <code>type</code> 字段，用来标记 <code>AST</code> 节点的类型，这里涉及到的枚举如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token keyword">enum</span> NodeTypes <span class="token punctuation">{</span>
  <span class="token constant">ROOT</span><span class="token punctuation">,</span> <span class="token comment">// 0 根节点</span>
  <span class="token constant">ELEMENT</span><span class="token punctuation">,</span> <span class="token comment">// 1 元素节点</span>
  <span class="token constant">TEXT</span><span class="token punctuation">,</span> <span class="token comment">// 2 文本节点</span>
  <span class="token constant">COMMENT</span><span class="token punctuation">,</span> <span class="token comment">// 3 注释节点</span>
  <span class="token constant">SIMPLE_EXPRESSION</span><span class="token punctuation">,</span> <span class="token comment">// 4 表达式</span>
  <span class="token constant">INTERPOLATION</span><span class="token punctuation">,</span> <span class="token comment">// 5 插值节点</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，<code>props</code> 描述的是节点的属性，<code>loc</code> 代表的是节点对应的代码相关信息，包括代码的起始位置等等。</p><p>有了上面的一些基础知识，我们来看看生成 <code>AST</code> 的核心算法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">baseParse</span><span class="token punctuation">(</span><span class="token parameter">content<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 创建解析上下文</span>
  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token function">createParserContext</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> options<span class="token punctuation">)</span>
  <span class="token comment">// 获取起点位置</span>
  <span class="token keyword">const</span> start <span class="token operator">=</span> <span class="token function">getCursor</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>
  <span class="token comment">// 创建 AST</span>
  <span class="token keyword">return</span> <span class="token function">createRoot</span><span class="token punctuation">(</span>
    <span class="token function">parseChildren</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> TextModes<span class="token punctuation">.</span><span class="token constant">DATA</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">getSelection</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> start<span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中创建解析上下文得到的 <code>context</code> 的过程：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createParserContext</span><span class="token punctuation">(</span><span class="token parameter">content<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
  <span class="token keyword">return</span> <span class="token punctuation">{</span> 
    <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> defaultParserOptions<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">,</span> 
    <span class="token literal-property property">column</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> 
    <span class="token literal-property property">line</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> 
    <span class="token literal-property property">offset</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> 
    <span class="token comment">// 存储原始模版内容</span>
    <span class="token literal-property property">originalSource</span><span class="token operator">:</span> content<span class="token punctuation">,</span> 
    <span class="token literal-property property">source</span><span class="token operator">:</span> content<span class="token punctuation">,</span> 
    <span class="token literal-property property">inPre</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> 
    <span class="token literal-property property">inVPre</span><span class="token operator">:</span> <span class="token boolean">false</span> 
  <span class="token punctuation">}</span> 
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>createParserContext</code> 本质就是返回了一个 <code>context</code> 对象，用来标记解析过程中的上下文内容。</p><p>接下来我们核心需要分析的是 <code>parseChildren</code> 函数，该函数是生成 <code>AST</code> 的核心函数。通过函数调用我们大致清楚该函数传入了初始化生成的 <code>context</code> 对象，<code>context</code> 对象中包含我们初始的模版内容，存储在 <code>originalSource</code> 和 <code>source</code> 中。</p><p>先来看看 <code>parseChildren</code> 对节点内容解析的过程：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">parseChildren</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> mode<span class="token punctuation">,</span> ancestors</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 获取父节点</span>
  <span class="token keyword">const</span> parent <span class="token operator">=</span> <span class="token function">last</span><span class="token punctuation">(</span>ancestors<span class="token punctuation">)</span>
  <span class="token keyword">const</span> ns <span class="token operator">=</span> parent <span class="token operator">?</span> parent<span class="token punctuation">.</span>ns <span class="token operator">:</span> Namespaces<span class="token punctuation">.</span><span class="token constant">HTML</span>
  <span class="token keyword">const</span> <span class="token literal-property property">nodes</span><span class="token operator">:</span> TemplateChildNode<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token comment">// 判断是否到达结束位置，遍历结束</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEnd</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> mode<span class="token punctuation">,</span> ancestors<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// template 中的字符串</span>
    <span class="token keyword">const</span> s <span class="token operator">=</span> context<span class="token punctuation">.</span>source
    <span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token keyword">undefined</span>
    <span class="token comment">// 如果 mode 是 DATA 和 RCDATA 模式</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">===</span> TextModes<span class="token punctuation">.</span><span class="token constant">DATA</span> <span class="token operator">||</span> mode <span class="token operator">===</span> TextModes<span class="token punctuation">.</span><span class="token constant">RCDATA</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 处理 {{ 开头的情况</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>context<span class="token punctuation">.</span>inVPre <span class="token operator">&amp;&amp;</span> <span class="token function">startsWith</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> context<span class="token punctuation">.</span>options<span class="token punctuation">.</span>delimiters<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// &#39;{{&#39;</span>
        node <span class="token operator">=</span> <span class="token function">parseInterpolation</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> mode<span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">===</span> TextModes<span class="token punctuation">.</span><span class="token constant">DATA</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;&lt;&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 以 &lt; 开头且就一个 &lt; 字符</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
          <span class="token function">emitError</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ErrorCodes<span class="token punctuation">.</span><span class="token constant">EOF_BEFORE_TAG_NAME</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;!&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 以 &lt;! 开头的情况</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">startsWith</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">&#39;&lt;!--&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果是 &lt;!-- 这种情况，则按照注释节点处理</span>
            node <span class="token operator">=</span> <span class="token function">parseComment</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">startsWith</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">&#39;&lt;!DOCTYPE&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果是 &lt;!DOCTYPE 这种情况</span>
            node <span class="token operator">=</span> <span class="token function">parseBogusComment</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">startsWith</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">&#39;&lt;![CDATA[&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果是 &lt;![CDATA[ 这种情况</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>ns <span class="token operator">!==</span> Namespaces<span class="token punctuation">.</span><span class="token constant">HTML</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              node <span class="token operator">=</span> <span class="token function">parseCDATA</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ancestors<span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
              <span class="token function">emitError</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ErrorCodes<span class="token punctuation">.</span><span class="token constant">CDATA_IN_HTML_CONTENT</span><span class="token punctuation">)</span>
              node <span class="token operator">=</span> <span class="token function">parseBogusComment</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 都不是的话，则报错</span>
            <span class="token function">emitError</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ErrorCodes<span class="token punctuation">.</span><span class="token constant">INCORRECTLY_OPENED_COMMENT</span><span class="token punctuation">)</span>
            node <span class="token operator">=</span> <span class="token function">parseBogusComment</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 以 &lt;/ 开头，并且只有 &lt;/ 的情况</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">emitError</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ErrorCodes<span class="token punctuation">.</span><span class="token constant">EOF_BEFORE_TAG_NAME</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;&gt;&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// &lt;/&gt; 缺少结束标签，报错</span>
            <span class="token function">emitError</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ErrorCodes<span class="token punctuation">.</span><span class="token constant">MISSING_END_TAG_NAME</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
            <span class="token function">advanceBy</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
            <span class="token keyword">continue</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-z]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 文本中存在多余的结束标签的情况 &lt;/p&gt;</span>
            <span class="token function">emitError</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ErrorCodes<span class="token punctuation">.</span><span class="token constant">X_INVALID_END_TAG</span><span class="token punctuation">)</span>
            <span class="token function">parseTag</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> TagType<span class="token punctuation">.</span>End<span class="token punctuation">,</span> parent<span class="token punctuation">)</span>
            <span class="token keyword">continue</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">emitError</span><span class="token punctuation">(</span>
              context<span class="token punctuation">,</span>
              ErrorCodes<span class="token punctuation">.</span><span class="token constant">INVALID_FIRST_CHARACTER_OF_TAG_NAME</span><span class="token punctuation">,</span>
              <span class="token number">2</span>
            <span class="token punctuation">)</span>
            node <span class="token operator">=</span> <span class="token function">parseBogusComment</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-z]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 解析标签元素节点</span>
          node <span class="token operator">=</span> <span class="token function">parseElement</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ancestors<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;?&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">emitError</span><span class="token punctuation">(</span>
            context<span class="token punctuation">,</span>
            ErrorCodes<span class="token punctuation">.</span><span class="token constant">UNEXPECTED_QUESTION_MARK_INSTEAD_OF_TAG_NAME</span><span class="token punctuation">,</span>
            <span class="token number">1</span>
          <span class="token punctuation">)</span>
          node <span class="token operator">=</span> <span class="token function">parseBogusComment</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token function">emitError</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ErrorCodes<span class="token punctuation">.</span><span class="token constant">INVALID_FIRST_CHARACTER_OF_TAG_NAME</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 解析普通文本节点</span>
      node <span class="token operator">=</span> <span class="token function">parseText</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> mode<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isArray</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> node<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">pushNode</span><span class="token punctuation">(</span>nodes<span class="token punctuation">,</span> node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">pushNode</span><span class="token punctuation">(</span>nodes<span class="token punctuation">,</span> node<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码量虽然挺多，但整体要做的事情还是比较明确和清晰的。从上述代码中可以看到，<code>Vue</code> 在解析模板字符串时，可分为两种情况：以 <code>&lt;</code> 开头的字符串和不以 <code>&lt;</code> 开头的字符串。</p><p>其中，不以 <code>&lt;</code> 开头的字符串有两种情况：它是文本节点或 <code>{{ exp }}</code> 插值表达式。</p><p>而以 <code>&lt;</code> 开头的字符串又分为以下几种情况：</p><ol><li>元素开始标签，比如 <code>&lt;div&gt;</code></li><li>注释节点 <code>&lt;!-- 123 --&gt;</code></li><li>文档声明 <code>&lt;!DOCTYPE html&gt;</code></li><li>纯文本标签 <code>&lt;![CDATA[&lt;]]&gt;</code></li></ol><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1270471743864f288a541ef6e2245e93~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>接下来我们介绍几个比较重要的解析器。</p><h3 id="_1-解析插值" tabindex="-1"><a class="header-anchor" href="#_1-解析插值" aria-hidden="true">#</a> 1. 解析插值</h3><p>根据前面的描述，我们知道当遇到字符串 <code>{{msg}}</code> 的时候，会把当前代码当做是插值节点来解析，进入 <code>parseInterpolation</code> 函数体内：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">parseInterpolation</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> mode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 从配置中获取插值开始和结束分隔符，默认是 {{ 和 }}</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>open<span class="token punctuation">,</span> close<span class="token punctuation">]</span> <span class="token operator">=</span> context<span class="token punctuation">.</span>options<span class="token punctuation">.</span>delimiters
  <span class="token comment">// 获取结束分隔符的位置</span>
  <span class="token keyword">const</span> closeIndex <span class="token operator">=</span> context<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>close<span class="token punctuation">,</span> open<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
  <span class="token comment">// 如果不存在结束分隔符，则报错</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>closeIndex <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">emitError</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ErrorCodes<span class="token punctuation">.</span><span class="token constant">X_MISSING_INTERPOLATION_END</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token keyword">undefined</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 获取开始解析的起点</span>
  <span class="token keyword">const</span> start <span class="token operator">=</span> <span class="token function">getCursor</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>
  <span class="token comment">// 解析位置移动到插值开始分隔符后</span>
  <span class="token function">advanceBy</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> open<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
  <span class="token comment">// 获取插值起点位置</span>
  <span class="token keyword">const</span> innerStart <span class="token operator">=</span> <span class="token function">getCursor</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>
  <span class="token comment">// 获取插值结束位置</span>
  <span class="token keyword">const</span> innerEnd <span class="token operator">=</span> <span class="token function">getCursor</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>
  <span class="token comment">// 插值原始内容的长度</span>
  <span class="token keyword">const</span> rawContentLength <span class="token operator">=</span> closeIndex <span class="token operator">-</span> open<span class="token punctuation">.</span>length
  <span class="token comment">// 插值原始内容</span>
  <span class="token keyword">const</span> rawContent <span class="token operator">=</span> context<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> rawContentLength<span class="token punctuation">)</span>
  <span class="token comment">// 获取插值的内容，并移动位置到插值的内容后</span>
  <span class="token keyword">const</span> preTrimContent <span class="token operator">=</span> <span class="token function">parseTextData</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> rawContentLength<span class="token punctuation">,</span> mode<span class="token punctuation">)</span>
  <span class="token keyword">const</span> content <span class="token operator">=</span> preTrimContent<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 如果存在空格的情况，需要计算偏移值</span>
  <span class="token keyword">const</span> startOffset <span class="token operator">=</span> preTrimContent<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>startOffset <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 更新插值起点位置</span>
    <span class="token function">advancePositionWithMutation</span><span class="token punctuation">(</span>innerStart<span class="token punctuation">,</span> rawContent<span class="token punctuation">,</span> startOffset<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 如果尾部存在空格的情况</span>
  <span class="token keyword">const</span> endOffset <span class="token operator">=</span>
    rawContentLength <span class="token operator">-</span> <span class="token punctuation">(</span>preTrimContent<span class="token punctuation">.</span>length <span class="token operator">-</span> content<span class="token punctuation">.</span>length <span class="token operator">-</span> startOffset<span class="token punctuation">)</span>
  <span class="token comment">// 也需要更新尾部的位置</span>
  <span class="token function">advancePositionWithMutation</span><span class="token punctuation">(</span>innerEnd<span class="token punctuation">,</span> rawContent<span class="token punctuation">,</span> endOffset<span class="token punctuation">)</span>
  <span class="token comment">// 移动位置到插值结束分隔符后</span>
  <span class="token function">advanceBy</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> close<span class="token punctuation">.</span>length<span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">INTERPOLATION</span><span class="token punctuation">,</span>
    <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">SIMPLE_EXPRESSION</span><span class="token punctuation">,</span>
      <span class="token literal-property property">isStatic</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token comment">// Set \`isConstant\` to false by default and will decide in transformExpression</span>
      <span class="token literal-property property">constType</span><span class="token operator">:</span> ConstantTypes<span class="token punctuation">.</span><span class="token constant">NOT_CONSTANT</span><span class="token punctuation">,</span>
      content<span class="token punctuation">,</span>
      <span class="token literal-property property">loc</span><span class="token operator">:</span> <span class="token function">getSelection</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> innerStart<span class="token punctuation">,</span> innerEnd<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">loc</span><span class="token operator">:</span> <span class="token function">getSelection</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> start<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里大量使用了一个重要函数 <code>advanceBy(context, numberOfCharacters)</code>。其功能是更新解析上下文 <code>context</code> 中的 <code>source</code> 来移动代码解析的位置，同时更新 <code>offset、line、column</code> 等和代码位置相关的属性，这样来达到一步步 <strong>蚕食</strong> 模版字符串的目的，从而达到对整个模版字符chuan<code>context</code> 是字符串的上下文对象，<code>numberOfCharacters</code> 是要前进的字符数。</p><p>针对这样一段代码：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{ msg }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>调用 <code>advance(s, 14)</code> 函数，得到结果：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/03b5103326374b279448eb57a57bebba~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>可以看到，<code>parseInterpolation</code> 函数本质就是通过插值的开始标签<code>{{</code> 和结束标签 <code>}}</code> 找到插值的内容 <code>content</code>。然后再计算插值的起始位置，接着就是前进代码到插值结束分隔符后，表示插值部分代码处理完毕，可以继续解析后续代码了。</p><p>最后返回一个描述插值节点的 <code>AST</code> 对象，其中，<code>loc</code> 记录了插值的代码开头和结束的位置信息，<code>type</code> 表示当前节点的类型，<code>content</code> 表示当前节点的内容信息。</p><h3 id="_2-解析文本" tabindex="-1"><a class="header-anchor" href="#_2-解析文本" aria-hidden="true">#</a> 2. 解析文本</h3><p>针对源代码起点位置的字符不是 <code>&lt;</code> 或者 <code>{{</code> 时，则当做是文本节点处理，调用 <code>parseText</code> 函数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">parseText</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> mode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 文本结束符</span>
  <span class="token keyword">const</span> endTokens <span class="token operator">=</span> mode <span class="token operator">===</span> TextModes<span class="token punctuation">.</span><span class="token constant">CDATA</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token string">&#39;]]&gt;&#39;</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;&lt;&#39;</span><span class="token punctuation">,</span> context<span class="token punctuation">.</span>options<span class="token punctuation">.</span>delimiters<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>

  <span class="token keyword">let</span> endIndex <span class="token operator">=</span> context<span class="token punctuation">.</span>source<span class="token punctuation">.</span>length
  <span class="token comment">// 遍历文本结束符，匹配找到结束的位置</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> endTokens<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> index <span class="token operator">=</span> context<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>endTokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> endIndex <span class="token operator">&gt;</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      endIndex <span class="token operator">=</span> index
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">const</span> start <span class="token operator">=</span> <span class="token function">getCursor</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>
  <span class="token comment">// 获取文本的内容，并前进代码到文本的内容后</span>
  <span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token function">parseTextData</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> endIndex<span class="token punctuation">,</span> mode<span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">TEXT</span><span class="token punctuation">,</span>
    content<span class="token punctuation">,</span>
    <span class="token literal-property property">loc</span><span class="token operator">:</span> <span class="token function">getSelection</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> start<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>parseText</code> 函数整体功能还是比较简单的，如果一段文本，在 <code>CDATA</code> 模式下，当遇到 <code>]]&gt;</code> 即为结束位置，否则，都是在遇到 <code>&lt;</code> 或者插值分隔符 <code>{{</code> 结束。所以通过遍历这些结束符，匹配并找到文本结束的位置。</p><p>找到文本结束位置后，就可以通过 <code>parseTextData</code> 函数来获取到文本的内容并前进到文本内容后。</p><p>最后返回一个文本节点的 <code>AST</code> 对象。</p><h3 id="_3-解析节点" tabindex="-1"><a class="header-anchor" href="#_3-解析节点" aria-hidden="true">#</a> 3. 解析节点</h3><p>当起点字符是 <code>&lt;</code> 开头，且后续字符串匹配 <code>/[a-z]/i</code> 正则表达式，则会进入 <code>parseElement</code> 的节点解析函数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">parseElement</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> ancestors</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token comment">// 开始标签</span>
  <span class="token comment">// 获取当前元素的父标签节点</span>
  <span class="token keyword">const</span> parent <span class="token operator">=</span> <span class="token function">last</span><span class="token punctuation">(</span>ancestors<span class="token punctuation">)</span>
  <span class="token comment">// 解析开始标签，生成一个标签节点，并前进代码到开始标签后</span>
  <span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token function">parseTag</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> TagType<span class="token punctuation">.</span>Start<span class="token punctuation">,</span> parent<span class="token punctuation">)</span>
  <span class="token comment">// 如果是自闭和标签，直接返回标签节点</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>isSelfClosing <span class="token operator">||</span> context<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">isVoidTag</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> element
  <span class="token punctuation">}</span>
  
  <span class="token comment">// 下面是处理子节点的逻辑</span>
  <span class="token comment">// 先把标签节点添加到 ancestors，入栈</span>
  ancestors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>
  <span class="token keyword">const</span> mode <span class="token operator">=</span> context<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">getTextMode</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> parent<span class="token punctuation">)</span>
  <span class="token comment">// 递归解析子节点，传入 ancestors</span>
  <span class="token keyword">const</span> children <span class="token operator">=</span> <span class="token function">parseChildren</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> mode<span class="token punctuation">,</span> ancestors<span class="token punctuation">)</span>
  <span class="token comment">// 子节点解析完成 ancestors 出栈</span>
  ancestors<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token comment">// ...</span>
  element<span class="token punctuation">.</span>children <span class="token operator">=</span> children
  
  <span class="token comment">// 结束标签</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">startsWithEndTagOpen</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>source<span class="token punctuation">,</span> element<span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 解析结束标签，并前进代码到结束标签后</span>
    <span class="token function">parseTag</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> TagType<span class="token punctuation">.</span>End<span class="token punctuation">,</span> parent<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 更新标签节点的代码位置，结束位置到结束标签后</span>
  element<span class="token punctuation">.</span>loc <span class="token operator">=</span> <span class="token function">getSelection</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> element<span class="token punctuation">.</span>loc<span class="token punctuation">.</span>start<span class="token punctuation">)</span>
  
  <span class="token keyword">return</span> element
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，<code>parseElement</code> 主要做了三件事情：解析开始标签，解析子节点，解析闭合标签。</p><p>在解析子节点过程中， <code>Vue</code> 会用一个栈 <code>ancestors</code> 来保存解析到的元素标签。当它遇到开始标签时，会将这个标签推入栈，遇到结束标签时，将刚才的标签弹出栈。它的作用是保存当前已经解析了，但还没解析完的元素标签。这个栈还有另一个作用，在解析到某个字节点时，通过 <code>ancestors[ancestors.length - 1]</code> 可以获取它的父元素。</p><p>举个例子：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{ msg }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span> 
  一个文本节点 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从我们的示例来看，它的出入栈顺序是这样的：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[] // 刚开始时空栈
[div] // div 入栈
[div, p] // p 入栈
[div] // p 节点解析完成，出栈
[] // div 节点解析完成，出栈
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，在解析开始标签和解析闭合标签时，都用到了一个 <code>parseTag</code> 函数，这也是节点标签解析的核心函数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">parseTag</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> type<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> start <span class="token operator">=</span> <span class="token function">getCursor</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>
  <span class="token comment">// 匹配标签文本结束的位置</span>
  <span class="token keyword">const</span> match <span class="token operator">=</span> <span class="token operator">/</span><span class="token operator">^</span><span class="token operator">&lt;</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">?([a-z][^\\t\\r\\n\\f /&gt;]*)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>source<span class="token punctuation">)</span><span class="token operator">!</span>
  <span class="token keyword">const</span> tag <span class="token operator">=</span> match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
  <span class="token keyword">const</span> ns <span class="token operator">=</span> context<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">getNamespace</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> parent<span class="token punctuation">)</span>
  <span class="token comment">// 前进代码到标签文本结束位置</span>
  <span class="token function">advanceBy</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> match<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span>
  <span class="token comment">// 前进代码到标签文本后面的空白字符后</span>
  <span class="token function">advanceSpaces</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>
  
  <span class="token comment">// 解析标签中的属性，并前进代码到属性后</span>
  <span class="token keyword">let</span> props <span class="token operator">=</span> <span class="token function">parseAttributes</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> type<span class="token punctuation">)</span>
  <span class="token comment">// ...</span>
  <span class="token comment">// 标签闭合.</span>
  <span class="token keyword">let</span> isSelfClosing <span class="token operator">=</span> <span class="token boolean">false</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>source<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">emitError</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ErrorCodes<span class="token punctuation">.</span><span class="token constant">EOF_IN_TAG</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 判断是否自闭合标签</span>
    isSelfClosing <span class="token operator">=</span> <span class="token function">startsWith</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>source<span class="token punctuation">,</span> <span class="token string">&#39;/&gt;&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">// 结束标签不应该是自闭和标签</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> TagType<span class="token punctuation">.</span>End <span class="token operator">&amp;&amp;</span> isSelfClosing<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">emitError</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ErrorCodes<span class="token punctuation">.</span><span class="token constant">END_TAG_WITH_TRAILING_SOLIDUS</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 前进代码到闭合标签后</span>
    <span class="token function">advanceBy</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> isSelfClosing <span class="token operator">?</span> <span class="token number">2</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  
  <span class="token comment">// 闭合标签，则退出</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> TagType<span class="token punctuation">.</span>End<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">let</span> tagType <span class="token operator">=</span> ElementTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>context<span class="token punctuation">.</span>inVPre<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 接下来判断标签类型，是组件、插槽还是模板</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tag <span class="token operator">===</span> <span class="token string">&#39;slot&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      tagType <span class="token operator">=</span> ElementTypes<span class="token punctuation">.</span><span class="token constant">SLOT</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tag <span class="token operator">===</span> <span class="token string">&#39;template&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>
        props<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>
          <span class="token parameter">p</span> <span class="token operator">=&gt;</span>
            p<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">DIRECTIVE</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isSpecialTemplateDirective</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
      <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        tagType <span class="token operator">=</span> ElementTypes<span class="token punctuation">.</span><span class="token constant">TEMPLATE</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isComponent</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> props<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      tagType <span class="token operator">=</span> ElementTypes<span class="token punctuation">.</span><span class="token constant">COMPONENT</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token punctuation">,</span>
    ns<span class="token punctuation">,</span>
    tag<span class="token punctuation">,</span>
    tagType<span class="token punctuation">,</span>
    props<span class="token punctuation">,</span>
    isSelfClosing<span class="token punctuation">,</span>
    <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">loc</span><span class="token operator">:</span> <span class="token function">getSelection</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">codegenNode</span><span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token comment">// to be created during transform phase</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>parseTag</code> 函数首先会匹配标签的文本的节点信息，比如 <code>&lt;div class=&quot;test&quot;&gt;{{ msg }}&lt;/div&gt;</code>得到的 <code>match</code> 信息如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span>
  <span class="token string">&#39;&lt;div&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> 
  <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&#39;&lt;div class=&quot;test&quot;&gt;{{ msg }}&lt;/div&gt;\\n&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">groups</span><span class="token operator">:</span> <span class="token keyword">undefined</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后将代码前进到节点信息后，再通过 <code>parseAttributes</code> 函数来解析标签中的 <code>props</code> 属性，比如 <code>class</code>、<code>style</code> 等等。</p><p>接下来再去判断是不是一个自闭和标签，并前进代码到闭合标签后；</p><p>最后根据 <code>tag</code> 判断标签类型，是组件、插槽还是模板。</p><p><code>parseTag</code> 完成后，最终就是返回一个节点描述的 <code>AST</code> 对象，如果有子节点，会继续进入 <code>parseChildren</code> 的递归流程，不断更新节点的 <code>children</code> 对象。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>有了上面的介绍，我们来看一个简单的 <code>demo</code> 来理解 <code>AST</code> 创建的过程。针对以下模版：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  {{ msg }}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>这是一段文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们来演示一下创建过程：</p><h4 id="div-标签解析" tabindex="-1"><a class="header-anchor" href="#div-标签解析" aria-hidden="true">#</a> div 标签解析</h4><p>首先进入 <code>parseChildren</code> 遇到 <code>&lt;div</code> 标签，进入 <code>parseElement</code> 函数，<code>parseElement</code> 函数通过 <code>parseTag</code> 函数得到 <code>element</code> 的数据结构为：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 标签节点</span>
  <span class="token property">&quot;ns&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token property">&quot;tag&quot;</span><span class="token operator">:</span> <span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;tagType&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token property">&quot;props&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>
      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;class&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
       <span class="token comment">// ...</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;loc&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;isSelfClosing&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token property">&quot;children&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;loc&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;column&quot;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
      <span class="token property">&quot;line&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
      <span class="token property">&quot;offset&quot;</span><span class="token operator">:</span> <span class="token number">3</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;end&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;column&quot;</span><span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">,</span>
      <span class="token property">&quot;line&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
      <span class="token property">&quot;offset&quot;</span><span class="token operator">:</span> <span class="token number">21</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;source&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&lt;div class=&quot;</span>test<span class="token string">&quot;&gt;&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时的 <code>context</code> 经过 <code>advanceBy</code> 操作后，内容为：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;options&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;column&quot;</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
  <span class="token property">&quot;line&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token property">&quot;offset&quot;</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
  <span class="token property">&quot;originalSource&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&lt;div class=&quot;</span>test<span class="token string">&quot;&gt;\\n    {{ msg }}\\n    &lt;p&gt;这是一段文本&lt;/p&gt;\\n  &lt;/div&gt;\\n&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;source&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\\n    {{ msg }}\\n    &lt;p&gt;这是一段文本&lt;/p&gt;\\n  &lt;/div&gt;\\n&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;inPre&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token property">&quot;inVPre&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="插值标签解析" tabindex="-1"><a class="header-anchor" href="#插值标签解析" aria-hidden="true">#</a> 插值标签解析</h4><p>然后再进入 <code>parseChildren</code> 流程，此时的 <code>source</code> 内容如下：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>  {{ msg }}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>这是一段文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时的开始标签是 <code>{{</code> 所以进入插值解析的函数 <code>parseInterpolation</code>，该函数执行完成后得到的 <code>source</code> 结果如下：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>这是一段文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这里关于 <code>AST</code> 内容就会包含插值节点的信息描述。 <code>context</code> 内容则会在 <code>parseInterpolation</code> 后继续更新，执行后续 <code>source</code> 的内容坐标，这里不再赘述</p></blockquote><h4 id="p-标签解析" tabindex="-1"><a class="header-anchor" href="#p-标签解析" aria-hidden="true">#</a> p 标签解析</h4><p>在完成，插值节点解析后，在 <code>parseChildren</code> 内存在一个 <code>while</code> 判断：<code>while (!isEnd(context, mode, ancestors))</code>，因为还未到达闭合标签的位置，所以接着进入 <code>p</code> 标签的解析 <code>parseElement</code>。解析完成后得到<code>source</code> 内容如下：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>  这是一段文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>此时继续进入 <code>parseChildren</code> 递归。</p><h4 id="解析文本节点" tabindex="-1"><a class="header-anchor" href="#解析文本节点" aria-hidden="true">#</a> 解析文本节点</h4><p>然后遇到的了文本开头的内容，会进入 <code>parseText</code> 文本解析的流程，完成 <code>parseText</code> 后，得到的 <code>source</code> 内容如下：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="解析闭合标签" tabindex="-1"><a class="header-anchor" href="#解析闭合标签" aria-hidden="true">#</a> 解析闭合标签</h4><p>此时 <code>while</code> 退出循环，进入 <code>parseTag</code> 继续解析闭合标签，首先是 <code>&lt;/p&gt;</code> 标签，因为不是自闭和标签，则继续更新 <code>content</code> 后，然后更新标签节点的代码位置，最后得到的 <code>source</code> 如下：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后再继续解析闭合标签 <code>&lt;/div&gt;</code> 更新 <code>content</code>和标签节点<code>div</code>的代码位置，直到结束。</p>`,88);function v(m,b){const t=e("ExternalLinkIcon");return o(),c("div",null,[u,s("p",null,[n("另外，关于模版编译成 "),r,n(" 函数的结果，也可以通过官方提供的 "),s("a",d,[n("模版导出工具"),l(t)]),n(" 现在调试编译结果。")]),k])}const y=p(i,[["render",v],["__file","12 bianyiqi：mobanshiruhebeibianyicheng AST de？.html.vue"]]);export{y as default};
