import{_ as e,r as o,o as c,c as i,b as n,d as s,e as t,a as p}from"./app-48690364.js";const l={},u=p('<p>在上一章节中，我们详细介绍了 Webpack 插件的开发方式与基本架构逻辑，并结合若干开源项目剖析插件中如何与 Webpack 上下文交互，从而修改构建逻辑，实现插件功能需求。本文将继续介绍 Webpack 插件开发方法，总结一些较为常用，有助于提升插件可用性、健壮性的开发技巧，包括：</p><ul><li>如何正确处理插件日志；</li><li>如何上报统计信息，帮助用户更好了解插件的运行情况；</li><li>如何借助 <code>schema-utils</code> 校验配置参数；</li><li>如何搭建自动测试环境。</li></ul><h2 id="日志处理" tabindex="-1"><a class="header-anchor" href="#日志处理" aria-hidden="true">#</a> 日志处理</h2><p>与 Loader 相似，开发插件时我们也可以复用 Webpack 一系列日志基础设施，包括：</p><ul><li>通过 <code>compilation.getLogger</code> 获取分级日志管理器；</li><li>使用 <code>compilation.errors/wraning</code> 处理异常信息。</li></ul><p>下面我们逐一展开介绍。</p><blockquote><p>使用分级日志基础设施</p></blockquote>',7),r={href:"https://juejin.cn/book/7115598540721618944/section/7119035404715556879",target:"_blank",rel:"noopener noreferrer"},k={href:"https://webpack.js.org/configuration/other-options/#infrastructurelogging",target:"_blank",rel:"noopener noreferrer"},d={href:"https://github.com/log4js-node/log4js-node",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/winstonjs/winston",target:"_blank",rel:"noopener noreferrer"},m=p(`<p>开发插件时，我们也能使用这一接口管理日志输出，只是用法稍有不同，如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">PLUGIN_NAME</span> <span class="token operator">=</span> <span class="token string">&quot;FooPlugin&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">FooPlugin</span> <span class="token punctuation">{</span>
  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>compilation<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token constant">PLUGIN_NAME</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">compilation</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 获取日志对象</span>
      <span class="token keyword">const</span> logger <span class="token operator">=</span> compilation<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token constant">PLUGIN_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 调用分级日志接口</span>
      logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Logging from FooPlugin&#39;</span><span class="token punctuation">)</span>
      logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Error from FooPlugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> FooPlugin<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>提示：此外，还可以通过 <code>compiler.getInfrastructureLogger</code> 获取日志对象。</p></blockquote><p>上述代码需要调用 <code>compilation.getLogger</code> 获取日志对象 <code>logger</code>，<code>logger</code> 的用法与 Loader 场景相似，同样支持 <code>verbose/log/info/warn/error</code> 五种日志分级，此处不再赘述。</p><blockquote><p>正确处理异常信息</p></blockquote><p>在 Webpack 插件中，可以通过如下方式提交错误信息。</p><ul><li>使用 <code>logger.error/warning</code> 接口，这种方法同样不会中断构建流程，且能够复用 Webpack 的分级日志体系，由最终用户决定是否输出对应等级日志。</li><li>借助 <code>compilation.errors/warnings</code> 数组，如：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">PLUGIN_NAME</span> <span class="token operator">=</span> <span class="token string">&quot;FooPlugin&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">FooPlugin</span> <span class="token punctuation">{</span>
  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>compilation<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token constant">PLUGIN_NAME</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">compilation</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      compilation<span class="token punctuation">.</span>errors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Emit Error From FooPlugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      compilation<span class="token punctuation">.</span>warnings<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;Emit Warning From FooPlugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> FooPlugin<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行效果：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1035c8f81506496f90535eb366d762a1~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>`,10),b={href:"https://webpack.js.org/api/stats/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github1s.com/webpack-contrib/eslint-webpack-plugin",target:"_blank",rel:"noopener noreferrer"},h=p(`<ul><li>使用 Hook Callback，这种方式可将错误信息传递到 Hook 下一个流程，由 Hook 触发者根据错误内容决定后续处理措施(中断、忽略、记录日志等)，如 <code>imagemin-webpack-plugin</code> 中：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">ImageminPlugin</span> <span class="token punctuation">{</span>
  <span class="token function">apply</span> <span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token function-variable function">onEmit</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">compilation<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
          <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">optimizeWebpackImages</span><span class="token punctuation">(</span>throttle<span class="token punctuation">,</span> compilation<span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">optimizeExternalImages</span><span class="token punctuation">(</span>throttle<span class="token punctuation">)</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span>

        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// if at any point we hit a snag, pass the error on to webpack</span>
        <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>emit<span class="token punctuation">.</span><span class="token function">tapAsync</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>name<span class="token punctuation">,</span> onEmit<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上例第 13 行，在 <code>catch</code> 块中通过 <code>callback</code> 函数传递错误信息。不过，并不是所有 Hook 都会传递 <code>callback</code> 函数，实际开发时建议参考相关用例。</p><ul><li>直接抛出异常，如：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">PLUGIN_NAME</span> <span class="token operator">=</span> <span class="token string">&quot;FooPlugin&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">FooPlugin</span> <span class="token punctuation">{</span>
  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>compilation<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token constant">PLUGIN_NAME</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">compilation</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Throw Error Directly&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> FooPlugin<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方式会导致 Webpack 进程奔溃，多用于插件遇到严重错误，不得不提前中断构建工作的场景。</p><p>总的来说，这些方式各自有适用场景，我个人会按如下规则择优选用：</p><ul><li>多数情况下使用 <code>compilation.errors/warnings</code>，柔和地抛出错误信息；</li><li>特殊场景，需要提前结束构建时，则直接抛出异常；</li><li>拿捏不准的时候，使用 <code>callback</code> 透传错误信息，交由上游调用者自行判断处理措施。</li></ul><h2 id="上报统计信息" tabindex="-1"><a class="header-anchor" href="#上报统计信息" aria-hidden="true">#</a> 上报统计信息</h2>`,9),f={href:"https://github.com/webpack-contrib/mini-css-extract-plugin",target:"_blank",rel:"noopener noreferrer"},_={href:"https://github.com/webpack-contrib/image-minimizer-webpack-plugin",target:"_blank",rel:"noopener noreferrer"},w={href:"https://github.com/webpack-contrib/terser-webpack-plugin",target:"_blank",rel:"noopener noreferrer"},y=n("p",null,"针对这种情况，我们可以在插件中上报一些统计信息，帮助用户理解插件的运行进度与性能情况，有两种上报方式：",-1),q={href:"https://webpack.js.org/plugins/progress-plugin",target:"_blank",rel:"noopener noreferrer"},j=n("code",null,"reportProgress",-1),P={href:"https://webpack.js.org/api/stats/",target:"_blank",rel:"noopener noreferrer"},x=n("blockquote",null,[n("p",null,[s("使用 "),n("code",null,"reportProgress"),s(" 接口")])],-1),N={href:"https://webpack.js.org/plugins/progress-plugin",target:"_blank",rel:"noopener noreferrer"},E=p(`<ol><li>简化版，执行构建命令时带上 <code>--progress</code> 参数，如：</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npx webpack --progress
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>也可以在 Webpack 配置文件中添加插件实例，如：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> ProgressPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;webpack&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">ProgressPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">activeModules</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token literal-property property">entries</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">percentage<span class="token punctuation">,</span> message<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// custom logic</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token comment">//...</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>开发插件时，我们可以使用 <code>ProgressPlugin</code> 插件的 <code>Reporter</code> 方法提交自定义插件的运行进度，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> ProgressPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;webpack&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">PLUGIN_NAME</span> <span class="token operator">=</span> <span class="token string">&quot;BlockPlugin&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">wait</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">misec</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> misec<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">noop</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">BlockPlugin</span> <span class="token punctuation">{</span>
  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>compilation<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token constant">PLUGIN_NAME</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">compilation</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      compilation<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>processAssets<span class="token punctuation">.</span><span class="token function">tapAsync</span><span class="token punctuation">(</span>
        <span class="token constant">PLUGIN_NAME</span><span class="token punctuation">,</span>
        <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">assets<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> reportProgress <span class="token operator">=</span> ProgressPlugin<span class="token punctuation">.</span><span class="token function">getReporter</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span> <span class="token operator">||</span> noop<span class="token punctuation">;</span>
          <span class="token keyword">const</span> len <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">await</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">reportProgress</span><span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Our plugin is working </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">%</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token function">reportProgress</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;Done work!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">await</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> BlockPlugin<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),L={href:"https://github.com/Tecvan-fe/webpack-book-samples/blob/main/plugin-progress/package.json",target:"_blank",rel:"noopener noreferrer"},F=p(`<p>示例中，最关键的代码在于第 12 行，即调用 <code>ProgressPlugin.getReporter</code> 方法获取 Reporter 函数，之后再用这个函数提交执行进度：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> reportProgress <span class="token operator">=</span> ProgressPlugin<span class="token punctuation">.</span><span class="token function">getReporter</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span> <span class="token operator">||</span> noop<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>注意：若最终用户没有使用 <code>ProgressPlugin</code> 插件，则这个函数会返回 Undefined，所以需要增加 <code>|| noop</code> 兜底。</p></blockquote><p><code>reportProgress</code> 接受如下参数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">reportProgress</span><span class="token punctuation">(</span>percentage<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>percentage</code>：当前执行进度百分比，但这个参数实际并不生效， <code>ProgressPlugin</code> 底层会根据当前处于那个 Hook 计算一个固定的 Progress 百分比值，在自定义插件中无法改变，所以目前来看这个参数值随便填就好；</li><li><code>...args</code>：任意数量字符串参数，这些字符串会被拼接到 Progress 输出的信息。</li></ul><p>最终执行效果：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3416427756ea48048cddcaf9aa7cbcdc~tplv-k3u1fbpfcp-watermark.image?" alt="3f291b39-e4cd-498c-b1e8-819d964982ab.gif"></p><blockquote><p>通过 <code>stats</code> 添加统计信息</p></blockquote>`,9),W={href:"https://webpack.js.org/api/stats/",target:"_blank",rel:"noopener noreferrer"},I=n("code",null,"stats",-1),M=p(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>const PLUGIN_NAME = &quot;FooPlugin&quot;;

class FooPlugin {
  apply(compiler) {
    compiler.hooks.compilation.tap(PLUGIN_NAME, (compilation) =&gt; {
      const statsMap = new Map();
      // buildModule 钩子将在开始处理模块时触发
      compilation.hooks.buildModule.tap(PLUGIN_NAME, (module) =&gt; {
        const ident = module.identifier();
        const startTime = Date.now();
        // 模拟复杂耗时操作
        // ...
        // ...
        const endTime = Date.now();
        // 记录处理耗时
        statsMap.set(ident, endTime - startTime);
      });

      compilation.hooks.statsFactory.tap(PLUGIN_NAME, (factory) =&gt; {
        factory.hooks.result
          .for(&quot;module&quot;)
          .tap(PLUGIN_NAME, (module, context) =&gt; {
            const { identifier } = module;
            const duration = statsMap.get(identifier);
            // 添加统计信息
            module.fooDuration = duration || 0;
          });
      });
    });
  }
}

module.exports = FooPlugin;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次执行 Webpack 构建命令，将产出如下 <code>stats</code> 统计信息：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;hash&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0a17278b49620a86b126&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;5.73.0&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// ...</span>
  <span class="token property">&quot;modules&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;module&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;identifier&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/Users/tecvan/studio/webpack-book-samples/target-sample/src/index.js&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;fooDuration&quot;</span><span class="token operator">:</span> <span class="token number">124</span><span class="token punctuation">,</span>
      <span class="token comment">/*...*/</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">/*...*/</span>
    <span class="token comment">/*...*/</span>
    <span class="token comment">/*...*/</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span> 
  <span class="token property">&quot;assets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token comment">/*...*/</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;chunks&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token comment">/*...*/</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;entrypoints&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;namedChunkGroups&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;errors&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token comment">/*...*/</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方式有许多优点：</p>`,4),A=n("li",null,[s("用户可以直接通过 "),n("code",null,"stats"),s(" 了解插件的运行情况，不需要重复学习其它方式；")],-1),U={href:"https://webpack.js.org/configuration/stats/",target:"_blank",rel:"noopener noreferrer"},G=n("li",null,"支持导出为 JSON 或其它文件格式，方便后续接入自动化分析流程。",-1),T=n("p",null,"因此，若明确插件将执行非常重的计算任务，需要消耗比较长的构建时间时，可以通过这种方式上报关键性能数据，帮助用户做好性能分析。",-1),z=n("h2",{id:"校验配置参数",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#校验配置参数","aria-hidden":"true"},"#"),s(" 校验配置参数")],-1),C={href:"https://juejin.cn/book/7115598540721618944/section/7119035564862472233",target:"_blank",rel:"noopener noreferrer"},S={href:"https://www.npmjs.com/package/schema-utils",target:"_blank",rel:"noopener noreferrer"},B=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> validate <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;schema-utils&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> schema <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">/*...*/</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">FooPlugin</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">validate</span><span class="token punctuation">(</span>schema<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),D={href:"https://juejin.cn/book/7115598540721618944/section/7119035564862472233",target:"_blank",rel:"noopener noreferrer"},H=n("h2",{id:"搭建自动测试环境",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#搭建自动测试环境","aria-hidden":"true"},"#"),s(" 搭建自动测试环境")],-1),V=n("p",null,"为 Webpack Loader 编写单元测试收益非常高，一方面对开发者来说，不用重复搭建测试环境、编写测试 demo；一方面对于最终用户来说，带有一定测试覆盖率的项目通常意味着更高、更稳定的质量。插件测试用例开发有两个关键技术点：",-1),J=n("ol",null,[n("li",null,"如何搭建自动运行 Webpack，并能够读取构建结果的测试环境？"),n("li",null,"如何分析构建结果，确定插件逻辑符合预期？")],-1),R=n("blockquote",null,[n("p",null,[n("strong",null,"搭建测试环境")])],-1),O=n("p",null,"Webpack 虽然功能非常复杂，但本质上还是一个 Node 程序，所以我们可以使用一些 Node 测试工具搭建自动测试环境，例如 Jest、Karma 等。以 Jest 为例：",-1),K={href:"https://jestjs.io/docs/getting-started#using-babel",target:"_blank",rel:"noopener noreferrer"},$=p(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yarn add -D jest babel-jest @babel/core @babel/preset-env
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>添加 Babel 配置，如：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// babel.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;@babel/preset-env&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">targets</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">node</span><span class="token operator">:</span> <span class="token string">&#39;current&#39;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>添加 Jest 配置文件，如：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// jest.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">testEnvironment</span><span class="token operator">:</span> <span class="token string">&quot;node&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到这里，基础环境设置完毕，我们可以开始编写测试用例了。首先需要在测试代码中运行 Webpack，方法很简单，如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> webpack <span class="token keyword">from</span> <span class="token string">&#39;webpack&#39;</span><span class="token punctuation">;</span>

<span class="token function">webpack</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这部分逻辑比较通用，许多开源仓库都会将其提取为工具函数，类似于：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">&quot;path&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> webpack <span class="token keyword">from</span> <span class="token string">&quot;webpack&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> merge <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;webpack-merge&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createFsFromVolume<span class="token punctuation">,</span> Volume <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;memfs&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">runCompile</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> opt <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&quot;development&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token comment">// Mock 项目入口文件</span>
      <span class="token literal-property property">entry</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;./enter.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;../dist&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    options
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> compiler <span class="token operator">=</span> <span class="token function">webpack</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 使用内存文件系统，节省磁盘 IO 开支</span>
  compiler<span class="token punctuation">.</span>outputFileSystem <span class="token operator">=</span> <span class="token function">createFsFromVolume</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Volume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    compiler<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> stats</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span> stats<span class="token punctuation">,</span> compiler <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),Q={href:"https://github.com/Tecvan-fe/webpack-book-samples/blob/main/plugin-testing/test/helpers/index.js",target:"_blank",rel:"noopener noreferrer"},X=n("p",null,"有了测试所需的基础环境，以及运行 Webpack 实例的能力之后，我们可以正式开始编写测试用例了。",-1),Y=n("blockquote",null,[n("p",null,[n("strong",null,"编写测试用例")])],-1),Z=n("p",null,"Webpack 插件测试的基本逻辑是：在测试框架中运行 Webpack，之后对比分析构建结果、状态等是否符合预期，对比的内容通常有：",-1),nn=n("li",null,[s("分析 "),n("code",null,"compilation.error/warn"),s(" 数组是否包含或不包含特定错误、异常信息，通常用于判断 Webpack 是否运行成功；")],-1),sn=n("code",null,"image-minimizer-webpack-plugin",-1),an={href:"https://github.com/webpack-contrib/image-minimizer-webpack-plugin/blob/master/test/ImageminPlugin.test.js",target:"_blank",rel:"noopener noreferrer"},tn=n("code",null,"copy-webpack-plugn",-1),pn={href:"https://github1s.com/webpack-contrib/copy-webpack-plugin/blob/HEAD/test/CopyPlugin.test.js",target:"_blank",rel:"noopener noreferrer"},en=n("code",null,"mini-css-extract-plugin",-1),on={href:"https://github1s.com/webpack-contrib/mini-css-extract-plugin/blob/HEAD/test/TestCases.test.js",target:"_blank",rel:"noopener noreferrer"},cn=p(`<p>沿着这个思路，我们构造一个简单的测试用例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">&quot;path&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> promisify <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;util&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> runCompile <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./helpers&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> FooPlugin <span class="token keyword">from</span> <span class="token string">&quot;../src/FooPlugin&quot;</span><span class="token punctuation">;</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&quot;foo plugin&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;should inject foo banner&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">stats</span><span class="token operator">:</span> <span class="token punctuation">{</span> compilation <span class="token punctuation">}</span><span class="token punctuation">,</span>
      compiler<span class="token punctuation">,</span>
    <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">runCompile</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">FooPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> warnings<span class="token punctuation">,</span> errors<span class="token punctuation">,</span> assets <span class="token punctuation">}</span> <span class="token operator">=</span> compilation<span class="token punctuation">;</span>

    <span class="token comment">// 判断 warnings、errors 是否报出异常信息</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>warnings<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveLength</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>errors<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveLength</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> outputPath <span class="token punctuation">}</span> <span class="token operator">=</span> compilation<span class="token punctuation">.</span>options<span class="token punctuation">.</span>output<span class="token punctuation">;</span>
    <span class="token comment">// 遍历 assets，判断经过插件处理后，产物内容是否符合预期</span>
    <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>
      Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>assets<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> pathToEmitted <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>outputPath<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">promisify</span><span class="token punctuation">(</span>compiler<span class="token punctuation">.</span>outputFileSystem<span class="token punctuation">.</span>readFile<span class="token punctuation">)</span><span class="token punctuation">(</span>
          pathToEmitted<span class="token punctuation">,</span>
          <span class="token punctuation">{</span> <span class="token literal-property property">encoding</span><span class="token operator">:</span> <span class="token string">&quot;UTF-8&quot;</span> <span class="token punctuation">}</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;// Inject By 范文杰&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),ln={href:"https://github.com/Tecvan-fe/webpack-book-samples/blob/main/plugin-testing/test/helpers/index.js",target:"_blank",rel:"noopener noreferrer"},un=p('<p>示例中，17、18 行通过 <code>errors/warnings</code> 判断运行过程是否出现异常；25 行读入产物文件，之后判断内容是否满足要求。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>本文主要介绍 Webpack 插件可用性与健壮性层面的开发技巧，包括：</p><ul><li>我们应该尽量复用 Webpack Infrastructure Logging 接口记录插件运行日志；</li><li>若插件运行耗时较大，应该通过 <code>reportProgress</code> 接口上报执行进度，供用户了解运行状态；</li><li>应该尽可能使用 <code>schema-utils</code> 工具校验插件参数，确保输入参数的合法性；</li><li>可以借助 Node 测试工具，如 Jest、Karma 等搭建插件自动测试环境，之后在测试框架中运行 Webpack，分析比对构建结果、状态(产物文件、<code>warning/errors</code> 数组等)，确定插件是否正常运行。</li></ul><p>这些技巧与插件主功能无关，但有助于提升插件质量，还可以让用户更了解插件的运行状态、运行性能等，让插件本身更可靠，更容易被用户选择。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题" aria-hidden="true">#</a> 思考题</h2><p>综合全文，思考一下 Logger 的 <code>warn/error</code> 接口与 <code>compilation</code> 对象的 <code>errors/warnings</code> 数组有什么区别？分别适用于什么场景？哪种方式更利于自动化测试？</p>',7);function rn(kn,dn){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("p",null,[s("在前面 《"),n("a",r,[s("Loader 开发基础"),t(a)]),s("》一文中，我们已经详细介绍了 Webpack 内置的日志接口： "),n("a",k,[s("infrastructureLogging"),t(a)]),s("，与 "),n("a",d,[s("log4js"),t(a)]),s("、"),n("a",v,[s("winston"),t(a)]),s(" 等日志工具类似，借助这一能力我们能实现日志分级筛选能力，适用于处理一些执行过程的日志信息。")]),m,n("p",null,[s("这种方法仅记录异常日志，不影响构建流程，构建正常结束后 Webpack 还会将错误信息汇总到 "),n("a",b,[s("stats"),t(a)]),s(" 统计对象，方便后续二次处理，使用率极高。例如 "),n("a",g,[s("eslint-webpack-plugin"),t(a)]),s(" 就是通过这种方式输出 ESLint 检查出来的代码风格问题。")]),h,n("p",null,[s("有时候我们需要在插件中执行一些特别耗时的操作，例如：抽取 CSS 代码（如 "),n("a",f,[s("mini-css-extract-plugin"),t(a)]),s("）、压缩图片（如 "),n("a",_,[s("image-minimizer-webpack-plugin"),t(a)]),s("）、代码混淆（如 "),n("a",w,[s("terser-webpack-plugin"),t(a)]),s("），这些操作会延长 Webpack 构建的整体耗时，更糟糕的是会阻塞构建主流程，最终用户会感觉到明显卡顿。")]),y,n("ul",null,[n("li",null,[s("使用 "),n("a",q,[s("ProgressPlugin"),t(a)]),s(" 插件的 "),j,s(" 接口上报执行进度；")]),n("li",null,[s("使用 "),n("a",P,[s("stats"),t(a)]),s(" 接口汇总插件运行的统计数据。")])]),x,n("p",null,[n("a",N,[s("ProgressPlugin"),t(a)]),s(" 是 Webpack 内置用于展示构建进度的插件，有两种用法：")]),E,n("blockquote",null,[n("p",null,[s("提示：示例代码已上传到小册 "),n("a",L,[s("仓库"),t(a)]),s("。")])]),F,n("p",null,[n("a",W,[s("stats"),t(a)]),s(" 是 Webpack 内置的数据统计机制，专门用于收集模块构建耗时、模块依赖关系、产物组成等过程信息，我们可以借此分析、优化应用构建性能（后面章节会展开细讲）。在开发插件时，我们可以借用 "),I,s(" 机制，向用户输出插件各种维度的统计信息，例如：")]),M,n("ul",null,[A,n("li",null,[s("支持按需执行，用户可通过 "),n("a",U,[s("stats"),t(a)]),s(" 配置项控制；")]),G]),T,z,n("p",null,[s("在《"),n("a",C,[s("Loader 开发进阶"),t(a)]),s("》一文中，我们已经详细介绍了 "),n("a",S,[s("schema-utils"),t(a)]),s(" 校验工具的使用方法，开发插件时也使用这一工具校验配置参数，例如：")]),B,n("p",null,[s("详细用法可自行回顾《"),n("a",D,[s("Loader 开发进阶"),t(a)]),s("》章节，此处不再赘述。")]),H,V,J,R,O,n("ol",null,[n("li",null,[s("安装依赖，考虑到我们即将用 ES6 编写测试用例，这里额外添加了 "),n("a",K,[s("babel-jest"),t(a)]),s(" 等包：")])]),$,n("blockquote",null,[n("p",null,[s("提示：示例代码已上传到小册 "),n("a",Q,[s("仓库"),t(a)]),s("。")])]),X,Y,Z,n("ul",null,[nn,n("li",null,[s("分析构建产物，判断是否符合预期，例如： "),n("ul",null,[n("li",null,[sn,s(" 单测中会 "),n("a",an,[s("判断"),t(a)]),s(" 最终产物图片有没有经过压缩；")]),n("li",null,[tn,s(" 单测中会 "),n("a",pn,[s("判断"),t(a)]),s(" 文件有没有被复制到产物文件；")]),n("li",null,[en,s(" 单测中会 "),n("a",on,[s("判断"),t(a)]),s(" CSS 文件有没有被正确抽取出来。")])])])]),cn,n("blockquote",null,[n("p",null,[s("提示：示例代码已上传到小册 "),n("a",ln,[s("仓库"),t(a)]),s("。")])]),un])}const mn=e(l,[["render",rn],["__file","di22zhang—chajiankaifajinjie：ruhetishengchajianjianzhuangxing.html.vue"]]);export{mn as default};
