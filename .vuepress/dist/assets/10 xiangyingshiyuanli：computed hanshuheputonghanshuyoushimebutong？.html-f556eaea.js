import{_ as e,r as t,o as p,c as o,b as s,d as n,e as c,a as l}from"./app-48690364.js";const i={},u=s("h2",{id:"前言",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),n(" 前言")],-1),d=s("code",null,"getter",-1),r={href:"https://cn.vuejs.org/api/reactivity-core.html#ref",target:"_blank",rel:"noopener noreferrer"},k=s("code",null,"ref",-1),v=s("code",null,".value",-1),m=s("code",null,"getter",-1),b=l(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> plusOne <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> count<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>plusOne<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// 2</span>

plusOne<span class="token punctuation">.</span>value<span class="token operator">++</span> <span class="token comment">// 错误</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它也可以接受一个带有 <code>get</code> 和 <code>set</code> 函数的对象来创建一个可写的 ref 对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> plusOne <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> count<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    count<span class="token punctuation">.</span>value <span class="token operator">=</span> val <span class="token operator">-</span> <span class="token number">1</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

plusOne<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来看看源码里是如何实现 <code>computed</code> 的 <code>API</code>。</p><h2 id="构造-setter-和-getter" tabindex="-1"><a class="header-anchor" href="#构造-setter-和-getter" aria-hidden="true">#</a> 构造 setter 和 getter</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token parameter">getterOrOptions<span class="token punctuation">,</span> debugOptions<span class="token punctuation">,</span> isSSR <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> getter
  <span class="token keyword">let</span> setter
  <span class="token comment">// 判断第一个参数是不是一个函数</span>
  <span class="token keyword">const</span> onlyGetter <span class="token operator">=</span> <span class="token function">isFunction</span><span class="token punctuation">(</span>getterOrOptions<span class="token punctuation">)</span>
  
  <span class="token comment">// 构造 setter 和 getter 函数</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>onlyGetter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    getter <span class="token operator">=</span> getterOrOptions
    <span class="token comment">// 如果第一个参数是一个函数，那么就是只读的</span>
    setter <span class="token operator">=</span> __DEV__
      <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;Write operation failed: computed value is readonly&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token operator">:</span> <span class="token constant">NOOP</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    getter <span class="token operator">=</span> getterOrOptions<span class="token punctuation">.</span>get
    setter <span class="token operator">=</span> getterOrOptions<span class="token punctuation">.</span>set
  <span class="token punctuation">}</span>
  <span class="token comment">// 构造 ref 响应式对象</span>
  <span class="token keyword">const</span> cRef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComputedRefImpl</span><span class="token punctuation">(</span>getter<span class="token punctuation">,</span> setter<span class="token punctuation">,</span> onlyGetter <span class="token operator">||</span> <span class="token operator">!</span>setter<span class="token punctuation">,</span> isSSR<span class="token punctuation">)</span>
  <span class="token comment">// 返回响应式 ref</span>
  <span class="token keyword">return</span> cRef
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，这段 <code>computed</code> 函数体最初就是需要格式化传入的参数，根据第一个参数入参的类型来构造统一的 <code>setter</code> 和 <code>getter</code> 函数，并传入 <code>ComputedRefImpl</code> 类中，进行实例化 <code>ref</code> 响应式对象。</p><p>接下来一起看看 <code>ComputedRefImpl</code> 是如何构造 <code>cRef</code> 响应式对象的。</p><h2 id="构造-cref-响应式对象" tabindex="-1"><a class="header-anchor" href="#构造-cref-响应式对象" aria-hidden="true">#</a> 构造 cRef 响应式对象</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">ComputedRefImpl</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> dep <span class="token operator">=</span> <span class="token keyword">undefined</span>

  <span class="token keyword">private</span> _value
  <span class="token keyword">public</span> readonly effect
  <span class="token comment">//表示 ref 类型</span>
  <span class="token keyword">public</span> readonly __v_isRef <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token comment">//是否只读</span>
  <span class="token keyword">public</span> readonly <span class="token punctuation">[</span>ReactiveFlags<span class="token punctuation">.</span><span class="token constant">IS_READONLY</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span>
  <span class="token comment">//用于控制是否进行值更新(代表是否脏值)</span>
  <span class="token keyword">public</span> _dirty <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token comment">// 缓存</span>
  <span class="token keyword">public</span> _cacheable

  <span class="token function">constructor</span><span class="token punctuation">(</span>
    <span class="token parameter">getter<span class="token punctuation">,</span>
    _setter<span class="token punctuation">,</span>
    isReadonly<span class="token punctuation">,</span>
    isSSR</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 把 getter 作为响应式依赖函数 fn 参数</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>effect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReactiveEffect</span><span class="token punctuation">(</span>getter<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>_dirty<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_dirty <span class="token operator">=</span> <span class="token boolean">true</span>
        <span class="token comment">// 触发更新</span>
        <span class="token function">triggerRefValue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment">// 标记 effect 的 computed 属性</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>effect<span class="token punctuation">.</span>computed <span class="token operator">=</span> <span class="token keyword">this</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>effect<span class="token punctuation">.</span>active <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_cacheable <span class="token operator">=</span> <span class="token operator">!</span>isSSR
    <span class="token keyword">this</span><span class="token punctuation">[</span>ReactiveFlags<span class="token punctuation">.</span><span class="token constant">IS_READONLY</span><span class="token punctuation">]</span> <span class="token operator">=</span> isReadonly
  <span class="token punctuation">}</span>

  <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token function">toRaw</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
    <span class="token comment">// 依赖收集</span>
    <span class="token function">trackRefValue</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>
    <span class="token comment">// 脏值则进行更新</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>_dirty <span class="token operator">||</span> <span class="token operator">!</span>self<span class="token punctuation">.</span>_cacheable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      self<span class="token punctuation">.</span>_dirty <span class="token operator">=</span> <span class="token boolean">false</span>
      <span class="token comment">// 更新值</span>
      self<span class="token punctuation">.</span>_value <span class="token operator">=</span> self<span class="token punctuation">.</span>effect<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> self<span class="token punctuation">.</span>_value
  <span class="token punctuation">}</span>
  <span class="token comment">// 执行 setter</span>
  <span class="token keyword">set</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token parameter">newValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_setter</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单看一下该类的实现：在构造函数的时候，创建了一个副作用对象 <code>effect</code>。并为 <code>effect</code> 额外定义了一个 <code>computed</code> 属性执行当前响应式对象 <code>cRef</code>。</p><p>另外，定义了一个 <code>get</code> 方法，当我们通过 <code>ref.value</code> 取值的时候可以进行依赖收集，将定义的 <code>effect</code> 收集起来。</p><p>其次，定义了一个 <code>set</code> 方法，该方法就是执行传入进来的 <code>setter</code> 函数。</p><p>最后，熟悉 <code>Vue</code> 的开发者都知道 <code>computed</code> 的特性就在于能够缓存计算的值（提升性能），只有当 <code>computed</code> 的依赖发生变化时才会重新计算，否则读取 <code>computed</code> 的值则一直是之前的值。在源码这里，实现上述功能相关的变量分别是 <code>_dirty</code> 和 <code>_cacheable</code> 这 2 个，用来控制缓存的实现。</p><p>有了上面的介绍，我们来看一个具体的例子，看看 <code>computed</code> 是如何执行的：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span> 
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span> 
    {{ plusOne }} 
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span> 
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>plus<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>plus<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"> 
  <span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> computed <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span> 
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span> 
    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
      <span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> 
      <span class="token keyword">const</span> plusOne <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
        <span class="token keyword">return</span> num<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">1</span> 
      <span class="token punctuation">}</span><span class="token punctuation">)</span> 

      <span class="token keyword">function</span> <span class="token function">plus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        num<span class="token punctuation">.</span>value<span class="token operator">++</span> 
      <span class="token punctuation">}</span> 
      <span class="token keyword">return</span> <span class="token punctuation">{</span> 
        plusOne<span class="token punctuation">,</span> 
        plus 
      <span class="token punctuation">}</span> 
    <span class="token punctuation">}</span> 
  <span class="token punctuation">}</span> 
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Step 1</strong>：<code>setup</code> 函数体内，<code>computed</code> 函数执行，初始的过程中，生成了一个 <code>computed effect</code>。</p><p><strong>Step 2</strong>：初始化渲染的时候，<code>render</code> 函数访问了 <code>plusOne.value</code>，触发了收集，此时收集的副作用为 <code>render effect</code>，因为是首次访问，所以此时的 <code>self._dirty = true</code> 执行 <code>effect.run()</code> 也就是执行了 <code>getter</code> 函数，得到 <code>_value = 1</code>。</p><p><strong>Step 3</strong>：<code>getter</code> 函数体内访问了 <code>num.value</code> 触发了对 <code>num</code> 的依赖收集，此时收集到的依赖为 <code>computed effect</code>。</p><p><strong>Step 4</strong>：点击按钮，此时 <code>num = 1</code> 触发了 <code>computed effect</code> 的 <code>schduler</code> 调度，因为 <code>_dirty = false</code>，所以触发了 <code>triggerRefValue</code> 的执行，同时，设置 <code>_dirty = true</code>。</p><p><strong>Step 5</strong>：<code>triggerRefValue</code> 执行过程中，会执行 <code>computed effect.run()</code> 触发 <code>getter</code> 函数的执行。因为此时的 <code>_dirty = true</code>，所以 <code>get value</code> 会重新计算 <code>_value</code> 的值为 <code>plusOne.value = 2</code>。</p><p><strong>Step 6</strong>：<code>plusOne.value</code> 值变化后，触发了 <code>render effect.run</code> 重新渲染。</p><p>可以看到 <code>computed</code> 函数通过 <code>_dirty</code> 把 <code>computed</code> 的缓存特性表现得淋漓尽致，只有当 <code>_dirty = true</code> 的时候，才会进行重新计算求值，而 <code>_dirty = true</code> 只有在首次取值或者取值内部依赖发生变化时才会执行。</p><h2 id="计算属性的执行顺序" tabindex="-1"><a class="header-anchor" href="#计算属性的执行顺序" aria-hidden="true">#</a> 计算属性的执行顺序</h2><p>这里，我们介绍完了 <code>computed</code> 的核心流程，但是细心的同学可能发现，这里我们还漏了一个小的知识点没有介绍，就是在类 <code>ComputedRefImpl</code> 的构造函数中，执行了这样一行代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>effect<span class="token punctuation">.</span>computed <span class="token operator">=</span> <span class="token keyword">this</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>那么这行代码的作用是什么呢？在说这个作用之前，我们先来看一个 <code>demo</code>:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> effect<span class="token punctuation">,</span> computed <span class="token punctuation">}</span> <span class="token operator">=</span> Vue

<span class="token keyword">const</span> n <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> plusOne <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> n<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  n<span class="token punctuation">.</span>value
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>plusOne<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
n<span class="token punctuation">.</span>value<span class="token operator">++</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>小伙伴们可以猜测一下上述代码的打印结果。</p><p>可能有些小伙伴猜测应该是：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1
1
2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先是 <code>effect</code> 函数先执行，触发 <code>n</code> 的依赖收集，然后访问了 <code>plusOne.value</code>，再收集 <code>computed effect</code>。然后执行 <code>n.value++</code> 按照顺序触发 <code>effect</code> 执行，所以理论上先触发 <code>effect</code> 函数内部的回调，再去执行 <code>computed</code> 的重新求值。所以输出是上述结果。</p><p>但事实确实：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1
2
2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这就是因为上面那一行代码的作用。<code>effect.computed</code> 的标记保障了 <code>computed effect</code> 会优先于其他普通副作用函数先执行，关于具体的实现，可以看一下 <code>triggerEffects</code> 函数体内对 <code>computed</code> 的特殊处理：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">triggerEffects</span><span class="token punctuation">(</span><span class="token parameter">dep<span class="token punctuation">,</span> debuggerEventExtraInfo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> effects <span class="token operator">=</span> <span class="token function">isArray</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span> <span class="token operator">?</span> dep <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>dep<span class="token punctuation">]</span>
  <span class="token comment">// 确保执行完所有的 computed</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> effect <span class="token keyword">of</span> effects<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>effect<span class="token punctuation">.</span>computed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">triggerEffect</span><span class="token punctuation">(</span>effect<span class="token punctuation">,</span> debuggerEventExtraInfo<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 再执行其他的副作用函数</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> effect <span class="token keyword">of</span> effects<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>effect<span class="token punctuation">.</span>computed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">triggerEffect</span><span class="token punctuation">(</span>effect<span class="token punctuation">,</span> debuggerEventExtraInfo<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>总而言之，计算属性可以<strong>从状态数据中计算出新数据</strong>，<code>computed</code> 和 <code>methods</code> 的最大差异是它具备缓存性，如果依赖项不变时不会重新计算，而是直接返回缓存的值。</p><p>搞懂了本小节关于 <code>computed</code> 函数的介绍后，相信你已经知道计算属性相对于普通函数的不同之处的原理，在以后的开发中，可以更合理地使用计算属性！</p>`,39);function f(g,y){const a=t("ExternalLinkIcon");return p(),o("div",null,[u,s("p",null,[n("计算属性接受一个 "),d,n(" 函数，返回一个只读的响应式 "),s("a",r,[n("ref"),c(a)]),n(" 对象。该 "),k,n(" 通过 "),v,n(" 暴露 "),m,n(" 函数的返回值。")]),b])}const w=e(i,[["render",f],["__file","10 xiangyingshiyuanli：computed hanshuheputonghanshuyoushimebutong？.html.vue"]]);export{w as default};
