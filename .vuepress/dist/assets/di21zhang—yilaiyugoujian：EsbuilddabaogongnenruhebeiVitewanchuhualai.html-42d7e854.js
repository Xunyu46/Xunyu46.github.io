import{_ as p,r as e,o,c,b as s,d as n,e as i,f as l,a}from"./app-48690364.js";const u={},r=s("p",null,[n("在第七节的内容中，我们已经分析过 "),s("code",null,"依赖预构建"),n("的意义以及使用，对于其底层的实现并没有作过多的介绍。而在 Vite 依赖预构建的底层实现中，大量地使用到了 Esbuild 这款构建工具，实现了比较复杂的 Esbuild 插件，同时也应用了诸多 Esbuild 使用技巧。相信在理解这部分的源码之后，你将会对 Vite 预构建以及 Esbuild 本身有更加深入的认识。")],-1),k=s("p",null,[n("接下来，我就来带你揭开 "),s("code",null,"Vite 预构建"),n("神秘的面纱，从核心流程到依赖扫描、依赖打包的具体实现，带你彻底理解预构建背后的技术，学习 Vite 是如何灵活运用 Esbuild，将 Esbuild 这个打包工具"),s("code",null,"玩出花来"),n("的。")],-1),d=s("h2",{id:"预构建核心流程",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#预构建核心流程","aria-hidden":"true"},"#"),n(" 预构建核心流程")],-1),v=s("code",null,"optimizeDeps",-1),m={href:"https://github.com/vitejs/vite/blob/v2.7.0/packages/vite/src/node/optimizer/index.ts",target:"_blank",rel:"noopener noreferrer"},b=a(`<h3 id="缓存判断" tabindex="-1"><a class="header-anchor" href="#缓存判断" aria-hidden="true">#</a> 缓存判断</h3><p>首先是预构建缓存的判断。Vite 在每次预构建之后都将一些关键信息写入到了<code>_metadata.json</code>文件中，第二次启动项目时会通过这个文件中的 hash 值来进行缓存的判断，如果命中缓存则不会进行后续的预构建流程，代码如下所示:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// _metadata.json 文件所在的路径</span>
<span class="token keyword">const</span> dataPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>cacheDir<span class="token punctuation">,</span> <span class="token string">&quot;_metadata.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 根据当前的配置计算出哈希值</span>
<span class="token keyword">const</span> mainHash <span class="token operator">=</span> <span class="token function">getDepHash</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> data<span class="token operator">:</span> DepOptimizationMetadata <span class="token operator">=</span> <span class="token punctuation">{</span>
  hash<span class="token operator">:</span> mainHash<span class="token punctuation">,</span>
  browserHash<span class="token operator">:</span> mainHash<span class="token punctuation">,</span>
  optimized<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 默认走到里面的逻辑</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>force<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> prevData<span class="token operator">:</span> DepOptimizationMetadata <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">// 读取元数据</span>
    prevData <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>dataPath<span class="token punctuation">,</span> <span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token comment">// 当前计算出的哈希值与 _metadata.json 中记录的哈希值一致，表示命中缓存，不用预构建</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>prevData <span class="token operator">&amp;&amp;</span> prevData<span class="token punctuation">.</span>hash <span class="token operator">===</span> data<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Hash is consistent. Skipping. Use --force to override.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> prevData<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>值得注意的是哈希计算的策略，即决定哪些配置和文件有可能影响预构建的结果，然后根据这些信息来生成哈希值。这部分逻辑集中在<code>getHash</code>函数中，我把关键信息放到了注释中:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> lockfileFormats <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;package-lock.json&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;yarn.lock&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;pnpm-lock.yaml&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">getDepHash</span><span class="token punctuation">(</span>root<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> config<span class="token operator">:</span> ResolvedConfig<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
  <span class="token comment">// 获取 lock 文件内容</span>
  <span class="token keyword">let</span> content <span class="token operator">=</span> <span class="token function">lookupFile</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> lockfileFormats<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token comment">// 除了 lock 文件外，还需要考虑下面的一些配置信息</span>
  content <span class="token operator">+=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>
    <span class="token punctuation">{</span>
      <span class="token comment">// 开发/生产环境</span>
      mode<span class="token operator">:</span> config<span class="token punctuation">.</span>mode<span class="token punctuation">,</span>
      <span class="token comment">// 项目根路径</span>
      root<span class="token operator">:</span> config<span class="token punctuation">.</span>root<span class="token punctuation">,</span>
      <span class="token comment">// 路径解析配置</span>
      resolve<span class="token operator">:</span> config<span class="token punctuation">.</span>resolve<span class="token punctuation">,</span>
      <span class="token comment">// 自定义资源类型</span>
      assetsInclude<span class="token operator">:</span> config<span class="token punctuation">.</span>assetsInclude<span class="token punctuation">,</span>
      <span class="token comment">// 插件</span>
      plugins<span class="token operator">:</span> config<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// 预构建配置</span>
      optimizeDeps<span class="token operator">:</span> <span class="token punctuation">{</span>
        include<span class="token operator">:</span> config<span class="token punctuation">.</span>optimizeDeps<span class="token operator">?.</span>include<span class="token punctuation">,</span>
        exclude<span class="token operator">:</span> config<span class="token punctuation">.</span>optimizeDeps<span class="token operator">?.</span>exclude<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 特殊处理函数和正则类型</span>
    <span class="token punctuation">(</span>_<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">&quot;function&quot;</span> <span class="token operator">||</span> value <span class="token keyword">instanceof</span> <span class="token class-name">RegExp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 最后调用 crypto 库中的 createHash 方法生成哈希</span>
  <span class="token keyword">return</span> <span class="token function">createHash</span><span class="token punctuation">(</span><span class="token string">&quot;sha256&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token string">&quot;hex&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="依赖扫描" tabindex="-1"><a class="header-anchor" href="#依赖扫描" aria-hidden="true">#</a> 依赖扫描</h3><p>如果没有命中缓存，则会正式地进入依赖预构建阶段。不过 Vite 不会直接进行依赖的预构建，而是在之前探测一下项目中存在哪些依赖，收集依赖列表，也就是进行<code>依赖扫描</code>的过程。这个过程是必须的，因为 Esbuild 需要知道我们到底要打包哪些第三方依赖。关键代码如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">(</span><span class="token punctuation">{</span> deps<span class="token punctuation">,</span> missing <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">scanImports</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在<code>scanImports</code>方法内部主要会调用 Esbuild 提供的 <code>build</code> 方法:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> deps<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 扫描用到的 Esbuild 插件</span>
<span class="token keyword">const</span> plugin <span class="token operator">=</span> <span class="token function">esbuildScanPlugin</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> container<span class="token punctuation">,</span> deps<span class="token punctuation">,</span> missing<span class="token punctuation">,</span> entries<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>
  <span class="token comment">// 应用项目入口</span>
  entries<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      absWorkingDir<span class="token operator">:</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// 注意这个参数</span>
      write<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      entryPoints<span class="token operator">:</span> <span class="token punctuation">[</span>entry<span class="token punctuation">]</span><span class="token punctuation">,</span>
      bundle<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      format<span class="token operator">:</span> <span class="token string">&quot;esm&quot;</span><span class="token punctuation">,</span>
      logLevel<span class="token operator">:</span> <span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span>
      plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>plugins<span class="token punctuation">,</span> plugin<span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token operator">...</span>esbuildOptions<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>值得注意的是，其中传入的<code>write</code>参数被设为 false，表示产物不用写入磁盘，这就大大节省了磁盘 I/O 的时间了，也是<code>依赖扫描</code>为什么往往比<code>依赖打包</code>快很多的原因之一。</p><p>接下来会输出预打包信息:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>asCommand<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>newDeps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>
      chalk<span class="token punctuation">.</span><span class="token function">greenBright</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Pre-bundling dependencies:\\n  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>depsString<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>
      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">(this will be run only when your dependencies or config have changed)</span><span class="token template-punctuation string">\`</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>chalk<span class="token punctuation">.</span><span class="token function">greenBright</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Optimizing dependencies:\\n  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>depsString<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时候你可以明白，为什么第一次启动时会输出预构建相关的 log 信息了，其实这些信息都是通过<code>依赖扫描</code>阶段来搜集的，而此时还并未开始真正的依赖打包过程。</p><p>可能你会有疑问，为什么对项目入口打包一次就收集到所有依赖信息了呢？大家可以注意到<code>esbuildScanPlugin</code>这个函数创建 <code>scan 插件</code>的时候就接收到了<code>deps</code>对象作为入参，这个对象的作用不可小觑，在 <code>scan 插件</code>里面就是解析各种 import 语句，最终通过它来记录依赖信息。由于解析的过程比较复杂，我们放到下一个部分具体讲解，这里你只需要知道核心的流程即可。</p><h3 id="依赖打包" tabindex="-1"><a class="header-anchor" href="#依赖打包" aria-hidden="true">#</a> 依赖打包</h3><p>收集完依赖之后，就正式地进入到<code>依赖打包</code>的阶段了。这里也调用 Esbuild 进行打包并写入产物到磁盘中，关键代码如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  absWorkingDir<span class="token operator">:</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token comment">// 所有依赖的 id 数组，在插件中会转换为真实的路径</span>
  entryPoints<span class="token operator">:</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>flatIdDeps<span class="token punctuation">)</span><span class="token punctuation">,</span>
  bundle<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  format<span class="token operator">:</span> <span class="token string">&quot;esm&quot;</span><span class="token punctuation">,</span>
  target<span class="token operator">:</span> config<span class="token punctuation">.</span>build<span class="token punctuation">.</span>target <span class="token operator">||</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  external<span class="token operator">:</span> config<span class="token punctuation">.</span>optimizeDeps<span class="token operator">?.</span>exclude<span class="token punctuation">,</span>
  logLevel<span class="token operator">:</span> <span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span>
  splitting<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  sourcemap<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  outdir<span class="token operator">:</span> cacheDir<span class="token punctuation">,</span>
  ignoreAnnotations<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  metafile<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  define<span class="token punctuation">,</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token operator">...</span>plugins<span class="token punctuation">,</span>
    <span class="token comment">// 预构建专用的插件</span>
    <span class="token function">esbuildDepPlugin</span><span class="token punctuation">(</span>flatIdDeps<span class="token punctuation">,</span> flatIdToExports<span class="token punctuation">,</span> config<span class="token punctuation">,</span> ssr<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token operator">...</span>esbuildOptions<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 打包元信息，后续会根据这份信息生成 _metadata.json</span>
<span class="token keyword">const</span> meta <span class="token operator">=</span> result<span class="token punctuation">.</span>metafile<span class="token operator">!</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="元信息写入磁盘" tabindex="-1"><a class="header-anchor" href="#元信息写入磁盘" aria-hidden="true">#</a> 元信息写入磁盘</h3><p>在打包过程完成之后，Vite 会拿到 Esbuild 构建的元信息，也就是上面代码中的<code>meta</code>对象，然后将元信息保存到<code>_metadata.json</code>文件中:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> data<span class="token operator">:</span> DepOptimizationMetadata <span class="token operator">=</span> <span class="token punctuation">{</span>
  hash<span class="token operator">:</span> mainHash<span class="token punctuation">,</span>
  browserHash<span class="token operator">:</span> mainHash<span class="token punctuation">,</span>
  optimized<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 省略中间的代码</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> id <span class="token keyword">in</span> deps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> entry <span class="token operator">=</span> deps<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>
  data<span class="token punctuation">.</span>optimized<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    file<span class="token operator">:</span> <span class="token function">normalizePath</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>cacheDir<span class="token punctuation">,</span> <span class="token function">flattenId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    src<span class="token operator">:</span> entry<span class="token punctuation">,</span>
    <span class="token comment">// 判断是否需要转换成 ESM 格式，后面会介绍</span>
    needsInterop<span class="token operator">:</span> <span class="token function">needsInterop</span><span class="token punctuation">(</span>
      id<span class="token punctuation">,</span>
      idToExports<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span>
      meta<span class="token punctuation">.</span>outputs<span class="token punctuation">,</span>
      cacheDirOutputPath
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 元信息写磁盘</span>
<span class="token function">writeFile</span><span class="token punctuation">(</span>dataPath<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到这里，预构建的核心流程就梳理完了，可以看到总体的流程上面并不复杂，但实际上为了方便你理解，在<code>依赖扫描</code>和<code>依赖打包</code>这两个部分中，我省略了很多的细节，每个细节代表了各种复杂的处理场景，因此，在下面的篇幅中，我们就来好好地剖析一下这两部分的应用场景和实现细节。</p><h2 id="依赖扫描详细分析" tabindex="-1"><a class="header-anchor" href="#依赖扫描详细分析" aria-hidden="true">#</a> 依赖扫描详细分析</h2><h3 id="_1-如何获取入口" tabindex="-1"><a class="header-anchor" href="#_1-如何获取入口" aria-hidden="true">#</a> 1. 如何获取入口</h3><p>现在让我们把目光聚焦在<code>scanImports</code>的实现上。大家可以先想一想，在进行依赖扫描之前，需要做的第一件事是什么？很显然，是找到入口文件。但入口文件可能存在于多个配置当中，比如<code>optimizeDeps.entries</code>和<code>build.rollupOptions.input</code>，同时需要考虑数组和对象的情况；也可能用户没有配置，需要自动探测入口文件。那么，在<code>scanImports</code>是如何做到的呢？</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> explicitEntryPatterns <span class="token operator">=</span> config<span class="token punctuation">.</span>optimizeDeps<span class="token punctuation">.</span>entries<span class="token punctuation">;</span>
<span class="token keyword">const</span> buildInput <span class="token operator">=</span> config<span class="token punctuation">.</span>build<span class="token punctuation">.</span>rollupOptions<span class="token operator">?.</span>input<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>explicitEntryPatterns<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 先从 optimizeDeps.entries 寻找入口，支持 glob 语法</span>
  entries <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">globEntries</span><span class="token punctuation">(</span>explicitEntryPatterns<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>buildInput<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 其次从 build.rollupOptions.input 配置中寻找，注意需要考虑数组和对象的情况</span>
  <span class="token keyword">const</span> <span class="token function-variable function">resolvePath</span> <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>root<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> buildInput <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    entries <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">resolvePath</span><span class="token punctuation">(</span>buildInput<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>buildInput<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    entries <span class="token operator">=</span> buildInput<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>resolvePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>buildInput<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    entries <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>buildInput<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>resolvePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;invalid rollupOptions.input value.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token comment">// 兜底逻辑，如果用户没有进行上述配置，则自动从根目录开始寻找</span>
  entries <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">globEntries</span><span class="token punctuation">(</span><span class="token string">&quot;**/*.html&quot;</span><span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>globEntries</code> 方法即通过 <code>fast-glob</code> 库来从项目根目录扫描文件。</p><p>接下来我们还需要考虑入口文件的类型，一般情况下入口需要是<code>js/ts</code>文件，但实际上像 html、vue 单文件组件这种类型我们也是需要支持的，因为在这些文件中仍然可以包含 script 标签的内容，从而让我们搜集到依赖信息。</p><p>在源码当中，同时对 <code>html</code>、<code>vue</code>、<code>svelte</code>、<code>astro</code>(一种新兴的类 html 语法)四种后缀的入口文件进行了解析，当然，具体的解析过程在<code>依赖扫描</code>阶段的 Esbuild 插件中得以实现，接着就让我们在插件的实现中一探究竟。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> htmlTypesRE <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.(html|vue|svelte|astro)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">esbuildScanPlugin</span><span class="token punctuation">(</span><span class="token comment">/* 一些入参 */</span><span class="token punctuation">)</span><span class="token operator">:</span> Plugin <span class="token punctuation">{</span>
  <span class="token comment">// 初始化一些变量</span>
  <span class="token comment">// 返回一个 Esbuild 插件</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">&quot;vite:dep-scan&quot;</span><span class="token punctuation">,</span>
    <span class="token function">setup</span><span class="token punctuation">(</span>build<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 标记「类 HTML」文件的 namespace</span>
      build<span class="token punctuation">.</span><span class="token function">onResolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span> filter<span class="token operator">:</span> htmlTypesRE <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> path<span class="token punctuation">,</span> importer <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
          path<span class="token operator">:</span> <span class="token keyword">await</span> <span class="token function">resolve</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> importer<span class="token punctuation">)</span><span class="token punctuation">,</span>
          namespace<span class="token operator">:</span> <span class="token string">&quot;html&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      build<span class="token punctuation">.</span><span class="token function">onLoad</span><span class="token punctuation">(</span>
        <span class="token punctuation">{</span> filter<span class="token operator">:</span> htmlTypesRE<span class="token punctuation">,</span> namespace<span class="token operator">:</span> <span class="token string">&quot;html&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> path <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token comment">// 解析「类 HTML」文件</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里来我们以<code>html</code>文件的解析为例来讲解，原理如下图所示:</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/717d75037b42482fb0a0f0b25743b058~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>在插件中会扫描出所有带有 <code>type=module</code> 的 script 标签，对于含有 src 的 <code>script</code> 改写为一个 import 语句，对于含有具体内容的 script，则抽离出其中的脚本内容，最后将所有的 script 内容拼接成一段 js 代码。接下来我们来看具体的代码，其中会以上图中的<code>html</code>为示例来拆解中间过程:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> scriptModuleRE <span class="token operator">=</span>
  <span class="token operator">/</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>script\\b<span class="token punctuation">[</span><span class="token operator">^</span><span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token operator">*</span>type\\s<span class="token operator">*=</span>\\s<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">:</span> module <span class="token operator">|</span><span class="token string">&#39;module&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">^</span><span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">script&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gims</span></span>
<span class="token keyword">export</span> <span class="token keyword">const</span> scriptRE <span class="token operator">=</span> <span class="token operator">/</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>script\\<span class="token function">b</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">:</span>\\s<span class="token punctuation">[</span><span class="token operator">^</span><span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token operator">|</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">script&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gims</span></span>
<span class="token keyword">export</span> <span class="token keyword">const</span> commentRE <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;!--(.|[\\r\\n])*?--&gt;</span><span class="token regex-delimiter">/</span></span>
<span class="token keyword">const</span> srcRE <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\bsrc\\s*=\\s*(?: ([^ ]+) |&#39;([^&#39;]+)&#39;|([^\\s&#39; &gt;]+))</span><span class="token regex-delimiter">/</span><span class="token regex-flags">im</span></span>
<span class="token keyword">const</span> typeRE <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\btype\\s*=\\s*(?: ([^ ]+) |&#39;([^&#39;]+)&#39;|([^\\s&#39; &gt;]+))</span><span class="token regex-delimiter">/</span><span class="token regex-flags">im</span></span>
<span class="token keyword">const</span> langRE <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\blang\\s*=\\s*(?: ([^ ]+) |&#39;([^&#39;]+)&#39;|([^\\s&#39; &gt;]+))</span><span class="token regex-delimiter">/</span><span class="token regex-flags">im</span></span>
<span class="token comment">// scan 插件 setup 方法内部实现</span>
build<span class="token punctuation">.</span><span class="token function">onLoad</span><span class="token punctuation">(</span>
  <span class="token punctuation">{</span> filter<span class="token operator">:</span> htmlTypesRE<span class="token punctuation">,</span> namespace<span class="token operator">:</span> <span class="token string">&#39;html&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> path <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> raw <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">// 去掉注释内容，防止干扰解析过程</span>
    raw <span class="token operator">=</span> raw<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>commentRE<span class="token punctuation">,</span> <span class="token string">&#39;&lt;!----&gt;&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> isHtml <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;.html&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">// HTML 情况下会寻找 type 为 module 的 script</span>
    <span class="token comment">// 正则：/(&lt;script\\b[^&gt;]*type\\s*=\\s*(?: module |&#39;module&#39;)[^&gt;]*&gt;)(.*?)&lt;/script&gt;/gims</span>
    <span class="token keyword">const</span> regex <span class="token operator">=</span> isHtml <span class="token operator">?</span> scriptModuleRE <span class="token operator">:</span> scriptRE
    regex<span class="token punctuation">.</span>lastIndex <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">let</span> js <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
    <span class="token keyword">let</span> loader<span class="token operator">:</span> Loader <span class="token operator">=</span> <span class="token string">&#39;js&#39;</span>
    <span class="token keyword">let</span> match<span class="token operator">:</span> RegExpExecArray <span class="token operator">|</span> <span class="token keyword">null</span>
    <span class="token comment">// 正式开始解析</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>match <span class="token operator">=</span> regex<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 第一次: openTag 为 &lt;script type= module  src= /src/main.ts &gt;, 无 content</span>
      <span class="token comment">// 第二次: openTag 为 &lt;script type= module &gt;，有 content</span>
      <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> openTag<span class="token punctuation">,</span> content<span class="token punctuation">]</span> <span class="token operator">=</span> match
      <span class="token keyword">const</span> typeMatch <span class="token operator">=</span> openTag<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>typeRE<span class="token punctuation">)</span>
      <span class="token keyword">const</span> type <span class="token operator">=</span>
        typeMatch <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>typeMatch<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> typeMatch<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">||</span> typeMatch<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
      <span class="token keyword">const</span> langMatch <span class="token operator">=</span> openTag<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>langRE<span class="token punctuation">)</span>
      <span class="token keyword">const</span> lang <span class="token operator">=</span>
        langMatch <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>langMatch<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> langMatch<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">||</span> langMatch<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>lang <span class="token operator">===</span> <span class="token string">&#39;ts&#39;</span> <span class="token operator">||</span> lang <span class="token operator">===</span> <span class="token string">&#39;tsx&#39;</span> <span class="token operator">||</span> lang <span class="token operator">===</span> <span class="token string">&#39;jsx&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 指定 esbuild 的 loader</span>
        loader <span class="token operator">=</span> lang
      <span class="token punctuation">}</span>
      <span class="token keyword">const</span> srcMatch <span class="token operator">=</span> openTag<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>srcRE<span class="token punctuation">)</span>
      <span class="token comment">// 根据有无 src 属性来进行不同的处理</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>srcMatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> src <span class="token operator">=</span> srcMatch<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> srcMatch<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">||</span> srcMatch<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>
        js <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">import </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\n</span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>content<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        js <span class="token operator">+=</span> content <span class="token operator">+</span> <span class="token string">&#39;\\n&#39;</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    loader<span class="token punctuation">,</span>
    contents<span class="token operator">:</span> js
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里对源码做了一定的精简，省略了 <code>vue</code>/<code>svelte</code> 以及 <code>i<wbr>mport.meta.glob</code> 语法的处理，但不影响整体的实现思路，这里主要是让你了解即使是<code>html</code>或者类似这种类型的文件，也是能作为 Esbuild 的预构建入口来进行解析的。</p><h3 id="_2-如何记录依赖" tabindex="-1"><a class="header-anchor" href="#_2-如何记录依赖" aria-hidden="true">#</a> 2. 如何记录依赖？</h3><p>入口的问题解决了，接下来还有一个问题: 如何在 Esbuild 编译的时候记录依赖呢？</p><p>Vite 中会把 <code>bare import</code>的路径当做依赖路径，关于<code>bare import</code>，你可以理解为直接引入一个包名，比如下面这样:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>而以<code>.</code>开头的相对路径或者以<code>/</code>开头的绝对路径都不能算<code>bare import</code>:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 以下都不是 bare import</span>
<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;../node_modules/react/index.js&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;/User/sanyuan/vite-project/node_modules/react/index.js&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于解析 <code>bare import</code>、记录依赖的逻辑依然实现在 scan 插件当中:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>build<span class="token punctuation">.</span><span class="token function">onResolve</span><span class="token punctuation">(</span>
  <span class="token punctuation">{</span>
    <span class="token comment">// avoid matching windows volume</span>
    filter<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[\\w@][^:]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> path<span class="token operator">:</span> id<span class="token punctuation">,</span> importer <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果在 optimizeDeps.exclude 列表或者已经记录过了，则将其 externalize (排除)，直接 return</span>

    <span class="token comment">// 接下来解析路径，内部调用各个插件的 resolveId 方法进行解析</span>
    <span class="token keyword">const</span> resolved <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">resolve</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> importer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>resolved<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 判断是否应该 externalize，下个部分详细拆解</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldExternalizeDep</span><span class="token punctuation">(</span>resolved<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">externalUnlessEntry</span><span class="token punctuation">(</span><span class="token punctuation">{</span> path<span class="token operator">:</span> id <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>resolved<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&quot;node_modules&quot;</span><span class="token punctuation">)</span> <span class="token operator">||</span> include<span class="token operator">?.</span><span class="token function">includes</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果 resolved 为 js 或 ts 文件</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">OPTIMIZABLE_ENTRY_RE</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>resolved<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 注意了! 现在将其正式地记录在依赖表中</span>
          depImports<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> resolved<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 进行 externalize，因为这里只用扫描出依赖即可，不需要进行打包，具体实现后面的部分会讲到</span>
        <span class="token keyword">return</span> <span class="token function">externalUnlessEntry</span><span class="token punctuation">(</span><span class="token punctuation">{</span> path<span class="token operator">:</span> id <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// resolved 为 「类 html」 文件，则标记上 &#39;html&#39; 的 namespace</span>
        <span class="token keyword">const</span> namespace <span class="token operator">=</span> htmlTypesRE<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>resolved<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&quot;html&quot;</span> <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
        <span class="token comment">// linked package, keep crawling</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
          path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>resolved<span class="token punctuation">)</span><span class="token punctuation">,</span>
          namespace<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 没有解析到路径，记录到 missing 表中，后续会检测这张表，显示相关路径未找到的报错</span>
      missing<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">normalizePath</span><span class="token punctuation">(</span>importer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>顺便说一句，其中调用到了<code>resolve</code>，也就是路径解析的逻辑，这里面实际上会调用各个插件的 resolveId 方法来进行路径的解析，代码如下所示:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> importer<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 通过 seen 对象进行路径缓存</span>
  <span class="token keyword">const</span> key <span class="token operator">=</span> id <span class="token operator">+</span> <span class="token punctuation">(</span>importer <span class="token operator">&amp;&amp;</span> path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span>importer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>seen<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> seen<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 调用插件容器的 resolveId</span>
  <span class="token comment">// 关于插件容器下一节会详细介绍，这里你直接理解为调用各个插件的 resolveId 方法解析路径即可</span>
  <span class="token keyword">const</span> resolved <span class="token operator">=</span> <span class="token keyword">await</span> container<span class="token punctuation">.</span><span class="token function">resolveId</span><span class="token punctuation">(</span>
    id<span class="token punctuation">,</span>
    importer <span class="token operator">&amp;&amp;</span> <span class="token function">normalizePath</span><span class="token punctuation">(</span>importer<span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> resolved<span class="token operator">?.</span>id<span class="token punctuation">;</span>
  seen<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-external-的规则如何制定" tabindex="-1"><a class="header-anchor" href="#_3-external-的规则如何制定" aria-hidden="true">#</a> 3. external 的规则如何制定？</h3><p>上面我们分析了在 Esbuild 插件中如何针对 <code>bare import</code> 记录依赖，那么在记录的过程中还有一件非常重要的事情，就是决定哪些路径应该被排除，不应该被记录或者不应该被 Esbuild 来解析。这就是 <code>external 规则</code>的概念。</p><p>在这里，我把需要 external 的路径分为两类: <strong>资源型</strong>和<strong>模块型</strong>。</p><p>首先，对于资源型的路径，一般是直接排除，在插件中的处理方式如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// data url，直接标记 external: true，不让 esbuild 继续处理</span>
build<span class="token punctuation">.</span><span class="token function">onResolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span> filter<span class="token operator">:</span> dataUrlRE <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> path <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  path<span class="token punctuation">,</span>
  external<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 加了 ?worker 或者 ?raw 这种 query 的资源路径，直接 external</span>
build<span class="token punctuation">.</span><span class="token function">onResolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span> filter<span class="token operator">:</span> <span class="token constant">SPECIAL_QUERY_RE</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> path <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  path<span class="token punctuation">,</span>
  external<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// css &amp; json</span>
build<span class="token punctuation">.</span><span class="token function">onResolve</span><span class="token punctuation">(</span>
  <span class="token punctuation">{</span>
    filter<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.(css|less|sass|scss|styl|stylus|pcss|postcss|json)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 非 entry 则直接标记 external</span>
  externalUnlessEntry
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Vite 内置的一些资源类型，比如 .png、.wasm 等等</span>
build<span class="token punctuation">.</span><span class="token function">onResolve</span><span class="token punctuation">(</span>
  <span class="token punctuation">{</span>
    filter<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">\\.(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">KNOWN_ASSET_TYPES</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;|&quot;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)$</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 非 entry 则直接标记 external</span>
  externalUnlessEntry
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中<code>externalUnlessEntry</code>的实现也很简单:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token function-variable function">externalUnlessEntry</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> path <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  path<span class="token punctuation">,</span>
  <span class="token comment">// 非 entry 则标记 external</span>
  external<span class="token operator">:</span> <span class="token operator">!</span>entries<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其次，对于模块型的路径，也就是当我们通过 resolve 函数解析出了一个 JS 模块的路径，如何判断是否应该被 externalize 呢？这部分实现主要在<code>shouldExternalizeDep</code> 函数中，之前在分析<code>bare import</code>埋了个伏笔，现在让我们看看具体的实现规则:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">shouldExternalizeDep</span><span class="token punctuation">(</span>
  resolvedId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  rawId<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
  <span class="token comment">// 解析之后不是一个绝对路径，不在 esbuild 中进行加载</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>path<span class="token punctuation">.</span><span class="token function">isAbsolute</span><span class="token punctuation">(</span>resolvedId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 1. import 路径本身就是一个绝对路径</span>
  <span class="token comment">// 2. 虚拟模块(Rollup 插件中约定虚拟模块以\`\\0\`开头)</span>
  <span class="token comment">// 都不在 esbuild 中进行加载</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>resolvedId <span class="token operator">===</span> rawId <span class="token operator">||</span> resolvedId<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&quot;\\0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 不是 JS 或者 类 HTML 文件，不在 esbuild 中进行加载</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token constant">JS_TYPES_RE</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>resolvedId<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>htmlTypesRE<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>resolvedId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="依赖打包详细分析" tabindex="-1"><a class="header-anchor" href="#依赖打包详细分析" aria-hidden="true">#</a> 依赖打包详细分析</h2><h3 id="_1-如何达到扁平化的产物文件结构" tabindex="-1"><a class="header-anchor" href="#_1-如何达到扁平化的产物文件结构" aria-hidden="true">#</a> 1. 如何达到扁平化的产物文件结构</h3><p>一般情况下，esbuild 会输出嵌套的产物目录结构，比如对 vue 来说，其产物在<code>dist/vue.runtime.esm-bundler.js</code>中，那么经过 esbuild 正常打包之后，预构建的产物目录如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>node_modules<span class="token operator">/</span><span class="token punctuation">.</span>vite
├── _metadata<span class="token punctuation">.</span>json
├── vue
│   └── dist
│       └── vue<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>esm<span class="token operator">-</span>bundler<span class="token punctuation">.</span>js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于各个第三方包的产物目录结构不一致，这种深层次的嵌套目录对于 Vite 路径解析来说，其实是增加了不少的麻烦的，带来了一些不可控的因素。为了解决嵌套目录带来的问题，Vite 做了两件事情来达到扁平化的预构建产物输出:</p><ol><li>嵌套路径扁平化，<code>/</code>被换成下划线，如 <code>react/jsx-dev-runtime</code>，被重写为<code>react_jsx-dev-runtime</code>；</li></ol>`,60),g=a(`<ol start="2"><li>用虚拟模块来代替真实模块，作为预打包的入口，具体的实现后面会详细介绍。</li></ol><p>回到<code>optimizeDeps</code>函数中，其中在进行完依赖扫描的步骤后，就会执行路径的扁平化操作:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> flatIdDeps<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> idToExports<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> ExportsData<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> flatIdToExports<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> ExportsData<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// deps 即为扫描后的依赖表</span>
<span class="token comment">// 形如: {</span>
<span class="token comment">//    react :  /Users/sanyuan/vite-project/react/index.js  }</span>
<span class="token comment">//    react/jsx-dev-runtime :  /Users/sanyuan/vite-project/react/jsx-dev-runtime.js</span>
<span class="token comment">// }</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> id <span class="token keyword">in</span> deps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 扁平化路径，\`react/jsx-dev-runtime\`，被重写为\`react_jsx-dev-runtime\`；</span>
  <span class="token keyword">const</span> flatId <span class="token operator">=</span> <span class="token function">flattenId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 填入 flatIdDeps 表，记录 flatId -&gt; 真实路径的映射关系</span>
  <span class="token keyword">const</span> filePath <span class="token operator">=</span> <span class="token punctuation">(</span>flatIdDeps<span class="token punctuation">[</span>flatId<span class="token punctuation">]</span> <span class="token operator">=</span> deps<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> entryContent <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> <span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 后续代码省略</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于虚拟模块的处理，大家可以把目光放到 <code>esbuildDepPlugin</code> 函数上面，它的逻辑大致如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">esbuildDepPlugin</span><span class="token punctuation">(</span><span class="token comment">/* 一些传参 */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 定义路径解析的方法</span>

  <span class="token comment">// 返回 Esbuild 插件</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">&#39;vite:dep-pre-bundle&#39;</span><span class="token punctuation">,</span>
    <span class="token function">set</span><span class="token punctuation">(</span>build<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// bare import 的路径</span>
      build<span class="token punctuation">.</span><span class="token function">onResolve</span><span class="token punctuation">(</span>
        <span class="token punctuation">{</span> filter<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[\\w@][^:]</span><span class="token regex-delimiter">/</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> path<span class="token operator">:</span> id<span class="token punctuation">,</span> importer<span class="token punctuation">,</span> kind <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token comment">// 判断是否为入口模块，如果是，则标记上\`dep\`的 namespace，成为一个虚拟模块</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    build<span class="token punctuation">.</span><span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">{</span> filter<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> namespace<span class="token operator">:</span> <span class="token string">&#39;dep&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> path<span class="token operator">:</span> id <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 加载虚拟模块</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如此一来，Esbuild 会将虚拟模块作为入口来进行打包，最后的产物目录会变成下面的扁平结构:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>node_modules<span class="token operator">/</span><span class="token punctuation">.</span>vite
├── _metadata<span class="token punctuation">.</span>json
├── vue<span class="token punctuation">.</span>js
├── react<span class="token punctuation">.</span>js
├── react_jsx<span class="token operator">-</span>dev<span class="token operator">-</span>runtime<span class="token punctuation">.</span>js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注：<strong>虚拟模块加载部分的代码</strong>在 Vite 3.0 中已被移除，原因是 Esbuild 输出扁平化产物路径已不再需要使用虚拟模块，PR 地址: https://github.com/vitejs/vite/pull/10427 如下部分的小册内容你可以进行选读。</p></blockquote><h3 id="_2-代理模块加载" tabindex="-1"><a class="header-anchor" href="#_2-代理模块加载" aria-hidden="true">#</a> 2. 代理模块加载</h3><p>虚拟模块代替了真实模块作为打包入口，因此也可以理解为<code>代理模块</code>，后面也统一称之为<code>代理模块</code>。我们首先来分析一下代理模块究竟是如何被加载出来的，换句话说，它到底了包含了哪些内容。</p><p>拿<code>import React from &quot;react&quot;</code>来举例，Vite 会把<code>react</code>标记为 <code>namespace</code> 为 <code>dep</code> 的虚拟模块，然后控制 Esbuild 的加载流程，对于真实模块的内容进行重新导出。</p><p>那么第一步就是确定真实模块的路径:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 真实模块所在的路径，拿 react 来说，即\`node_modules/react/index.js\`</span>
<span class="token keyword">const</span> entryFile <span class="token operator">=</span> qualified<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 确定相对路径</span>
<span class="token keyword">let</span> relativePath <span class="token operator">=</span> <span class="token function">normalizePath</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">relative</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> entryFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>
  <span class="token operator">!</span>relativePath<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;./&quot;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
  <span class="token operator">!</span>relativePath<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;../&quot;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
  relativePath <span class="token operator">!==</span> <span class="token string">&quot;.&quot;</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  relativePath <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">./</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>relativePath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>确定了路径之后，接下来就是对模块的内容进行重新导出。这里会分为几种情况:</p><ul><li><p>CommonJS 模块</p></li><li><p>ES 模块</p></li></ul><p>那么，如何来识别这两种模块规范呢？</p><p>我们可以暂时把目光转移到<code>optimizeDeps</code>中，实际上在进行真正的依赖打包之前，Vite 会读取各个依赖的入口文件，通过<code>es-module-lexer</code>这种工具来解析入口文件的内容。这里稍微解释一下<code>es-module-lexer</code>，这是一个在 Vite 被经常使用到的工具库，主要是为了解析 ES 导入导出的语法，大致用法如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> init<span class="token punctuation">,</span> parse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;es-module-lexer&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 等待\`es-module-lexer\`初始化完成</span>
<span class="token keyword">await</span> init<span class="token punctuation">;</span>
<span class="token keyword">const</span> sourceStr <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
  import moduleA from &#39;./a&#39;;
  export * from &#39;b&#39;;
  export const count = 1;
  export default count;
</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token comment">// 开始解析</span>
<span class="token keyword">const</span> exportsData <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span>sourceStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 结果为一个数组，分别保存 import 和 export 的信息</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>imports<span class="token punctuation">,</span> exports<span class="token punctuation">]</span> <span class="token operator">=</span> exportsData<span class="token punctuation">;</span>
<span class="token comment">// 返回 \`import module from &#39;./a&#39;\`</span>
sourceStr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>imports<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ss<span class="token punctuation">,</span> imports<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>se<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 返回 [&#39;count&#39;, &#39;default&#39;]</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>exports<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>值得注意的是, <code>export * from</code> 导出语法会被记录在 <code>import</code> 信息中。</p><p>接下来我们来看看 <code>optimizeDeps</code> 中如何利用 <code>es-module-lexer</code>来解析入口文件的，实现代码如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> init<span class="token punctuation">,</span> parse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;es-module-lexer&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 省略中间的代码</span>
<span class="token keyword">await</span> init<span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> id <span class="token keyword">in</span> deps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 省略前面的路径扁平化逻辑</span>
  <span class="token comment">// 读取入口内容</span>
  <span class="token keyword">const</span> entryContent <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> <span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    exportsData <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span>entryContent<span class="token punctuation">)</span> <span class="token keyword">as</span> ExportsData<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>
    <span class="token comment">// 省略对 jsx 的处理</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">{</span> ss<span class="token punctuation">,</span> se <span class="token punctuation">}</span> <span class="token keyword">of</span> exportsData<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> exp <span class="token operator">=</span> entryContent<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> se<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 标记存在 \`export * from\` 语法</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">export\\s+*\\s+from</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>exp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      exportsData<span class="token punctuation">.</span>hasReExports <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 将 import 和 export 信息记录下来</span>
  idToExports<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> exportsData<span class="token punctuation">;</span>
  flatIdToExports<span class="token punctuation">[</span>flatId<span class="token punctuation">]</span> <span class="token operator">=</span> exportsData<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>OK，由于最后会有两张表记录下 ES 模块导入和导出的相关信息，而<code>flatIdToExports</code>表会作为入参传给 Esbuild 插件:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 第二个入参</span>
<span class="token function">esbuildDepPlugin</span><span class="token punctuation">(</span>flatIdDeps<span class="token punctuation">,</span> flatIdToExports<span class="token punctuation">,</span> config<span class="token punctuation">,</span> ssr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如此，我们就能根据真实模块的路径获取到导入和导出的信息，通过这份信息来甄别 CommonJS 和 ES 两种模块规范。现在可以回到 Esbuild 打包插件中<strong>加载代理模块</strong>的代码:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> contents <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 下面的 exportsData 即外部传入的模块导入导出相关的信息表</span>
<span class="token comment">// 根据模块 id 拿到对应的导入导出信息</span>
<span class="token keyword">const</span> data <span class="token operator">=</span> exportsData<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>imports<span class="token punctuation">,</span> exports<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>imports<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>exports<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 处理 CommonJS 模块</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token comment">// 处理 ES  模块</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果是 CommonJS 模块，则导出语句写成这种形式:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> contents <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
contents <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">export default require( </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>relativePath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> );</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果是 ES 模块，则分<strong>默认导出</strong>和<strong>非默认导出</strong>这两种情况来处理:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 默认导出，即存在 export default 语法</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>exports<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&quot;default&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  contents <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">import d from  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>relativePath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> ;export default d;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 非默认导出</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>
  <span class="token comment">// 1. 存在 \`export * from\` 语法，前文分析过</span>
  data<span class="token punctuation">.</span>hasReExports <span class="token operator">||</span>
  <span class="token comment">// 2. 多个导出内容</span>
  exports<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">||</span>
  <span class="token comment">// 3. 只有一个导出内容，但这个导出不是 export default</span>
  exports<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">&quot;default&quot;</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 凡是命中上述三种情况中的一种，则添加下面的重导出语句</span>
  contents <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">\\nexport * from  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>relativePath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们组装好了 <code>代理模块</code> 的内容，接下来就可以放心地交给 Esbuild 加载了:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> ext <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>entryFile<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>ext <span class="token operator">===</span> <span class="token string">&quot;mjs&quot;</span><span class="token punctuation">)</span> ext <span class="token operator">=</span> <span class="token string">&quot;js&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token punctuation">{</span>
  loader<span class="token operator">:</span> ext <span class="token keyword">as</span> Loader<span class="token punctuation">,</span>
  <span class="token comment">// 虚拟模块内容</span>
  contents<span class="token punctuation">,</span>
  resolveDir<span class="token operator">:</span> root<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-代理模块为什么要和真实模块分离" tabindex="-1"><a class="header-anchor" href="#_3-代理模块为什么要和真实模块分离" aria-hidden="true">#</a> 3. 代理模块为什么要和真实模块分离？</h3><p>现在，相信你已经清楚了 Vite 是如何组装代理模块，以此作为 Esbuild 打包入口的，整体的思路就是先分析一遍模块真实入口文件的<code>import</code>和<code>export</code>语法，然后在代理模块中进行重导出。这里不妨回过头来思考一下: 为什么要对真实文件先做语法分析，然后重导出内容呢？</p><p>对此，大家不妨注意一下代码中的这段注释:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// It is necessary to do the re-exporting to separate the virtual proxy</span>
<span class="token comment">// module from the actual module since the actual module may get</span>
<span class="token comment">// referenced via relative imports - if we don&#39;t separate the proxy and</span>
<span class="token comment">// the actual module, esbuild will create duplicated copies of the same</span>
<span class="token comment">// module!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>翻译过来即:</p><blockquote><p>这种重导出的做法是必要的，它可以分离虚拟模块和真实模块，因为真实模块可以通过相对地址来引入。如果不这么做，Esbuild 将会对打包输出两个一样的模块。</p></blockquote><p>刚开始看的确不太容易理解，接下来我会通过对比的方式来告诉你这种设计到底解决了什么问题。</p><p>假设我不像源码中这么做，在虚拟模块中直接将<strong>真实入口的内容</strong>作为传给 Esbuild 可不可以呢？也就是像这样:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>build<span class="token punctuation">.</span><span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">{</span> filter<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> namespace<span class="token operator">:</span> <span class="token string">&#39;dep&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> path<span class="token operator">:</span> id <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 拿到查表拿到真实入口模块路径</span>
  <span class="token keyword">const</span> entryFile <span class="token operator">=</span> qualified<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    loader<span class="token operator">:</span> <span class="token string">&#39;js&#39;</span><span class="token punctuation">,</span>
    contents<span class="token operator">:</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>entryFile<span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么，这么实现会产生什么问题呢？我们可以先看看正常的预打包流程（以 React 为例）:</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/183bb3e05bd64883b244f0765d901629~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>Vite 会使用 <code>dep:react</code>这个代理模块来作为入口内容在 Esbuild 中进行加载，与此同时，其他库的预打包也有可能会引入 React，比如<code>@emotion/react</code>这个库里面会有<code>require(&#39;react&#39;)</code>的行为。那么在 Esbuild 打包之后，<code>react.js</code>与<code>@emotion_react.js</code>的代码中会引用同一份 Chunk 的内容，这份 Chunk 也就对应 React 入口文件(<code>node_modules/react/index.js</code>)。</p><p>这是理想情况下的打包结果，接下来我们来看看上述有问题的版本是如何工作的:</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f50f64a51fcc44fc907d966790a2bd4d~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>现在如果代理模块通过文件系统直接读取真实模块的内容，而不是进行重导出，因此由于此时代理模块跟真实模块并没有任何的引用关系，这就导致最后的<code>react.js</code>和<code>@emotion/react.js</code>两份产物并不会引用同一份 Chunk，Esbuild 最后打包出了内容完全相同的两个 Chunk！</p><p>这也就能解释为什么 Vite 中要在代理模块中对真实模块的内容进行重导出了，主要是为了避免 Esbuild 产生重复的打包内容。此时，你是不是也恍然大悟了呢？</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>本文的正文内容到此就接近尾声了，我们终于学习完了 Esbuild 预构建的底层实现，在这一节中，我首先带你熟悉一遍预构建的核心流程，包括<strong>缓存判断</strong>、<strong>依赖扫描</strong>、<strong>依赖打包</strong>和<strong>元信息写入磁盘</strong>这四个主要的步骤，让你从宏观上对 Vite 预构建流程有了初步的认识。</p><p>从微观的实现层面，我带你深入分析了<code>依赖扫描</code>的具体实现，从三个角度梳理了依赖扫描要解决的三个问题，分别是<code>如何获取入口</code>、<code>如何记录依赖</code> 以及 <code>如何制定 external 的规则</code>，并且与你重点分析<code>scanImports</code>函数的实现。接着我们继续深入到<code>依赖打包</code>的源码实现，带你了解到 Vite 是如何通过<code>嵌套路径扁平化</code> 和<code>代理模块</code>最终达到了扁平化的预构建产物结构，然后重点带你剖析了<code>代理模块</code>背后的设计原因，如果不这么做会产生什么问题，让你不仅知其然，同时也知其所以然。</p><p>相信经历过这一节的内容，你已经对 Vite 的预构建有了更加深刻的理解，也恭喜你，拿下了这一块困难而又深度的内容，我们下节再见。</p>`,51);function y(f,h){const t=e("ExternalLinkIcon");return o(),c("div",null,[r,k,d,s("p",null,[n("关于预构建所有的实现代码都在"),v,n("函数当中，也就是在仓库源码的 "),s("a",m,[n("packages/vite/src/node/optimizer/index.ts"),i(t)]),n(" 文件中，你可以对照着来学习。")]),b,l(""),g])}const w=p(u,[["render",y],["__file","di21zhang—yilaiyugoujian：EsbuilddabaogongnenruhebeiVitewanchuhualai.html.vue"]]);export{w as default};
