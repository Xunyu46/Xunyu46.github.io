import{_ as e,r as t,o as p,c as o,b as n,d as s,e as c,a as i}from"./app-48690364.js";const l={},u=n("p",null,"本小节为上一小节的续篇，我们基于下面的导图继续实现 no-bundle 构建服务:",-1),r=n("p",null,[n("img",{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/97c40a3172e54cc493db001f1879e025~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"})],-1),d=n("p",null,"接下来我们需要完成如下的模块:",-1),k=n("ul",null,[n("li",null,"CSS 编译插件"),n("li",null,"静态资源加载插件"),n("li",null,"模块依赖图开发，并在 transform 中间件中接入"),n("li",null,"HMR 服务端代码开发"),n("li",null,"HMR 客户端代码开发")],-1),v=n("p",null,"话不多说，下面我们正式进入实战的环节。",-1),m={href:"https://github.com/sanyuan0704/juejin-book-vite/tree/main/mini-vite",target:"_blank",rel:"noopener noreferrer"},b=i(`<h2 id="css-编译插件" tabindex="-1"><a class="header-anchor" href="#css-编译插件" aria-hidden="true">#</a> CSS 编译插件</h2><p>首先，我们可以看看项目中 CSS 代码是如何被引入的:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// playground/src/main.tsx</span>
<span class="token keyword">import</span> <span class="token string">&quot;./index.css&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>为了让 CSS 能够在 no-bundle 服务中正常加载，我们需要将其包装成浏览器可以识别的模块格式，也就是 <code>JS 模块</code>，其中模块加载和转换的逻辑我们可以通过插件来实现。当然，首先我们需要在 transform 中间件中允许对 CSS 的请求进行处理，代码如下:</p><div class="language-diff line-numbers-mode" data-ext="diff"><pre class="language-diff"><code>// src/node/server/middlewares/transform.ts
// 需要增加的导入语句
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> import { isCSSRequest } from &#39;../../utils&#39;;
</span></span>
export function transformMiddleware(
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> serverContext: ServerContext
</span></span>): NextHandleFunction {
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> return async (req, res, next) =&gt; {
</span><span class="token prefix unchanged"> </span><span class="token line">   if (req.method !== &quot;GET&quot; || !req.url) {
</span><span class="token prefix unchanged"> </span><span class="token line">     return next();
</span><span class="token prefix unchanged"> </span><span class="token line">   }
</span><span class="token prefix unchanged"> </span><span class="token line">   const url = req.url;
</span><span class="token prefix unchanged"> </span><span class="token line">   debug(&quot;transformMiddleware: %s&quot;, url);
</span><span class="token prefix unchanged"> </span><span class="token line">   // transform JS request
</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">    if (isJSRequest(url)) {
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    if (isJSRequest(url) || isCSSRequest(url)) {
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     // 后续代码省略
</span><span class="token prefix unchanged"> </span><span class="token line">    }
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   next();
</span><span class="token prefix unchanged"> </span><span class="token line"> };
</span></span>}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们来补充对应的工具函数:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/node/utils.ts</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> isCSSRequest <span class="token operator">=</span> <span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=&gt;</span>
  <span class="token function">cleanUrl</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&quot;.css&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们来开发 CSS 的编译插件，你可以新建<code>src/node/plugins/css.ts</code>文件，内容如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> readFile <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;fs-extra&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Plugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../plugin&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">cssPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Plugin <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">&quot;m-vite:css&quot;</span><span class="token punctuation">,</span>
    <span class="token function">load</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 加载</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&quot;.css&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">readFile</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 转换逻辑</span>
    <span class="token keyword">async</span> <span class="token function">transform</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&quot;.css&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 包装成 JS 模块</span>
        <span class="token keyword">const</span> jsContent <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
const css = &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>code<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\n</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;;
const style = document.createElement(&quot;style&quot;);
style.setAttribute(&quot;type&quot;, &quot;text/css&quot;);
style.innerHTML = css;
document.head.appendChild(style);
export default css;
</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
          code<span class="token operator">:</span> jsContent<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个插件的逻辑比较简单，主要是将封装一层 JS 样板代码，将 CSS 包装成一个 ES 模块，当浏览器执行这个模块的时候，会通过一个 style 标签将 CSS 代码作用到页面中，从而使样式代码生效。</p><p>接着我们来注册这个 CSS 插件:</p><div class="language-diff line-numbers-mode" data-ext="diff"><pre class="language-diff"><code>// src/node/plugins/index.ts
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> import { cssPlugin } from &quot;./css&quot;;
</span></span>
export function resolvePlugins(): Plugin[] {
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> return [
</span><span class="token prefix unchanged"> </span><span class="token line">   // 省略前面的插件
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     cssPlugin(),
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> ];
</span></span>}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，你可以通过<code>pnpm dev</code>来启动 playground 项目，不过在启动之前，需要保证 TSX 文件已经引入了对应的 CSS 文件:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// playground/src/main.tsx</span>
<span class="token keyword">import</span> <span class="token string">&quot;./index.css&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// playground/src/App.tsx</span>
<span class="token keyword">import</span> <span class="token string">&quot;./App.css&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在启动项目后，打开浏览器进行访问，可以看到样式已经正常生效:</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/46823f9f56c6486bbf2ddc357aa5936b~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h2 id="静态资源加载" tabindex="-1"><a class="header-anchor" href="#静态资源加载" aria-hidden="true">#</a> 静态资源加载</h2><p>在完成 CSS 加载之后，我们现在继续完成静态资源的加载。以 playground 项目为例，我们来支持 svg 文件的加载。首先，我们看看 svg 文件是如何被引入并使用的:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// playground/src/App.tsx</span>
<span class="token keyword">import</span> logo <span class="token keyword">from</span> <span class="token string">&quot;./logo.svg&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>img className<span class="token operator">=</span><span class="token string">&quot;App-logo&quot;</span> src<span class="token operator">=</span><span class="token punctuation">{</span>logo<span class="token punctuation">}</span> alt<span class="token operator">=</span><span class="token string">&quot;&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>站在 no-bundle 服务的角度，从如上的代码我们可以分析出静态资源的两种请求:</p><ul><li>import 请求。如 <code>import logo from &quot;./logo.svg&quot;</code>。</li><li>资源内容请求。如 img 标签将资源 url 填入 src，那么浏览器会请求具体的资源内容。</li></ul><p>因此，接下来为了实现静态资源的加载，我们需要做两手准备: 对静态资源的 import 请求返回资源的 url；对于具体内容的请求，读取静态资源的文件内容，并响应给浏览器。</p><p>首先处理 import 请求，我们可以在 TSX 的 import 分析插件中，给静态资源相关的 import 语句做一个标记:</p><div class="language-diff line-numbers-mode" data-ext="diff"><pre class="language-diff"><code>// src/node/plugins/importAnalysis.ts

async transform(code, id) {
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> // 省略前面的代码
</span><span class="token prefix unchanged"> </span><span class="token line"> for (const importInfo of imports) {
</span><span class="token prefix unchanged"> </span><span class="token line">   const { s: modStart, e: modEnd, n: modSource } = importInfo;
</span><span class="token prefix unchanged"> </span><span class="token line">   if (!modSource) continue;
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    // 静态资源
</span><span class="token prefix inserted">+</span><span class="token line">    if (modSource.endsWith(&quot;.svg&quot;)) {
</span><span class="token prefix inserted">+</span><span class="token line">      // 加上 ?import 后缀
</span><span class="token prefix inserted">+</span><span class="token line">      const resolvedUrl = path.join(path.dirname(id), modSource);
</span><span class="token prefix inserted">+</span><span class="token line">      ms.overwrite(modStart, modEnd, \`\${resolvedUrl}?import\`);
</span><span class="token prefix inserted">+</span><span class="token line">      continue;
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   }
</span><span class="token prefix unchanged"> </span><span class="token line"> }
</span></span>}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译后的 App.tsx 内容如下:</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c3dd1a0e85fe42c08f8dc5f05bb83867~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>接着浏览器会发出带有<code>?import</code>后缀的请求，我们在 transform 中间件进行处理:</p><div class="language-diff line-numbers-mode" data-ext="diff"><pre class="language-diff"><code>// src/node/server/middlewares/transform.ts
// 需要增加的导入语句
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> import { isImportRequest } from &#39;../../utils&#39;;
</span></span>
export function transformMiddleware(
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> serverContext: ServerContext
</span></span>): NextHandleFunction {
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> return async (req, res, next) =&gt; {
</span><span class="token prefix unchanged"> </span><span class="token line">   if (req.method !== &quot;GET&quot; || !req.url) {
</span><span class="token prefix unchanged"> </span><span class="token line">     return next();
</span><span class="token prefix unchanged"> </span><span class="token line">   }
</span><span class="token prefix unchanged"> </span><span class="token line">   const url = req.url;
</span><span class="token prefix unchanged"> </span><span class="token line">   debug(&quot;transformMiddleware: %s&quot;, url);
</span><span class="token prefix unchanged"> </span><span class="token line">   // transform JS request
</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">    if (isJSRequest(url) || isCSSRequest(url)) {
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    if (isJSRequest(url) || isCSSRequest(url) || isImportRequest(url)) {
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     // 后续代码省略
</span><span class="token prefix unchanged"> </span><span class="token line">    }
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   next();
</span><span class="token prefix unchanged"> </span><span class="token line"> };
</span></span>}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后补充对应的工具函数:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/node/utils.ts</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isImportRequest</span><span class="token punctuation">(</span>url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> url<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&quot;?import&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，我们就可以开发静态资源插件了。新建<code>src/node/plugins/assets.ts</code>，内容如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> pathExists<span class="token punctuation">,</span> readFile <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;fs-extra&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Plugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../plugin&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ServerContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../server&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> cleanUrl<span class="token punctuation">,</span> getShortName<span class="token punctuation">,</span> normalizePath<span class="token punctuation">,</span> removeImportQuery <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../utils&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">assetPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Plugin <span class="token punctuation">{</span>
  <span class="token keyword">let</span> serverContext<span class="token operator">:</span> ServerContext<span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">&quot;m-vite:asset&quot;</span><span class="token punctuation">,</span>
    <span class="token function">configureServer</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      serverContext <span class="token operator">=</span> s<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">async</span> <span class="token function">load</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> cleanedId <span class="token operator">=</span> <span class="token function">removeImportQuery</span><span class="token punctuation">(</span><span class="token function">cleanUrl</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> resolvedId <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">getShortName</span><span class="token punctuation">(</span><span class="token function">normalizePath</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span> serverContext<span class="token punctuation">.</span>root<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

      <span class="token comment">// 这里仅处理 svg</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>cleanedId<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&quot;.svg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
          code<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">export default &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>resolvedId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着来注册这个插件:</p><div class="language-diff line-numbers-mode" data-ext="diff"><pre class="language-diff"><code>// src/node/plugins/index.ts
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> import { assetPlugin } from &quot;./assets&quot;;
</span></span>
export function resolvePlugins(): Plugin[] {
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> return [
</span><span class="token prefix unchanged"> </span><span class="token line">   // 省略前面的插件
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     assetPlugin(),
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> ];
</span></span>}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>OK，目前我们处理完了静态资源的 import 请求，接着我们还需要处理非 import 请求，返回资源的具体内容。我们可以通过一个中间件来进行处理:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/node/server/middlewares/static.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> NextHandleFunction <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;connect&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> isImportRequest <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../../utils&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 一个用于加载静态资源的中间件</span>
<span class="token keyword">import</span> sirv <span class="token keyword">from</span> <span class="token string">&quot;sirv&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">staticMiddleware</span><span class="token punctuation">(</span>root<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> NextHandleFunction <span class="token punctuation">{</span>
  <span class="token keyword">const</span> serveFromRoot <span class="token operator">=</span> <span class="token function">sirv</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token punctuation">{</span> dev<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>req<span class="token punctuation">.</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 不处理 import 请求</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isImportRequest</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">serveFromRoot</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在服务中注册这个中间件:</p><div class="language-diff line-numbers-mode" data-ext="diff"><pre class="language-diff"><code>// src/node/server/index.ts
// 需要添加的引入语句
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> import { staticMiddleware } from &quot;./middlewares/static&quot;;
</span></span>
export async function startDevServer() {
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> // 前面的代码省略
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  app.use(staticMiddleware(serverContext.root));
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> app.listen(3000, async () =&gt; {
</span><span class="token prefix unchanged"> </span><span class="token line">   // 省略实现
</span><span class="token prefix unchanged"> </span><span class="token line"> });
</span></span>}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，你可以通过<code>pnpm dev</code>启动 playground 项目，在浏览器中访问，可以发现 svg 图片已经能够成功显示了:</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c0b357d3958c459cbcc1c3d288cf97b1~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>其实不光是 svg 文件，几乎所有格式的静态资源都可以按照如上的思路进行处理:</p><ol><li><p>通过加入<code>?import</code>后缀标识 import 请求，返回将静态资源封装成一个 JS 模块，即<code>export default xxx</code>的形式，导出资源的真实地址。</p></li><li><p>对非 import 请求，响应静态资源的具体内容，通过 <code>Content-Type</code>响应头告诉浏览器资源的类型(这部分工作 sirv 中间件已经帮我们做了)。</p></li></ol><h2 id="模块依赖图开发" tabindex="-1"><a class="header-anchor" href="#模块依赖图开发" aria-hidden="true">#</a> 模块依赖图开发</h2><p>模块依赖图在 no-bundle 构建服务中是一个不可或缺的数据结构，一方面可以存储各个模块的信息，用于记录编译缓存，另一方面也可以记录各个模块间的依赖关系，用于实现 HMR。</p><p>接下来我们来实现模块依赖图，即<code>ModuleGraph</code>类，新建<code>src/node/ModuleGraph.ts</code>，内容如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> PartialResolvedId<span class="token punctuation">,</span> TransformResult <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;rollup&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> cleanUrl <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./utils&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ModuleNode</span> <span class="token punctuation">{</span>
  <span class="token comment">// 资源访问 url</span>
  url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token comment">// 资源绝对路径</span>
  id<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  importers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set<span class="token operator">&lt;</span>ModuleNode<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  importedModules <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set<span class="token operator">&lt;</span>ModuleNode<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  transformResult<span class="token operator">:</span> TransformResult <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  lastHMRTimestamp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> url<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ModuleGraph</span> <span class="token punctuation">{</span>
  <span class="token comment">// 资源 url 到 ModuleNode 的映射表</span>
  urlToModuleMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> ModuleNode<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 资源绝对路径到 ModuleNode 的映射表</span>
  idToModuleMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> ModuleNode<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span>
    <span class="token keyword">private</span> <span class="token function-variable function">resolveId</span><span class="token operator">:</span> <span class="token punctuation">(</span>url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>PartialResolvedId <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token function">getModuleById</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> ModuleNode <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>idToModuleMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">async</span> <span class="token function">getModuleByUrl</span><span class="token punctuation">(</span>rawUrl<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>ModuleNode <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> url <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_resolve</span><span class="token punctuation">(</span>rawUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>urlToModuleMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">async</span> <span class="token function">ensureEntryFromUrl</span><span class="token punctuation">(</span>rawUrl<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>ModuleNode<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> url<span class="token punctuation">,</span> resolvedId <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_resolve</span><span class="token punctuation">(</span>rawUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 首先检查缓存</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>urlToModuleMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>urlToModuleMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token keyword">as</span> ModuleNode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 若无缓存，更新 urlToModuleMap 和 idToModuleMap</span>
    <span class="token keyword">const</span> mod <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModuleNode</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
    mod<span class="token punctuation">.</span>id <span class="token operator">=</span> resolvedId<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>urlToModuleMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> mod<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>idToModuleMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>resolvedId<span class="token punctuation">,</span> mod<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> mod<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">async</span> <span class="token function">updateModuleInfo</span><span class="token punctuation">(</span>
    mod<span class="token operator">:</span> ModuleNode<span class="token punctuation">,</span>
    importedModules<span class="token operator">:</span> Set<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> ModuleNode<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> prevImports <span class="token operator">=</span> mod<span class="token punctuation">.</span>importedModules<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> curImports <span class="token keyword">of</span> importedModules<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> dep <span class="token operator">=</span>
        <span class="token keyword">typeof</span> curImports <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span>
          <span class="token operator">?</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ensureEntryFromUrl</span><span class="token punctuation">(</span><span class="token function">cleanUrl</span><span class="token punctuation">(</span>curImports<span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token operator">:</span> curImports<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>dep<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mod<span class="token punctuation">.</span>importedModules<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span><span class="token punctuation">;</span>
        dep<span class="token punctuation">.</span>importers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mod<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 清除已经不再被引用的依赖</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> prevImport <span class="token keyword">of</span> prevImports<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>importedModules<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>prevImport<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        prevImport<span class="token punctuation">.</span>importers<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>mod<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// HMR 触发时会执行这个方法</span>
  <span class="token function">invalidateModule</span><span class="token punctuation">(</span>file<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> mod <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>idToModuleMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mod<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 更新时间戳</span>
      mod<span class="token punctuation">.</span>lastHMRTimestamp <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      mod<span class="token punctuation">.</span>transformResult <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      mod<span class="token punctuation">.</span>importers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>importer<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">invalidateModule</span><span class="token punctuation">(</span>importer<span class="token punctuation">.</span>id<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">private</span> <span class="token keyword">async</span> <span class="token function">_resolve</span><span class="token punctuation">(</span>
    url<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token punctuation">{</span> url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> resolvedId<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> resolved <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolveId</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> resolvedId <span class="token operator">=</span> resolved<span class="token operator">?.</span>id <span class="token operator">||</span> url<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> url<span class="token punctuation">,</span> resolvedId <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相信经过第 23 小节的学习，你已经对模块依赖图的实现结构比较熟悉了，对于代码细节这里也不再赘述。接着我们看看如何将这个 ModuleGraph 接入到目前的架构中。</p><p>首先在服务启动前，我们需要初始化 ModuleGraph 实例:</p><div class="language-diff line-numbers-mode" data-ext="diff"><pre class="language-diff"><code>// src/node/server/index.ts
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> import { ModuleGraph } from &quot;../ModuleGraph&quot;;
</span></span>
export interface ServerContext {
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> root: string;
</span><span class="token prefix unchanged"> </span><span class="token line"> pluginContainer: PluginContainer;
</span><span class="token prefix unchanged"> </span><span class="token line"> app: connect.Server;
</span><span class="token prefix unchanged"> </span><span class="token line"> plugins: Plugin[];
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  moduleGraph: ModuleGraph;
</span></span>}

export async function startDevServer() {
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  const moduleGraph = new ModuleGraph((url) =&gt; pluginContainer.resolveId(url));
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const pluginContainer = createPluginContainer(plugins);
</span><span class="token prefix unchanged"> </span><span class="token line"> const serverContext: ServerContext = {
</span><span class="token prefix unchanged"> </span><span class="token line">   root: process.cwd(),
</span><span class="token prefix unchanged"> </span><span class="token line">   app,
</span><span class="token prefix unchanged"> </span><span class="token line">   pluginContainer,
</span><span class="token prefix unchanged"> </span><span class="token line">   plugins,
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    moduleGraph
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> };
</span><span class="token prefix unchanged"> </span><span class="token line"> 
</span></span>}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在加载完模块后，也就是调用插件容器的 load 方法后，我们需要通过 <code>ensureEntryFromUrl</code> 方法注册模块:</p><div class="language-diff line-numbers-mode" data-ext="diff"><pre class="language-diff"><code>// src/node/server/middlewares/transform.ts
let code = await pluginContainer.load(resolvedResult.id);
if (typeof code === &quot;object&quot; &amp;&amp; code !== null) {
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> code = code.code;
</span></span>}
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> const { moduleGraph }  = serverContext;
</span><span class="token prefix inserted">+</span><span class="token line"> mod = await moduleGraph.ensureEntryFromUrl(url);
</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们对 JS 模块分析完 import 语句之后，需要更新模块之间的依赖关系:</p><div class="language-diff line-numbers-mode" data-ext="diff"><pre class="language-diff"><code>// src/node/plugins/importAnalysis.ts
export function importAnalysis() {
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> return {
</span><span class="token prefix unchanged"> </span><span class="token line">   transform(code: string, id: string) {
</span><span class="token prefix unchanged"> </span><span class="token line">     // 省略前面的代码
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">      const { moduleGraph } = serverContext;
</span><span class="token prefix inserted">+</span><span class="token line">      const curMod = moduleGraph.getModuleById(id)!;
</span><span class="token prefix inserted">+</span><span class="token line">      const importedModules = new Set&lt;string&gt;();
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     for(const importInfo of imports) {
</span><span class="token prefix unchanged"> </span><span class="token line">       // 省略部分代码
</span><span class="token prefix unchanged"> </span><span class="token line">       if (BARE_IMPORT_RE.test(modSource)) {
</span><span class="token prefix unchanged"> </span><span class="token line">         // 省略部分代码
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">          importedModules.add(bundlePath);
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">       } else if (modSource.startsWith(&quot;.&quot;) || modSource.startsWith(&quot;/&quot;)) {
</span><span class="token prefix unchanged"> </span><span class="token line">         const resolved = await resolve(modSource, id);
</span><span class="token prefix unchanged"> </span><span class="token line">         if (resolved) {
</span><span class="token prefix unchanged"> </span><span class="token line">           ms.overwrite(modStart, modEnd, resolved);
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">            importedModules.add(resolved);
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">         }
</span><span class="token prefix unchanged"> </span><span class="token line">       }
</span><span class="token prefix unchanged"> </span><span class="token line">     }
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">      moduleGraph.updateModuleInfo(curMod, importedModules);
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     // 省略后续 return 代码
</span><span class="token prefix unchanged"> </span><span class="token line">   }
</span><span class="token prefix unchanged"> </span><span class="token line"> }
</span></span>}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，一个完整的模块依赖图就能随着 JS 请求的到来而不断建立起来了。另外，基于现在的模块依赖图，我们也可以记录模块编译后的产物，并进行缓存。让我们回到 transform 中间件中:</p><div class="language-diff line-numbers-mode" data-ext="diff"><pre class="language-diff"><code>export async function transformRequest(
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> url: string,
</span><span class="token prefix unchanged"> </span><span class="token line"> serverContext: ServerContext
</span></span>) {
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const { moduleGraph, pluginContainer } = serverContext;
</span><span class="token prefix unchanged"> </span><span class="token line"> url = cleanUrl(url);
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  let mod = await moduleGraph.getModuleByUrl(url);
</span><span class="token prefix inserted">+</span><span class="token line">  if (mod &amp;&amp; mod.transformResult) {
</span><span class="token prefix inserted">+</span><span class="token line">    return mod.transformResult;
</span><span class="token prefix inserted">+</span><span class="token line">  }
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const resolvedResult = await pluginContainer.resolveId(url);
</span><span class="token prefix unchanged"> </span><span class="token line"> let transformResult;
</span><span class="token prefix unchanged"> </span><span class="token line"> if (resolvedResult?.id) {
</span><span class="token prefix unchanged"> </span><span class="token line">   let code = await pluginContainer.load(resolvedResult.id);
</span><span class="token prefix unchanged"> </span><span class="token line">   if (typeof code === &quot;object&quot; &amp;&amp; code !== null) {
</span><span class="token prefix unchanged"> </span><span class="token line">     code = code.code;
</span><span class="token prefix unchanged"> </span><span class="token line">   }
</span><span class="token prefix unchanged"> </span><span class="token line">   mod = await moduleGraph.ensureEntryFromUrl(url);
</span><span class="token prefix unchanged"> </span><span class="token line">   if (code) {
</span><span class="token prefix unchanged"> </span><span class="token line">     transformResult = await pluginContainer.transform(
</span><span class="token prefix unchanged"> </span><span class="token line">       code as string,
</span><span class="token prefix unchanged"> </span><span class="token line">       resolvedResult?.id
</span><span class="token prefix unchanged"> </span><span class="token line">     );
</span><span class="token prefix unchanged"> </span><span class="token line">   }
</span><span class="token prefix unchanged"> </span><span class="token line"> }
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  if (mod) {
</span><span class="token prefix inserted">+</span><span class="token line">    mod.transformResult = transformResult;
</span><span class="token prefix inserted">+</span><span class="token line">  }
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> return transformResult;
</span></span>}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在搭建好模块依赖图之后，我们把目光集中到最重要的部分——HMR 上面。</p><h2 id="hmr-服务端" tabindex="-1"><a class="header-anchor" href="#hmr-服务端" aria-hidden="true">#</a> HMR 服务端</h2><p>HMR 在服务端需要完成如下的工作:</p><ul><li>创建文件监听器，以监听文件的变动</li><li>创建 WebSocket 服务端，负责和客户端进行通信</li><li>文件变动时，从 ModuleGraph 中定位到需要更新的模块，将更新信息发送给客户端</li></ul><p>首先，我们来创建文件监听器:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/node/server/index.ts</span>
<span class="token keyword">import</span> chokidar<span class="token punctuation">,</span> <span class="token punctuation">{</span> FSWatcher <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;chokidar&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">startDevServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> watcher <span class="token operator">=</span> chokidar<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    ignored<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;**/node_modules/**&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;**/.git/**&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    ignoreInitial<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着初始化 WebSocket 服务端，新建<code>src/node/ws.ts</code>，内容如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> connect <span class="token keyword">from</span> <span class="token string">&quot;connect&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> red <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;picocolors&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> WebSocketServer<span class="token punctuation">,</span> WebSocket <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;ws&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">HMR_PORT</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./constants&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createWebSocketServer</span><span class="token punctuation">(</span>server<span class="token operator">:</span> connect<span class="token punctuation">.</span>Server<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">send</span><span class="token operator">:</span> <span class="token punctuation">(</span>msg<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token function-variable function">close</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> wss<span class="token operator">:</span> WebSocketServer<span class="token punctuation">;</span>
  wss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocketServer</span><span class="token punctuation">(</span><span class="token punctuation">{</span> port<span class="token operator">:</span> <span class="token constant">HMR_PORT</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  wss<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;connection&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>socket<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&quot;connected&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  wss<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Error <span class="token operator">&amp;</span> <span class="token punctuation">{</span> code<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>code <span class="token operator">!==</span> <span class="token string">&quot;EADDRINUSE&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token function">red</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">WebSocket server error:\\n</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>e<span class="token punctuation">.</span>stack <span class="token operator">||</span> e<span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token function">send</span><span class="token punctuation">(</span>payload<span class="token operator">:</span> Object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> stringified <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>
      wss<span class="token punctuation">.</span>clients<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>client<span class="token punctuation">.</span>readyState <span class="token operator">===</span> WebSocket<span class="token punctuation">.</span><span class="token constant">OPEN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          client<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>stringified<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      wss<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时定义 <code>HMR_PORT</code> 常量:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/node/constants.ts</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">HMR_PORT</span> <span class="token operator">=</span> <span class="token number">24678</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们将 WebSocket 服务端实例加入 no-bundle 服务中:</p><div class="language-diff line-numbers-mode" data-ext="diff"><pre class="language-diff"><code>// src/node/server/index.ts
export interface ServerContext {
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> root: string;
</span><span class="token prefix unchanged"> </span><span class="token line"> pluginContainer: PluginContainer;
</span><span class="token prefix unchanged"> </span><span class="token line"> app: connect.Server;
</span><span class="token prefix unchanged"> </span><span class="token line"> plugins: Plugin[];
</span><span class="token prefix unchanged"> </span><span class="token line"> moduleGraph: ModuleGraph;
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  ws: { send: (data: any) =&gt; void; close: () =&gt; void };
</span><span class="token prefix inserted">+</span><span class="token line">  watcher: FSWatcher;
</span></span>}

export async function startDevServer() {
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  // WebSocket 对象
</span><span class="token prefix inserted">+</span><span class="token line">  const ws = createWebSocketServer(app);
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> // // 开发服务器上下文
</span><span class="token prefix unchanged"> </span><span class="token line"> const serverContext: ServerContext = {
</span><span class="token prefix unchanged"> </span><span class="token line">   root: process.cwd(),
</span><span class="token prefix unchanged"> </span><span class="token line">   app,
</span><span class="token prefix unchanged"> </span><span class="token line">   pluginContainer,
</span><span class="token prefix unchanged"> </span><span class="token line">   plugins,
</span><span class="token prefix unchanged"> </span><span class="token line">   moduleGraph,
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    ws,
</span><span class="token prefix inserted">+</span><span class="token line">    watcher
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> };
</span></span>}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面我们来实现当文件变动时，服务端具体的处理逻辑，新建 <code>src/node/hmr.ts</code>:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ServerContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./server/index&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> blue<span class="token punctuation">,</span> green <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;picocolors&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> getShortName <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./utils&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">bindingHMREvents</span><span class="token punctuation">(</span>serverContext<span class="token operator">:</span> ServerContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> watcher<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> root <span class="token punctuation">}</span> <span class="token operator">=</span> serverContext<span class="token punctuation">;</span>

  watcher<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;change&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">✨</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">blue</span><span class="token punctuation">(</span><span class="token string">&quot;[hmr]&quot;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">green</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> changed</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> moduleGraph <span class="token punctuation">}</span> <span class="token operator">=</span> serverContext<span class="token punctuation">;</span>
    <span class="token comment">// 清除模块依赖图中的缓存</span>
    <span class="token keyword">await</span> moduleGraph<span class="token punctuation">.</span><span class="token function">invalidateModule</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 向客户端发送更新信息</span>
    ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      type<span class="token operator">:</span> <span class="token string">&quot;update&quot;</span><span class="token punctuation">,</span>
      updates<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          type<span class="token operator">:</span> <span class="token string">&quot;js-update&quot;</span><span class="token punctuation">,</span>
          timestamp<span class="token operator">:</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          path<span class="token operator">:</span> <span class="token string">&quot;/&quot;</span> <span class="token operator">+</span> <span class="token function">getShortName</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">,</span>
          acceptedPath<span class="token operator">:</span> <span class="token string">&quot;/&quot;</span> <span class="token operator">+</span> <span class="token function">getShortName</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意补充一下缺失的工具函数:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/node/utils.ts</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getShortName</span><span class="token punctuation">(</span>file<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> root<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> file<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>root <span class="token operator">+</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span> <span class="token operator">?</span> path<span class="token punctuation">.</span>posix<span class="token punctuation">.</span><span class="token function">relative</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> file<span class="token punctuation">)</span> <span class="token operator">:</span> file<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们在服务中添加如下代码:</p><div class="language-diff line-numbers-mode" data-ext="diff"><pre class="language-diff"><code>// src/node/server/index.ts
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  import { bindingHMREvents } from &quot;../hmr&quot;;
</span><span class="token prefix inserted">+</span><span class="token line">  import { normalizePath } from &quot;../utils&quot;;
</span></span>
// 开发服务器上下文
const serverContext: ServerContext = {
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> root: normalizePath(process.cwd()),
</span><span class="token prefix unchanged"> </span><span class="token line"> app,
</span><span class="token prefix unchanged"> </span><span class="token line"> pluginContainer,
</span><span class="token prefix unchanged"> </span><span class="token line"> plugins,
</span><span class="token prefix unchanged"> </span><span class="token line"> moduleGraph,
</span><span class="token prefix unchanged"> </span><span class="token line"> ws,
</span><span class="token prefix unchanged"> </span><span class="token line"> watcher,
</span></span>};
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> bindingHMREvents(serverContext);
</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="hmr-客户端" tabindex="-1"><a class="header-anchor" href="#hmr-客户端" aria-hidden="true">#</a> HMR 客户端</h2><p>HMR 客户端指的是我们向浏览器中注入的一段 JS 脚本，这段脚本中会做如下的事情:</p><ul><li>创建 WebSocket 客户端，用于和服务端通信</li><li>在收到服务端的更新信息后，通过动态 import 拉取最新的模块内容，执行 accept 更新回调</li><li>暴露 HMR 的一些工具函数，比如 i<wbr>mport.meta.hot 对象的实现</li></ul><p>首先我们来开发客户端的脚本内容，你可以新建<code>src/client/client.ts</code>文件，然后在 tsup.config.ts 中增加如下的配置:</p><div class="language-diff line-numbers-mode" data-ext="diff"><pre class="language-diff"><code>import { defineConfig } from &quot;tsup&quot;;

export default defineConfig({
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> entry: {
</span><span class="token prefix unchanged"> </span><span class="token line">   index: &quot;src/node/cli.ts&quot;,
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    client: &quot;src/client/client.ts&quot;,
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> },
</span></span>});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注: 改动 tsup 配置之后，为了使最新配置生效，你需要在 <code>mini-vite</code> 项目中执行 <code>pnpm start</code> 重新进行构建。</p></blockquote><p>客户端脚本的具体实现如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/client/client.ts</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;[vite] connecting...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 1. 创建客户端 WebSocket 实例</span>
<span class="token comment">// 其中的 __HMR_PORT__ 之后会被 no-bundle 服务编译成具体的端口号</span>
<span class="token keyword">const</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">ws://localhost:__HMR_PORT__</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token string">&quot;vite-hmr&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 2. 接收服务端的更新信息</span>
socket<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> data <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token builtin">console</span><span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 3. 根据不同的更新类型进行更新</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>payload<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>payload<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string">&quot;connected&quot;</span><span class="token operator">:</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[vite] connected.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 心跳检测</span>
      <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;ping&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token keyword">case</span> <span class="token string">&quot;update&quot;</span><span class="token operator">:</span>
      <span class="token comment">// 进行具体的模块更新</span>
      payload<span class="token punctuation">.</span>updates<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>update<span class="token operator">:</span> Update<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>update<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&quot;js-update&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 具体的更新逻辑，后续来开发</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于客户端具体的 JS 模块更新逻辑和工具函数的实现，你暂且不用过于关心。我们先把这段比较简单的 HMR 客户端代码注入到浏览器中，首先在新建 <code>src/node/plugins/clientInject.ts</code>，内容如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">CLIENT_PUBLIC_PATH</span><span class="token punctuation">,</span> <span class="token constant">HMR_PORT</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../constants&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Plugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../plugin&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> fs <span class="token keyword">from</span> <span class="token string">&quot;fs-extra&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">&quot;path&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ServerContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../server/index&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">clientInjectPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Plugin <span class="token punctuation">{</span>
  <span class="token keyword">let</span> serverContext<span class="token operator">:</span> ServerContext<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">&quot;m-vite:client-inject&quot;</span><span class="token punctuation">,</span>
    <span class="token function">configureServer</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      serverContext <span class="token operator">=</span> s<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">resolveId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">===</span> <span class="token constant">CLIENT_PUBLIC_PATH</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span> id <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">async</span> <span class="token function">load</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 加载 HMR 客户端脚本</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">===</span> <span class="token constant">CLIENT_PUBLIC_PATH</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> realPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>
          serverContext<span class="token punctuation">.</span>root<span class="token punctuation">,</span>
          <span class="token string">&quot;node_modules&quot;</span><span class="token punctuation">,</span>
          <span class="token string">&quot;mini-vite&quot;</span><span class="token punctuation">,</span>
          <span class="token string">&quot;dist&quot;</span><span class="token punctuation">,</span>
          <span class="token string">&quot;client.mjs&quot;</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> code <span class="token operator">=</span> <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>realPath<span class="token punctuation">,</span> <span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
          <span class="token comment">// 替换占位符</span>
          code<span class="token operator">:</span> code<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;__HMR_PORT__&quot;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token constant">HMR_PORT</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">transformIndexHtml</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 插入客户端脚本</span>
      <span class="token comment">// 即在 head 标签后面加上 &lt;script type=&quot;module&quot; src=&quot;/@vite/client&quot;&gt;&lt;/script&gt;</span>
      <span class="token comment">// 注: 在 indexHtml 中间件里面会自动执行 transformIndexHtml 钩子</span>
      <span class="token keyword">return</span> raw<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>
        <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(&lt;head[^&gt;]*&gt;)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">$1&lt;script type=&quot;module&quot; src=&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">CLIENT_PUBLIC_PATH</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;&gt;&lt;/script&gt;</span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时添加相应的常量声明:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/node/constants.ts</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">CLIENT_PUBLIC_PATH</span> <span class="token operator">=</span> <span class="token string">&quot;/@vite/client&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们来注册这个插件:</p><div class="language-diff line-numbers-mode" data-ext="diff"><pre class="language-diff"><code>// src/node/plugins/index.ts
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> import { clientInjectPlugin } from &#39;./clientInject&#39;;
</span></span>
export function resolvePlugins(): Plugin[] {
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> return [
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     clientInjectPlugin()
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   // 省略其它插件
</span><span class="token prefix unchanged"> </span><span class="token line"> ]
</span></span>}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，<code>clientInject</code>插件最好放到最前面的位置，以免后续插件的 load 钩子干扰客户端脚本的加载。</p><p>接下来你可以在 playground 项目下执行<code>pnpm dev</code>，然后查看页面，可以发现控制台出现了如下的 log 信息:</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b945967aca1d4fd6a8582bd85620c077~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>查看网络面板，也能发现客户端脚本的请求被正常响应:</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1f2e2dbf2b984edfacec509e18321180~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>OK，接下来我们就来继续完善客户端脚本的具体实现。</p><p>值得一提的是，之所以我们可以在代码中编写类似<code>i<wbr>mport.meta.hot.xxx</code>之类的方法，是因为 Vite 帮我们在模块最顶层注入了<code>i<wbr>mport.meta.hot</code>对象，而这个对象由<code>createHotContext</code>来实现，具体的注入代码如下所示:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createHotContext <span class="token keyword">as</span> __vite__createHotContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;/@vite/client&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot <span class="token operator">=</span> <span class="token function">__vite__createHotContext</span><span class="token punctuation">(</span><span class="token string">&quot;/src/App.tsx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>下面我们在 import 分析插件中做一些改动，实现插入这段代码的功能:</p><div class="language-diff line-numbers-mode" data-ext="diff"><pre class="language-diff"><code>import { init, parse } from &quot;es-module-lexer&quot;;
import {
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> BARE_IMPORT_RE,
</span><span class="token prefix unchanged"> </span><span class="token line"> CLIENT_PUBLIC_PATH,
</span><span class="token prefix unchanged"> </span><span class="token line"> PRE_BUNDLE_DIR,
</span></span>} from &quot;../constants&quot;;
import {
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> cleanUrl,
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  getShortName,
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> isJSRequest,
</span></span>} from &quot;../utils&quot;;
import MagicString from &quot;magic-string&quot;;
import path from &quot;path&quot;;
import { Plugin } from &quot;../plugin&quot;;
import { ServerContext } from &quot;../server/index&quot;;

export function importAnalysisPlugin(): Plugin {
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> let serverContext: ServerContext;
</span><span class="token prefix unchanged"> </span><span class="token line"> return {
</span><span class="token prefix unchanged"> </span><span class="token line">   name: &quot;m-vite:import-analysis&quot;,
</span><span class="token prefix unchanged"> </span><span class="token line">   configureServer(s) {
</span><span class="token prefix unchanged"> </span><span class="token line">     serverContext = s;
</span><span class="token prefix unchanged"> </span><span class="token line">   },
</span><span class="token prefix unchanged"> </span><span class="token line">   async transform(code: string, id: string) {
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">      if (!isJSRequest(id) || isInternalRequest(id)) {
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">       return null;
</span><span class="token prefix unchanged"> </span><span class="token line">     }
</span><span class="token prefix unchanged"> </span><span class="token line">     await init;
</span><span class="token prefix unchanged"> </span><span class="token line">     const importedModules = new Set&lt;string&gt;();
</span><span class="token prefix unchanged"> </span><span class="token line">     const [imports] = parse(code);
</span><span class="token prefix unchanged"> </span><span class="token line">     const ms = new MagicString(code);
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">      const resolve = async (id: string, importer?: string) =&gt; {
</span><span class="token prefix inserted">+</span><span class="token line">        const resolved = await this.resolve(
</span><span class="token prefix inserted">+</span><span class="token line">          id,
</span><span class="token prefix inserted">+</span><span class="token line">          normalizePath(importer)
</span><span class="token prefix inserted">+</span><span class="token line">        );
</span><span class="token prefix inserted">+</span><span class="token line">        if (!resolved) {
</span><span class="token prefix inserted">+</span><span class="token line">          return;
</span><span class="token prefix inserted">+</span><span class="token line">        }
</span><span class="token prefix inserted">+</span><span class="token line">        const cleanedId = cleanUrl(resolved.id);
</span><span class="token prefix inserted">+</span><span class="token line">        const mod = moduleGraph.getModuleById(cleanedId);
</span><span class="token prefix inserted">+</span><span class="token line">        let resolvedId = \`/\${getShortName(resolved.id, serverContext.root)}\`;
</span><span class="token prefix inserted">+</span><span class="token line">        if (mod &amp;&amp; mod.lastHMRTimestamp &gt; 0) {
</span><span class="token prefix inserted">+</span><span class="token line">          resolvedId += &quot;?t=&quot; + mod.lastHMRTimestamp;
</span><span class="token prefix inserted">+</span><span class="token line">        }
</span><span class="token prefix inserted">+</span><span class="token line">        return resolvedId;
</span><span class="token prefix inserted">+</span><span class="token line">      };
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     const { moduleGraph } = serverContext;
</span><span class="token prefix unchanged"> </span><span class="token line">     const curMod = moduleGraph.getModuleById(id)!;
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     for (const importInfo of imports) {
</span><span class="token prefix unchanged"> </span><span class="token line">       const { s: modStart, e: modEnd, n: modSource } = importInfo;
</span><span class="token prefix unchanged"> </span><span class="token line">       if (!modSource || isInternalRequest(modSource)) continue;
</span><span class="token prefix unchanged"> </span><span class="token line">       // 静态资源
</span><span class="token prefix unchanged"> </span><span class="token line">       if (modSource.endsWith(&quot;.svg&quot;)) {
</span><span class="token prefix unchanged"> </span><span class="token line">         // 加上 ?import 后缀
</span><span class="token prefix unchanged"> </span><span class="token line">         const resolvedUrl = await resolve(modSource, id);
</span><span class="token prefix unchanged"> </span><span class="token line">         ms.overwrite(modStart, modEnd, \`\${resolvedUrl}?import\`);
</span><span class="token prefix unchanged"> </span><span class="token line">         continue;
</span><span class="token prefix unchanged"> </span><span class="token line">       }
</span><span class="token prefix unchanged"> </span><span class="token line">       // 第三方库: 路径重写到预构建产物的路径
</span><span class="token prefix unchanged"> </span><span class="token line">       if (BARE_IMPORT_RE.test(modSource)) {
</span><span class="token prefix unchanged"> </span><span class="token line">         const bundlePath = normalizePath(
</span><span class="token prefix unchanged"> </span><span class="token line">           path.join(&#39;/&#39;, PRE_BUNDLE_DIR, \`\${modSource}.js\`)
</span><span class="token prefix unchanged"> </span><span class="token line">         ms.overwrite(modStart, modEnd, bundlePath);
</span><span class="token prefix unchanged"> </span><span class="token line">         importedModules.add(bundlePath);
</span><span class="token prefix unchanged"> </span><span class="token line">       } else if (modSource.startsWith(&quot;.&quot;) || modSource.startsWith(&quot;/&quot;)) {
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">          const resolved = await resolve(modSource, id);
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">         if (resolved) {
</span><span class="token prefix unchanged"> </span><span class="token line">           ms.overwrite(modStart, modEnd, resolved);
</span><span class="token prefix unchanged"> </span><span class="token line">           importedModules.add(resolved);
</span><span class="token prefix unchanged"> </span><span class="token line">         }
</span><span class="token prefix unchanged"> </span><span class="token line">       }
</span><span class="token prefix unchanged"> </span><span class="token line">     }
</span><span class="token prefix unchanged"> </span><span class="token line">     // 只对业务源码注入
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">      if (!id.includes(&quot;node_modules&quot;)) {
</span><span class="token prefix inserted">+</span><span class="token line">        // 注入 HMR 相关的工具函数
</span><span class="token prefix inserted">+</span><span class="token line">        ms.prepend(
</span><span class="token prefix inserted">+</span><span class="token line">          \`import { createHotContext as __vite__createHotContext } from &quot;\${CLIENT_PUBLIC_PATH}&quot;;\` +
</span><span class="token prefix inserted">+</span><span class="token line">            \`i<wbr>mport.meta.hot = __vite__createHotContext(\${JSON.stringify(
</span><span class="token prefix inserted">+</span><span class="token line">              cleanUrl(curMod.url)
</span><span class="token prefix inserted">+</span><span class="token line">            )});\`
</span><span class="token prefix inserted">+</span><span class="token line">        );
</span><span class="token prefix inserted">+</span><span class="token line">      }
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     moduleGraph.updateModuleInfo(curMod, importedModules);
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     return {
</span><span class="token prefix unchanged"> </span><span class="token line">       code: ms.toString(),
</span><span class="token prefix unchanged"> </span><span class="token line">       map: ms.generateMap(),
</span><span class="token prefix unchanged"> </span><span class="token line">     };
</span><span class="token prefix unchanged"> </span><span class="token line">   },
</span><span class="token prefix unchanged"> </span><span class="token line"> };
</span></span>}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着启动 playground，打开页面后你可以发现 i<wbr>mport.meta.hot 的实现代码已经被成功插入:</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5f7d654bfa5846d29d3777afca63c5ec~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>现在，我们回到客户端脚本的实现中，来开发<code>createHotContext</code> 这个工具方法:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">HotModule</span> <span class="token punctuation">{</span>
  id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  callbacks<span class="token operator">:</span> HotCallback<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">HotCallback</span> <span class="token punctuation">{</span>
  deps<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span>modules<span class="token operator">:</span> object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// HMR 模块表</span>
<span class="token keyword">const</span> hotModulesMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> HotModule<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 不在生效的模块表</span>
<span class="token keyword">const</span> pruneMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span> <span class="token keyword">void</span> <span class="token operator">|</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">createHotContext</span> <span class="token operator">=</span> <span class="token punctuation">(</span>ownerPath<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> mod <span class="token operator">=</span> hotModulesMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ownerPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>mod<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    mod<span class="token punctuation">.</span>callbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">acceptDeps</span><span class="token punctuation">(</span>deps<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> callback<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> mod<span class="token operator">:</span> HotModule <span class="token operator">=</span> hotModulesMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ownerPath<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">{</span>
      id<span class="token operator">:</span> ownerPath<span class="token punctuation">,</span>
      callbacks<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// callbacks 属性存放 accept 的依赖、依赖改动后对应的回调逻辑</span>
    mod<span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      deps<span class="token punctuation">,</span>
      fn<span class="token operator">:</span> callback<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    hotModulesMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>ownerPath<span class="token punctuation">,</span> mod<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token function">accept</span><span class="token punctuation">(</span>deps<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> callback<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 这里仅考虑接受自身模块更新的情况</span>
      <span class="token comment">// i<wbr>mport.meta.hot.accept()</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> deps <span class="token operator">===</span> <span class="token string">&quot;function&quot;</span> <span class="token operator">||</span> <span class="token operator">!</span>deps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">acceptDeps</span><span class="token punctuation">(</span><span class="token punctuation">[</span>ownerPath<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>mod<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> deps <span class="token operator">&amp;&amp;</span> <span class="token function">deps</span><span class="token punctuation">(</span>mod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 模块不再生效的回调</span>
    <span class="token comment">// i<wbr>mport.meta.hot.prune(() =&gt; {})</span>
    <span class="token function">prune</span><span class="token punctuation">(</span><span class="token function-variable function">cb</span><span class="token operator">:</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      pruneMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>ownerPath<span class="token punctuation">,</span> cb<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 accept 方法中，我们会用<code>hotModulesMap</code>这张表记录该模块所 accept 的模块，以及 accept 的模块更新之后回调逻辑。</p><p>接着，我们来开发客户端热更新的具体逻辑，也就是服务端传递更新内容之后客户端如何来派发更新。实现代码如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fetchUpdate</span><span class="token punctuation">(</span><span class="token punctuation">{</span> path<span class="token punctuation">,</span> timestamp <span class="token punctuation">}</span><span class="token operator">:</span> Update<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> mod <span class="token operator">=</span> hotModulesMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mod<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> moduleMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> modulesToUpdate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  modulesToUpdate<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">await</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>
    <span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>modulesToUpdate<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>dep<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">[</span>path<span class="token punctuation">,</span> query<span class="token punctuation">]</span> <span class="token operator">=</span> dep<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">?</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// 通过动态 import 拉取最新模块</span>
        <span class="token keyword">const</span> newMod <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span>
          path <span class="token operator">+</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">?t=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>timestamp<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>query <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&amp;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>query<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        moduleMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>dep<span class="token punctuation">,</span> newMod<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 拉取最新模块后执行更新回调</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">{</span> deps<span class="token punctuation">,</span> fn <span class="token punctuation">}</span> <span class="token keyword">of</span> mod<span class="token punctuation">.</span>callbacks<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">fn</span><span class="token punctuation">(</span>deps<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>dep<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> moduleMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[vite] hot updated: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们可以来初步测试一下 HMR 的功能，你可以暂时将 main.tsx 的内容换成下面这样:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">&quot;react-dom&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">&quot;./index.css&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>hello <span class="token number">123123</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">;</span>

ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// @ts-ignore</span>
<span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动 playground，然后打开浏览器，可以看到如下的文本:</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8206aa36285c403085251b9d2d80baaa~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>现在回到编辑器中，修改文本内容，然后保存，你可以发现页面内容也跟着发生了变化，并且网络面板发出了拉取最新模块的请求，说明 HMR 已经成功生效:</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/556efb91f2024b76ab74ba8f62baf6b9~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>同时，当你再次刷新页面，看到的仍然是最新的页面内容。这一点非常重要，之所以能达到这样的效果，是因为我们在文件改动后会调用 ModuleGraph 的 invalidateModule 方法，这个方法会清除热更模块以及所有上层引用方模块的编译缓存:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 方法实现</span>
<span class="token function">invalidateModule</span><span class="token punctuation">(</span>file<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> mod <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>idToModuleMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>mod<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    mod<span class="token punctuation">.</span>lastHMRTimestamp <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mod<span class="token punctuation">.</span>transformResult <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    mod<span class="token punctuation">.</span>importers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>importer<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">invalidateModule</span><span class="token punctuation">(</span>importer<span class="token punctuation">.</span>id<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样每次经过 HMR 后，再次刷新页面，渲染出来的一定是最新的模块内容。</p><p>当然，我们也可以对 CSS 实现热更新功能，在客户端脚本中添加如下的工具函数:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> sheetsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">updateStyle</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> style <span class="token operator">=</span> sheetsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>style<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 添加 style 标签</span>
    style <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;style&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    style<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/css&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    style<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> content<span class="token punctuation">;</span>
    document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>style<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 更新 style 标签内容</span>
    style<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> content<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  sheetsMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> style<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">removeStyle</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> style <span class="token operator">=</span> sheetsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>style<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>style<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  sheetsMap<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>紧接着我们调整一下 CSS 编译插件的代码:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> readFile <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;fs-extra&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">CLIENT_PUBLIC_PATH</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../constants&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Plugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../plugin&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ServerContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../server&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> getShortName <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../utils&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">cssPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Plugin <span class="token punctuation">{</span>
  <span class="token keyword">let</span> serverContext<span class="token operator">:</span> ServerContext<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">&quot;m-vite:css&quot;</span><span class="token punctuation">,</span>
    <span class="token function">configureServer</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      serverContext <span class="token operator">=</span> s<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">load</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&quot;.css&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">readFile</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 主要变动在 transform 钩子中</span>
    <span class="token keyword">async</span> <span class="token function">transform</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&quot;.css&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 包装成 JS 模块</span>
        <span class="token keyword">const</span> jsContent <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
import { createHotContext as __vite__createHotContext } from &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">CLIENT_PUBLIC_PATH</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;;
i<wbr>mport.meta.hot = __vite__createHotContext(&quot;/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">getShortName</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> serverContext<span class="token punctuation">.</span>root<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;);

import { updateStyle, removeStyle } from &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">CLIENT_PUBLIC_PATH</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;
  
const id = &#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39;;
const css = &#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>code<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\n</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39;;

updateStyle(id, css);
i<wbr>mport.meta.hot.accept();
export default css;
i<wbr>mport.meta.hot.prune(() =&gt; removeStyle(id));</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
          code<span class="token operator">:</span> jsContent<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，你可以重启 playground 项目，本地尝试修改 CSS 代码，可以看到类似如下的热更新效果:</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b85a27d44b4c471b98c7457424098d71~tplv-k3u1fbpfcp-watermark.image?" alt="css-hmr1.gif"></p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>OK，本节的内容到这里就结束了，恭喜你完成了本次手写 Vite 的实战项目，最后我们来总结和回顾一下。</p><p>在这一小节，我们完成了 CSS 编译插件、静态资源加载插件、模块依赖图、编译缓存、HMR 服务端和客户端的实现。其中，你需要重点掌握以下的开发要点:</p><ol><li>CSS 的模块热更新如何实现？</li><li>静态资源的加载分为哪两种请求？no-bundle 服务中分别是如何处理的？</li><li>HMR 服务端和客户端做了哪些事情？</li><li>如何保证在 HMR 更新之后，刷新页面后依然能保证是最新的模块内容？</li></ol><p>最后，欢迎你把自己的学习心得打在评论区，大家一起来交流，我们下一节再见。</p>`,124);function g(f,h){const a=t("ExternalLinkIcon");return p(),o("div",null,[u,r,d,k,v,n("blockquote",null,[n("p",null,[s("注: 手写 Vite 项目的所有代码，我已经放到了小册的 Github 仓库中，"),n("a",m,[s("点击查看"),c(a)])])]),b])}const x=e(l,[["render",g],["__file","di25zhang—shouxieVite：shixianno-bundlekaifafuwu(xia).html.vue"]]);export{x as default};
