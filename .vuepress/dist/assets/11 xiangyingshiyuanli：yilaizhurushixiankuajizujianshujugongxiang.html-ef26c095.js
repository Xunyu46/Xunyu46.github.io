import{_ as e,r as p,o as t,c as o,b as s,d as n,e as c,a as i}from"./app-48690364.js";const l={},r=s("h2",{id:"前言",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),n(" 前言")],-1),d={href:"https://cn.vuejs.org/guide/components/props.html",target:"_blank",rel:"noopener noreferrer"},u=s("code",null,"props",-1),k=s("code",null,"Vue.js",-1),v=i(`<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a31a94e4ba3f472bb2d037fc600f7201~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>而依赖注入则是为了解决 <code>prop 逐级透传</code> 的问题而诞生的，父组件 <code>provide</code> 需要共享给子组件的数据，子组件 <code>inject</code> 使用需要的父组件状态数据，而且可以保持响应式。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4b703605556c447bbb2fcd1739a412db~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>再来看一个依赖注入的使用示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 父组件</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> provide<span class="token punctuation">,</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>
<span class="token function">provide</span><span class="token punctuation">(</span><span class="token comment">/* 注入名 */</span> <span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token comment">/* 值 */</span> msg<span class="token punctuation">)</span>

<span class="token comment">//子组件使用</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> inject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span> 
<span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么，依赖注入的核心实现原理是怎样的呢？接下来我们就一起分析吧。</p><h2 id="provide" tabindex="-1"><a class="header-anchor" href="#provide" aria-hidden="true">#</a> Provide</h2><p><code>Provide</code> 顾名思义，就是一个数据提供方，看看源码里面是如何提供的：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">provide</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>currentInstance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取当前组件实例上的 provides 对象</span>
    <span class="token keyword">let</span> provides <span class="token operator">=</span> currentInstance<span class="token punctuation">.</span>provides
    <span class="token comment">// 获取父组件实例上的 provides 对象</span>
    <span class="token keyword">const</span> parentProvides <span class="token operator">=</span>
      currentInstance<span class="token punctuation">.</span>parent <span class="token operator">&amp;&amp;</span> currentInstance<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>provides
    <span class="token comment">// 当前组件的 providers 指向父组件的情况  </span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parentProvides <span class="token operator">===</span> provides<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 继承父组件再创建一个 provides</span>
      provides <span class="token operator">=</span> currentInstance<span class="token punctuation">.</span>provides <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>parentProvides<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 生成 provides 对象</span>
    provides<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里稍微回忆一下 <code>Object.create</code> 这个函数：这个方法用于创建一个新对象，使用现有的对象来作为新创建对象的原型（<code>prototype</code>）。</p><p>所以 <code>provide</code> 就是通过获取当前组件实例对象上的 <code>provides</code>，然后通过 <code>Object.create</code> 把父组件的 <code>provides</code> 属性设置到当前的组件实例对象的<code>provides</code> 属性的原型对象上。最后再将需要 <code>provid</code> 的数据存储在当前的组件实例对象上的 <code>provides</code>上。</p><p>这里你可能会有个疑问，当前组件上实例的 <code>provides</code> 为什么会等于父组件上的 <code>provides</code> 呢？这是因为在组件实例 <code>currentInstance</code> 创建的时候进行了初始化的：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>appContext <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">provides</span><span class="token operator">:</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token punctuation">{</span> 
  <span class="token comment">// 依赖注入相关 </span>
  <span class="token literal-property property">provides</span><span class="token operator">:</span> parent <span class="token operator">?</span> parent<span class="token punctuation">.</span>provides <span class="token operator">:</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>appContext<span class="token punctuation">.</span>provides<span class="token punctuation">)</span><span class="token punctuation">,</span> 
  <span class="token comment">// 其它属性 </span>
  <span class="token comment">// ... </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，如果父组件定义了 <code>provide</code> 那么子组件初始的过程中都会将自己的 <code>porvide</code> 指向父组件的 <code>provide</code>。而根组件因为没有父组件，则被赋值为一个空对象。大致可以表示为：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/121a26eec5004650bdec9f6a08228faa~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h2 id="inject" tabindex="-1"><a class="header-anchor" href="#inject" aria-hidden="true">#</a> Inject</h2><p><code>Inject</code> 顾名思义，就是一个数据注入方，看看源码里面是如何实现注入的：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> defaultValue<span class="token punctuation">,</span> treatDefaultAsFactory <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 获取当前组件实例</span>
  <span class="token keyword">const</span> instance <span class="token operator">=</span> currentInstance <span class="token operator">||</span> currentRenderingInstance
  <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取父组件上的 provides 对象</span>
    <span class="token keyword">const</span> provides <span class="token operator">=</span>
      instance<span class="token punctuation">.</span>parent <span class="token operator">==</span> <span class="token keyword">null</span>
        <span class="token operator">?</span> instance<span class="token punctuation">.</span>vnode<span class="token punctuation">.</span>appContext <span class="token operator">&amp;&amp;</span> instance<span class="token punctuation">.</span>vnode<span class="token punctuation">.</span>appContext<span class="token punctuation">.</span>provides
        <span class="token operator">:</span> instance<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>provides
    <span class="token comment">// 如果能取到，则返回值</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>provides <span class="token operator">&amp;&amp;</span> key <span class="token keyword">in</span> provides<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> provides<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 返回默认值</span>
      <span class="token keyword">return</span> treatDefaultAsFactory <span class="token operator">&amp;&amp;</span> <span class="token function">isFunction</span><span class="token punctuation">(</span>defaultValue<span class="token punctuation">)</span>
      <span class="token comment">// 如果默认内容是个函数的，就执行并且通过call方法把组件实例的代理对象绑定到该函数的this上</span>
        <span class="token operator">?</span> <span class="token function">defaultValue</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>proxy<span class="token punctuation">)</span>
        <span class="token operator">:</span> defaultValue
    
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的实现就显得通俗易懂了，核心也就是从当前组件实例的父组件上取 <code>provides</code> 对象，然后再查找父组件 <code>provides</code> 上有没有对应的属性。因为父组件的 <code>provides</code> 是通过原型链的方式和父组件的父组件进行了关联，如果父组件上没有，那么会通过原型链的方式再向上取，这也实现了不管组件层级多深，总是可以找到对应的 <code>provide</code> 的提供方数据。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>通过上面的分析，我们知道了依赖注入的实现原理相对还是比较简单的，比较有意思的事他巧妙地利用了原型和原型链的方式进行数据的继承和获取。</p><p>在执行 <code>provide</code> 的时候，会将父组件的的 <code>provides</code> 关联成当前组件实例 <code>provides</code> 对象原型上的属性，当在 <code>inject</code> 获取数据的时候，则会根据原型链的规则进行查找，找不到的话则会返回用户自定义的默认值。</p><p>最后，我们知道 <code>Vue</code> 通过了依赖注入的方式实现了跨层级组件的状态共享问题。跨层级的状态共享问题是不是听起来有点耳熟？没错，那就是 <code>vuex / pinia</code> 所做的事情。</p><p>那思考一下 <code>Vue 3</code> 是否可以依托于 <code>Composition API</code> + <code>依赖注入</code> 实现一个轻量级的状态管理工具呢？</p>`,24);function m(b,f){const a=p("ExternalLinkIcon");return t(),o("div",null,[r,s("p",null,[n("通常情况下，当我们需要从父组件向子组件传递数据时，会使用 "),s("a",d,[n("props"),c(a)]),n("。对于层级不深的父子组件可以通过 "),u,n(" 透传数据，但是当父子层级过深时，数据透传将会变得非常麻烦和难以维护，引用 "),k,n(" 官网的一张图：")]),v])}const h=e(l,[["render",m],["__file","11 xiangyingshiyuanli：yilaizhurushixiankuajizujianshujugongxiang.html.vue"]]);export{h as default};
