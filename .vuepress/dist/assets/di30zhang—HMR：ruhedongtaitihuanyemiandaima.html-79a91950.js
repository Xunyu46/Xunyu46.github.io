import{_ as o,r as p,o as c,c as i,b as a,d as n,e,a as t}from"./app-48690364.js";const l={},u=t(`<p>HMR 全称 Hot Module Replacement，可以翻译为「<strong>模块热更新</strong>」，最初由 Webpack 设计实现，至今已几乎成为现代工程化必备工具之一，它能够在保持页面状态不变的情况下动态替换、删除、添加代码模块，提供超级丝滑顺畅的 Web 页面开发体验。</p><p>在 HMR 之前，应用的加载、更新都是一种页面级别的原子操作，即使只是单个代码文件发生变更，都需要刷新整个页面，才能将最新代码映射到浏览器上，这会丢失之前在页面执行过的所有交互与状态，例如：</p><ul><li>对于复杂表单场景，这意味着你可能需要重新填充非常多字段信息；</li><li>弹框消失，你必须重新执行交互动作才会重新弹出。</li></ul><p>再小的改动，例如更新字体大小，改变备注信息都会需要整个页面重新加载执行，整体开发效率偏低。而引入 HMR 后，虽然无法覆盖所有场景，但大多数小改动都可以通过模块热替换方式更新到页面上，从而确保连续、顺畅的开发调试体验，极大提升开发效率。</p><h2 id="使用-hmr" tabindex="-1"><a class="header-anchor" href="#使用-hmr" aria-hidden="true">#</a> 使用 HMR</h2><p>Webpack 生态下，只需要经过简单的配置，即可启动 HMR 功能，大致分两步：</p><ol><li>设置 <code>devServer.hot</code> 属性为 true：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 必须设置 devServer.hot = true，启动 HMR 功能</span>
    <span class="token literal-property property">hot</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>之后，还需要在代码调用 <code>module.hot.accept</code> 接口，声明如何将模块安全地替换为最新代码，如：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> component <span class="token keyword">from</span> <span class="token string">&quot;./component&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> demoComponent <span class="token operator">=</span> <span class="token function">component</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>demoComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// HMR interface</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>module<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Capture hot update</span>
  module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">&quot;./component&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> nextComponent <span class="token operator">=</span> <span class="token function">component</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Replace old content with the hot loaded one</span>
    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">replaceChild</span><span class="token punctuation">(</span>nextComponent<span class="token punctuation">,</span> demoComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>

    demoComponent <span class="token operator">=</span> nextComponent<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后面这个 <code>module.hot.accept</code> 逻辑比较复杂，需要根据资源类型 Case By Case 地实现，下面我们先展开讲解 HMR 的主要流程，之后重点聊聊 <code>accept</code> 函数的作用与实现。</p><h2 id="实现原理" tabindex="-1"><a class="header-anchor" href="#实现原理" aria-hidden="true">#</a> 实现原理</h2><p>Webpack HMR 特性的执行过程并不复杂，核心：</p><ol><li>使用 <code>webpack-dev-server</code> （后面简称 WDS）托管静态资源，同时以 Runtime 方式注入一段处理 HMR 逻辑的客户端代码；</li><li>浏览器加载页面后，与 WDS 建立 WebSocket 连接；</li><li>Webpack 监听到文件变化后，增量构建发生变更的模块，并通过 WebSocket 发送 <code>hash</code> 事件；</li><li>浏览器接收到 <code>hash</code> 事件后，请求 <code>manifest</code> 资源文件，确认增量变更范围；</li><li>浏览器加载发生变更的增量模块；</li><li>Webpack 运行时触发变更模块的 <code>module.hot.accept</code> 回调，执行代码变更逻辑；</li><li>done。</li></ol><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b16905bf7c1342e5aedc1647241f8c06~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>`,15),d=a("strong",null,"注入 HMR 客户端运行时",-1),r={href:"https://juejin.cn/book/7115598540721618944/section/7119036016274440192",target:"_blank",rel:"noopener noreferrer"},k=a("code",null,"npx webpack serve",-1),m=a("code",null,"webpack-dev-server",-1),v=a("code",null,"HotModuleReplacementPlugin",-1),b=t(`<ul><li>用于建立 WebSocket 连接，处理 <code>hash</code> 等消息的运行时代码；</li><li>用于加载热更新资源的 <code>RuntimeGlobals.hmrDownloadManifest</code> 与 <code>RuntimeGlobals.hmrDownloadUpdateHandlers</code> 接口；</li><li>用于处理模块更新策略的 <code>module.hot.accept</code> 接口；</li><li>……</li></ul><p>经过 <code>HotModuleReplacementPlugin</code> 处理后，构建产物中即包含了所有运行 HMR 所需的客户端运行时与接口。这些 HMR 运行时会在浏览器执行一套基于 WebSocket 消息的时序框架，如图：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f11ad665cc384facb7edade1e0390a7b~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p><strong>其次，实现增量构建</strong>：除注入客户端代码外，<code>HotModuleReplacementPlugin</code> 插件还会借助 Webpack 的 <code>watch</code> 能力，在代码文件发生变化后执行增量构建，生成：</p><ul><li><code>manifest</code> 文件：JSON 格式文件，包含所有发生变更的模块列表，命名为 <code>[hash].hot-update.json</code>；</li><li>模块变更文件：js 格式，包含编译后的模块代码，命名为 <code>[hash].hot-update.js</code>。</li></ul><p>增量构建完毕后，Webpack 将触发 <code>compilation.hooks.done</code> 钩子，并传递本次构建的统计信息对象 <code>stats</code>。WDS 则监听 <code>done</code> 钩子，在回调中通过 WebSocket 发送模块更新消息：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span><span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;hash&quot;</span><span class="token punctuation">,</span><span class="token string-property property">&quot;data&quot;</span><span class="token operator">:</span><span class="token string">&quot;\${stats.hash}&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>实际效果：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/abda76328bdd45ce945e5c3626a33b21~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p><strong>再次，加载更新</strong>：客户端通过 WebSocket 接收到 <code>hash</code> 消息后，首先发出 <code>manifest</code> 请求获取本轮热更新涉及的 chunk，如：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/788951089ec84360b17cc0bcefa23385~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><blockquote><p>注意：在 Webpack 4 及之前，热更新文件以模块为单位，即所有发生变化的模块都会生成对应的热更新文件； Webpack 5 之后热更新文件以 chunk 为单位，如上例中，<code>main</code> chunk 下任意文件的变化都只会生成 <code>main.[hash].hot-update.js</code> 更新文件。</p></blockquote><p><code>manifest</code> 请求完成后，客户端 HMR 运行时开始下载发生变化的 chunk 文件，将最新模块代码加载到本地。</p><p><strong>最后，执行 <code>module.hot.accept</code> 回调</strong>：经过上述步骤，浏览器加载完最新模块代码后，HMR 运行时会继续触发 <code>module.hot.accept</code> 回调，将最新代码替换到运行环境中。</p><p><code>module.hot.accept</code> 是 HMR 运行时暴露给用户代码的重要接口之一，它在 Webpack HMR 体系中开了一个口子，让用户能够自定义模块热替换的逻辑，接口签名：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>path<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">,</span> callback<span class="token operator">?</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它接受两个参数：</p><ul><li><code>path</code>：指定需要拦截变更行为的模块路径；</li><li><code>callback</code>：模块更新后，将最新模块代码应用到运行环境的函数。</li></ul><p>例如，对于如下代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// src/bar.js</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token string">&#39;bar&#39;</span>

<span class="token comment">// src/index.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> bar <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./bar&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> node <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>
node<span class="token punctuation">.</span>innerText <span class="token operator">=</span> bar<span class="token punctuation">;</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>

module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">&#39;./bar.js&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    node<span class="token punctuation">.</span>innerText <span class="token operator">=</span> bar<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例中，<code>module.hot.accept</code> 函数监听 <code>./bar.js</code> 模块的变更事件，一旦代码发生变动，就触发回调，将 <code>./bar.js</code> 导出的值替换到页面上，从而实现热更新效果。</p><p>回顾整个 HMR 过程，所有的状态流转均由 WebSocket 消息驱动，这部分逻辑由 HMR 运行时控制，开发者几乎无感，唯一需要关注的就是是为每一个需要支持 HMR 特性的文件注册 <code>module.hot.accept</code> 回调。</p><h2 id="accept-函数注意事项" tabindex="-1"><a class="header-anchor" href="#accept-函数注意事项" aria-hidden="true">#</a> <code>accept</code> 函数注意事项</h2><p>从应用视角看，<code>module.hot.accept</code> 是 Webpack 开放出来，由用户自定义模块更新逻辑的重要函数，因此有必要单独拎出来，聊聊几个开发技巧：</p><ol><li><strong>处理失败兜底逻辑</strong></li></ol><p><code>module.hot.accept</code> 函数只接受具体路径的 <code>path</code> 参数，也就是说，我们无法通过 <code>glob</code> 或类似风格的方式批量注册热更新回调。</p><p>一旦某个模块没有注册对应的 <code>module.hot.accept</code> 函数后，HMR 运行时会执行兜底策略，通常是刷新页面，确保页面上运行的始终是最新的代码，因此有时候你可能明明已经注册了 <code>accept</code> 回调，但热更新无法生效，此时可以检查一下文件路径是否真的命中资源。</p><ol start="2"><li><strong>更新事件冒泡</strong></li></ol><p><code>module.hot.accept</code> 函数只能捕获当前模块对应子孙模块的更新事件，例如对于下面的模块依赖树：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/636a4ada949c4e048d416883c35f89da~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>示例中，更新事件会沿着模块依赖树自底向上逐级传递，从 <code>foo</code> 到 <code>index</code> ，从 <code>bar-1</code> 到 <code>bar</code> 再到 <code>index</code>，但不支持反向或跨子树传递，也就是说：</p><ul><li>在 <code>foo.js</code> 中无法捕获 <code>bar.js</code> 及其子模块的变更事件；</li><li>在 <code>bar-1.js</code> 中无法捕获 <code>bar.js</code> 的变更事件。</li></ul><p>这一特性与 DOM 事件规范中的冒泡过程极为相似，使用时如果摸不准模块的依赖关系，建议直接在应用的入口文件中编写热更新函数。</p><ol start="3"><li><strong>使用无参数调用风格</strong></li></ol><p>除上述调用方式外，<code>module.hot.accept</code> 函数还支持无参数调用风格，作用是捕获当前文件的变更事件，并从模块第一行开始重新运行该模块的代码，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// src/bar.js</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例模块发生变动之后，会从头开始重复执行 <code>console.log</code> 语句。</p><h2 id="vue-loader-如何实现-hmr" tabindex="-1"><a class="header-anchor" href="#vue-loader-如何实现-hmr" aria-hidden="true">#</a> <code>vue-loader</code> 如何实现 HMR ？</h2>`,38),h=a("code",null,"vue-loader",-1),_={href:"https://vue-loader.vuejs.org/zh/spec.html#%E7%AE%80%E4%BB%8B",target:"_blank",rel:"noopener noreferrer"},g=t(`<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2533c45468554dd4a09f4addaedcaa8a~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>除常规的代码转译外，在 HMR 模式下，<code>vue-loader</code> 还会为每一个 Vue 文件注入一段处理模块替换的逻辑，如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string-property property">&quot;./src/a.vue&quot;</span><span class="token operator">:</span>
<span class="token comment">/*!*******************!*\\
    !*** ./src/a.vue ***!
    \\*******************/</span>
<span class="token doc-comment comment">/***/
((module, __webpack_exports__, __webpack_require__) =&gt; <span class="token punctuation">{</span>
    // 模块代码
    // ...
    /* hot reload */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> api <span class="token operator">=</span> <span class="token function">__webpack_require__</span><span class="token punctuation">(</span> <span class="token comment">/*! ../node_modules/vue-hot-reload-api/dist/index.js */</span> <span class="token string">&quot;../node_modules/vue-hot-reload-api/dist/index.js&quot;</span><span class="token punctuation">)</span>
    api<span class="token punctuation">.</span><span class="token function">install</span><span class="token punctuation">(</span><span class="token function">__webpack_require__</span><span class="token punctuation">(</span> <span class="token comment">/*! vue */</span> <span class="token string">&quot;../node_modules/vue/dist/vue.runtime.esm.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>api<span class="token punctuation">.</span>compatible<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>api<span class="token punctuation">.</span><span class="token function">isRecorded</span><span class="token punctuation">(</span><span class="token string">&#39;45c6ab58&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        api<span class="token punctuation">.</span><span class="token function">createRecord</span><span class="token punctuation">(</span><span class="token string">&#39;45c6ab58&#39;</span><span class="token punctuation">,</span> component<span class="token punctuation">.</span>options<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        api<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token string">&#39;45c6ab58&#39;</span><span class="token punctuation">,</span> component<span class="token punctuation">.</span>options<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span> <span class="token comment">/*! ./a.vue?vue&amp;type=template&amp;id=45c6ab58&amp; */</span> <span class="token string">&quot;./src/a.vue?vue&amp;type=template&amp;id=45c6ab58&amp;&quot;</span><span class="token punctuation">,</span> <span class="token parameter">__WEBPACK_OUTDATED_DEPENDENCIES__</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">/* harmony import */</span>
        _a_vue_vue_type_template_id_45c6ab58___WEBPACK_IMPORTED_MODULE_0__ <span class="token operator">=</span> <span class="token function">__webpack_require__</span><span class="token punctuation">(</span> <span class="token comment">/*! ./a.vue?vue&amp;type=template&amp;id=45c6ab58&amp; */</span> <span class="token string">&quot;./src/a.vue?vue&amp;type=template&amp;id=45c6ab58&amp;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            api<span class="token punctuation">.</span><span class="token function">rerender</span><span class="token punctuation">(</span><span class="token string">&#39;45c6ab58&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">render</span><span class="token operator">:</span> _a_vue_vue_type_template_id_45c6ab58___WEBPACK_IMPORTED_MODULE_0__<span class="token punctuation">.</span>render<span class="token punctuation">,</span>
            <span class="token literal-property property">staticRenderFns</span><span class="token operator">:</span> _a_vue_vue_type_template_id_45c6ab58___WEBPACK_IMPORTED_MODULE_0__<span class="token punctuation">.</span>staticRenderFns
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>__WEBPACK_OUTDATED_DEPENDENCIES__<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// ...</span>

    <span class="token doc-comment comment">/***/
<span class="token punctuation">}</span>),
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段被注入用于处理模块热替换的代码，主要步骤有：</p><ul><li>首次执行时，调用 <code>api.createRecord</code> 记录组件配置，<code>api</code> 为 <code>vue-hot-reload-api</code> 库暴露的接口；</li><li>执行 <code>module.hot.accept()</code> 语句，监听当前模块变更事件，当模块发生变化时调用 <code>api.reload</code>；</li><li>执行 <code>module.hot.accept(&quot;xxx.vue?vue&amp;type=template&amp;xxxx&quot;, fn)</code> ，监听 Vue 文件 template 代码的变更事件，当 template 模块发生变更时调用 <code>api.rerender</code>。</li></ul><p>可以看到，<code>vue-loader</code> 对 HMR 的支持，基本上围绕 <code>vue-hot-reload-api</code> 展开，当代码文件发生变化触发 <code>module.hot.accept</code> 回调时，会根据情况执行 <code>vue-hot-reload-api</code> 暴露的 <code>reload</code> 与 <code>rerender</code> 函数，两者最终都会触发组件实例的 <code>$forceUpdate</code> 函数强制执行重新渲染。</p>`,6),f=a("code",null,"module.hot.accept",-1),j=a("code",null,"vue-loader",-1),y=a("code",null,"template",-1),R=a("code",null,"xxx.vue?vue&type=template",-1),x=a("code",null,"script",-1),M=a("code",null,"xxx.vue?vue&type=script",-1),w=a("code",null,"vue-loader",-1),H=a("code",null,"accept",-1),W={href:"https://juejin.cn/book/7115598540721618944/section/7119035564862472233",target:"_blank",rel:"noopener noreferrer"},q=a("h2",{id:"总结",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#总结","aria-hidden":"true"},"#"),n(" 总结")],-1),E=a("p",null,[n("综上，Webpack 的 HMR 特性底层有两个重点，一是监听文件变化并通过 WebSocket 发送变更消息；二是需要客户端配合，通过 "),a("code",null,"module.hot.accept"),n(" 接口定制特定模块的热替换规则。")],-1),C=a("h2",{id:"思考题",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#思考题","aria-hidden":"true"},"#"),n(" 思考题")],-1),D=a("p",null,"Webpack HMR 这种模块粒度的更新规则，真的能完美适配所有代码更新场景吗？什么情况下，什么类型文件的更新可能并不能实现热更效果，而不得不回退到整页更新？",-1);function S(P,B){const s=p("ExternalLinkIcon");return c(),i("div",null,[u,a("p",null,[n("首先是 "),d,n("：在前面章节《"),a("a",r,[n("Runtime：模块编译打包及运行时逻辑"),e(s)]),n("》中，我们已经详细介绍了 Webpack 运行时概念与底层实现逻辑，在 HMR 场景下，执行 "),k,n(" 命令后，"),m,n(" 首先会调用 "),v,n(" 插件向应用的主 Chunk 注入一系列 HMR Runtime，包括：")]),b,a("p",null,[n("最后，我们来看一个实际案例 —— "),h,n("，这是一个用于处理 Vue "),a("a",_,[n("Single File Component"),e(s)]),n(" 的 Webpack 加载器，它能够将如下格式的内容转译为可在浏览器运行的等价代码：")]),g,a("p",null,[n("另外，为什么这里需要调用两次 "),f,n("？这是因为 "),j,n(" 在做转译时，会将 SFC 不同板块拆解成多个 module，例如 "),y,n(" 对应生成 "),R,n(" ；"),x,n(" 对应生成 "),M,n("。因此，"),w,n(" 必须为这些不同的 module 分别调用 "),H,n(" 接口，才能处理好不同代码块的变更事件，更多实现细节，可翻阅《"),a("a",W,[n("Loader 开发进阶：如何用好 Loader 扩展开发工具？"),e(s)]),n("》一章。")]),q,E,C,D])}const T=o(l,[["render",S],["__file","di30zhang—HMR：ruhedongtaitihuanyemiandaima.html.vue"]]);export{T as default};
