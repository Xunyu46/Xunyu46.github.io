import{_ as p,r as o,o as c,c as l,b as n,d as s,e,a as t}from"./app-48690364.js";const i={},u=t(`<p>谈到 Vite，可能很多人都觉得这是一个现代前端构建工具，应该在现代浏览器中使用，放到各种语法特性都缺失的低版本浏览器(如 <code>ie 11</code>)就不适用了。这种观念对不对呢？首先跟大家抛出结论:</p><blockquote><p>通过 Vite 构建我们完全可以兼容各种低版本浏览器，打包出既支持现代(<code>Modern</code>)浏览器又支持旧版(<code>Legacy</code>)浏览器的产物。</p></blockquote><p>接下里的课程中，我就来与你分析一下为什么在 Vite 中能够彻底解决低版本浏览器的兼容性问题，以及通过什么手段解决，需要借助哪些 JS 的工具和生态。你会领略到诸多前端编译工具链底层的风光，比如<code>@babel/preset-env</code>、<code>core-js</code>、<code>regenerator-runtime</code>等等工具和基础库是如何强强联合的，当然，我也会以官方的 Vite 插件<code>@vitejs/plugin-legacy</code>为例告诉你如何将这些底层的工具链接入到 Vite 中，并实现开箱即用的解决方案。</p><h2 id="场景复现" tabindex="-1"><a class="header-anchor" href="#场景复现" aria-hidden="true">#</a> 场景复现</h2><p>首先我们来复现一下问题场景，下面两张图代表了之前我在线上环境真实遇到的报错案例:</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/89664e25ca4d43acba36586e4ac58b1e~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/475f676c3bb5445ea37b32919799a412~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>某些低版本浏览器并没有提供 <code>Promise</code> 语法环境以及对象和数组的各种 API，甚至不支持箭头函数语法，代码直接报错，从而导致线上白屏事故的发生，尤其是需要兼容到<code>IE 11</code>、<code>iOS 9</code>以及<code>Android 4.4</code>的场景中很容易会遇到。</p><p>旧版浏览器的语法兼容问题主要分两类: <strong>语法降级问题</strong>和 <strong>Polyfill 缺失问题</strong>。前者比较好理解，比如某些浏览器不支持箭头函数，我们就需要将其转换为<code>function(){}</code>语法；而对后者来说，<code>Polyfill</code>本身可以翻译为<code>垫片</code>，也就是为浏览器提前注入一些 API 的实现代码，如<code>Object.entries</code>方法的实现，这样可以保证产物可以正常使用这些 API，防止报错。</p><p>这两类问题本质上是通过前端的编译工具链(如<code>Babel</code>)及 JS 的基础 Polyfill 库(如<code>corejs</code>)来解决的，不会跟具体的构建工具所绑定。也就是说，对于这些本质的解决方案，在其它的构建工具(如 Webpack)能使用，在 Vite 当中也完全可以使用。</p><p>构建工具考虑的仅仅是如何将这些底层基础设施接入到构建过程的问题，自己并不需要提供底层的解决方案，正所谓<code>术业有专攻</code>，把专业的事情交给专业的工具去做。接下来的部分，我就来带你熟悉一下所谓<code>专业的工具</code>到底有哪些，以及如何使用这些工具。</p><h2 id="底层工具链" tabindex="-1"><a class="header-anchor" href="#底层工具链" aria-hidden="true">#</a> 底层工具链</h2><h3 id="_1-工具概览" tabindex="-1"><a class="header-anchor" href="#_1-工具概览" aria-hidden="true">#</a> 1. 工具概览</h3><p>解决上述提到的两类语法兼容问题，主要需要用到两方面的工具，分别包括:</p><ul><li><p><strong>编译时工具</strong>。代表工具有<code>@babel/preset-env</code>和<code>@babel/plugin-transform-runtime</code>。</p></li><li><p><strong>运行时基础库</strong>。代表库包括<code>core-js</code>和<code>regenerator-runtime</code>。</p></li></ul><p><strong>编译时工具</strong>的作用是在代码编译阶段进行<strong>语法降级</strong>及<strong>添加 <code>polyfill</code> 代码的引用语句</strong>，如:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token string">&quot;core-js/modules/es6.set.js&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>由于这些工具只是编译阶段用到，运行时并不需要，我们需要将其放入<code>package.json</code>中的<code>devDependencies</code>中。</p><p>而<strong>运行时基础库</strong>是根据 <code>ESMAScript</code>官方语言规范提供各种<code>Polyfill</code>实现代码，主要包括<code>core-js</code>和<code>regenerator-runtime</code>两个基础库，不过在 babel 中也会有一些上层的封装，包括：</p>`,19),r={href:"https://babeljs.io/docs/en/babel-polyfill",target:"_blank",rel:"noopener noreferrer"},d={href:"https://babeljs.io/docs/en/babel-runtime",target:"_blank",rel:"noopener noreferrer"},k={href:"https://babeljs.io/docs/en/babel-runtime-corejs2",target:"_blank",rel:"noopener noreferrer"},m={href:"https://babeljs.io/docs/en/babel-runtime-corejs3",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"core-js",-1),b=n("code",null,"regenerator-runtime",-1),g=n("code",null,"@babel/runtime",-1),y=n("code",null,"package.json",-1),f=n("code",null,"dependencies",-1),h=n("h3",{id:"_2-实际使用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-实际使用","aria-hidden":"true"},"#"),s(" 2. 实际使用")],-1),q={href:"https://github.com/sanyuan0704/juejin-book-vite/tree/main/polyfill/babel-test",target:"_blank",rel:"noopener noreferrer"},j=t(`<p>如果你没拉取仓库的代码，可以先按照如下的命令初始化项目:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>mkdir babel-test
npm init -y
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后安装一些必要的依赖:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> i @babel/cli @babel/core @babel/preset-env
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我解释一下各个依赖的作用:</p><ul><li><code>@babel/cli</code>: 为 babel 官方的脚手架工具，很适合我们练习用。</li><li><code>@babel/core</code>: babel 核心编译库。</li><li><code>@babel/preset-env</code>: babel 的预设工具集，基本为 babel 必装的库。</li></ul><p>接着新建 <code>src</code> 目录，在目录下增加<code>index.js</code>文件:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token function-variable function">func</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">12123</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以看到，示例代码中既包含了<code>高级语法</code>也包含现代浏览器的<code>API</code>，正好可以针对语法降级和 Polyfill 注入两个功能进行测试。</p><p>接下来新建<code>.babelrc.json</code>即 babel 的配置文件，内容如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;presets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span>
      <span class="token string">&quot;@babel/preset-env&quot;</span><span class="token punctuation">,</span> 
      <span class="token punctuation">{</span>
        <span class="token comment">// 指定兼容的浏览器版本</span>
        <span class="token string-property property">&quot;targets&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token string-property property">&quot;ie&quot;</span><span class="token operator">:</span> <span class="token string">&quot;11&quot;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token comment">// 基础库 core-js 的版本，一般指定为最新的大版本</span>
        <span class="token string-property property">&quot;corejs&quot;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
        <span class="token comment">// Polyfill 注入策略，后文详细介绍</span>
        <span class="token string-property property">&quot;useBuiltIns&quot;</span><span class="token operator">:</span> <span class="token string">&quot;usage&quot;</span><span class="token punctuation">,</span>
        <span class="token comment">// 不将 ES 模块语法转换为其他模块语法</span>
        <span class="token string-property property">&quot;modules&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中有两个比较关键的配置: <code>targets</code>和<code>usage</code>。</p><p>我们可以通过 <code>targets</code> 参数指定要兼容的浏览器版本，你既可以填如上配置所示的一个对象:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;targets&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;ie&quot;</span><span class="token operator">:</span> <span class="token string">&quot;11&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),_={href:"https://github.com/browserslist/browserslist",target:"_blank",rel:"noopener noreferrer"},P=t(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">{</span> 
  <span class="token comment">// ie 不低于 11 版本，全球超过 0.5% 使用，且还在维护更新的浏览器</span>
  <span class="token string-property property">&quot;targets&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ie &gt;= 11, &gt; 0.5%, not dead&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Browserslist 是一个帮助我们设置目标浏览器的工具，不光是 Babel 用到，其他的编译工具如<code>postcss-preset-env</code>、<code>autoprefix</code>中都有所应用。对于<code>Browserslist</code>的配置内容，你既可以放到 Babel 这种特定工具当中，也可以在<code>package.json</code>中通过<code>browserslist</code>声明:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// package.json</span>
<span class="token punctuation">{</span> 
  <span class="token string-property property">&quot;browserslist&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ie &gt;= 11&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者通过<code>.browserslistrc</code>进行声明:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// .browserslistrc</span>
ie <span class="token operator">&gt;=</span> <span class="token number">11</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在实际的项目中，一般我们可以将使用下面这些<strong>最佳实践集合</strong>来描述不同的浏览器类型，减轻配置负担:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 现代浏览器</span>
last <span class="token number">2</span> versions and since <span class="token number">2018</span> and <span class="token operator">&gt;</span> <span class="token number">0.5</span><span class="token operator">%</span>
<span class="token comment">// 兼容低版本 PC 浏览器</span>
<span class="token constant">IE</span> <span class="token operator">&gt;=</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token operator">&gt;</span> <span class="token number">0.5</span><span class="token operator">%</span><span class="token punctuation">,</span> not dead
<span class="token comment">// 兼容低版本移动端浏览器</span>
iOS <span class="token operator">&gt;=</span> <span class="token number">9</span><span class="token punctuation">,</span> Android <span class="token operator">&gt;=</span> <span class="token number">4.4</span><span class="token punctuation">,</span> last <span class="token number">2</span> versions<span class="token punctuation">,</span> <span class="token operator">&gt;</span> <span class="token number">0.2</span><span class="token operator">%</span><span class="token punctuation">,</span> not dead
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于这些配置对应的具体浏览器列表，大家可以去 https://browserslist.dev 站点查看:</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c6a37f9917fd4be4b38d3ee8d5165625~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>好，在说明了目标浏览器的配置之后，接下来我们来看另外一个重要的配置——<code>useBuiltIns</code>，它决定了添加 Polyfill 策略，默认是 <code>false</code>，即不添加任何的 Polyfill。你可以手动将<code>useBuiltIns</code>配置为<code>entry</code>或者<code>usage</code>，接下来我们看看这两个配置究竟有什么区别。</p><p>首先你可以将这个字段配置为<code>entry</code>，需要注意的是，<code>entry</code>配置规定你必须在入口文件手动添加一行这样的代码:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// index.js 开头加上</span>
<span class="token keyword">import</span> <span class="token string">&#39;core-js&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接着在终端执行下面的命令进行 Babel 编译:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx babel src --out-dir dist
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>产物输出在<code>dist</code>目录中，你可以去观察一下产物的代码:</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f56b93f6e9884779b7197d2ad369034b~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>Babel 已经根据<code>目标浏览器</code>的配置为我们添加了大量的 Polyfill 代码，<code>index.js</code>文件简单的几行代码被编译成近 300 行。实际上，Babel 所做的事情就是将你的<code>import &quot;core-js&quot;</code>代码替换成了产物中的这些具体模块的导入代码。</p><p>但这个配置有一个问题，即无法做到按需导入，上面的产物代码其实有大部分的 Polyfill 的代码我们并没有用到。接下来我们试试<code>useBuiltIns: usage</code>这个按需导入的配置，改动配置后执行编译命令:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>npx babel src <span class="token operator">--</span>out<span class="token operator">-</span>dir dist
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>同样可以看到产物输出在了<code>dist/index.js</code>中，内容如下所示:</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eecb694e85494faaa63dc00688787a09~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><blockquote><p>Polyfill 代码主要来自 <code>corejs</code> 和 <code>regenerator-runtime</code>，因此如果要运行起来，必须要装这两个库。</p></blockquote><p>可以发现 Polyfill 的代码精简了许多，真正地实现了按需 Polyfill 导入。因此，在实际的使用当中，还是推荐大家尽量使用<code>useBuiltIns: &quot;usage&quot;</code>，进行按需的 Polyfill 注入。</p><p>我们来梳理一下，上面我们利用<code>@babel/preset-env</code>进行了目标浏览器语法的降级和<code>Polyfill</code>注入，同时用到了<code>core-js</code>和<code>regenerator-runtime</code>两个核心的运行时库。但<code>@babel/preset-env</code> 的方案也存在一定局限性:</p><ul><li><ol><li>如果使用新特性，往往是通过基础库(如 core-js)往全局环境添加 Polyfill，如果是开发应用没有任何问题，如果是开发第三方工具库，则很可能会对<strong>全局空间造成污染</strong>。</li></ol></li><li><ol start="2"><li>很多工具函数的实现代码(如上面示例中的<code>_defineProperty</code>方法)，会在许多文件中重现出现，造成<strong>文件体积冗余</strong>。</li></ol></li></ul><h3 id="_3-更优的-polyfill-注入方案-transform-runtime" tabindex="-1"><a class="header-anchor" href="#_3-更优的-polyfill-注入方案-transform-runtime" aria-hidden="true">#</a> 3. 更优的 Polyfill 注入方案: transform-runtime</h3><p>接下来要介绍的<code>transform-runtime</code>方案，就是为了解决<code>@babel/preset-env</code>的种种局限性。</p><blockquote><p>需要提前说明的是，<code>transform-runtime</code>方案可以作为<code>@babel/preset-env</code>中<code>useBuiltIns</code>配置的替代品，也就是说，一旦使用<code>transform-runtime</code>方案，你应该把<code>useBuiltIns</code>属性设为 <code>false</code>。</p></blockquote><p>接下来我们来尝试一下这个方案，首先安装必要的依赖:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>pnpm i <span class="token decorator"><span class="token at operator">@</span><span class="token function">babel</span></span><span class="token operator">/</span>plugin<span class="token operator">-</span>transform<span class="token operator">-</span>runtime <span class="token operator">-</span><span class="token constant">D</span>
pnpm i <span class="token decorator"><span class="token at operator">@</span><span class="token function">babel</span></span><span class="token operator">/</span>runtime<span class="token operator">-</span>corejs3 <span class="token operator">-</span><span class="token constant">S</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我解释一下这两个依赖的作用: 前者是编译时工具，用来转换语法和添加 Polyfill，后者是运行时基础库，封装了<code>core-js</code>、<code>regenerator-runtime</code>和各种语法转换用到的<code>工具函数</code>。</p><blockquote><p>core-js 有三种产物，分别是<code>core-js</code>、<code>core-js-pure</code>和<code>core-js-bundle</code>。第一种是全局 Polyfill 的做法，@babel/preset-env 就是用的这种产物；第二种不会把 Polyfill 注入到全局环境，可以按需引入；第三种是打包好的版本，包含所有的 Polyfill，不太常用。<code>@babel/runtime-corejs3</code> 使用的是第二种产物。</p></blockquote><p>接着我们对<code>.babelrc.json</code>作如下的配置:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// 添加 transform-runtime 插件</span>
    <span class="token punctuation">[</span>
      <span class="token string">&quot;@babel/plugin-transform-runtime&quot;</span><span class="token punctuation">,</span> 
      <span class="token punctuation">{</span>
        <span class="token property">&quot;corejs&quot;</span><span class="token operator">:</span> <span class="token number">3</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;presets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span>
      <span class="token string">&quot;@babel/preset-env&quot;</span><span class="token punctuation">,</span> 
      <span class="token punctuation">{</span>
        <span class="token property">&quot;targets&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token property">&quot;ie&quot;</span><span class="token operator">:</span> <span class="token string">&quot;11&quot;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token property">&quot;corejs&quot;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
        <span class="token comment">// 关闭 @babel/preset-env 默认的 Polyfill 注入</span>
        <span class="token property">&quot;useBuiltIns&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token property">&quot;modules&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行终端命令:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>npx babel src <span class="token operator">--</span>out<span class="token operator">-</span>dir dist
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们可以对比一下 <code>@babel/preset-env</code>下的产物结果:</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fc40d9a6401640058b96c4821e6ff8c1~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>经过对比我们不难发现，<code>transform-runtime</code> 一方面能够让我们在代码中使用<code>非全局版本</code>的 Polyfill，这样就避免全局空间的污染，这也得益于 <code>core-js</code> 的 pure 版本产物特性；另一方面对于<code>asyncToGeneator</code>这类的工具函数，它也将其转换成了一段引入语句，不再将完整的实现放到文件中，节省了编译后文件的体积。</p><p>另外，<code>transform-runtime</code>方案引用的基础库也发生了变化，不再是直接引入<code>core-js</code>和<code>regenerator-runtime</code>，而是引入<code>@babel/runtime-corejs3</code>。</p><p>好，介绍完了 Babel 语法降级与 Polyfill 注入的底层方案，接下来我们来看看如何在 Vite 中利用这些方案来解决低版本浏览器的兼容性问题。</p><h2 id="vite-语法降级与-polyfill-注入" tabindex="-1"><a class="header-anchor" href="#vite-语法降级与-polyfill-注入" aria-hidden="true">#</a> Vite 语法降级与 Polyfill 注入</h2><p>Vite 官方已经为我们封装好了一个开箱即用的方案: <code>@vitejs/plugin-legacy</code>，我们可以基于它来解决项目语法的浏览器兼容问题。这个插件内部同样使用 <code>@babel/preset-env</code> 以及 <code>core-js</code>等一系列基础库来进行语法降级和 Polyfill 注入，因此我觉得对于上文所介绍的底层工具链的掌握是必要的，否则无法理解插件内部所做的事情，真正遇到问题时往往会不知所措。</p><h3 id="插件使用" tabindex="-1"><a class="header-anchor" href="#插件使用" aria-hidden="true">#</a> 插件使用</h3><p>首先让我们来安装一下官方的插件:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>pnpm i <span class="token decorator"><span class="token at operator">@</span><span class="token function">vitejs</span></span><span class="token operator">/</span>plugin<span class="token operator">-</span>legacy <span class="token operator">-</span><span class="token constant">D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>随后在项目中使用它:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// vite.config.ts</span>
<span class="token keyword">import</span> legacy <span class="token keyword">from</span> <span class="token string">&#39;@vitejs/plugin-legacy&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// 省略其它插件</span>
    <span class="token function">legacy</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token comment">// 设置目标浏览器，browserslist 配置语法</span>
      targets<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;ie &gt;= 11&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们同样可以通过<code>targets</code>指定目标浏览器，这个参数在插件内部会透传给<code>@babel/preset-env</code>。</p><p>在引入插件后，我们可以尝试执行<code>npm run build</code>对项目进行打包，可以看到如下的产物信息:</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d6b0cd1289814da78e89c90cc7aed81a~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>相比一般的打包过程，多出了<code>index-legacy.js</code>、<code>vendor-legacy.js</code>以及<code>polyfills-legacy.js</code>三份产物文件。让我们继续观察一下<code>index.html</code>的产物内容:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>icon<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>image/svg+xml<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/assets/favicon.17e50649.svg<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Vite App<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 1. Modern 模式产物 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">crossorigin</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/assets/index.c1383506.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>modulepreload<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/assets/vendor.0f99bfcc.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/assets/index.91183920.css<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 2. Legacy 模式产物 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">nomodule</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">兼容 iOS nomodule 特性的 polyfill，省略具体代码</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">nomodule</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>vite-legacy-polyfill<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/assets/polyfills-legacy.36fe2f9e.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">nomodule</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>vite-legacy-entry<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/assets/index-legacy.c3d3f501.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">System<span class="token punctuation">.</span><span class="token function">import</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;vite-legacy-entry&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;data-src&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,53),x=n("code",null,"legacy",-1),w=n("code",null,"Modern",-1),B=n("code",null,"Legacy",-1),I=n("code",null,"Modern",-1),V=n("code",null,'type="module"',-1),L=n("code",null,"Legacy",-1),S={href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-nomodule",target:"_blank",rel:"noopener noreferrer"},C=t(`<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c2e76cdfdb1443a789d23439bd6aabce~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>这样产物便就能够同时放到现代浏览器和不支持<code>type=&quot;module&quot;</code>的低版本浏览器当中执行。当然，在具体的代码语法层面，插件还需要考虑语法降级和 Polyfill 按需注入的问题，接下来我们就来分析一下 Vite 的官方<code>legacy</code>插件是如何解决这些问题的。</p><h3 id="插件执行原理" tabindex="-1"><a class="header-anchor" href="#插件执行原理" aria-hidden="true">#</a> 插件执行原理</h3><p>官方的<code>legacy</code>插件是一个相对复杂度比较高的插件，直接看源码可能会很难理解，这里我梳理了画了一张简化后的流程图，接下来我们就根据这张流程图来一一拆解这个插件在各个钩子阶段到底做了些什么。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3363652bc9bd4118af2896c9b1cce9cf~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>首先是在<code>configResolved</code>钩子中调整了<code>output</code>属性，这么做的目的是让 Vite 底层使用的打包引擎 Rollup 能另外打包出一份<code>Legacy 模式</code>的产物，实现代码如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token function-variable function">createLegacyOutput</span> <span class="token operator">=</span> <span class="token punctuation">(</span>options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>options<span class="token punctuation">,</span>
    <span class="token comment">// system 格式产物</span>
    format<span class="token operator">:</span> <span class="token string">&#39;system&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">// 转换效果: index.[hash].js -&gt; index-legacy.[hash].js</span>
    entryFileNames<span class="token operator">:</span> <span class="token function">getLegacyOutputFileName</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>entryFileNames<span class="token punctuation">)</span><span class="token punctuation">,</span>
    chunkFileNames<span class="token operator">:</span> <span class="token function">getLegacyOutputFileName</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>chunkFileNames<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token punctuation">{</span> rollupOptions <span class="token punctuation">}</span> <span class="token operator">=</span> config<span class="token punctuation">.</span>build
<span class="token keyword">const</span> <span class="token punctuation">{</span> output <span class="token punctuation">}</span> <span class="token operator">=</span> rollupOptions
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  rollupOptions<span class="token punctuation">.</span>output <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>output<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>createLegacyOutput<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">...</span>output<span class="token punctuation">]</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  rollupOptions<span class="token punctuation">.</span>output <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">createLegacyOutput</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">,</span> output <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着，在<code>renderChunk</code>阶段，插件会对 Legacy 模式产物进行语法转译和 Polyfill 收集，值得注意的是，这里并不会真正注入<code>Polyfill</code>，而仅仅只是收集<code>Polyfill</code>，:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">{</span>
  <span class="token function">renderChunk</span><span class="token punctuation">(</span>raw<span class="token punctuation">,</span> chunk<span class="token punctuation">,</span> opts<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1. 使用 babel + @babel/preset-env 进行语法转换与 Polyfill 注入</span>
    <span class="token comment">// 2. 由于此时已经打包后的 Chunk 已经生成</span>
    <span class="token comment">//   这里需要去掉 babel 注入的 import 语句，并记录所需的 Polyfill</span>
    <span class="token comment">// 3. 最后的 Polyfill 代码将会在 generateBundle 阶段生成</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于场景是应用打包，这里直接使用 @babel/preset-env 的<code>useBuiltIns: &#39;usage&#39;</code>来进行全局 Polyfill 的收集是比较标准的做法。</p><p>回到 Vite 构建的主流程中，接下来会进入<code>generateChunk</code>钩子阶段，现在 Vite 会对之前收集到的<code>Polyfill</code>进行统一的打包，实现也比较精妙，主要逻辑集中在<code>buildPolyfillChunk</code>函数中:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 打包 Polyfill 代码</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">buildPolyfillChunk</span><span class="token punctuation">(</span>
  name<span class="token punctuation">,</span>
  imports
  bundle<span class="token punctuation">,</span>
  facadeToChunkMap<span class="token punctuation">,</span>
  buildOptions<span class="token punctuation">,</span>
  externalSystemJS
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> <span class="token punctuation">{</span> minify<span class="token punctuation">,</span> assetsDir <span class="token punctuation">}</span> <span class="token operator">=</span> buildOptions
  minify <span class="token operator">=</span> minify <span class="token operator">?</span> <span class="token string">&#39;terser&#39;</span> <span class="token operator">:</span> <span class="token boolean">false</span>
  <span class="token comment">// 调用 Vite 的 build API 进行打包</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">// 根路径设置为插件所在目录</span>
    <span class="token comment">// 由于插件的依赖包含\`core-js\`、\`regenerator-runtime\`这些运行时基础库</span>
    <span class="token comment">// 因此这里 Vite 可以正常解析到基础 Polyfill 库的路径</span>
    root<span class="token operator">:</span> __dirname<span class="token punctuation">,</span>
    write<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token comment">// 这里的插件实现了一个虚拟模块</span>
    <span class="token comment">// Vite 对于 polyfillId 会返回所有 Polyfill 的引入语句</span>
    plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">polyfillsPlugin</span><span class="token punctuation">(</span>imports<span class="token punctuation">,</span> externalSystemJS<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    build<span class="token operator">:</span> <span class="token punctuation">{</span>
      rollupOptions<span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">// 访问 polyfillId</span>
        input<span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token comment">// name 暂可视作\`polyfills-legacy\`</span>
          <span class="token comment">// pofyfillId 为一个虚拟模块，经过插件处理后会拿到所有 Polyfill 的引入语句</span>
          <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token operator">:</span> polyfillId
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 拿到 polyfill 产物 chunk</span>
  <span class="token keyword">const</span> _polyfillChunk <span class="token operator">=</span> <span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">?</span> res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">:</span> res
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token string">&#39;output&#39;</span> <span class="token keyword">in</span> _polyfillChunk<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span>
  <span class="token keyword">const</span> polyfillChunk <span class="token operator">=</span> _polyfillChunk<span class="token punctuation">.</span>output<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
  <span class="token comment">// 后续做两件事情:</span>
  <span class="token comment">// 1. 记录 polyfill chunk 的文件名，方便后续插入到 Modern 模式产物的 HTML 中；</span>
  <span class="token comment">// 2. 在 bundle 对象上手动添加 polyfill 的 chunk，保证产物写到磁盘中</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，你可以理解为这个函数的作用即通过 <code>vite build</code> 对<code>renderChunk</code>中收集到 polyfill 代码进行打包，生成一个单独的 chunk:</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/48ef64e0100a46f38b602b3b9a08560b~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><blockquote><p>需要注意的是，polyfill chunk 中除了包含一些 core-js 和 regenerator-runtime 的相关代码，也包含了 <code>SystemJS</code> 的实现代码，你可以将其理解为 ESM 的加载器，实现了在旧版浏览器下的模块加载能力。</p></blockquote><p>现在我们已经能够拿到 Legacy 模式的产物文件名及 Polyfill Chunk 的文件名，那么就可以通过<code>transformIndexHtml</code>钩子来将这些产物插入到 HTML 的结构中:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">{</span>
  <span class="token function">transformIndexHtml</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1. 插入 Polyfill chunk 对应的 &lt;script nomodule&gt; 标签</span>
    <span class="token comment">// 2. 插入 Legacy 产物入口文件对应的 &lt;script nomodule&gt; 标签</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>OK，Vite 官方的 legacy 插件的主要原理就介绍到这里，为了方便大家理解，讲解的过程中忽略了一些与主流程关联不大的细节，最后给大家补充一下，感兴趣的同学可以继续深入学习:</p>`,18),O=n("li",null,[n("p",null,[s("当插件参数中开启了"),n("code",null,"modernPolyfills"),s("选项时，Vite 也会自动对 Modern 模式的产物进行 Polyfill 收集，并单独打包成"),n("code",null,"polyfills-modern.js"),s("的 chunk，原理和 Legacy 模式下处理 Polyfill 一样。")])],-1),A=n("code",null,"nomodule",-1),M={href:"https://gist.github.com/samthor/64b114e4a4f539915a95b91ffd340acc",target:"_blank",rel:"noopener noreferrer"},E={href:"https://github.com/vitejs/vite/pull/3885",target:"_blank",rel:"noopener noreferrer"},N=t('<h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>恭喜你，学习完了本节的内容！本节主要讲解了 Vite 中语法降级与 Polyfill 相关的内容，涉及的概念比较多，篇幅也比较长，你需要重点掌握以下内容:</p><ol><li><code>@babel/preset-env</code> 的使用。</li><li><code>useBuiltIns</code> 与 <code>transformRuntime</code> 两种 Polyfill 方案的区别。</li><li>Vite 降级插件<code>@vitejs/plugin-legacy</code> 的使用及原理。</li></ol><p>首先我给你复现了线上的低版本浏览器语法报错情景，主要分为 <strong>语法报错</strong> 和 <strong>Polyfill 缺失</strong> 的问题，由此引出了底层的解决方案——使用 <code>Babel 编译工具链</code> 和 JS 运行时基础库来完成。接着我跟你具体介绍了 <code>@babel/preset-env</code>的使用，通过实际的代码案例让你体验了它的语法降级和自动 Polyfill 注入的能力，接着，我又给你介绍了一个更优的 Polyfill 方案——<code>transform-runtime</code>方案，并与<code>@babel/preset-env</code>的<code>useBuiltIns</code>方案进行了对比，分析了<code>transform-runtime</code>方案的两个优化点: <strong>不影响全局空间</strong>和<strong>优化文件体积</strong>。</p><p>在介绍了底层的解决方案之后，我们开始学习在 Vite 中的解决方案——<code>@vitejs/plugin-legacy</code>，分析了它如何让产物能够同时兼容现代浏览器和不支持 <code>type=&quot;module&quot;</code>的低版本浏览器，接着深入地讲解了这个插件的实现原理，你可以发现底层也是通过<code>@babel/preset-env</code>来完成兼容方案的。</p><p>以上就是本节的全部内容，希望对你能有所启发，也欢迎将你的学习心得和困惑打在评论区，我们下一小节再见👋🏻</p>',6);function T(F,H){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("ul",null,[n("li",null,[n("a",r,[s("@babel/polyfill"),e(a)])]),n("li",null,[n("a",d,[s("@babel/runtime"),e(a)])]),n("li",null,[n("a",k,[s("@babel/runtime-corejs2"),e(a)])]),n("li",null,[n("a",m,[s("@babel/runtime-corejs3"),e(a)]),s(" 看似各种运行时库眼花缭乱，其实都是"),v,s("和"),b,s("不同版本的封装罢了("),g,s("是个特例，不包含 core-js 的 Polyfill)。这类库是项目运行时必须要使用到的，因此一定要放到"),y,s("中的"),f,s("中！")])]),h,n("p",null,[s("了解了基本概念后，接下来我们来通过代码实操的方式来学习这些工具，代码我也已经放到了"),n("a",q,[s("仓库"),e(a)]),s("中，你可以对照学习。")]),j,n("p",null,[s("也可以用 "),n("a",_,[s("Browserslist"),e(a)]),s(" 配置语法:")]),P,n("p",null,[s("通过官方的"),x,s("插件， Vite 会分别打包出"),w,s("模式和"),B,s("模式的产物，然后将两种产物插入同一个 HTML 里面，"),I,s("产物被放到 "),V,s("的 script 标签中，而"),L,s("产物则被放到带有 "),n("a",S,[s("nomodule"),e(a)]),s(" 的 script 标签中。浏览器的加载策略如下图所示:")]),C,n("ul",null,[O,n("li",null,[n("p",null,[s("Sarari 10.1 版本不支持 "),A,s("，为此需要单独引入一些补丁代码，"),n("a",M,[s("点击查看"),e(a)]),s("。")])]),n("li",null,[n("p",null,[s('部分低版本 Edge 浏览器虽然支持 type="module"，但不支持动态 import，为此也需要插入一些'),n("a",E,[s("补丁代码"),e(a)]),s("，针对这种情况下降级使用 Legacy 模式的产物。")])])]),N])}const D=p(i,[["render",T],["__file","di15zhang—yufajiangjiyuPolyfill：lianheqianduanbianyigongjulian，xiaomiedibanbenliulanqijianrongwenti.html.vue"]]);export{D as default};
