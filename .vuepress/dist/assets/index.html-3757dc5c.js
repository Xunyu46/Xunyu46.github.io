import{_ as p,r as o,o as i,c,a as n,b as s,e,d as t}from"./app-7b8998c0.js";const l="/assets/image-20230907143017441-c98b86ed.png",u="/assets/image-20230907143130018-a0211ba8.png",d="/assets/image-20230907143558012-d81c49b1.png",r="/assets/image-20230907143807556-e43214d5.png",k="/assets/image-20230907145527992-61dc6aad.png",v="/assets/image-20230907145628326-bd5846f0.png",m="/assets/image-20230907145948152-a7d76fba.png",b="/assets/image-20230907150113678-6c4a9b6a.png",g="/assets/image-20230907150256544-496e99e2.png",h="/assets/image-20230907150904869-5ad52a0f.png",q="/assets/image-20230907151335040-3bc4525c.png",y="/assets/image-20230907151348869-5e463e5e.png",x="/assets/image-20230907152712829-d1e80592.png",f="/assets/image-20230907152806770-8d71e7bf.png",j="/assets/image-20230907152954075-5fa5138f.png",_="/assets/image-20230908110431802-11d92732.png",w="/assets/image-20230908110641372-07fcfa61.png",S="/assets/image-20230908113026231-50821e4c.png",V="/assets/image-20230908113150081-d54a418b.png",C="/assets/image-20230908113224134-995f552b.png",J="/assets/image-20230908114903651-45fbb1fb.png",N="/assets/image-20230908134714783-d2f964eb.png",M="/assets/image-20230908153244507-8cd5fb7c.png",E="/assets/image-20230908153306812-39eb08d4.png",H="/assets/image-20230908153358392-4534db1e.png",O="/assets/image-20230908153627360-3c3ead29.png",T="/assets/image-20230911101328833-96461017.png",P="/assets/image-20230911103035662-d901638a.png",L="/assets/image-20230911103748646-ee4bd77c.png",R="/assets/image-20230911104427648-da4a6a82.png",I="/assets/image-20230911104610282-41f41d83.png",D="/assets/image-20230911104906582-3d754601.png",A="/assets/image-20230913084038161-fd46acd0.png",$="/assets/image-20230913085545231-a323ce87.png",z="/assets/image-20230913090114202-9ac02eaa.png",F="/assets/image-20230913090827233-aebd2e0e.png",B="/assets/image-20230913092035197-7fbcc5fa.png",W={},U=t(`<h1 id="vite-下一代的前端工具链-从入门到项目最佳实践" tabindex="-1"><a class="header-anchor" href="#vite-下一代的前端工具链-从入门到项目最佳实践" aria-hidden="true">#</a> Vite 下一代的前端工具链，从入门到项目最佳实践</h1><p>Vite（法语意为 &quot;快速的&quot;，发音 <code>/vit/</code>，发音同 &quot;veet&quot;）是一种新型前端构建工具，能够显著提升前端开发体验，其最大的特点就是快 ！</p><p>我将从以下几个方面来展开 Vite 的讲解：</p><ul><li>构建工具和打包工具的区别</li><li>Vite 简介</li><li>Vite 的基本使用</li><li>搭建第一个 Vite 项目</li><li>Vite 的依赖预构建</li><li>Vite 开发服务器启动快的原因</li><li>Vite 脚手架创建 Vite 项目</li><li>Vite 中使用插件</li><li>Vite 中 CSS 与 JSON 的处理</li><li>Vite 的常规配置</li><li>Vite 总结</li></ul><blockquote><p>详细查阅，Vite 官方文档：https://cn.vitejs.dev/</p></blockquote><h2 id="一、构建工具和打包工具的区别" tabindex="-1"><a class="header-anchor" href="#一、构建工具和打包工具的区别" aria-hidden="true">#</a> 一、构建工具和打包工具的区别</h2><blockquote><p>在 Vite 之前，我学习过 webpack，我说 webpack 是静态模块打包器。而我这里提到的 Vite 称为前端构建工具。那构建工具和打包工具有什么区别呢？</p><p>要了解什么是构建工具，就得了解构建工具在我项目中具体做了什么工作</p></blockquote><h3 id="_1、前端构建工具负责的工作" tabindex="-1"><a class="header-anchor" href="#_1、前端构建工具负责的工作" aria-hidden="true">#</a> 1、前端构建工具负责的工作</h3><blockquote><p>前端构建工具，在我打包项目时，通常会帮我做一下工作</p></blockquote><table><thead><tr><th>前端构建工作常负责的工作</th><th>说明</th></tr></thead><tbody><tr><td>代码转换</td><td>比如讲 SCSS 编译成 CSS，将 TypeScript 编译成 JS 等。将浏览器不能识别的文件或代码转换成浏览器能识别的文件或代码</td></tr><tr><td>兼容性处理</td><td>利用 babel 将 ES6 转换成 ES5 或 ES3 等</td></tr><tr><td>文件优化</td><td>对代码和图进行压缩，比如压缩 JS、CSS、HTML 代码</td></tr><tr><td>代码分割</td><td>提取多个页面的公共代码，提取首屏不需要执行部分的代码让其异步加载</td></tr><tr><td>自动刷新</td><td>自动监听本地源代码的编化，自动重新构建，刷新浏览器。比如 HMR(热更新)</td></tr><tr><td>……</td><td>……</td></tr></tbody></table><blockquote><p>以上构建工具做的工作，通常是在打包一个项目的过程中需要去做的事情。</p><p>也就是说，在对项目打包时，会先利用构建工具进行构建，然后再根据他们的依赖关系，最终打包成一个或多个 JS 文件。</p></blockquote><h3 id="_2、构建工具终极目标" tabindex="-1"><a class="header-anchor" href="#_2、构建工具终极目标" aria-hidden="true">#</a> 2、构建工具终极目标</h3><blockquote><p>将我在开发环境写的代码，转换成生产环境的代码。（项目生产上线需要考虑的那些因素，在构建工具都会帮我实现）</p></blockquote><h3 id="_3、构建工具与打包工具有什么区别" tabindex="-1"><a class="header-anchor" href="#_3、构建工具与打包工具有什么区别" aria-hidden="true">#</a> 3、构建工具与打包工具有什么区别</h3><blockquote><ul><li>构建工具，更注重的是前端的自动化流程。开发好的代码，通过自动化流程转换成生产环境代码。</li><li>打包工具，更注重打包这一过程，主要包括依赖管理和版本管理</li></ul></blockquote><h3 id="_4、为什么-webpack-称打包工具-而-vite-称构建工具" tabindex="-1"><a class="header-anchor" href="#_4、为什么-webpack-称打包工具-而-vite-称构建工具" aria-hidden="true">#</a> 4、为什么 Webpack 称打包工具，而 Vite 称构建工具</h3><blockquote><ul><li>Webpack 在打包过程中，会调用构建工具完成构建工作，但是 Webpack 更注重打包这一过程。他的构建工作，主要依赖第三方插件来完成，所以我需要通过配置插件来实现相关的构建工作。</li><li>Vite 更侧重与项目的构建，前端自动化流程。在用 Vite 发构建项目时，也会参与打包工作，但是他更注重构建工作，大部分千代拿项目在打包上线过程中需要完成的构建工作，Vite 都帮我内置好了，不需要我再下载差价和配置来完成。</li></ul></blockquote><h2 id="二、vite-简介" tabindex="-1"><a class="header-anchor" href="#二、vite-简介" aria-hidden="true">#</a> 二、Vite 简介</h2><blockquote><ul><li><p>深入浅出 Vite 的诞生</p></li><li><p>为什么选 Vite</p></li><li><p>Vite 的优势</p></li><li><p>Vite 的两大组成部分等</p></li></ul></blockquote><h3 id="_1、vite-的诞生" tabindex="-1"><a class="header-anchor" href="#_1、vite-的诞生" aria-hidden="true">#</a> 1、Vite 的诞生</h3><blockquote><p>Vite 是尤雨溪随 Vue3 正式版(2020 年 9 月 18 日)一并发布的一种新型的前端构建工具。</p><p>起初，大家会认为 Vite 是为 Vue3 服务的这么一款工具。但其实他不是这样一款工具，在 Vite 发布之后，很快，他就经历了一次迭代，发布了 2.0 版本。</p><p>至从 2.0 版本发布后，他就是一个完全独立于前端框架的这样一个构建工具，不再只服务于 Vue 了。</p></blockquote><h3 id="_2、为什么选-vite" tabindex="-1"><a class="header-anchor" href="#_2、为什么选-vite" aria-hidden="true">#</a> 2、为什么选 Vite</h3><blockquote><p>随着前端的发展，我开始构建越来越大型的应用时，需要处理的 JavaScript 代码量也呈指数级增长。包含数千个模块的大型项目相当普通。</p><p>基于 JavaScripe 开发的工具就会开始遇到性能瓶颈：通常需要很长时间（甚至是几分钟！）才能启动开发服务器，及时使用模块热替换（HMR）,文件修改厚的效果也需要几秒钟才能再浏览器中反映出来。如此循环往复，迟钝的反馈会极大地影响开发者的开发效率和幸福感。</p><p>以下是常见的打包构建工具，都是采用 JS 编写的</p><ul><li>Webpack</li><li>roolup</li><li>parcel</li><li>gulp</li></ul><p>这些工具，大型项目中都存在缓慢的服务启动和缓慢的更新问题。而 Vite 就解决了上面这个问题，他在启动应用时的速度可以说是相当的快</p></blockquote><h3 id="_3、vite-的优势" tabindex="-1"><a class="header-anchor" href="#_3、vite-的优势" aria-hidden="true">#</a> 3、Vite 的优势</h3><blockquote><p>Vite 相比其他的打包工具，具有以下优势</p><ul><li>上手非常简单</li><li>开发效率高</li><li>社区成本低（兼容 rollup 插件）</li><li>没有复杂晦涩的配置</li><li>Vite 有自身的插件系统</li></ul></blockquote><h3 id="_4、vite-的两大组成部分" tabindex="-1"><a class="header-anchor" href="#_4、vite-的两大组成部分" aria-hidden="true">#</a> 4、Vite 的两大组成部分</h3><blockquote><p>Vite 针对开发环境和生产环境下的打包构建模式完全不一样，他主要有以下两个部分组成：</p><ul><li>一个开发服务，服务于开发环境，基于原生 ES 模块 esbuild 依赖项构建，同时提供了丰富的内建功能，如极快的模块热替换（HMR）</li><li>一套构建指令，服务于生产环境，基于 rollup 完成打包，并且是预配置的，可输出用于生产环境的高度优化过的静态资源。</li></ul><p>Vite 这样做的主要目的是为了在开发环境构建项目时能获得极快的体验。</p></blockquote><h2 id="三、搭建第一个-vite-项目" tabindex="-1"><a class="header-anchor" href="#三、搭建第一个-vite-项目" aria-hidden="true">#</a> 三、搭建第一个 Vite 项目</h2><blockquote><p>在使用 Vite 前，需要先安装 Node，同时了解 npm 的用法。</p><p>Vite 需要的 Node.js 版本为<code>14.18+</code>然而，有些模板需要依赖更高的 Node 版本才能运行，当你的包管理器发出警告时，请注意升级你的 Node 版本</p></blockquote><h3 id="_1、项目初始化" tabindex="-1"><a class="header-anchor" href="#_1、项目初始化" aria-hidden="true">#</a> 1、项目初始化</h3><blockquote><p>创建名为<code>vite-demo</code>的文件夹作为当前项目的根目录</p></blockquote><p>在当前目录下，执行以下命令初始化<code>package.json</code>文件。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> init <span class="token parameter variable">-y</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2、安装-vite" tabindex="-1"><a class="header-anchor" href="#_2、安装-vite" aria-hidden="true">#</a> 2、安装 Vite</h3><p>执行以下命令，安装 Vite</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i vite <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3、创建项目" tabindex="-1"><a class="header-anchor" href="#_3、创建项目" aria-hidden="true">#</a> 3、创建项目</h3><p>根据以下目录结构，创建项目</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>vite-demo
├─ index.html    // 项目打包入口文件
├─ main.js
├─ basic.js
├─ package-lock.json
└─ package.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>vite-demo/index.html</code>文件</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!--ES模块化方式引入main.js--&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./main.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Vite 默认以当前项目根目录下的<code>index.html</code>文件作为打包的入口文件，并且他是基于原生 ES 模块提供服务。所以在<code>index.html</code>文件中要通过 ES 模块方式加载 JS 文件</p></blockquote><ul><li><code>vite-demo/main.js</code>文件</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导入 basic.js文件中变量</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> username<span class="token punctuation">,</span> age <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./basic.js&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> sex <span class="token operator">=</span> <span class="token string">&quot;男&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> hobbies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;唱歌&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;跑步&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;音乐&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>username<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">性别</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>sex<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,今年</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">岁了，他喜欢</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>hobbies<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>vite-demo/basic.js</code>文件</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> username <span class="token operator">=</span> <span class="token string">&quot;寻鱼&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、启动开发服务" tabindex="-1"><a class="header-anchor" href="#_4、启动开发服务" aria-hidden="true">#</a> 4、启动开发服务</h3><p>在当前项目根目录下执行以下命令，启动开发服务</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx vite // 相当于开发环境下打包，不过Vite并不会对源码打包处理
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行后，并没有当前根目录下新建<code>dist</code>目录，而是正在命令终端显示以下代码</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>  ➜  Local:   http://localhost:5173/
  ➜  Network: use <span class="token parameter variable">--host</span> to expose
  ➜  press h to sho
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在浏览器中访问上面<code>Local</code>字段对应的<code>http://localhost:5173/</code>地址，然后在当前地址下打开浏览器的<code>Console</code>控制面板。</p><p>看到如下输出结果，说明服务启动成功。</p></blockquote><p><img src="`+l+'" alt="image-20230907143017441"></p><p>然后，我切换到<code>Network</code>面板，如下图：</p><p><img src="'+u+`" alt="image-20230907143130018"></p><blockquote><p>通过上图，可以看到<code>main.js</code>和<code>basic.js</code>是通过浏览器直接发请求获取的，并没有做相关的打包工作。</p></blockquote><h3 id="_5、总结-vite-开发环境下打包特点" tabindex="-1"><a class="header-anchor" href="#_5、总结-vite-开发环境下打包特点" aria-hidden="true">#</a> 5、总结：Vite 开发环境下打包特点</h3><ul><li>开发环境下，Vite 并<strong>没有对<code>源码</code>执行打包工作</strong>，而是直接启动一个服务器加载当前根目录下的<code>index.html</code>文件（默认情况下，<code>index.html</code>文件为打包的入口文件）</li><li>然后利用浏览器支持 ES 模块化加载这一特点，直接加载<code>index.html</code>里面的 JS 文件，然后顺着依赖加载其它的 JS 文件。</li></ul><h3 id="_6、生产环境下打包" tabindex="-1"><a class="header-anchor" href="#_6、生产环境下打包" aria-hidden="true">#</a> 6、生产环境下打包</h3><p>执行以下命令，来完成生成环境下打包工作</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx vite build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行后，会在当前目录下生成<code>dist</code>文件夹，<code>dist</code>目录结构如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>dist
├─ assets   <span class="token comment">// 打包后的资源放在assets目录下</span>
│  └─ index<span class="token operator">-</span>8e5222de<span class="token punctuation">.</span>js   <span class="token comment">// main.js打包后生成的js文件</span>
└─ index<span class="token punctuation">.</span>html <span class="token comment">// 项目入口文件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>可以看到，打包后，<code>main.js</code>及相关的依赖全部被打包生成了一个 JS 文件。</p></blockquote><p>查看打包后的<code>index.html</code>文件，内容如下：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">crossorigin</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/assets/index-8e5222de.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>可以看到，打包后依然采用的是 ES 模块化来加载打包后生成的 JS 文件。</p></blockquote><h3 id="_7、预览打包后项目" tabindex="-1"><a class="header-anchor" href="#_7、预览打包后项目" aria-hidden="true">#</a> 7、预览打包后项目</h3><p>如果我直接在 VSCode 中打开<code>dist</code>目录下的<code>index.html</code>页面，在浏览器控制台会抛出以下错误</p><p><img src="`+d+`" alt="image-20230907143558012"></p><p>因为，打包后生成的<code>dist</code>目录，项目默认以 dist 目录作为项目的根目录，而我直接在 VSCode 打开<code>dist</code>目录下的<code>index.html</code>文件，是以<code>vite-demo</code>作为项目的根目录。</p><blockquote><p>所以，我可以在<code>dist</code>目录下打开 VSCode，然后再用 VSCode 打开<code>index.html</code>文件，项目就可以正常跑起来。</p></blockquote><p>不过 Vite 给我内置了以下命令，我执行以下命令，就相当以<code>dist</code>目录为项目根目录开启一个服务。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx vite preview   <span class="token comment"># 预览打包后的项目</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行后，显示以下代码</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>➜  Local:   http://localhost:4173/
➜  Network: use <span class="token parameter variable">--host</span> to expose
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在浏览器中打开 Local 字段后面对应的<code>http://localhost:4173/</code>地址，然后在浏览器的 Console 面板，可以看到以下输出结果。</p><p><img src="`+r+`" alt="image-20230907143807556"></p><h3 id="_8、注意事项" tabindex="-1"><a class="header-anchor" href="#_8、注意事项" aria-hidden="true">#</a> 8、注意事项</h3><p>如果入口文件<code>index.html</code>中有加载了多个 JS，则打包后也只会生成一个 JS 文件</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- index.html --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./main.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>index.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>a.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生产环境下打包后，生成的<code>dist</code>目录结构和<code>index.html</code>文件如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>dist
├─ assets
│  └─ index<span class="token operator">-</span>453aba04<span class="token punctuation">.</span>js
└─ index<span class="token punctuation">.</span>html
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>index<span class="token punctuation">.</span>html<span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">&quot;module&quot;</span> crossorigin src<span class="token operator">=</span><span class="token string">&quot;/assets/index-453aba04.js&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9、总结-vite-开发环境下打包特点" tabindex="-1"><a class="header-anchor" href="#_9、总结-vite-开发环境下打包特点" aria-hidden="true">#</a> 9、总结：Vite 开发环境下打包特点</h3><ul><li>在生产环境下，我可以执行<code>npx vite build</code>命令来完打包工作，执行<code>npx vite preview</code>命令来启动打包后的项目。</li><li>生产环境下也是以<code>index.html</code>作为入口文件来执行打包，会把入口文件中加载的 JS 及相关依赖打包成一个 JS 文件，然后在<code>index.html</code>文件中，采用 ES 模块化方式来加载打包后生成的 JS 文件。</li><li>如果<code>index.html</code>中通过模块化的方式加载了多个 JS，则最终都会打包到一个 JS 文件中</li></ul><h3 id="_10、配置scripts命令脚本" tabindex="-1"><a class="header-anchor" href="#_10、配置scripts命令脚本" aria-hidden="true">#</a> 10、配置<code>scripts</code>命令脚本</h3><p>我可以把 Vite 的以下三个常用命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx vite  <span class="token comment"># 启动开发服务</span>
npx vite build <span class="token comment"># 执行生产环境打包</span>
npx vite preview <span class="token comment">#预览生产环境打包后的项目</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>package.json</code>文件的<code>&quot;scripts&quot;</code>字段中配置，具体配置如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span><span class="token string">&quot;vite&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span><span class="token string">&quot;vite build&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;preview&quot;</span><span class="token operator">:</span><span class="token string">&quot;vite preview&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置好后，我就可以通过执行以下命令，来完成 Vite 对应的工作。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> run dev    <span class="token comment"># 启动开发服务</span>
<span class="token function">npm</span> run build   <span class="token comment"># 执行生产环境打包</span>
<span class="token function">npm</span> run preview  <span class="token comment">#预览生产环境打包后的项目</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11、总结" tabindex="-1"><a class="header-anchor" href="#_11、总结" aria-hidden="true">#</a> 11、总结</h3><p>本小节重点掌握以下内容：</p><ul><li>Vite 项目创建流程如下</li><li>开发环境与生产环境下打包特点</li></ul><p><strong>Vite 项目创建流程如下</strong></p><ul><li><code>npm init -y</code>初始化<code>package.json</code>文件，记录当前项目的相关信息</li><li>执行<code>npm i vite -D</code> 安装 Vite 到开发依赖(<code>-D</code>)</li><li>在当前项目根目录下创建<code>index.html</code>文件，作为项目打包的入口文件</li><li>执行以下命令启动开发服务或生产环境打包</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx vite  <span class="token comment"># 启动开发服务</span>
npx vite build <span class="token comment"># 执行生产环境打包</span>
npx vite preview <span class="token comment">#预览生产环境打包后的项目</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>也可以在<code>package.json</code>文件的<code>&quot;scripts&quot;</code>字段中添加如下配置</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span><span class="token string">&quot;vite&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span><span class="token string">&quot;vite build&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;preview&quot;</span><span class="token operator">:</span><span class="token string">&quot;vite preview&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>然后执行如下 npm 命令启动开发服务或生产环境打包</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> run dev    <span class="token comment"># 启动开发服务</span>
<span class="token function">npm</span> run build   <span class="token comment"># 执行生产环境打包</span>
<span class="token function">npm</span> run preview  <span class="token comment"># 预览生产环境打包后的项目</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>开发环境与生产环境下打包特点：</p><p><strong>①、开发环境</strong></p><ul><li>Vite 并<strong>没有对<code>源码</code>执行打包工作</strong>，而是直接启动一个服务器加载当前根目录下的<code>index.html</code>文件（默认情况下，<code>index.html</code>文件为打包的入口文件）</li><li>然后利用浏览器支持 ES 模块化加载这一特点，直接加载<code>index.html</code>里面的 JS 文件，然后顺着依赖加载其它的 JS 文件</li></ul><p><strong>②、生产环境</strong></p><ul><li>在生产环境下，我可以执行<code>npx vite build</code>命令来完打包工作，执行<code>npx vite preview</code>命令来启动打包后的项目。</li><li>生产环境下也是以<code>index.html</code>作为入口文件来执行打包，会把入口文件中加载的 JS 及相关依赖打包成一个 JS 文件，然后在<code>index.html</code>文件中，采用 ES 模块化方式来加载打包后生成的 JS 文件。</li><li>如果<code>index.html</code>中通过模块化的方式加载了多个 JS，则最终都会打包到一个 JS 文件中</li></ul><h2 id="四、vite-的依赖预构建" tabindex="-1"><a class="header-anchor" href="#四、vite-的依赖预构建" aria-hidden="true">#</a> 四、Vite 的依赖预构建</h2><p>当你在开发环境下首次启动 <code>vite</code> 时，Vite 在本地加载你的站点之前<strong>预构建了项目依赖</strong>，本质就是做了以下两件事：</p><ul><li>针对依赖使用<code>esbuild</code>打包处理</li><li>针对打包后的依赖文件做缓存</li></ul>`,110),G={href:"https://cn.vitejs.dev/guide/dep-pre-bundling.html#dependency-pre-bundling",target:"_blank",rel:"noopener noreferrer"},K=t(`<p><strong>你现在可能有以下 4 个疑问：</strong></p><ul><li>何为依赖 ？</li><li>为什么依赖需要打包 ？</li><li>为什么采用<code>esbuild</code>来打包，而不是别的工具呢 ？</li><li>如何对依赖做缓存 ？</li></ul><blockquote><p>针对这 4 个问题，以下将给出明确答案</p></blockquote><h3 id="_1、区分依赖与源码" tabindex="-1"><a class="header-anchor" href="#_1、区分依赖与源码" aria-hidden="true">#</a> 1、区分依赖与源码</h3><p>Vite 通过在一开始将应用中的模块区分为 <strong>依赖</strong> 和 <strong>源码</strong> 两类，改进了开发服务器启动时间。</p><ul><li><strong>依赖模块：</strong> 大多为在开发时不会变动的纯 JavaScript，这里通常指引用的第三方模块。</li><li><strong>源码模块：</strong> 通常指由我自己写的那部分代码，如自已写 CSS 样式、Vue 组件、JS 代码。</li></ul><p>在开发环境下，Vite 并<strong>不会</strong>对<strong>源码做打包工作</strong>，但对于依赖（第三方模块）会做相关的打包工作。</p><blockquote><p>通过前面学习，我知道源码不打包主要是为了更快的开发服务启动，那依赖为什么又要做打包处理呢 ？</p></blockquote><h3 id="_2、依赖打包原因" tabindex="-1"><a class="header-anchor" href="#_2、依赖打包原因" aria-hidden="true">#</a> 2、依赖打包原因</h3><p>依赖做打包处理主要有两个目的：</p><ul><li>代码兼容性</li><li>更好的性能</li></ul><h3 id="_2-1、代码兼容性" tabindex="-1"><a class="header-anchor" href="#_2-1、代码兼容性" aria-hidden="true">#</a> 2.1、代码兼容性</h3><p>在开发阶段中，Vite 的开发服务器将所有代码视为原生 ES 模块，但以下两种情况，必须处理</p><ul><li>针对开发中用到的第三方模块（依赖），采用如下 import 语法导入模块时，浏览器是不能识别的，如下：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&quot;axios&quot;</span><span class="token punctuation">;</span> <span class="token comment">// ES 模块   浏览器可不知道要到node_modules目录下去找axios</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>第三方模块所使用的模块系统不一定是 ES 模块的规范，可能是<strong>CommonJS</strong>或 <strong>UMD</strong> 等，Vite 必须先将以 CommonJS 或 UMD 形式提供的依赖项转换为 ES 模块。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// node.js 导出模块</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 导入模块</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./b.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2、更好的性能" tabindex="-1"><a class="header-anchor" href="#_2-2、更好的性能" aria-hidden="true">#</a> 2.2、更好的性能</h3><ul><li>为了提高后续页面的加载性能，Vite 将那些具有许多内部模块的 ESM 依赖项转换为单个模块。</li><li>有些包将它们的 ES 模块构建为许多单独的文件，彼此导入。例如，<code>lodash-es</code> 有超过 300 个内置模块！当我执行 <code>import { debounce } from &#39;lodash-es&#39;</code> 时，浏览器同时发出 300 多个 HTTP 请求！即使服务器能够轻松处理它们，但大量请求会导致浏览器端的网络拥塞，使页面加载变得明显缓慢。</li><li>通过将 <code>lodash-es</code> 预构建成单个模块，现在我只需要一个 HTTP 请求！</li></ul><blockquote><p><code>lodash-es</code>是使用 ES6 的模块语法编写的一个高性能的 JavaScript 实用工具库。</p></blockquote><h3 id="_3、依赖打包-代码演示" tabindex="-1"><a class="header-anchor" href="#_3、依赖打包-代码演示" aria-hidden="true">#</a> 3、依赖打包：代码演示</h3><ul><li>①、创建项目目录结构</li></ul><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>vite-demo
├─ index.html
├─ index.js
└─ main.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>vite-demo/index.html</code>文件内容如下：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./main.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>vite-demo/main.js</code>和<code>vite-demo/index.js</code>文件内容如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// main.js内容</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> assign <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;lodash-es&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> username <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./index.js&quot;</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// index.js内容</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> username <span class="token operator">=</span> <span class="token string">&quot;寻鱼&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>②、安装<code>lodash-es</code>包</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i lodash-es  <span class="token comment"># 下载lodash-es包</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看<code>node_modules\\lodash-es\\lodash.js</code>文件，发现其内部通过<code>import</code>的方式引入了几百个其它模块</p><p><img src="`+k+`" alt="image-20230907145527992"></p><p>使用以下语句加载<code>lodash-es</code>时，本质加引入的就是<code>lodash.js</code>文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> assign <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;lodash-es&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果不对<code>lodash.js</code>文件打包处理，那浏览器在加载时需要一次性发送几百个请求来获取。但实际上，最后<code>lodash.js</code>文件被打包成了一个文件。</p><ul><li>③、执行以下命令，启动<code>Vite</code>开发服务</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx vite  <span class="token comment"># 启动Vite开发服务</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来，在浏览器中打开服务地址，打开浏览器的 Console 面板，可以看到正确的输出了以下内容</p><p><img src="`+v+'" alt="image-20230907145628326"></p><p>然后去找到 Network 面板下，看到如下内容</p><p><img src="'+m+'" alt="image-20230907145948152"></p><h3 id="_4、为什么采用-esbuild-依赖预构建" tabindex="-1"><a class="header-anchor" href="#_4、为什么采用-esbuild-依赖预构建" aria-hidden="true">#</a> 4、为什么采用 esbuild 依赖预构建</h3><p><code>esbuild</code> 使用 Go 编写，并且比以 JavaScript 编写的打包器（如：WebPack 和 Rollup）预构建依赖快 10-100 倍。所以 Vite 采用<code>esbuild</code>打包速度会非常快。</p>',42),Q={href:"https://esbuild.github.io/",target:"_blank",rel:"noopener noreferrer"},X=t('<p><img src="'+b+'" alt="image-20230907150113678"></p><h3 id="_5、文件缓存与浏览器缓存" tabindex="-1"><a class="header-anchor" href="#_5、文件缓存与浏览器缓存" aria-hidden="true">#</a> 5、文件缓存与浏览器缓存</h3><p>Vite 对打包后的依赖文件做了：<strong>文件缓存</strong>和<strong>浏览器缓存</strong></p><h3 id="_5-1、文件缓存" tabindex="-1"><a class="header-anchor" href="#_5-1、文件缓存" aria-hidden="true">#</a> 5.1、文件缓存</h3><ul><li>Vite 将预构建的依赖项缓存到 <code>node_modules/.vite</code> 中。也就是把依赖打包后生成的 JS 文件，保存在当前项目的<code>node_modules/.vite</code>目录下缓存起来。</li><li>在后续启动开发服务时，如果<code>node_modules/.vite</code>下能找到对应的缓存文件，则直接使用，不会再进行依赖预构建。</li><li>针对上面“依赖打包原因”中提到的案例，我发现打包后，在<code>node_modules/.vite</code>下多了<code>lodash-es.js</code>和<code>lodash-es.js.map</code>两个 JS 文件，本质就是将依赖打包后文件缓存下来</li></ul><p><img src="'+g+'" alt="image-20230907150256544"></p><h3 id="_5-2、浏览器缓存" tabindex="-1"><a class="header-anchor" href="#_5-2、浏览器缓存" aria-hidden="true">#</a> 5.2、浏览器缓存</h3><ul><li>对于已预构建的依赖请求使用 HTTP 头 <code>max-age=31536000, immutable</code> 进行强缓存，以提高开发期间页面重新加载的性能。</li><li>一旦被缓存，这些请求将永远不会再次访问开发服务器，而是直接从缓存中读取。</li><li>针对上面“依赖打包原因”中提到的案例，我在浏览器的<code>Network</code>面板中可以看到，浏览器对<code>lodash.js</code>文件做了强缓存处理。</li></ul><p><img src="'+h+'" alt="image-20230907150904869"></p><h2 id="五、vite-开发服务器启动快的原因" tabindex="-1"><a class="header-anchor" href="#五、vite-开发服务器启动快的原因" aria-hidden="true">#</a> 五、Vite 开发服务器启动快的原因</h2><p>Vite 在开发环境下之所以能快速的启动服务，除了前面讲到的以下几个原因外</p><ul><li>Vite 以原生 ESM 方式提供源码（源码不打包），让浏览器接管了打包程序的部分工作</li><li>使用<code>esbuild</code> 预构建依赖和加快构建速度</li><li>对预构建的依赖做文件缓存与浏览器缓存</li></ul><p><strong>还有以下 2 个重要的原因：</strong></p><ul><li>启动应用时按需提供代码</li><li>内置了一套原生 ESM 的模块热替换（HMR）</li></ul><h3 id="_1、启动应用时按需提供代码" tabindex="-1"><a class="header-anchor" href="#_1、启动应用时按需提供代码" aria-hidden="true">#</a> 1、启动应用时按需提供代码</h3><p>为什么传统的打包工具在应用启动<strong>很慢</strong>，而 Vite 却可以做到<strong>极快</strong>的启动应用。</p><p>这就需要我了解传统工具在开发环境下的服务启动流程和 Vite 在开发环境下的服务启动流程。</p><h3 id="_1-1、传统工具打包的整个流程图" tabindex="-1"><a class="header-anchor" href="#_1-1、传统工具打包的整个流程图" aria-hidden="true">#</a> 1.1、传统工具打包的整个流程图</h3><p><img src="'+q+'" alt="image-20230907151335040"></p><p>注：</p><p>这幅图清淅的描述了 Webpack 的整个打包过程，他是根据<code>entry</code>打包的入口点构建一个 <strong>依赖图</strong>，然后将你项目中所需的每一个模块打包成一个或多个模块，最后再启动服器。</p><p>如果项目比较大，打包所需要的时间就会很长，这就是为什么传统打包工具在启动服务时会非常慢的原因。</p><blockquote><p>同时，因为项目都是基于打包器启动，重建整个包的效率很低，每次更新相当于做了一次打包工作。</p></blockquote><h3 id="_1-2、vite-构建项目时的-构建流程图" tabindex="-1"><a class="header-anchor" href="#_1-2、vite-构建项目时的-构建流程图" aria-hidden="true">#</a> 1.2、Vite 构建项目时的，构建流程图</h3><p><img src="'+y+`" alt="image-20230907151348869"></p><p>注：</p><p>Vite 在开发环境下构建项目时，先<code>esbuild</code>依赖预构建，然后启动服务器，加载<code>index.html</code>项目入口文件，根据访问的路由<strong>按需加载对应的模块</strong>，那些不在当前路由内的模块，并不会去加载。</p><h3 id="_2、模块热替换" tabindex="-1"><a class="header-anchor" href="#_2、模块热替换" aria-hidden="true">#</a> 2、模块热替换</h3><p>Vite 提供了一套原生 ESM 的 HMR API。具有 HMR 功能的框架可以利用该 API 提供即时、准确的更新，而无需重新加载页面或清除应用程序状态。</p><p>当我使用 Vite 脚手架创建应用程序时，所选模板已经为你预先配置了这些</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> create vite@latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3、总结-vite-开发服务启动过程" tabindex="-1"><a class="header-anchor" href="#_3、总结-vite-开发服务启动过程" aria-hidden="true">#</a> 3、总结：Vite 开发服务启动过程</h3><p>在开发环境下采用 Vite 构建项目时</p><ul><li>首先，Vite 在本地加载你的站点之前预构建了项目依赖（采用打包速度极快的<code>esbuild</code>完成依赖预构建）</li><li>其次，将依赖预构建的生成的模块保存在<code>node_modules\\vite</code>目录下<strong>缓存</strong>起来</li><li>接着，开启一个开发服务器，用来加载当前项目，并且针对依赖预构建生成的模块做浏览器强缓存。</li></ul><blockquote><p>服务是基于原生 ES 模块，所以在开发环境下 Vite 并不会对<strong>开发的源代码</strong>进行打包工作，这部分工作交给了浏览器来处理。</p></blockquote><ul><li>在访问页面时，只根据访问的路由按需加载对应的模块，那些不在当前路由内的模块，并不会去加载。</li></ul><p>通过以上优化，Vite 解决了传统打包工具存在缓慢的服务启和缓慢的更新问题两个问题</p><h2 id="六、vite-脚手架创建-vite-项目" tabindex="-1"><a class="header-anchor" href="#六、vite-脚手架创建-vite-项目" aria-hidden="true">#</a> 六、Vite 脚手架创建 Vite 项目</h2><p>Vite 为了方便我创建 Vite 项目，给我提供了更快捷的方式，可以通过 Vite 脚手架创建 Vite 项目。</p><h3 id="_1、创建-vite-项目" tabindex="-1"><a class="header-anchor" href="#_1、创建-vite-项目" aria-hidden="true">#</a> 1、创建 Vite 项目</h3><p>执行以下命令，就可以创建一个简单版的 Vite 项目</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> create vite@latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行命令后，会出现以下代码</p><p><img src="`+x+'" alt="image-20230907152712829"></p><p>这里，我以演示 JS 为主，选择第一个<code>Vanilla</code>进入后，再选择 JS 就可以了。（大家，也可以根据自己的需要来选择）</p><p><img src="'+f+'" alt="image-20230907152806770"></p><p>回车后，会出现以代码</p><p><img src="'+j+`" alt="image-20230907152954075"></p><p>注：</p><p>按顺序执行以上三个命令，就可以启动开发服务，因为：</p><ul><li>新建的<code>vite-project</code>文件夹为项目的根目录，需要执行<code>cd vite-project</code>进入根目录下</li><li>其次，并没有安装项目相关的依赖包，需要在根目录下执行<code>npm install</code>安装<code>package.json</code>中提供的开发和生产依赖包。</li><li>最后，执行<code>npm run dev</code>启动开发服务。</li></ul><p>查看下当前项目目录下的<code>package.json</code>文件，内容如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code> <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite build&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;preview&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite preview&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;devDependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;vite&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^4.3.0&quot;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>所以，我可以通过<code>npm run dev</code>来启动开发服务</p></blockquote><h3 id="_2、目录结构分析" tabindex="-1"><a class="header-anchor" href="#_2、目录结构分析" aria-hidden="true">#</a> 2、目录结构分析</h3><p>以下是通过<code>npm create vite@latest</code>命令创建后，生成的目录结构。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>vite<span class="token operator">-</span>project   <span class="token comment">//  项目目录（项目名称）</span>
└─ ├─ counter<span class="token punctuation">.</span>js
   ├─ index<span class="token punctuation">.</span>html  <span class="token comment">// 项目打包的入口文件</span>
   ├─ javascript<span class="token punctuation">.</span>svg
   ├─ <span class="token punctuation">.</span>gitignore  <span class="token comment">// git在提交时，忽略的文件</span>
   ├─ main<span class="token punctuation">.</span>js  <span class="token comment">// index.html文件用到的main.js文件</span>
   ├─ <span class="token keyword">package</span><span class="token operator">-</span>lock<span class="token punctuation">.</span>json
   ├─ <span class="token keyword">package</span><span class="token punctuation">.</span>json
   ├─ <span class="token keyword">public</span>  <span class="token comment">// 不会被起其它文件引用的资源放在这个目录</span>
   │  └─ vite<span class="token punctuation">.</span>svg  <span class="token comment">// 浏览网页时，出现在地址栏上方的小图奈</span>
   └─ style<span class="token punctuation">.</span>css
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、public-目录" tabindex="-1"><a class="header-anchor" href="#_3、public-目录" aria-hidden="true">#</a> 3、public 目录</h3><p>如果你有下列这些资源，应当放在 public 目录下</p><ul><li><p>不会被源码引用（例如 <code>robots.txt</code>）</p><ul><li><blockquote><p>robots.txt 是一种位于网站根目录下的文本文件，其作用是告诉 Web 爬虫（如 Googlebot）哪些页面可以被爬取，哪些页面不能被爬取。这个文件可以包含特定搜索引擎的爬虫指令（如网站地图位置、爬虫访问频率等），也可以告诉爬虫哪些页面不能被访问，以保护网站的内容和隐私。</p></blockquote></li></ul></li><li><p>必须保持原有文件名（没有经过 hash，比如浏览器右上角显示公司 logo 的小图标）</p></li><li><p>... 或者你压根不想引入该资源，只是想得到其 URL</p></li></ul><p>public 目录下的资源，在开发时能直接通过<code>/</code>根跟径访问，并且打包时会被完整复制到目标目录的根目录下（如：dist 目录）</p><blockquote><p><strong>注意：</strong><code>public</code> 中的资源不应该被 JavaScript 文件引用</p></blockquote><h3 id="_4、代码演示" tabindex="-1"><a class="header-anchor" href="#_4、代码演示" aria-hidden="true">#</a> 4、代码演示</h3><p>在上面目录结构的基础上，做以下调整</p><ul><li><p>复制 2 张图片<code>a.jpg</code>和<code>b.jpg</code>到<code>vite-projec/public</code>目录下</p></li><li><p>加上 public 目录下原本的<code>vite.svg</code>图片，此时 public 目录下有三张图片。</p></li><li><p>修改<code>index.html</code>文件内容如下</p></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!--index.html--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/main.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--加载图片，以/根路径访问a.jpg，就是在访问public文件中图片--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/a.jpg<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>修改<code>main.js</code>文件内容下</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导入图片  imgurl为转换后的图片地址</span>
<span class="token comment">// 以 / 根路径访问b.jpg，就是在访问public文件中图片</span>
<span class="token keyword">import</span> imgurl <span class="token keyword">from</span> <span class="token string">&quot;/b.jpg&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 创建img实例</span>
<span class="token keyword">const</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
img<span class="token punctuation">.</span>src <span class="token operator">=</span> imgurl<span class="token punctuation">;</span>
<span class="token comment">// 将创建好的图片添加到页面</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：</p><p>实际开发<code>public</code>中的资源不应该被 JavaScript 文件引用，以上只是为了给大家演示，实际开发不建议这样使用。</p><h3 id="_4-1、启动开发服务" tabindex="-1"><a class="header-anchor" href="#_4-1、启动开发服务" aria-hidden="true">#</a> 4.1、启动开发服务</h3><p>我执行<code>npm run dev</code>命令后，在浏览器中成功访问到了这两张图片。</p><p>图片访问地址：<code>http://localhost:5173/a.jpg</code> 和 <code>http://localhost:5173/b.jpg</code></p><p><img src="`+_+'" alt="image-20230908110431802"></p><h3 id="_4-2、生产环境打包" tabindex="-1"><a class="header-anchor" href="#_4-2、生产环境打包" aria-hidden="true">#</a> 4.2、生产环境打包</h3><ul><li>执行<code>npm run build</code>命令后，<code>a.jpg</code>和<code>b.jpg</code>、<code>vite.svg</code>被原封不动的复制到了生成的<code>dist</code>根目录下。</li><li>不管里面的图片是否有被外界引用，都会直接复制到打包后的根目下，</li></ul><blockquote><p>如下：</p></blockquote><p><img src="'+w+`" alt="image-20230908110641372"></p><blockquote><p>执行<code>npm run preview</code>时，可以在浏览器中成功访问到这两张图片</p></blockquote><h3 id="_5、vite-脚手架作用" tabindex="-1"><a class="header-anchor" href="#_5、vite-脚手架作用" aria-hidden="true">#</a> 5、Vite 脚手架作用</h3><p><strong>脚手架：</strong> 帮我把开发项目时需要做的一些常规项给做了，而提高我的开发效率。如：</p><ul><li>创建一个简单的项目示例</li><li>配置项目启动脚本命令</li><li>配置项目需要用到的开发与生产依赖包</li><li>.....</li></ul><h3 id="_6、总结" tabindex="-1"><a class="header-anchor" href="#_6、总结" aria-hidden="true">#</a> 6、总结</h3><p>本小节重点掌握以下内容</p><ul><li>如何利用 Vite 脚手架创建 Vite 项目</li><li>项目中的 public 目录的作用和注意事项</li><li>脚手架的作用</li></ul><h2 id="七、vite-中使用插件" tabindex="-1"><a class="header-anchor" href="#七、vite-中使用插件" aria-hidden="true">#</a> 七、Vite 中使用插件</h2><p>本小节我来学习在 Vite 中如何使用插件，利用插件处理 JS 兼容性问题和识别<code>.vue</code>结尾的文件。</p><h3 id="_1、js-兼容型处理" tabindex="-1"><a class="header-anchor" href="#_1、js-兼容型处理" aria-hidden="true">#</a> 1、JS 兼容型处理</h3><p>Vite 在生产环境下打包时，默认是不会处理 JS 的兼容型问题，需要借助 Vite 的<code>@vitejs/plugin-legacy</code>插件来实现。</p><h3 id="_1-1、创建项目" tabindex="-1"><a class="header-anchor" href="#_1-1、创建项目" aria-hidden="true">#</a> 1.1、创建项目</h3><ul><li>执行<code>npm create vite@latest</code>命令，初始化一个 JS 项目</li><li>把创建好的项目中其它无关文件删除，最终项目目录结构如下</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>vite-project
├─ index.html
├─ main.js
├─ package-lock.json
├─ package.json
└─ public
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>vite-project/index.html</code>文件内容如下：</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/main.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>vite-project/main.js</code>文件内容如下：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Firefox &gt;= 34版本开始支持</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token comment">// Firefox &gt;= 22版本开始支持</span>
<span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">a+b的结果=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>a <span class="token operator">+</span> b<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Firefox &gt;= 29 版本开始支持</span>
<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> rejcet</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&quot;成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>执行<code>npm run build</code> 开始打包，<code>main.js</code>被打包后生成的对应文件如下：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> o <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;link&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>relList<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">&amp;&amp;</span> o<span class="token punctuation">.</span>supports <span class="token operator">&amp;&amp;</span> o<span class="token punctuation">.</span><span class="token function">supports</span><span class="token punctuation">(</span><span class="token string">&quot;modulepreload&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> e <span class="token keyword">of</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;link[rel=&quot;modulepreload&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">n</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">new</span> <span class="token class-name">MutationObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> t <span class="token keyword">of</span> e<span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&quot;childList&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> s <span class="token keyword">of</span> t<span class="token punctuation">.</span>addedNodes<span class="token punctuation">)</span>
          s<span class="token punctuation">.</span>tagName <span class="token operator">===</span> <span class="token string">&quot;LINK&quot;</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span>rel <span class="token operator">===</span> <span class="token string">&quot;modulepreload&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token function">n</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">childList</span><span class="token operator">:</span> <span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">subtree</span><span class="token operator">:</span> <span class="token operator">!</span><span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      e<span class="token punctuation">.</span>integrity <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>integrity <span class="token operator">=</span> e<span class="token punctuation">.</span>integrity<span class="token punctuation">)</span><span class="token punctuation">,</span>
      e<span class="token punctuation">.</span>referrerPolicy <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>referrerPolicy <span class="token operator">=</span> e<span class="token punctuation">.</span>referrerPolicy<span class="token punctuation">)</span><span class="token punctuation">,</span>
      e<span class="token punctuation">.</span>crossOrigin <span class="token operator">===</span> <span class="token string">&quot;use-credentials&quot;</span>
        <span class="token operator">?</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>credentials <span class="token operator">=</span> <span class="token string">&quot;include&quot;</span><span class="token punctuation">)</span>
        <span class="token operator">:</span> e<span class="token punctuation">.</span>crossOrigin <span class="token operator">===</span> <span class="token string">&quot;anonymous&quot;</span>
        <span class="token operator">?</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>credentials <span class="token operator">=</span> <span class="token string">&quot;omit&quot;</span><span class="token punctuation">)</span>
        <span class="token operator">:</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>credentials <span class="token operator">=</span> <span class="token string">&quot;same-origin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      t
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">n</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>ep<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    e<span class="token punctuation">.</span>ep <span class="token operator">=</span> <span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token function">c</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fetch</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>href<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">i</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">r<span class="token punctuation">,</span> o</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">a+b的结果=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>r <span class="token operator">+</span> o<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">i</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">r<span class="token punctuation">,</span> o</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">r</span><span class="token punctuation">(</span><span class="token string">&quot;成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：</p><p>观察打包后的文件，发现并没有对<strong>箭头函数</strong>、<strong>Promise</strong>、<strong>Object.assign</strong>进行对应的兼容转换。</p><p>所以，转换后的代码在低版一的浏览器就会抛出错误，需要借助<code>@vitejs/plugin-legacy</code>插件来实现 JS 兼容问题。</p><h3 id="_1-2、安装插件" tabindex="-1"><a class="header-anchor" href="#_1-2、安装插件" aria-hidden="true">#</a> 1.2、安装插件</h3><p>TIP</p>`,103),Y=n("code",null,"@vitejs/plugin-legacy",-1),Z={href:"https://github.com/vitejs/vite/tree/main/packages/plugin-legacy",target:"_blank",rel:"noopener noreferrer"},nn=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i <span class="token parameter variable">-D</span> @vitejs/plugin-legacy
<span class="token function">npm</span> i <span class="token parameter variable">-D</span> terser  <span class="token comment">#必须安装Terser，因为 @vitejs/plugin-legacy插件使用Terser进行压缩JS代码</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>插件安装成功后，我需要在 Vite 的配置文件中来配置插件，这样才能在打包时找到对应的插件做相关工作</p><h3 id="_1-3、配置插件" tabindex="-1"><a class="header-anchor" href="#_1-3、配置插件" aria-hidden="true">#</a> 1.3、配置插件</h3><ul><li>在根目录下，新建<code>vite.config.js</code>文件，此文件为 Vite 的配置文件。</li><li>配置文件采用 ES 模块语法，对外导出一个对象。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vite.config.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过<code>import</code>语法导入插件，并在配置文件导出对象的<code>plugins</code>选项中配置插件。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> legacy <span class="token keyword">from</span> <span class="token string">&quot;@vitejs/plugin-legacy&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token comment">// 插件配置选项，plugins的值是一个数组，其中的第一项代表一个插件</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// 配置legacy插件</span>
    <span class="token function">legacy</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token comment">// 指定转码后的代码需要兼容那些版本的浏览器,</span>
      <span class="token comment">// 与webpack中\`@babel/preset-env\`预设中设置了\`targets\`参数的含义一样</span>
      <span class="token literal-property property">targets</span><span class="token operator">:</span> <span class="token string">&quot;Firefox &gt; 23&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),sn={href:"https://github.com/browserslist/browserslist#queries",target:"_blank",rel:"noopener noreferrer"},an=t('<h3 id="_1-3、生产打包" tabindex="-1"><a class="header-anchor" href="#_1-3、生产打包" aria-hidden="true">#</a> 1.3、生产打包</h3><ul><li>执行<code>npm run build</code>完成生产环境下的打包，最后在生成的<code>dist/assets</code>目录下生成了三个 JS 文件，如下图</li></ul><p><img src="'+S+'" alt="image-20230908113026231"></p><ul><li><p>查看打包后生成的<code>index.html</code>文件，</p><p>发现新增了一些脚本，这些脚本根据浏览器的支持程度来动态的引入正常版本文件还是带有 legacy 字样的遗留版本文件。</p><p>当项目运行在一些版本较低的浏览器时，插件添加的脚本会自动加载 legacy 版本的文件。</p></li><li><p>执行<code>npm run preview</code>来查看打包后的项目。</p></li></ul><h3 id="_1-4、chorme-浏览器访问项目" tabindex="-1"><a class="header-anchor" href="#_1-4、chorme-浏览器访问项目" aria-hidden="true">#</a> 1.4、Chorme 浏览器访问项目</h3><p>TIP</p><p>当我在最新的<code>Chorme</code>浏览器中访问项目时，控制台正确输出如下结果，并且当前项目只会加载打包生成的<code>index-51e620d4.js</code>文件。</p><p><img src="'+V+'" alt="image-20230908113150081"></p><p><img src="'+C+`" alt="image-20230908113224134"></p><h3 id="_1-5、firefox-32-版浏览器访问项目" tabindex="-1"><a class="header-anchor" href="#_1-5、firefox-32-版浏览器访问项目" aria-hidden="true">#</a> 1.5、firefox 32 版浏览器访问项目</h3><p>当我在<code>firefox 32</code>版的浏览器中访问项目时，控制台正确输出，但网络请求加载了 3 个 JS 件</p><h3 id="_2、配置文件智能提示功能" tabindex="-1"><a class="header-anchor" href="#_2、配置文件智能提示功能" aria-hidden="true">#</a> 2、配置文件智能提示功能</h3><p>可以使用 <code>defineConfig</code> 工具函数来为配置添中智能提示功能，具体写法如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vite&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>刚才的<code>@vitejs/plugin-legacy</code>插件也可以写成如下配置，在书写过程中，会有相关提示</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> legacy <span class="token keyword">from</span> <span class="token string">&quot;@vitejs/plugin-legacy&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vite&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">legacy</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">targets</span><span class="token operator">:</span> <span class="token string">&quot;Firefox &gt; 23&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),en={href:"https://cn.vitejs.dev/config/#config-intellisense",target:"_blank",rel:"noopener noreferrer"},tn=t(`<h3 id="_3、支持-vue-结尾的文件" tabindex="-1"><a class="header-anchor" href="#_3、支持-vue-结尾的文件" aria-hidden="true">#</a> 3、支持.Vue 结尾的文件</h3><p>Vue 的单文件组件都是写在以<code>.vue</code>结尾的文件，但是 Vite 默认是不支持<code>.vue</code>的文件的。</p><p>需要通过第三方的<code>@vitejs/plugin-vue</code>插件实现。</p><h3 id="_3-1、创建项目" tabindex="-1"><a class="header-anchor" href="#_3-1、创建项目" aria-hidden="true">#</a> 3.1、创建项目</h3><p>按以下步骤，创建项目，最终创建好项目目录结构</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 项目目录结构
vite-vue
├─ App.vue
├─ index.html
├─ main.js
├─ package-lock.json
├─ package.json
└─ vite.config.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>执行<code>npm init -y</code> 初始<code>package.json</code>文件</li><li>执行<code>npm i vite -D</code> 安装 vite</li><li>新建 vite 的配置文件<code>vite.config.js</code></li><li>新建<code>vite-vue/index.html</code> 项目入口文件</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./main.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>新建<code>vite-vue/main.js</code> 创建 vue 实例</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导入vue中的createApp方法，记得要安装vue包，不过后面安装@vitejs/plugin-vue 插件时，会自动下载最新的vue包，所以不需要单独安装</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 导入App.vue组件</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&quot;./App.vue&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 创建应用实例，并挂载到#app容器内</span>
<span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&quot;#app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>新建<code>vite-vue/App.vue</code> 创建根组件</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;Hello Vue 组件&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 响应式数据</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!--插值语法，绑定数据--&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>box<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
<span class="token selector">.box</span> <span class="token punctuation">{</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2、安装插件-vitejs-plugin-vue" tabindex="-1"><a class="header-anchor" href="#_3-2、安装插件-vitejs-plugin-vue" aria-hidden="true">#</a> 3.2、安装插件 @vitejs/plugin-vue</h3><p>Vite 在构建项目时，本身是无法识别<code>.vue</code>的文件，所以执行<code>npx vite</code>来启动项目时，会出现如错误</p><p><img src="`+J+`" alt="image-20230908114903651"></p><blockquote><p>所以，我需要安装<code>@vitejs/plugin-vue</code>插件识别处理 <code>.vue</code> 文件</p></blockquote><ul><li>首先：执行以下命令，安装<code>@vitejs/plugin-vue</code>插件包</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i <span class="token parameter variable">-D</span> @vitejs/plugin-vue
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>然后：在<code>vite.config.js</code>配置文件中，配置对应的插件，如下</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导入包</span>
<span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">&quot;@vitejs/plugin-vue&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vite&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 配置vue插件。</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>最后：执行<code>npx vite</code> 或<code>npm run dev</code> 命令就可以成功启动项目</li><li>浏览器中打开项目地址，最终显示如下效果</li></ul><p><img src="`+N+'" alt="image-20230908134714783"></p><ul><li>执行<code>npm run build</code>也可以正常完成生产环境下打包。</li></ul><h3 id="_4、vite-脚手架初始-vue-项目" tabindex="-1"><a class="header-anchor" href="#_4、vite-脚手架初始-vue-项目" aria-hidden="true">#</a> 4、Vite 脚手架初始 Vue 项目</h3><p>如果我需要开发 Vue 项目，我可以直接通过执行<code>npm create vite@latest</code>命令，在命令执行过程，我选择支持的框架为 Vue。</p><blockquote><p>如下：</p></blockquote><p><img src="'+M+'" alt="image-20230908153244507"></p><p>然后，再选择对应的<code>javascript或TypeScript</code></p><p><img src="'+E+'" alt="image-20230908153306812"></p><p>最后，根据以下提示，进入项目根目录，下载开发与生产依赖，启动开发服务</p><p><img src="'+H+'" alt="image-20230908153358392"></p><p>按以上步骤操作后，最终搭建一个简单的 Vue 项目，项目结构如下：</p><p><img src="'+O+`" alt="image-20230908153627360"></p><p>总结</p><p>Vite 脚手架创建 vue 项目时，脚手架帮我做了以下几件事</p><ul><li>初始化一个简单的 vue 项目</li><li>在<code>package.json</code>中配置启动 vue 项目用到的脚本命令</li><li>在<code>package.json</code>中配置了项目需要用到的开发和生产依赖包（如：vite、vue、@vitejs/plugin-vue），我只需要执行<code>npm i</code>就可以一键安装</li><li>在<code>vite.config.js</code>中配置好使用的<code>@vitejs/plugin-vue</code>插件</li></ul><h3 id="_5、总结" tabindex="-1"><a class="header-anchor" href="#_5、总结" aria-hidden="true">#</a> 5、总结</h3><p>本小节重点掌握以下内容</p><ul><li>JS 兼容型处理</li><li><code>.vue</code>结尾文件处理</li><li>vite 脚手架创建 vue 项目</li></ul><h2 id="八、vite-静态资源处理" tabindex="-1"><a class="header-anchor" href="#八、vite-静态资源处理" aria-hidden="true">#</a> 八、Vite 静态资源处理</h2><p>Vite 作为一个开箱即用的前端构建工具，默认支持 JS、CSS、Sass、Less、JSON、图片、HTML 等静态资源的处理。</p><p>但有些情况下还是需要做额外的配置，我挑了一些比较常用的功能来做讲解：</p><ul><li>CSS 的默认处理行为</li><li>CSS 模块化处理</li><li>CSS 预处理器</li><li>CSS 兼容性处理</li><li>限定大小的图片转为 Base64 编码</li><li>JSON 的导入</li><li>JSON 支持具名导入</li></ul><h3 id="_1、css-的默认处理行为" tabindex="-1"><a class="header-anchor" href="#_1、css-的默认处理行为" aria-hidden="true">#</a> 1、CSS 的默认处理行为</h3><p>css 文件中通过<code>@import</code> 导入的其它 CSS，能自动识别，被打包到当前 CSS 中。</p><p><strong>开发环境下</strong></p><ul><li>JS 文件中以<code>import</code>导入的<code>.css</code>文件内容最终处理后，会插入到<code>index.html</code>文件的<code>&lt;style&gt;</code>标签中，同时自带 HMR 支持。</li><li>对于<code>&lt;link&gt;</code>标签引入的 CSS 不做处理。</li></ul><p><strong>生产环境下</strong></p><ul><li>通过<code>&lt;link&gt;</code>标签引入的 CSS 和<code>import</code>导入的 CSS 打包到一个 CSS 文件中，输出在项目的<code>dist/assets</code>目录下。</li></ul><h3 id="_1-1、创建项目-1" tabindex="-1"><a class="header-anchor" href="#_1-1、创建项目-1" aria-hidden="true">#</a> 1.1、创建项目</h3><p>项目目录结构如下</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>vite
├─ basic.css
├─ index.css
├─ index.html
├─ link.css
├─ main.js
├─ package-lock.json
├─ package.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>vite/index.html</code>文件内容</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!--
    link标签引入的CSS
    	开发环境下不做处理
    	生产环境下与JS中通过import导入的css最终打包到一个CSS文件中
--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./link.css<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>box<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>box<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./main.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>main.js</code>内容</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * import 导入的CSS
 * 开发环境下打包到index.html文件的&lt;style&gt;标签中，并带有HRM模块热更新
 * 生产环境下与 其它CSS打包到一个CSS文件中
 */</span>
<span class="token keyword">import</span> <span class="token string">&quot;./index.css&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>basic.css</code> 、<code>index.css</code>、<code>link.css</code> 内容如下</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* index.css */</span>
<span class="token atrule"><span class="token rule">@import</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">&quot;./basic.css&quot;</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span></span>

<span class="token selector">.box</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* baisc.css */</span>
<span class="token selector">.box</span> <span class="token punctuation">{</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 10px solid yellow<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* link.css */</span>
<span class="token selector">.box</span> <span class="token punctuation">{</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2、启动开发服务" tabindex="-1"><a class="header-anchor" href="#_1-2、启动开发服务" aria-hidden="true">#</a> 1.2、启动开发服务</h3><blockquote><p>执行<code>npx vite</code>启动开发服务，在浏览器查看 Elements 选项，如下：</p></blockquote><p><img src="`+T+`" alt="image-20230911101328833"></p><p>注：</p><p>观察上图，我可以看到</p><ul><li><code>&lt;link&gt;</code>标签引入的 CSS 并没有做处理</li><li>JS 文件中以<code>import</code>导入的<code>.css</code>文件及内部通过<code>@import</code>导入的 CSS 都被打包到一起，最终插入到<code>index.html</code>文件的<code>&lt;style&gt;</code>标签中。</li><li>打包后的 CSS，以持 HMR 模块热更新。如果修改任意一个 css 文件中样多，当保存时，页面也会动态更新，这就是启用了 HRM 功能。</li></ul><h3 id="_1-3、生产打包-1" tabindex="-1"><a class="header-anchor" href="#_1-3、生产打包-1" aria-hidden="true">#</a> 1.3、生产打包</h3><p>执行以下命令，对项目生产环境打包</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx vite build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>打包后，在<code>dist/assets</code>目录只生成了一个 css 文件，内容如下</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.box</span> <span class="token punctuation">{</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.box</span> <span class="token punctuation">{</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 10px solid yellow<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.box</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> #00f<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>可以看到，三个 css 文件中的内容，都打包到一个 css 文件了。</p></blockquote><h3 id="_2、css-模块化处理" tabindex="-1"><a class="header-anchor" href="#_2、css-模块化处理" aria-hidden="true">#</a> 2、CSS 模块化处理</h3><ul><li>Vite 允许我对 CSS 进行模块化处理，也就对 CSS 类名和选择器的作用域进行限定的一种方式。</li><li>Vite 会把任何以<code>.module.css</code>为的缀名的 CSS 文件看成一个模块，并采用 CSS module 的方式来处理。</li></ul><h3 id="_2-1、创建项目" tabindex="-1"><a class="header-anchor" href="#_2-1、创建项目" aria-hidden="true">#</a> 2.1、创建项目</h3><p>项目目录结构如下</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>vite
├─ index.html
├─ basic.js
├─ basic.module.css
├─ index.js
├─ index.module.css
├─ package-lock.json
└─ package.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>vite/index.module.css</code>和<code>vite/basic.module.css</code>文件内容如下：</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* vite/index.module.css */</span>
<span class="token selector">.box</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.item</span> <span class="token punctuation">{</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* vite/basic.module.css */</span>
<span class="token selector">.box</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.wrap</span> <span class="token punctuation">{</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>vite/index.js</code>文件内容如下：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 模块化加载 css</span>
<span class="token keyword">import</span> indexModule <span class="token keyword">from</span> <span class="token string">&quot;./index.module.css&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// indexModule 为一个 JS 对象如：{box: &#39;_box_m554n_1&#39;}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>indexModule<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 创建 div元素</span>
<span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 为div添加className,相当于div.className=&quot;_box_m554n_1&quot;</span>
div<span class="token punctuation">.</span>className <span class="token operator">=</span> indexModule<span class="token punctuation">.</span>box<span class="token punctuation">;</span>
<span class="token comment">// 将div插入到页面</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>vite/basic.js</code> 文件内容如下：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 模块化加载 css</span>
<span class="token keyword">import</span> basicModule <span class="token keyword">from</span> <span class="token string">&quot;./basic.module.css&quot;</span><span class="token punctuation">;</span>
<span class="token comment">//basicModule 一个JS对象如：{box: &#39;_box_vp3a0_1&#39;}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>basicModule<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 创建 div元素</span>
<span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 相当于div.className=&quot;_box_vp3a0_1&quot;</span>
div<span class="token punctuation">.</span>className <span class="token operator">=</span> basicModule<span class="token punctuation">.</span>box<span class="token punctuation">;</span>
<span class="token comment">// 创建 div元素</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>vite/index.html</code>文件内容如下：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>box<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>box<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./index.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./basic.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2、启动开发服务" tabindex="-1"><a class="header-anchor" href="#_2-2、启动开发服务" aria-hidden="true">#</a> 2.2、启动开发服务</h3><p>TIP</p><p>执行<code>npx vite</code>启动开发服务，在浏览器中打开。</p><blockquote><p>最终显示如下效果</p></blockquote><p><img src="`+P+`" alt="image-20230911103035662"></p><p>注：</p><p>观察以上截图，我可以看到，最终<code>index.module.css</code>和<code>basic.module.css</code>文件中的 CSS 选择器上都加上了一串 hash 值，用来表示当前选择器的唯一性，这样就避免了相同的样式发生覆盖</p><p><strong>生产环境下打包</strong>，最终所有 CSS 样式会打包成一个 CSS 文件，内容如下</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">._box_1vf94_1</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">._item_1vf94_11</span> <span class="token punctuation">{</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">._box_1nhxq_1</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> #00f<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">._wrap_1nhxq_11</span> <span class="token punctuation">{</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>温馨提示</p><p>Vue 的单文件组件中，只需要在<code>&lt;style&gt;</code>标签上写上<code>scoped</code>，Vite 就会自动把 Syle 标签中的样式当成模块处理。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
<span class="token selector">.box</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、css-预处理器" tabindex="-1"><a class="header-anchor" href="#_3、css-预处理器" aria-hidden="true">#</a> 3、CSS 预处理器</h3><p>Vite 默认是支持<code>.scss</code>、<code>.sass</code>、<code>.less</code>、<code>.stylus</code>结尾的文件，但必需要安装相应的预处理器依赖。</p><ul><li><code>.scss</code> 和 <code>.sass</code> 对应的预处理器依赖包为 sass</li><li><code>.less</code> 对应的的预处理器依赖包为 less 包</li><li><code>.stylus</code> 对应的的预处理器依赖包为 stylus 包</li></ul><p>项目目录结构如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>vite
├─ index.html
├─ index.scss
├─ package-lock.json
└─ package.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>vite/index.html</code>文件内容</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./index.scss<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>box<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>box h3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>vite/index.scss</code>文件内容</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.box</span> <span class="token punctuation">{</span>
  <span class="token selector">p</span> <span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>执行以下命令，安装预处理器依赖的 sass 包</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i sass <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行<code>npx vite</code>命令，在浏览器查看对的效果，并观察控 NetWork 面板，如下</p><p><img src="`+L+`" alt="image-20230911103748646"></p><p><code>npx vite build</code>命令后，在<code>dist/assets</code>目录下生成了对应的 css 文件，内容如下：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.box p</span> <span class="token punctuation">{</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> #87ceeb<span class="token punctuation">;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、css-兼容性处理" tabindex="-1"><a class="header-anchor" href="#_4、css-兼容性处理" aria-hidden="true">#</a> 4、CSS 兼容性处理</h3><p>如果我想要 CSS 能兼容不同的浏览器，那我就需要为相关的 CSS 属性添加兼容性前缀。我自己去书写每个 CSS 前缀太麻烦了，所以我可以利用 PostCSS 来帮我处理。</p>`,112),pn=n("li",null,"Vite 内置了 PostCSS，我只需要安装相关的 PostCSS 插件，并做好相关的 PostCSS 配置就可以了。",-1),on={href:"https://github.com/postcss/autoprefixer",target:"_blank",rel:"noopener noreferrer"},cn=t(`<p><strong>代码演示</strong></p><p>在上面项目的基础上，修改<code>vite/index.scss</code>文件内容如下</p><div class="language-scss line-numbers-mode" data-ext="scss"><pre class="language-scss"><code><span class="token selector">.box </span><span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>

  <span class="token selector">p </span><span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行以下命令，安装<code>autoprefixer</code>插件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i autoprefixer@10.4.14 --save-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在<code>vite.config.js</code>文件的<code>css.postcss</code>选项中来配置这个插件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导入插件</span>
<span class="token keyword">import</span> autoprefixer <span class="token keyword">from</span> <span class="token string">&quot;autoprefixer&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">css</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">postcss</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// 配置postcss插件</span>
      <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token function">autoprefixer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          <span class="token comment">// 指定兼容 99.5%的浏览器。</span>
          <span class="token literal-property property">browsers</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;cover 99.5%&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>执行<code>npx vite</code>启动开发服务，在浏览器中看到如下效果，最终 css 中的 display 属性值被加上了浏览器兼容型前缀</p></blockquote><p><img src="`+R+`" alt="image-20230911104427648"></p><blockquote><p>执行<code>npx vite build</code>，在<code>dist/assets</code>目录输出了对应的 css 文件内容下，css 代码添加了浏览器兼容性前缀处理。</p></blockquote><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.box</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> -webkit-flex<span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> -moz-box<span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> -ms-flexbox<span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>为了与 JS 保持相同的浏览器兼容处理，最好把对浏览器支持的 browsers 配置，从 postcss 的插件配置中去掉，改写在<code>package.json</code>的<code>browserslist</code>字段中配置，如下：</p></blockquote><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;devDependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;browserslist&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;cover 99.5%&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、图片转为-base64-编码" tabindex="-1"><a class="header-anchor" href="#_5、图片转为-base64-编码" aria-hidden="true">#</a> 5、图片转为 base64 编码</h3><p>如果想要在生产环境下打包时，针对一定大小的图片转成 Base64 编码，只需要在<code>vite.config.js</code>中添加如下配置即可</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vite&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">build</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 10kb以下，转Base64</span>
    <span class="token literal-property property">assetsInlineLimit</span><span class="token operator">:</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>代码演示</strong></p><ul><li><code>index.html</code>文件内容</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!--以下图片为15kb大小--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./app.jpg<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token comment">&lt;!-- 以下图片大小为9kb--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./logo.png<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>配置文件内容同上，然后执行<code>npx vite build</code>打包，在<code>dist/assets</code>目录下只生成了<code>app-8cce9ece.jpg</code>这一个图片。</li><li>查看打包后生成的<code>index.html</code>文件，发现<code>logo.png</code>被转成了<code>Base64</code>编码。</li><li>浏览器中查看效果如下：</li></ul><p><img src="`+I+`" alt="image-20230911104610282"></p><h3 id="_6、json-文件处理" tabindex="-1"><a class="header-anchor" href="#_6、json-文件处理" aria-hidden="true">#</a> 6、JSON 文件处理</h3><p>JSON 可以被直接导入 —— 同样支持具名导入</p><ul><li>新建<code>index.js</code> 文件内容如下</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导入整个JSON，最终json为JSON对象</span>
<span class="token keyword">import</span> json <span class="token keyword">from</span> <span class="token string">&quot;./data.json&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//  对一个根字段使用具名导入 —— 有效帮助 treeshaking！</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./data.json&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>新建<code>data.json</code>文件，内容如下</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;code&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0000&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;category_id&quot;</span><span class="token operator">:</span> <span class="token number">1001</span><span class="token punctuation">,</span>
      <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;人气 TOP&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;category_id&quot;</span><span class="token operator">:</span> <span class="token number">1002</span><span class="token punctuation">,</span>
      <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;爆款套餐&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;category_id&quot;</span><span class="token operator">:</span> <span class="token number">1003</span><span class="token punctuation">,</span>
      <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;咖啡&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;category_id&quot;</span><span class="token operator">:</span> <span class="token number">1004</span><span class="token punctuation">,</span>
      <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;奶茶&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;category_id&quot;</span><span class="token operator">:</span> <span class="token number">1005</span><span class="token punctuation">,</span>
      <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;甜品小点&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;message&quot;</span><span class="token operator">:</span> <span class="token string">&quot;成功&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>新建 <code>index.html</code>内容如下</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./index.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>执行<code>npx vite</code>启动应用，在浏览器中打开服务，<code>Console</code>面板输出入下内容</li></ul><p><img src="`+D+`" alt="image-20230911104906582"></p><h2 id="九、vite-常规配置" tabindex="-1"><a class="header-anchor" href="#九、vite-常规配置" aria-hidden="true">#</a> 九、Vite 常规配置</h2><p>在 Vite 的常规配置中，我会讲到以下几个方面的配置</p><ul><li>Vite 开发服务器配置</li><li>Vite 代理服务配置</li><li>Vite 中如何配置别名路径</li><li>Vite 中如何配置多入口，进行多页面开发</li><li>Vite 中如何配置打包后资源分类存放到对应文件夹</li></ul><h3 id="_1、vite-开发服务器配置" tabindex="-1"><a class="header-anchor" href="#_1、vite-开发服务器配置" aria-hidden="true">#</a> 1、Vite 开发服务器配置</h3><p>当我执行<code>npx vite</code>或<code>npx run vite</code>命令时，会启动一个开发服务。Vite 提供了相关的配置允许更改服务的主机，端口等。</p><p>通过修改<code>vite.config.js</code>文件导出对象的<code>server</code>选项中来配置。</p><blockquote><p>具体如下：</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vite&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">server</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">8880</span><span class="token punctuation">,</span> <span class="token comment">// 自定义端口，默认为5173</span>
    <span class="token literal-property property">open</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 服务启动后，自动在浏览器中打开，默认是不打开的</span>
    <span class="token literal-property property">hmr</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 为开发服务启用热更新，默认是不启用热更新的</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,39),ln={href:"https://cn.vitejs.dev/config/server-options.html",target:"_blank",rel:"noopener noreferrer"},un=t(`<p><strong>代码演示</strong></p><ul><li>新建<code>index.html</code>文件，内容如下</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./index.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>新建<code>index.js</code>文件，内容如下：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Hello Vite&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>在根目下，新建<code>vite.config.js</code>文件，内容同上。</li></ul><p>注：</p><p>最后，我执行<code>npx vite</code>来启动服务，会自动在浏览器打开<code>&quot;http://127.0.0.1:8880&quot;</code>地址访问服务。</p><p>接下来，我把<code>index.js</code>中的内容改为<code>console.log(&quot;Hello HMR&quot;)</code>同时保存，发现浏览器控台输出内容自动更新为<code>“Hello HMR&quot;</code>（本质是启用了热更新）</p><h3 id="_2、vite-代理服务配置" tabindex="-1"><a class="header-anchor" href="#_2、vite-代理服务配置" aria-hidden="true">#</a> 2、Vite 代理服务配置</h3><p>当我在项目中利用<code>Ajax</code>向服务端发请求时，会遇到跨域的限制。</p><p>为了能让请求成功，我通常会在请求和真实服务之间架设一个代理服务。代理服务再向真实服务器发请求拿到数据并返回给到客户端。</p><p><img src="`+A+`" alt="image-20230913084038161"></p><blockquote><p>Vite 允许我为开发服务配置自定义代理规则，我只需要在<code>server.proxy</code>选项下进行相关配置就可。</p></blockquote><p><strong>server.proxy 配置</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">server</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token literal-property property">proxy</span><span class="token operator">:</span><span class="token punctuation">{</span>
            <span class="token comment">// /api是字符串 http://localhost:5173/api 的简写法</span>
            <span class="token comment">// 以下表示，当我向 http://localhost:5173/api地址及下级路径发请求时，帮我转发到\`http://127.0.0.1:8990/api\`地址及对应的下级路径发请求</span>
            <span class="token comment">// hhttp://localhost:5173/api --&gt; http://127.0.0.1:8990/api</span>
            <span class="token comment">// http://localhost:5173/api/menu --&gt; http://127.0.0.1:8990/api/menu</span>
            <span class="token string-property property">&quot;/api&quot;</span><span class="token operator">:</span>&quot;http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">8990</span><span class="token operator">/</span>api
            <span class="token comment">//</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-1、代码演示-项目结构" tabindex="-1"><a class="header-anchor" href="#_2-1、代码演示-项目结构" aria-hidden="true">#</a> 2.1、代码演示 -（项目结构）</h3><p>我利用<code>node</code>来搭建两个请求数据的服务</p><ul><li><code>http://127.0.0.1:8990/api/menu</code> 获取菜单数据</li><li><code>http://127.0.0.1:8990/api/course</code> 获取课程数据</li></ul><p>然后在 Vite 项目中，利用<code>axios</code>向上面两个地址发送请求来获取数据。</p><p>因为受到跨域限制，所以我需要设置开发服务的代理服务，利用代理服务帮帮我拿到数据并转发给我。</p><p><strong>整体项目目录结构如下</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>vite
├─ data   <span class="token comment">// JSON数据，node服务会读取JSON文件中内容，然后返回给客户端</span>
│  ├─ blog<span class="token punctuation">.</span>json
│  └─ menu<span class="token punctuation">.</span>json
├─ index<span class="token punctuation">.</span>html  <span class="token comment">// Vite 项目的入口文件</span>
├─ index<span class="token punctuation">.</span>js  <span class="token comment">// 文件中会利用axios向服务端发请求获取数据</span>
├─ node<span class="token operator">-</span>api<span class="token punctuation">.</span>js  <span class="token comment">// 搭建node服务，返回JSON数据</span>
├─ <span class="token keyword">package</span><span class="token operator">-</span>lock<span class="token punctuation">.</span>json
├─ <span class="token keyword">package</span><span class="token punctuation">.</span>json
└─ vite<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js  <span class="token comment">// 配置文件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2、代码演示-搭建-node-服务" tabindex="-1"><a class="header-anchor" href="#_2-2、代码演示-搭建-node-服务" aria-hidden="true">#</a> 2.2、代码演示 - 搭建 node 服务</h3><ul><li><code>node-api.js</code>文件内容如下 ：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;http&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 加载http模块,用来创建http服务</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;fs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 加载fs模块，用来操作文件</span>

<span class="token comment">// 创建http服务，req请求对象   res响应对象</span>
http
  <span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取请求地址主机端口后地址</span>
    <span class="token keyword">const</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span>url<span class="token punctuation">;</span>
    <span class="token comment">// 设置响应头，响应的数据类型</span>
    res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;Content-Type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 请求地址拦截</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">===</span> <span class="token string">&quot;/api/menu&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 读取JSON文件中数据，并响应到客户端</span>
      <span class="token keyword">const</span> data <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">&quot;./data/menu.json&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">===</span> <span class="token string">&quot;/api/blog&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> data <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">&quot;./data/blog.json&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&quot;Hello Node&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">&quot;8990&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置端口号</span>

<span class="token comment">// 服务器正常启动，打印下面这句话作为提示</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Server running at http://127.0.0.1:8990&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>data 文件夹中<code>blog.json</code>和<code>menu.json</code>文件，内容如下</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;code&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0000&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token property">&quot;blogName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite下一代的前端工具链&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;imageUrl&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://img-blog.csdnimg.cn/8441a1c7b63b4e60abebafecea16e16a.png&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;desc&quot;</span><span class="token operator">:</span> <span class="token string">&quot;CSS 的默认处理行为CSS 模块化处理CSS 预处理器CSS 兼容性处理限定大小的图片转为 Base64 编码JSON 的导入JSON 支持具名导入&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token property">&quot;blogName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Vite静态资源处理&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;imageUrl&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://img-blog.csdnimg.cn/8441a1c7b63b4e60abebafecea16e16a.png&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;desc&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Vite（法语意为 “快速的”，发音 /vit/，发音同 “veet”）是一种新型前端构建工具，能够显著提升前端开发体验，其最大的特点就是快 ！&quot;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;message&quot;</span><span class="token operator">:</span> <span class="token string">&quot;成功&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;code&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0000&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;category_id&quot;</span><span class="token operator">:</span> <span class="token number">1001</span><span class="token punctuation">,</span>
      <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;人气 TOP&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;category_id&quot;</span><span class="token operator">:</span> <span class="token number">1002</span><span class="token punctuation">,</span>
      <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;爆款套餐&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;category_id&quot;</span><span class="token operator">:</span> <span class="token number">1003</span><span class="token punctuation">,</span>
      <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;咖啡&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;category_id&quot;</span><span class="token operator">:</span> <span class="token number">1004</span><span class="token punctuation">,</span>
      <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;奶茶&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;category_id&quot;</span><span class="token operator">:</span> <span class="token number">1005</span><span class="token punctuation">,</span>
      <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;甜品小点&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;message&quot;</span><span class="token operator">:</span> <span class="token string">&quot;成功&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：</p><p>以上文件创建好后，只需要 Vite 目录执行<code>node node-api.js</code>就可以启动<code>node</code>服务。</p><p>访问<code>http://127.0.0.1:8990/api/menu </code>和<code>http://127.0.0.1:8990/api/blog</code> 地址，可以查看到返回的 JSON 字符串。</p><blockquote><p>如下：</p></blockquote><p><img src="`+$+`" alt="image-20230913085545231"></p><h3 id="_2-3、代码演示-搭建-vite-项目" tabindex="-1"><a class="header-anchor" href="#_2-3、代码演示-搭建-vite-项目" aria-hidden="true">#</a> 2.3、代码演示 - 搭建 Vite 项目</h3><ul><li><code>index.html</code>文件内容如下</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./index.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>index.js</code>文件内容如下</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&quot;axios&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 向 http://localhost:5173/api/menu 发请求,因为设置了代理，代理转发向http://127.0.0.1:8990/api/menu 发请求</span>
axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/api/menu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 向 http://localhost:5173/api/course 发请求 因为设置了代理，代理转发向http://127.0.0.1:8990/api/course 发请求</span>
axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/api/course&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>vite.config.js</code>配置文件内如下</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vite&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">server</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;/api&quot;</span><span class="token operator">:</span> <span class="token string">&quot;http://127.0.0.1:8990&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：</p><p>最后执行<code>npx vite</code>启动开发服务，访问<code>http://localhost:5173/</code>地址，可以看到控制台正常打印了请求到的内容。</p><p>如果我把配置文件中内容去掉，就会出现报错。</p><p><img src="`+z+`" alt="image-20230913090114202"></p><h3 id="_3、vite-中如何配置别名路径" tabindex="-1"><a class="header-anchor" href="#_3、vite-中如何配置别名路径" aria-hidden="true">#</a> 3、Vite 中如何配置别名路径</h3><ul><li>当我在访问静态资源时，如果书写的路径非常长，那每次书写时就会非常麻烦。</li><li>如果能把相同部分的路径用别名代替，那我在书写路径时只需要书写别名+不同的路径部分就好了。</li></ul><blockquote><p>我可以在<code>vite</code>的配置文件中， 为文件系统路径配置别名，如下：</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">resolve</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token literal-property property">alias</span><span class="token operator">:</span><span class="token punctuation">{</span>
            <span class="token comment">/*
            	@js 为 路径 /src/assets/js 的别名
            	导入JS：  import { username }  from &quot;/src/assets/js/basic.js&quot;
            	可简写成： import { username } from &quot;@js/basic.js&quot;
            */</span>
          <span class="token string-property property">&quot;@js&quot;</span><span class="token operator">:</span><span class="token string">&quot;/src/assets/js&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意事项</p><ul><li>当使用文件系统路径的别名时，请始终使用绝对路径，相对路径的别名值会原封不动地被使用，因此无法被正常解析。</li><li>在<code>index.html</code>项目入口文件中不要使用别名加载文件，因为启动开发服务并不会对源码</li></ul><h3 id="_3-2、代码演示-为路径配置别名" tabindex="-1"><a class="header-anchor" href="#_3-2、代码演示-为路径配置别名" aria-hidden="true">#</a> 3.2、代码演示：为路径配置别名</h3><ul><li>新建项目目录结构如下：</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>vite
├─ index.html
├─ package-lock.json
├─ package.json
├─ src
│  └─ assets
│     ├─ css
│     │  └─ index.css
│     ├─ images
│     │  └─ a.jpg
│     └─ js
│        ├─ basic.js
│        └─ index.js
└─ vite.config.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>index.html</code>文件内容如下：</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/src/assets/js/index.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>在<code>index.html</code>文件加载的 JS 和 CSS，不要使用别名，因为在开发服务下，并不会去解析别名，所以会出现找不到资源的 404 错误。</p></blockquote><ul><li><code>css/index.css</code>内容如下:</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">body</span> <span class="token punctuation">{</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>js/index.js</code>与<code>js/basic.js</code>内容如下:</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// js/index.js</span>
<span class="token keyword">import</span> <span class="token string">&quot;@css/index.css&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> url <span class="token keyword">from</span> <span class="token string">&quot;@images/a.jpg&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> username <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@js/basic.js&quot;</span><span class="token punctuation">;</span>

document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> &lt;img src=&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; /&gt;---- </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>username<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

<span class="token comment">// js/basic.js</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> username <span class="token operator">=</span> <span class="token string">&quot;艾编程&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>vite.config.js</code>文件内容如下</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">resolve</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token literal-property property">alias</span><span class="token operator">:</span><span class="token punctuation">{</span>
          <span class="token string-property property">&quot;@images&quot;</span><span class="token operator">:</span><span class="token string">&quot;/src/assets/images&quot;</span><span class="token punctuation">,</span>
          <span class="token string-property property">&quot;@js&quot;</span><span class="token operator">:</span><span class="token string">&quot;/src/assets/js&quot;</span><span class="token punctuation">,</span>
          <span class="token string-property property">&quot;@css&quot;</span><span class="token operator">:</span><span class="token string">&quot;/src/assets/css&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span>


<span class="token comment">// 或下面写法</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> resolve <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;path&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">resolve</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token literal-property property">alias</span><span class="token operator">:</span><span class="token punctuation">{</span>
          <span class="token string-property property">&quot;@images&quot;</span><span class="token operator">:</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">&quot;src/assets/images&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token string-property property">&quot;@js&quot;</span><span class="token operator">:</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">&quot;src/assets/js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token string-property property">&quot;@css&quot;</span><span class="token operator">:</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">&quot;src/assets/css&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>最后，执行<code>npx vite</code>，在浏览器中可以访问到如下效果，说明配置生效了。</p></blockquote><p><img src="`+F+`" alt="image-20230913090827233"></p><h3 id="_4、vite-中如何配置多入口-进行多页面开发" tabindex="-1"><a class="header-anchor" href="#_4、vite-中如何配置多入口-进行多页面开发" aria-hidden="true">#</a> 4、vite 中如何配置多入口，进行多页面开发</h3><ul><li>Vite 在开发环境下默认是多入口开发的</li><li>在生产环境下，如果想要多入口开发，需要额外的配置。</li><li>Vite 在生产环境下是利用<code>rollup</code>来实现打包，所以我需要对<code>rollup</code>的打包入口进行配置。</li></ul><p>生产环境下多入口打包配置如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vite&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> resolve <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;path&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 生产环境下打包配置在build选项中配置</span>
  <span class="token literal-property property">build</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// rollup 相关配置在rollupOptions选项中配置</span>
    <span class="token literal-property property">rollupOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// 打包入口，以下是多入口</span>
      <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;index.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">app</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;app.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>代码演示</strong></p><ul><li>新建项目录如下</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>vite
├─ app.html
├─ index.html
├─ package-lock.json
├─ package.json
├─ src
│  └─ assets
│     ├─ css
│     │  ├─ app.css
│     │  └─ index.css
│     ├─ images
│     │  ├─ app.jpg
│     │  └─ index.jpg
│     └─ js
│        ├─ app.js
│        └─ index.js
└─ vite.config.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>app.html</code>和<code>index.html</code>内容如下</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!--app.html内容--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/src/assets/js/app.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!--index.html内容--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/src/assets/js/index.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>app.js</code>和<code>index.js</code>内容如下</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// app.js 内容</span>
<span class="token keyword">import</span> <span class="token string">&quot;/src/assets/css/app.css&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> url <span class="token keyword">from</span> <span class="token string">&quot;/src/assets/images/app.jpg&quot;</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;img src=&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; /&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

<span class="token comment">// index.js</span>
<span class="token keyword">import</span> <span class="token string">&quot;/src/assets/css/index.css&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> url <span class="token keyword">from</span> <span class="token string">&quot;/src/assets/images/index.jpg&quot;</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;img src=&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; /&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>app.css</code>和 <code>index.css</code>内容如下</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* app.css */</span>
<span class="token selector">body</span> <span class="token punctuation">{</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* index.css */</span>
<span class="token selector">body</span> <span class="token punctuation">{</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>vite.config.js</code>文件中配置同上</li></ul><blockquote><p>执行<code>npx vite build</code>打包，然后执行<code>npx vite preview</code>预览打包的项目，按我预期显示以下内容</p></blockquote><p><img src="`+B+`" alt="image-20230913092035197"></p><p>接下来，我看下生成的<code>dist</code>目录下的文件，其结构如下。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>dist
├─ app<span class="token punctuation">.</span>html
├─ assets
│  ├─ app<span class="token operator">-</span>632f0828<span class="token punctuation">.</span>js
│  ├─ app<span class="token operator">-</span>8cce9ece<span class="token punctuation">.</span>jpg
│  ├─ app<span class="token operator">-</span>d0983e99<span class="token punctuation">.</span>css
│  ├─ index<span class="token operator">-</span>244a1ddb<span class="token punctuation">.</span>jpg
│  ├─ index<span class="token operator">-</span>28a21df5<span class="token punctuation">.</span>css
│  ├─ index<span class="token operator">-</span>f029a56b<span class="token punctuation">.</span>js
│  └─ modulepreload<span class="token operator">-</span>polyfill<span class="token operator">-</span>3cfb730f<span class="token punctuation">.</span>js  <span class="token comment">// 自动注入的 模块预加载 polyfill</span>
└─ index<span class="token punctuation">.</span>html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：</p><p>观察上面，发现所有资源文件全部打包后放在了<code>dist/assets</code>目录下，如果我想按文件类型，将 JS、CSS、Images 分别放到 JS、CSS、Images 文件夹，还需要我做额外配置。</p><p><code>modulepreload</code>模块预加载：可以预加载原生模块，保证某些文件可以不必等到执行时才加载</p><h3 id="_5、vite-打包后资源分类存到对应文件夹" tabindex="-1"><a class="header-anchor" href="#_5、vite-打包后资源分类存到对应文件夹" aria-hidden="true">#</a> 5、Vite 打包后资源分类存到对应文件夹</h3><p>针对上面项目，如果我想按文件类型，将 JS、CSS、Images 分别放到 JS、CSS、Images 文件夹。</p><blockquote><p>可以做如下配置</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vite&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> resolve <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;path&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">build</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rollupOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// 打包输出路径,默认是dist/assets,以下相当于dist/static</span>
      <span class="token literal-property property">assetsDir</span><span class="token operator">:</span> <span class="token string">&quot;static&quot;</span><span class="token punctuation">,</span>
      <span class="token comment">// 打包入口，以下是多入口</span>
      <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;index.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">app</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;app.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token comment">// 出口设置</span>
      <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">// 入口文件中JS输出地址</span>
        <span class="token literal-property property">entryFileNames</span><span class="token operator">:</span> <span class="token string">&quot;static/js/[name]-[hash].js&quot;</span><span class="token punctuation">,</span>
        <span class="token comment">// 对代码分割中产生的 chunk 自定义命名</span>
        <span class="token literal-property property">chunkFileNames</span><span class="token operator">:</span> <span class="token string">&quot;static/chunk/[name]-[hash].js&quot;</span><span class="token punctuation">,</span>
        <span class="token comment">// 资源出口路径(如：图片、css等)</span>
        <span class="token function-variable function">assetFileNames</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">assetInfo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> name <span class="token operator">=</span> assetInfo<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&quot;static/css/[name]-[hash].[ext]&quot;</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.[jpe?g|png|gif]$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&quot;static/images/[name]-[hash].[ext]&quot;</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&quot;static/[ext]/[name]-[hash].[ext]&quot;</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行<code>npx vite build</code>打包后，生成的<code>dist</code>目录结构如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>dist
├─ app<span class="token punctuation">.</span>html
├─ index<span class="token punctuation">.</span>html
└─ <span class="token keyword">static</span>
   ├─ css
   │  ├─ app<span class="token operator">-</span>d0983e99<span class="token punctuation">.</span>css
   │  └─ index<span class="token operator">-</span>28a21df5<span class="token punctuation">.</span>css
   ├─ images
   │  ├─ app<span class="token operator">-</span>8cce9ece<span class="token punctuation">.</span>jpg
   │  └─ index<span class="token operator">-</span>244a1ddb<span class="token punctuation">.</span>jpg
   ├─ js
   │  ├─ app<span class="token operator">-</span>0e78e232<span class="token punctuation">.</span>js
   │  └─ index<span class="token operator">-</span>8695444c<span class="token punctuation">.</span>js
   └─ chunk
      └─ modulepreload<span class="token operator">-</span>polyfill<span class="token operator">-</span>3cfb730f<span class="token punctuation">.</span>js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,91),dn={href:"https://cn.rollupjs.org/configuration-options/",target:"_blank",rel:"noopener noreferrer"},rn=n("h2",{id:"十、vite-总结",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#十、vite-总结","aria-hidden":"true"},"#"),s(" 十、Vite 总结")],-1),kn=n("p",null,[s("通过前面的学习，我们对 Vite 有了初步的认识。Vite 本质是一个构建工具的高阶封装，他的内部其实使用的是其它的打包工具。最核心的就是"),n("code",null,"esbuild"),s("和"),n("code",null,"Rollup"),s("打包工具。")],-1),vn=n("ul",null,[n("li",null,"在开发环境下，由 esbuild 执行依赖预构建工作"),n("li",null,"在生产环境下，由 Rollup 完成打包工作")],-1),mn={href:"https://cn.vitejs.dev/guide/why.html",target:"_blank",rel:"noopener noreferrer"},bn=t(`<blockquote><p>以下内容是大家在本章节重点需要掌握的</p></blockquote><h3 id="_1、如何搭建-vite-项目" tabindex="-1"><a class="header-anchor" href="#_1、如何搭建-vite-项目" aria-hidden="true">#</a> 1、如何搭建 Vite 项目</h3><p>首先我需要知道，Vite 默认是以根目录下的<code>index.html</code>作为打包的入口文件。</p><p>所以在创建 Vite 项目时，一定要在根目录下新建<code>index.html</code>文件。然后还要了解以下 Vite 相关的命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> init <span class="token parameter variable">-y</span>   <span class="token comment"># 初始化项目的package.json文件</span>
<span class="token function">npm</span> i vite <span class="token parameter variable">-D</span>  <span class="token comment"># 安装vite</span>
npx vite  <span class="token comment"># 启动开发服务</span>
npx vite build <span class="token comment"># 生产环境打包</span>
npx vite preview  <span class="token comment">#预览打包后的生产环境项目</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我也可以在<code>package.json</code>中，配置<code>scripts</code>命令脚本，如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span><span class="token string">&quot;vite&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span><span class="token string">&quot;vite build&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;preview&quot;</span><span class="token operator">:</span><span class="token string">&quot;vite preview&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后就可以采用以下命令完成对应工作</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> run dev    <span class="token comment"># 启动开发服务</span>
<span class="token function">npm</span> run build   <span class="token comment"># 执行生产环境打包</span>
<span class="token function">npm</span> run preview  <span class="token comment">#预览生产环境打包后的项目</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、依赖预构建" tabindex="-1"><a class="header-anchor" href="#_2、依赖预构建" aria-hidden="true">#</a> 2、依赖预构建</h3><p>Vite 将应用中的模块区分为 <strong>依赖</strong> 和 <strong>源码</strong> 两类，改进了开发服务器启动时间</p><ul><li><strong>依赖模块：</strong> 简单理解为在代码中引用的第三方模块。</li><li><strong>源码模块：</strong> 简单理解为，我自己写的那部分代码。</li></ul><p>Vite 在开发环境下并不会对<strong>源码模块</strong>进行打包处理，只会对依赖模块打包，并采用打包极快的 esbuild 完成打包工作。</p><p>然后将打包后生成的 JS 文件，保存在当前项目的<code>node_modules/.vite</code>目录下缓存起来，同时对该文件做浏览器强缓存，以提高开发期间页面重新加载的性能。</p><h3 id="_3、vite-开发服务启动极快的原因" tabindex="-1"><a class="header-anchor" href="#_3、vite-开发服务启动极快的原因" aria-hidden="true">#</a> 3、Vite 开发服务启动极快的原因</h3><p>Vite 之所以能快速的启动服务，主要是做了以下几方面优化</p><ul><li>Vite 以原生 ESM 方式提供源码（源码不打包），让浏览器接管了打包程序的部分工作</li><li>使用 esbuild 预构建依赖和加快构建速度</li><li>对预构建的依赖做文件缓存与浏览器缓存</li><li>启动应用时按需提供代码</li><li>内置了一套原生 ESM 的模块热替换（HMR）</li></ul><p>.....</p><h3 id="_4、如何快速创建-vite-项目" tabindex="-1"><a class="header-anchor" href="#_4、如何快速创建-vite-项目" aria-hidden="true">#</a> 4、如何快速创建 Vite 项目</h3><p>通过执行以下命令，就可以快速创建一个 Vite 项目</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> create vite@latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5、vite-中使用插件" tabindex="-1"><a class="header-anchor" href="#_5、vite-中使用插件" aria-hidden="true">#</a> 5、Vite 中使用插件</h3><p>目前主要掌握以下两种插件的作用与配置</p><ul><li><code>vitejs/plugin-legacy</code> 插件，用来处理 JS 兼容性</li><li><code>@vitejs/plugin-vue</code>用来解析.vue 结尾的文件</li></ul><p>通过这两个插件，我知道在 Vite 中使用插件，分三步</p><ul><li>下载插件包</li><li>在配置中通过 import 导入包</li><li>在配置文件导出对象的<code>plugins</code>选项中配置插件</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> legacy <span class="token keyword">from</span> <span class="token string">&quot;@vitejs/plugin-legacy&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token comment">// 插件配置选项，plugins的值是一个数组，其中的第一项代表一个插件</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// 配置legacy插件</span>
    <span class="token function">legacy</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token comment">// 指定转码后的代码需要兼容那些版本的浏览器,</span>
      <span class="token comment">// 与webpack中\`@babel/preset-env\`预设中设置了\`targets\`参数的含义一样</span>
      <span class="token literal-property property">targets</span><span class="token operator">:</span> <span class="token string">&quot;Firefox &gt; 23&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6、vite-中对静态资源处理" tabindex="-1"><a class="header-anchor" href="#_6、vite-中对静态资源处理" aria-hidden="true">#</a> 6、Vite 中对静态资源处理</h3><p>Vite 作为一个开箱即用的前端构建工具，默认支持 JS、CSS、Sass、Less、JSON、图片、HTML 等静态资源的处理。</p><p>针对 CSS 文件的处理，有时还需要我做相关配置，所以我重点讲解了 CSS 的以下几个主意点</p><ul><li>Vite 中对 CSS 的默认处理行为</li><li>Vite 支持 CSS 模块化处理</li><li>Vite 支持 CSS 预处理器</li><li>Vite 中如何处理 CSS 兼容性</li></ul><p>针对 JSON 可以被直接导入 —— 同样支持具名导入：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导入整个对象</span>
<span class="token keyword">import</span> json <span class="token keyword">from</span> <span class="token string">&quot;./data.json&quot;</span><span class="token punctuation">;</span>

<span class="token comment">//  对一个根字段使用具名导入 —— 有效帮助 treeshaking！</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./data.json&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7、vite-的常规配置" tabindex="-1"><a class="header-anchor" href="#_7、vite-的常规配置" aria-hidden="true">#</a> 7、Vite 的常规配置</h3><p>在我讲解的 Vite 常规配置内容中，我需要重点掌握以下两项配置</p><ul><li>Vite 的代理服务配置</li><li>Vite 中如何配置别名路径</li></ul><p>其它几项配置，大家只需要做个了解就可以了</p>`,37);function gn(hn,qn){const a=o("ExternalLinkIcon");return i(),c("div",null,[U,n("blockquote",null,[n("p",null,[s("详细查阅，"),n("a",G,[s("Vue 官方文档 - 依赖预构建(opens new window)"),e(a)])])]),K,n("p",null,[s("以下"),n("a",Q,[s("是 esbuild 官方 (opens new window)"),e(a)]),s("提供的一个关于几种不同打包工具的打包速度对比。")]),X,n("p",null,[s("执行以下命名，安装"),Y,s("插件 ，"),n("a",Z,[s("点击查看插件详细教程(opens new window)"),e(a)])]),nn,n("blockquote",null,[n("p",null,[s("兼容浏览器版配置，"),n("a",sn,[s("查阅浏览器配置(opens new window)"),e(a)])])]),an,n("blockquote",null,[n("p",null,[s("关于其它相关配置，也可以让配置有智能提示，"),n("a",en,[s("查阅 Vite 官方- 配置智能提示(opens new window)"),e(a)])])]),tn,n("ul",null,[pn,n("li",null,[n("a",on,[s("autoprefixer 插件 (opens new window)"),e(a)]),s("，是专门用来处理 CSS 兼容性的插件。我只需要安装这个插件，并配置好就可以。")])]),cn,n("blockquote",null,[n("p",null,[s("更多配置："),n("a",ln,[s("查阅 Vite 官方文档 - 开发服务选项配置(opens new window)"),e(a)])])]),un,n("blockquote",null,[n("p",null,[s("关于 rollup 更多配置，大家可以参考 "),n("a",dn,[s("rollup 官网的配置选项(opens new window)"),e(a)])])]),rn,kn,vn,n("p",null,[s("你可能有一个疑问，esbuild 的打包速度是 rollup 的 10-100 倍，为什么生产环境下不使用 esbuild 来构建呢 ？这个官方文档给出了说明。参考地址："),n("a",mn,[s("https://cn.vitejs.dev/guide/why.html(opens new window)"),e(a)])]),bn])}const xn=p(W,[["render",gn],["__file","index.html.vue"]]);export{xn as default};
