import{_ as n,o as s,c as a,d as t}from"./app-25a91de2.js";const p="/xunyu-blog/assets/image-20230711131513864-efc128c9.png",e="/xunyu-blog/assets/image-20230715132145733-77c110a7.png",o={},c=t('<h1 id="每日面试题" tabindex="-1"><a class="header-anchor" href="#每日面试题" aria-hidden="true">#</a> 每日面试题</h1><h2 id="_7月11日" tabindex="-1"><a class="header-anchor" href="#_7月11日" aria-hidden="true">#</a> @7月11日</h2><h3 id="一、说一下css的盒模型" tabindex="-1"><a class="header-anchor" href="#一、说一下css的盒模型" aria-hidden="true">#</a> 一、说一下CSS的盒模型？</h3><blockquote><p>在HTML页面中的所有元素都可以看成是一个盒模型</p></blockquote><p>**盒子的组成：**内容<code>content</code>、内边距<code>padding</code>、边框<code>border</code>、外边距<code>margin</code></p><p><strong>盒模型的类型：</strong></p><ul><li>标准盒模型 （<code>content-box</code>） <ul><li><code>margin + border + padding + content</code></li></ul></li><li>IE盒模型（怪异盒模型）（<code>border-box</code>） <ul><li><code>margin + content</code>（<code>border + padding</code>）</li></ul></li></ul><p><strong>控制盒模型的样式：</strong><code>box-sizing:content-box</code>（默认值） 、<code>border-box</code>（IE盒模型）</p><h3 id="二、css选择器的优先级" tabindex="-1"><a class="header-anchor" href="#二、css选择器的优先级" aria-hidden="true">#</a> 二、CSS选择器的优先级？</h3><p>**CSS的特性：**继承性、层叠性、优先级</p><p>**优先级：**写CSS样式的时候，会给同一个元素添加多个样式，此时谁的权重高就显示谁的样式</p><p>标签、类/伪类/属性、全局选择器、id、行内样式、!important</p><p>!important &gt; 行内样式 &gt; id &gt; 类/伪类/属性、标签、全局选择器</p><h3 id="三、隐藏元素的方法有哪些" tabindex="-1"><a class="header-anchor" href="#三、隐藏元素的方法有哪些" aria-hidden="true">#</a> 三、隐藏元素的方法有哪些？</h3><ul><li><p><code>display:none</code></p><ul><li>元素在页面上消失，不占据空间</li></ul></li><li><p><code>opacity:0</code></p><ul><li>设置了元素的透明度为0，元素不可见，占据位置空间</li></ul></li><li><p><code>visibility:hidden</code></p><ul><li>让元素消失，占据位置空间，一种不可见的状态</li></ul></li><li><p><code>position:absolute</code></p><ul><li>通过定位将元素移除可视区外，它不会影响布局</li></ul></li><li><p><code>clip-path</code></p><ul><li><p>创建一个只有元素的部分区域可以显示的剪切区域。区域内的部分显示，区域外的隐藏</p><p>用法<code>clip-pach：polygon(0px 0px,0px 0px,0px 0px,0px 0px);</code></p></li></ul></li></ul><h3 id="四、px和rem的区别是什么" tabindex="-1"><a class="header-anchor" href="#四、px和rem的区别是什么" aria-hidden="true">#</a> 四、px和rem的区别是什么？</h3><ul><li>px是像素，显示器上给我们呈现画面的像素，每个像素的大小的一样的，绝对单位长度</li><li>rem，相对单位，相对于html根节点的<code>font-size</code>的值，直接给html节点的<code>font-size:62.5%</code>； <ul><li><code>1rem = 10px; (16px * 62.5% = 10px)</code></li></ul></li></ul><h3 id="五、重排和重绘有什么区别" tabindex="-1"><a class="header-anchor" href="#五、重排和重绘有什么区别" aria-hidden="true">#</a> 五、重排和重绘有什么区别？</h3><ul><li>**重排（回流）：**布局引擎会根据所有的样式计算出盒模型在页面上的位置和大小</li><li>**重绘：**计算好盒模型的位置、大小和其他一些属性之后，浏览器就会根据每个盒模型的特性进行绘制</li></ul><blockquote><p>浏览器的渲染机制</p><p><img src="'+p+`" alt="image-20230711131513864"></p><ul><li><strong>HTML解释器</strong>：解析HTM文档，主要作用是将HTML文档转换成DOM树</li><li>**CSS解释器：**将DOM中各个元素对象进行计算，获取样式信息，用于渲染树的构建</li><li>**JavaScript解释器：**使用JavaScript可以修改也买你的内容，css规则等。JavaScript解释器能够解释JavaScript代码，并通过DOM接口和CSSOM接口来修改页面内容、样式规则、从而改变渲染结果</li><li>**页面布局：**DOM创建之后，渲染引擎将其中的元素对象与样式规则进行结合，可以得到渲染树。布局规则是正对渲染树，计算其各个元素的大小、位置等布局信息。</li><li>**页面绘制：**使用图形库将计算后的渲染树绘制成可视化的图像结果</li></ul></blockquote><p>对DOM的大小、位置进行修改后，浏览器需要重新计算元素的这些<strong>几何属性</strong>，就叫<strong>重排</strong></p><p>对DOM的样式进行修改，比如color和background-color，浏览器不需要重新计算几何属性的时候，直接绘制了该<strong>元素的新样式</strong>，那么这里就只触发了<strong>重绘</strong></p><h2 id="_7月12日" tabindex="-1"><a class="header-anchor" href="#_7月12日" aria-hidden="true">#</a> @7月12日</h2><h3 id="一、让一个元素水平垂直居中的方式有哪些" tabindex="-1"><a class="header-anchor" href="#一、让一个元素水平垂直居中的方式有哪些" aria-hidden="true">#</a> 一、让一个元素水平垂直居中的方式有哪些？</h3><ul><li><p><strong>定位 + margin</strong></p><ul><li>父元素固定宽高、相对定位，子元素固定宽高、绝对定位、上下左右设置为0，<code>margin:auto</code>，就可以实现子元素相对于父元素水平垂直居中</li></ul></li><li><p><strong>定位 + transform</strong></p><ul><li>父元素相对定位，子元素绝对定位，先将元素的左上角定位到页面的中心，就是top和left设置为50%，再通过translate调整元素自身的中心点，设置<code>transform:translate(-50%,-50%)</code></li></ul></li><li><p><strong>flex布局</strong></p><ul><li><p>设置父元素为弹性盒子：<code>display:flex;</code>然后设置父元素和盒子内部子元素水平垂直居中，<code>justify-content:center;align-items:center</code></p></li><li><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.father</span><span class="token punctuation">{</span>
    <span class="token property">display</span><span class="token punctuation">:</span>flex<span class="token punctuation">;</span>
    <span class="token property">justify-content</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span>
    <span class="token property">align-items</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span>pink<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.son</span><span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span>green<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>grid布局</strong></p><ul><li><p>设置父元素为网格布局：<code>display:grid;</code>设置<code>justify-content:center;align-items:center;</code></p></li><li><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.father</span><span class="token punctuation">{</span>
    <span class="token property">display</span><span class="token punctuation">:</span>grid<span class="token punctuation">;</span>
    <span class="token property">justify-content</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span>
    <span class="token property">align-items</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span>pink<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.son</span><span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span>green<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>table布局</strong></p><ul><li><p>设置父元素为表格元素，<code>display:table-cell;</code>，设置其内部元素水平垂直居中：<code>text-align:center;vertical-align:middle;</code>设置子元素为行内块：<code>display:inline-block;</code></p></li><li><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.father</span><span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span>400px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span>300px<span class="token punctuation">;</span>
    <span class="token property">display</span><span class="token punctuation">:</span>table-cell<span class="token punctuation">;</span>
    <span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span>
    <span class="token property">vertical-align</span><span class="token punctuation">:</span>middle<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.son</span><span class="token punctuation">{</span>
    <span class="token property">display</span><span class="token punctuation">:</span>inline-block<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span>pink<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="二、css的哪些属性哪些可以继承-哪些不可以继承" tabindex="-1"><a class="header-anchor" href="#二、css的哪些属性哪些可以继承-哪些不可以继承" aria-hidden="true">#</a> 二、CSS的哪些属性哪些可以继承？哪些不可以继承？</h3><p>可以继承</p><ul><li>字体系列属性：<code>font、font-family、font-weight、font-size、fontstyle</code></li><li>文本系列属性 <ul><li>内联元素：<code>color</code>、<code>line-height</code>、<code>word-spacing</code>（设置单词之间的间距）、<code>letter-spacing</code>（设置文本字符间距）、<code>text-transform</code>（用于设置文本的大小写：uppercase所有字符强制转为大写；lowercase转小写；capitalize首字符强制转为大写）</li><li>块级元素：<code>text-indent</code>、<code>text-aline</code></li><li>元素可见性：<code>visibility</code></li><li>表格布局属性：<code>caption-side</code>（标题位置）、<code>border-collapse</code>（设置边框分离还是合并）、<code>border-spacing</code>（变宽分离状态下设置边框间距）、<code>empty-cells</code>（定义如何渲染无可视内容的单元格边框和背景）、<code>table-layout</code>（定义用于布局单元格行和列的算法）</li><li>列表布局属性：<code>list-tyle</code></li></ul></li></ul><p>不可以继承</p><ul><li>display：规定元素应该生成的框的类型</li><li>文本类型：<code>vertical-align</code>、<code>text-decoration</code>（用于设置文本的修饰线外观包括上/下划线，贯穿线、删除线、闪烁）</li><li>盒子模型的属性：<code>width</code>、<code>height</code>、<code>margin</code>、<code>border</code>、<code>padding</code></li><li>背景属性：<code>background</code>、<code>background-color</code>、<code>background-image</code></li><li>定位属性：<code>float</code>、<code>clear</code>、<code>position</code>、<code>top</code>、<code>right</code>、<code>bottom</code>、<code>left</code>、<code>min-width</code>、<code>min-height</code>、<code>max-width</code>、<code>max-height</code>、<code>overflow</code>、<code>clip</code></li></ul><h3 id="三、有没有用过预处理器" tabindex="-1"><a class="header-anchor" href="#三、有没有用过预处理器" aria-hidden="true">#</a> 三、有没有用过预处理器？</h3><p>SCSS LESS</p><p>预处理器可以让css代码更简洁、易懂、具备更强的可移植性和维护性</p><h3 id="四、js由哪三部分组成" tabindex="-1"><a class="header-anchor" href="#四、js由哪三部分组成" aria-hidden="true">#</a> 四、JS由哪三部分组成？</h3><ul><li>**ECMAScript：**JS 的核心内容，描述了语言的基础语法，比如var，for，数据类型（数组、字符串）</li><li>**文档对象模型（DOM）😗*DOM把整个HTML页面规划为元素构成的文档</li><li>**浏览器对象模型（BOM）😗*对浏览器窗口进行访问和操作</li></ul><h3 id="五、js有哪些内置对象" tabindex="-1"><a class="header-anchor" href="#五、js有哪些内置对象" aria-hidden="true">#</a> 五、JS有哪些内置对象？</h3><p>String、Boolean、Number、Array、Object、Function、Math、Date、RegExp...</p><ul><li><strong>Math</strong><ul><li>abs()</li><li>sqrt()</li><li>max()</li><li>min()</li><li>...</li></ul></li><li><strong>Data</strong><ul><li>new Data()</li><li>getYear()</li><li>...</li></ul></li><li><strong>Array</strong></li><li><strong>String</strong><ul><li>concat()</li><li>length()</li><li>slice()</li><li>split()</li><li>...</li></ul></li></ul><h2 id="_7月13日" tabindex="-1"><a class="header-anchor" href="#_7月13日" aria-hidden="true">#</a> @7月13日</h2><h3 id="一、操作数组的方法有哪些" tabindex="-1"><a class="header-anchor" href="#一、操作数组的方法有哪些" aria-hidden="true">#</a> 一、操作数组的方法有哪些？</h3><p>push() pop() sort() splice() unshift() shift() reverse() concat() join() filter() ervery() some() reduce() isArray() findIndex()</p><p>哪些方法会改变原数组？</p><p>push() pop() unshift() shift() sort() reverse() splice()</p><h3 id="二、js有哪些数据类型-如何判断这些数据类型" tabindex="-1"><a class="header-anchor" href="#二、js有哪些数据类型-如何判断这些数据类型" aria-hidden="true">#</a> 二、JS有哪些数据类型，如何判断这些数据类型？</h3><p><strong>1、最新的ECAMScript标准定义了8中数据类型（7种基本数据类型，1种引用数据类型）</strong></p><table><thead><tr><th style="text-align:left;">分类</th><th style="text-align:left;">数据类型</th></tr></thead><tbody><tr><td style="text-align:left;">7 种基本数据类型</td><td style="text-align:left;">string（字符串）、number（数字）、boolean（布尔）、undefined（未定义）、null（空）、Symbol（符号）、BigInt（数值类型，表示任意精度的整数）</td></tr><tr><td style="text-align:left;">1 种引用数据类型</td><td style="text-align:left;">Object 对象：Array（数组）、Function（函数）、Date（时间）等</td></tr></tbody></table><p><strong>2、JS检测数据类型的四种方式</strong></p><ul><li>typeof</li><li>instanceof</li><li>constructor</li><li>Object.prototype.toString.call()</li></ul><p><strong>①数据类型检测方法一：typeof</strong></p><blockquote><p><strong>语法</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">typeof</span> 表达式
或
<span class="token keyword">typeof</span> 变量
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>例子</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">typeof</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//&#39;number&#39;</span>
<span class="token keyword">typeof</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span> <span class="token comment">//&#39;string&#39;</span>
<span class="token keyword">typeof</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//&#39;boolean&#39;</span>
<span class="token keyword">typeof</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// &#39;undefined&#39;</span>
<span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//&#39;object&#39;</span>
<span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//&#39;object&#39;</span>
<span class="token keyword">typeof</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">//&#39;object&#39;</span>
<span class="token keyword">typeof</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">//&#39;function&#39;</span>
<span class="token keyword">typeof</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&#39;symbol&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>typeof 的返回值类型为字符串类型</li><li>typeof 判断基本数据类型时，除了 null 的输出结果为&#39;object&#39; 其它类型都能正确判断</li><li>typeof 判断引用数据类型时，除了判断函数会输出&#39;function&#39; 其它都输出&#39;object&#39;</li></ul><p><strong>注意点：</strong></p><p>null 的数据类型是 object （null 是对一个空对象的引用，是一个占位符）</p><ul><li>typeof 并不能区分引用数据类型（Array 数组、Date 时间）等</li><li>所以我们可以使用 instanceof 来判断引用数据类型</li></ul></blockquote><p><strong>② 数据类型检测方法二：instanceof</strong></p><blockquote><p><strong>语法：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>obj1 <span class="token keyword">instanceof</span> <span class="token class-name">obj2</span><span class="token punctuation">;</span> <span class="token comment">// 判断obj1是否为obj2的实例</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>instanceof 用来判断两个对象是否属于实例关系，通过这种关系来判断对象是否属于某一类型。（但不能判断对象具体属于哪种类型）。</p></li><li><p>instanceof 可以准确判断引用数据类型，<strong>它的原理是</strong>：检测构造函数的 prototype 属性是否在某个实例对象的原型链上。</p></li><li><p>instanceof 返回值为布尔值</p></li><li><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
  <span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">正在吃饭</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//Student类继承People类</span>
  <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">正在学习</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;小明&quot;</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token string">&quot;0001&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">People</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">People</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//null</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//只要在原型链上，都为true</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s <span class="token keyword">instanceof</span> <span class="token class-name">People</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//只要在原型链上，都为true</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//只要在原型链上，都为true</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+e+`" alt="image-20230715132145733"></p></li></ul></blockquote><p><strong>③ 数据类型检测方法三：constructor（构造函数)</strong></p><blockquote><p><strong>语法：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;&quot;</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> String<span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
num<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Number<span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token boolean">true</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Boolean<span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Array<span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Object<span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当一个函数 F 被定义时，JS 引擎会为 F 添加 prototype 原型，然后在 prototype 上添加了一个 constructor 属性，并让其指向 F 的引用</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 实例</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">F</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// function F(){}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">F</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">===</span> <span class="token constant">F</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 构造器指向F</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>constructor <span class="token operator">===</span> <span class="token constant">F</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当执行 const f = new F() 时，F 被当成了构造函数，f 是 F 的实例对象，此时 F 原型上的 constructor 传递到了 f 上，因此<code>f.__proto__.constructor===F</code>简写成<code>f.constructor === F</code></p><p>从上面的整个过程来看，构造函数 F 就是新对象 f（实例）的类型。所以如果某个实例的 constructor 指向某个构造函数，那这个构造函数就是这个实例的类型。</p><p><strong>注意</strong>：</p><blockquote><ul><li>constructor 是不稳定的，因为开发者可以重写 prototype,重写后，原有的 constructor 引用会丢失，需要我们重新指定 constructor 的引用</li><li>在没有重新指定时，constructor 会默认为 Object</li></ul></blockquote><p><strong>为什么重写 prototype 后，constructor 的默认值会为 Object 呢？</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">F</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 结果为 Object() { [native code] }</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当 F.prototype={ }时，{ }是 new Object 的字面量（Object 的实例），所以 Object 原型上的 constructor 会被传递给{ }，Object 的 constructor 指向的就是 Object 本身。</p></blockquote><p><strong>④ 、数据类型检测方法四：Object.prototype.toString.call()</strong></p><blockquote><p><code>toString()</code>是 Object 的原型方法，调用该方法，默认返回当前对象的 <code>[object type]</code>。其中 type 就是对象的类型。</p><ul><li><code>Object</code>对象，直接调用<code>toString()</code> 就能返回 [object Object]</li><li>其他对象，则需要通过 call / apply 来调用才能返回正确的类型信息</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object String]</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Number]</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Boolean]</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Symbol]</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Undefined]</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Function]</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Date]</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Array]</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Object]</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object HTMLDocument]</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Window]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="三、null-和-undefined-的区别" tabindex="-1"><a class="header-anchor" href="#三、null-和-undefined-的区别" aria-hidden="true">#</a> 三、null 和 undefined 的区别 ？</h3><blockquote><ul><li><p><strong>undefined（未定义）</strong>：当一个变量被定义（声明）但并没有赋值时，他的初始值就是 undefined。</p></li><li><p>null（空）：表示对一个空对象的引用。</p><ul><li><p>当一个变量定好之后，未来是用来保存对象的引用时，我们可以给他赋初始值为 null。</p></li><li><p>当一个对象使用完，需要对其进行释放内存时，可以将其值设置 null （js 会自动垃圾回收）</p></li></ul></li></ul><p><strong>相同点</strong>：</p><ul><li>undefined 和 null 都是基本数据类型，保存栈中。</li><li>undefined 和 null 转换为 boolean 布尔值都为 false</li></ul><p><strong>不同点</strong>:</p><p>两者转换为数字类型时，其值不一样</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//NaN</span>
<span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>特殊点</strong>:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></blockquote><h3 id="四、基本数据类型和引用数据类型的区别" tabindex="-1"><a class="header-anchor" href="#四、基本数据类型和引用数据类型的区别" aria-hidden="true">#</a> 四、基本数据类型和引用数据类型的区别？</h3><table><thead><tr><th style="text-align:left;">比较</th><th style="text-align:left;">基本数据类型</th><th style="text-align:left;">引用数据类型</th></tr></thead><tbody><tr><td style="text-align:left;">数据存放位置</td><td style="text-align:left;">基本数据类型存放在<strong>栈</strong>中，数据大小确定，内存空间大小可以分配</td><td style="text-align:left;">引用数据类型存放在<strong>堆</strong>中，每个空间大小不一样，要根据情况进行特定的配置</td></tr><tr><td style="text-align:left;">变量存储内容</td><td style="text-align:left;">变量中存储的是<strong>值本身</strong></td><td style="text-align:left;">变量存储的是<strong>地址</strong></td></tr><tr><td style="text-align:left;">变量用来赋值时</td><td style="text-align:left;">把变量的<strong>值</strong>复制一份去赋值</td><td style="text-align:left;">把变量的<strong>内存地址</strong>复制一份去赋值</td></tr><tr><td style="text-align:left;">存储内容大小</td><td style="text-align:left;">存储<strong>值较小</strong></td><td style="text-align:left;">存储<strong>值较大</strong></td></tr></tbody></table><blockquote><p><strong>栈和堆的的介绍</strong></p><p>当我们创建数据时就会占用内存，在内存中主要开辟两类空间：<strong>堆内存</strong> 和 <strong>栈内存</strong></p><table><thead><tr><th style="text-align:left;">比较</th><th style="text-align:left;">栈（线程）</th><th style="text-align:left;">堆（进程，线程共享）</th></tr></thead><tbody><tr><td style="text-align:left;">大小固定</td><td style="text-align:left;">创建时，确定大小（值大小固定），故可能会溢出</td><td style="text-align:left;">大小不固定，可随时增加</td></tr><tr><td style="text-align:left;">存储类型</td><td style="text-align:left;">存储基本数据类型及引用类型数据的堆地址</td><td style="text-align:left;">存储引用类型数据</td></tr><tr><td style="text-align:left;">如何访问</td><td style="text-align:left;">按值访问</td><td style="text-align:left;">按引用（堆内存地址）访问</td></tr><tr><td style="text-align:left;">特点</td><td style="text-align:left;">空间小，运行效率高</td><td style="text-align:left;">空间大，运行效率相对较低</td></tr><tr><td style="text-align:left;">存放规则</td><td style="text-align:left;">按顺序存放，先进后出</td><td style="text-align:left;">无序存储，可根据引用（地址）直接获取</td></tr></tbody></table><p><strong>实例</strong>:</p><p>基本类型和引用类型赋值的区别</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token comment">//10</span>
  a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//20 10</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>a 变量是基本数据类型,他在赋值是把 a 的值复制一份给到 b</li><li>所以 b = 10 ，最后我们修改 a 的值，并不会响影到 b</li></ul><p><img src="https://www.arryblog.com/assets/img/image-20220513164139171.36372a70.png" alt="image-20220513164139171"></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;清心&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">34</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> obj2 <span class="token operator">=</span> obj<span class="token punctuation">;</span> <span class="token comment">//是把obj中地址赋值给obj2,两者指向的是同一个堆内存中地址</span>
  obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;小丽&quot;</span><span class="token punctuation">;</span> <span class="token comment">//操作是堆内存中的数据</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token operator">===</span> obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">,</span> obj2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//小丽 小丽</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>栈内存中存着变量 obj 对堆内存中的地址，而堆内存中存着对应地址的数据内容</p></blockquote><p><img src="https://www.arryblog.com/assets/img/image-20220513164726666.ef4e20b0.png" alt="image-20220513164726666"></p><p>当 obj2=obj 时，其实是把 obj 中保存的地址赋值给了 obj2,所以本质上 obj===obj2 比较时,比较的是地址，地址始终没有变，所以两者是全等的。</p><p>我们在操 obj.name = &#39;小丽&#39; 时，操作的是堆内存中的数据，所以 obj.name 和 obj2.name 的值是一样的。</p></blockquote><h3 id="五、typeof-nan-返回结果" tabindex="-1"><a class="header-anchor" href="#五、typeof-nan-返回结果" aria-hidden="true">#</a> 五、typeof(NaN)返回结果？</h3><blockquote><ul><li>NaN 不是数字的数字类型，所以 <code>typeof(NaN)</code> 返回结果就是 number</li><li>NaN === NaN 结果为 false，他自己和他自己都不相等</li><li>如何判断一个变量的值是 NaN ?</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">&quot;我&quot;</span> <span class="token operator">-</span> <span class="token string">&quot;你&quot;</span><span class="token punctuation">;</span>
<span class="token function">isNaN</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> a <span class="token operator">===</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h2 id="_7月14日" tabindex="-1"><a class="header-anchor" href="#_7月14日" aria-hidden="true">#</a> @7月14日</h2><h3 id="一、以下两种方式的区别-及-typeof-得到的结果-字节" tabindex="-1"><a class="header-anchor" href="#一、以下两种方式的区别-及-typeof-得到的结果-字节" aria-hidden="true">#</a> 一、以下两种方式的区别？及 typeof 得到的结果（字节）</h3><blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> str1 <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>str1 是基本数据类型</strong></p><ul><li>存储在在栈内存中，用 typeof 检测的结果为 string。</li><li>当我们把 str1 赋值给别一个变量时，是把 str1 中的值复制一份来赋值。</li></ul><p><strong>str2 是引用数据类型</strong></p><ul><li>存储在堆内存中，不过变量 str2 中存的是指向堆内存中的地址，用 typeof 检测 str2 结果为 Object。</li><li>当我们把 str2 赋值给另一个变量时，是把 str2 中存入的地址复制一分给到了变量。</li></ul></blockquote><h3 id="二、typeof-能判断那些类型" tabindex="-1"><a class="header-anchor" href="#二、typeof-能判断那些类型" aria-hidden="true">#</a> 二、typeof 能判断那些类型 ？</h3><blockquote><p>typeof 能判断的类型有：string、number、boolean、undefined、symbol、function</p><ul><li>typeof 判断基本数据类型时，除了 null 的输出结果为&#39;object&#39; 其它类型都能正确判断</li><li>typeof 判断引用数据类型时，除了判断函数会输出&#39;function&#39; 其它都输出&#39;object&#39;</li></ul></blockquote><h3 id="三、typeof-null-为什么返回的是-object" tabindex="-1"><a class="header-anchor" href="#三、typeof-null-为什么返回的是-object" aria-hidden="true">#</a> 三、typeof(null) 为什么返回的是&#39;object&#39; ?</h3><blockquote><ul><li><code>typeof(null) = object</code> 是 JS 在诞生设计之初留下的历史遗留 BUG 问题</li><li>在 JS 中进行数据底层存储的时候是用二进制存储的，这是一定的，而且它的前三位是代表存储的数据类型，而 000 是代表 object 类型也就是引用类型的数据。</li><li>而 null 正好全是 0，所以它巧妙的符合 object 类型的存储格式，所以在 typeof 检测的时候，它才会输出 object。</li></ul></blockquote><h3 id="四、-和-的区别" tabindex="-1"><a class="header-anchor" href="#四、-和-的区别" aria-hidden="true">#</a> 四、== 和 === 的区别 ？</h3><p>== 在比较类型不同的变量时，如果两侧的数据类型不同，则会按以下规则进行相应的隐式类型类型转换</p><ul><li>对象 --&gt; 字符串 --&gt; 数值</li><li>布尔值 --&gt; 数值</li></ul><blockquote><p>转换后，再比较两边的值是否相等，值相等返回 true，不等返回 false;</p></blockquote><p>=== 在比较时，会比较值和类型两个。只要两边值的类型不相等就返回 false</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span><span class="token punctuation">(</span>
  <span class="token comment">// 返回 true，因为 x 和 y 的值相同</span>
  x <span class="token operator">===</span> y
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 返回 false，因为 x 的类型是“数字”，y 的类型是“字符串”</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>不过要注意以下几个特殊情况的比较</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">NaN</span> <span class="token operator">===</span> <span class="token number">NaN</span><span class="token punctuation">;</span> <span class="token comment">// false NaN和任何数据都不相等，包括自身</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// false 比较的是地址</span>
<span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">==</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// false 比较的是地址</span>
<span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// true; 特殊情况，记下</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>对象转字符串，得到的是&#39;[object Object]&#39;</p></blockquote><p><strong>考题 1：以下输出结果</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><ul><li>[] 转换成字符串是&#39;&#39; ，然后&#39;&#39; 转换成数值是 0</li><li>false 转换成数值是 0 所以最后比较的值是 0==0 ，结果为 true</li></ul></blockquote><p><strong>考题 2：以下输出结果</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;能弹出吗？&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可以弹出弹窗</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><ul><li>if 语句中的表达式或值都会被转成 boolean</li><li>[] 转成布尔值是 true，所以可以弹出。</li></ul></blockquote><h3 id="五、什么是变量提升-腾讯、网易、小米" tabindex="-1"><a class="header-anchor" href="#五、什么是变量提升-腾讯、网易、小米" aria-hidden="true">#</a> 五、什么是变量提升 ？（腾讯、网易、小米）</h3><p>变量提升：是指使用 var 关键字声明的变量会自动提升到当前作用域的最前面。不过只会提升声明，不会提升其初始化。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>变量只有被声明后，才能使用</strong></p><ul><li>我们在 var a=10; 之前 console.log(a); 之所以不会报错，就是因为变 a 的声明被提前到了当前作用域的最顶部</li><li>不过只提升了声明，并没会提升初始化，所以打印结果为 undefined; （变量声明初始化，其默认值是 undefined）</li></ul><p>上面代码可以看成如下：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> a<span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
  a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> b<span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
    b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>补充</strong>：</p><ul><li>函数声明也会被提升，函数和变量相比，会被优先提升。</li><li>这意味着函数会被提升到更靠前的位置，如果出现了重名的变量和函数，声明提升时会以函数为主。</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// function num(){console.log(&#39;函数&#39;);}  函数被优先提升</span>
  <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 在从上往下执行时num变量赋值为 1</span>
  <span class="token keyword">function</span> <span class="token function">num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;函数&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 报错，因为变量num被重新赋值为1，不会再有函数了</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7月15日" tabindex="-1"><a class="header-anchor" href="#_7月15日" aria-hidden="true">#</a> @7月15日</h2><h3 id="一、const、let、var-区别-叠纸、字节、阿里" tabindex="-1"><a class="header-anchor" href="#一、const、let、var-区别-叠纸、字节、阿里" aria-hidden="true">#</a> 一、const、let、var 区别（叠纸、字节、阿里）</h3><p>const、let、var 三者的区别，我们可以从以下 5 个点来展开对比</p><ul><li><strong>变量提升和暂时性死区</strong>： var 存在变量提升，let 和 const 不存在变量提升，所以 let 和 const 会存在暂时性死区</li><li><strong>块级作用域</strong>： var 不存在块级作用域，let 和 const 存在块级作用域</li><li><strong>重复声明</strong>： var 允许重复声明变量，let 和 const 在同一作用域下不允许重复声明变量</li><li><strong>修改变量</strong>： var 和 let 声明的变量可以修改，const 是不可以的。</li><li><strong>使用</strong>：const 用来声明常量，引用类型值。其它情况推荐用 let ，避免用 var</li></ul><p><strong>① 变量提升</strong></p><blockquote><ul><li>var 声明的变量存在变量提升，即变量可以在声明之前被调用。</li><li>let 和 const 不存在变量提升，即它们所声明的变量一定要在声明后使用，否则会报错</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Cannot access &#39;b&#39; before initialization</span>
  <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Cannot access &#39;c&#39; before initialization</span>
  <span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p><strong>② 块级作用域</strong></p><blockquote><p>var 不存在块级作用域，let 和 const 存在块级作用域</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token punctuation">{</span>
  <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Uncaught ReferenceError: b is not defined</span>
<span class="token punctuation">{</span>
  <span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Uncaught ReferenceError: c is not defined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p><strong>③ 重复声明</strong></p><blockquote><p>var 允许重复声明变量，let 和 const 在同一作用域下不允许重复声明变量</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// Uncaught SyntaxError: Identifier &#39;b&#39; has already been declared</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// Uncaught SyntaxError: Identifier &#39;c&#39; has already been declared</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p><strong>④ 修改变量</strong></p><blockquote><ul><li>var 和 let 声明的变量，可以修改</li><li>const 声明的是一个只读的常量。一旦声明，常量的值就不能改变</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 3</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ncaught TypeError: Assignment to constant variable.</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p><strong>⑤ 使用</strong></p><blockquote><ul><li>能用 const 的情况尽量使用 const，比如声明的变量是用来保存 对象、数组等引用类型时，用 const</li><li>其他情况下大多数使用 let，比如 for 循环，避免使用 var</li></ul><blockquote><p>提示：var 在全局作用域中声明的变量，相当于 window 对象的属性。</p></blockquote></blockquote><h3 id="二、const-定义的值一定是不能改变的吗" tabindex="-1"><a class="header-anchor" href="#二、const-定义的值一定是不能改变的吗" aria-hidden="true">#</a> 二、const 定义的值一定是不能改变的吗？</h3><blockquote><ul><li>const 实际上保证的，并不是变量的值不得改动，而是变量指向的那个<strong>栈内存</strong>地址所保存的数据不得改动。</li><li>对于简单类型的数据（数值、字符串、布尔值）值就保存在变量指向的那个栈内存地址，因此等同于常量。</li><li>引用类型的数据（主要是对象和数组）变量指向的栈内存地址，保存的只是一个指向实际数据的指针</li><li>const 只能保证这个指针是固定的（即总是指向另一个固定的地址），至于它指向的数据结构是不是可变的，就完全不能控制了。</li></ul><p>所以如果是 const 声明的是一个引用类型的变量，其引用类型的结构是可以发生改变的。</p></blockquote><h3 id="三、const-声明了数组-还能-push-元素吗-为什么" tabindex="-1"><a class="header-anchor" href="#三、const-声明了数组-还能-push-元素吗-为什么" aria-hidden="true">#</a> 三、const 声明了数组，还能 push 元素吗，为什么 ？</h3><blockquote><p>可以</p><ul><li>因为 const 声明的变量保存的只是<strong>栈内存</strong>中的地址，只是一个指向实际数据的指针。指针指向堆内存中保存的数据。</li><li>const 只能保证栈内存中的地址不变，但是堆内存中的数据如何改变是没有办法控制的。</li><li>push 方法相当于是改变了堆内存中的数据结构。</li></ul></blockquote><h3 id="四、闭包里面的变量为什么不会被垃圾回收-快手、滴滴、58-篇、字节、小米、腾讯、网易" tabindex="-1"><a class="header-anchor" href="#四、闭包里面的变量为什么不会被垃圾回收-快手、滴滴、58-篇、字节、小米、腾讯、网易" aria-hidden="true">#</a> 四、闭包里面的变量为什么不会被垃圾回收（快手、滴滴、58 篇、字节、小米、腾讯、网易）</h3><p><strong>① 首先我们来了解下什么是垃圾回收 ？</strong></p><blockquote><p>在 js 中所谓的垃圾就是指不会再被使用的值，就会被当成垃圾回收掉。</p><ul><li><p>javaScript 会自动回收不再使用的变量，释放其所占的内存，开发人员不需要手动的做垃圾回收的处理。</p></li><li><p>垃圾回收机制只会回收局部变量，全局变量不会被回收，因为全局变量随时有可能被使用。（全局变量在浏览器关闭之后会回收）所以当我们定义了一个全局对象时，在使用完毕之后，最好给它重新复值为 null，以便释放其所占用的内存。</p></li><li><p>目前浏览器基本使用<strong>标记清除</strong>和<strong>引用计数</strong>两种垃圾回收策略</p><ul><li>标记清理 <ul><li>当函数被调用，变量进入上下文时，会被加上存在上下文标记，是不会被清理的。</li><li>当函数执行完成后，就会去掉存在上下文中的标记，随后垃圾回收程序会做一次内存清理，销毁这些变量。</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 函数调用时 被标记 进入上下文</span>
<span class="token punctuation">}</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 函数执行完毕，a的标记去掉，被回收</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>引用计数 <ul><li>引用计数就是追踪<strong>值</strong>被引用的次数。声明变量并给它赋一个引用类型值时，这个值的引用数 为 1。</li><li>如果同一个值又被赋给另一个变量，那引用数+1 。如果保存该值引用的变量被其它值覆 盖了，则引用数减 1。</li><li>当引用计数为 0 时，表示这个值不再用到，垃圾收集器就会回收他所占 用的内存。</li></ul></li></ul></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [1,2,3]的引用计数为1</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token comment">// 变量b也引用了这个数组，所以[1,2,3]的引用数为2</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// [1,2,3]的引用被切断，引用数-1，所以[1,2,3]的引用数为1</span>
  <span class="token comment">// 如果只是到这里，那[1,2,3]不所占的内存不会被回收</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// [1,2,3] 的引用被切断，引用数-1，所 [1,2,3]的引用数为0</span>
  <span class="token comment">// 到这里，垃圾收集器在下一次清理内存时，就会把[1,2,3]所占的内存清理掉</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>引用计数有一个很大的坑，就是循环引用时，会造成内存永远无法释放。</p></blockquote></blockquote><p><strong>② 为什么闭包中的变量不会被垃圾回收 ？</strong></p><blockquote><p>这里我们要明确一个点，如果闭包函数的引用计数为 0 时，函数就会释放，它引用的变量也会被释放。</p><ul><li>只有当闭包函数的引用计数不为 0 时，说明闭包函数随时有可能被调用，他被调用后，就会引用他在定义时所处的环境的变量。</li><li>闭包中的变量就得一直需要在内存中，则就不会被垃圾回收掉。</li></ul></blockquote><h3 id="五、说说-js-作用域及作用域链-字节、小米、腾讯、商汤" tabindex="-1"><a class="header-anchor" href="#五、说说-js-作用域及作用域链-字节、小米、腾讯、商汤" aria-hidden="true">#</a> 五、说说 JS 作用域及作用域链（字节、小米、腾讯、商汤）</h3><p>要回答这个问题 ，我们可以从以下几个方面来展开讲解：</p><ul><li>什么是作用域 ？</li><li>js 中作用域的分类 ？</li><li>每种作用域的特点 ？（作用或创建 ，销毁，变量和函数访问权限）</li><li>什么是作用域链 ？</li><li>什么是作用域链查找 ？</li></ul><p><strong>① 什么是作用域 ？</strong></p><blockquote><p><strong>简单点理解：</strong></p><ul><li>作用域是一套规则，规定了代码的作用范围。</li><li>这套规则用来管理引擎如何在当前作用域以及嵌套的子作用域中根据标识符名称进行变量查找。</li><li>简单来说，作用域规定了如何查找变量。比如函数外部是不能访问函数里面的变量（<strong>闭包除外</strong>），函数里面是可以访问函数外面的变量。</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a is not defined  不能访问函数作用域中的变量a</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>全面理解</strong>：</p><ul><li>作用域就是代码的执行环境。执行环境定义了变量或函数有没有权访问其他数据。</li><li>每个执行环境都有一个与之关联的<strong>变量对象</strong>，环境中定义的所有变量和函数都保存在这个对象中。</li><li>虽然我们编写的代码无法访问这个对象，但解析器在处理数据时会在后台使用它。</li></ul><p>比如特殊的<strong>全局执行环境中的变量对象 window 对象</strong>，因此所有全局变量和函数都作为 window 对象的属性和方法创建的。 在 <strong>Node</strong> 环境中，<strong>全局执行环境是 global 对象</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">var</span> n <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// sum 相当于window对象上的方法</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5  n相当于window对象的属性</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1  a相当于window对象的属性</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><ul><li>每个函数都有自己的执行环境。当执行流进入一个函数时，函数的环境就会被推入一个环境栈中。</li><li>而在函数执行之后，栈将被环境弹出，把控制权返回给之前的执行环境。</li><li>ECMAScript 程序中的执行流正是由这个方便的机制控制着。</li></ul></blockquote></blockquote><p><strong>② JS 中作用域的分类</strong></p><blockquote><p>JS 中有 3 种类型的作用域：</p><ul><li>全局作用域</li><li>局部作用域（函数作用域）</li><li>块级作用域</li></ul><p><strong>全局作用域</strong></p><p>编写在 script 标签中的 js 代码（或单独 js 文件），都是在全局作用域中。</p><ul><li>全局作用域 在页面打开时创建，在页面关闭时销毁。我们可以把全局作用中不再使用的引用类型变量重新赋值为 null</li><li>这样垃圾回收器就会把切断的引用类型数据当成垃圾回收掉，释放其在内存中占用的空间。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 堆内存开辟空间，用来保存[1,2,3]</span>
arr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 垃圾回收器会把[1,2,3]回收掉，释放其在堆内存中占用的空间</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>全局作用域中有一个全局对象 window,代表一个浏览器窗口，由浏览器创建，可以直接使用</li><li>在代码的任何地方，都可以访问全局作用域中的变量</li></ul><p><strong>局部作用域（函数作用域）：</strong></p><p>写在函数内部的代码，就是在局部作用域中</p><ul><li>每调用一次函数就会创建一个新的私有函数作用域，形参和当前私有函数作用域中声明的变量都是私有变量，保存在内部的一个变量对象中。</li><li>函数被调用时创建函数作用域，函数执行完毕后，函数作用域被销毁，保存在其中的变量和函数定义了随之被销毁（<strong>闭包除外，只有当闭包函数的引用次数为 0 时，闭包函数和闭包中的变量被销毁</strong>）</li><li>函数里能访问函数外变量，但函数外部是不能访问函数里面的变量，<strong>闭包除外，闭包函数会记住它在定义时所处的环境</strong></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//函数调用创建函数作用域，代码执行用，作用域和变量a,b,c销毁</span>
  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//函数调用创建函数作用域，代码执行用，作用域和变量a,b,c销毁</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>特殊的闭包</strong>：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">function</span> <span class="token function">checkWeight</span><span class="token punctuation">(</span><span class="token parameter">weight</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">_weight</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      weight <span class="token operator">&gt;</span> _weight <span class="token operator">?</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;过胖&quot;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;ok达标&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">var</span> <span class="token constant">P1</span> <span class="token operator">=</span> <span class="token function">checkWeight</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用完毕，作用域和变量weight不会被销毁</span>
  <span class="token constant">P1</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用完毕，作用域和变量_weight会被销毁</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><ul><li>如果我们在最后加上<code>P1 = null</code>，则垃圾回收器会在下一次清理内存时销毁掉 checkWeight 调用形成的作用域和作用域中的变量 weight。</li></ul></blockquote><p><strong>块级作用域</strong>：</p><p>使用 let 或 const 关键字声明的变量，会形成块级作用域。</p><ul><li>在 {}、if 、for 里用 let 来声明变量，会形成块级作用域。{} 之外是不能访问 {} 里面的内容。</li><li>块级作用域中定义的变量，在 if 或 for 等语句执行完后，变量就会被销，不占用内存</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 会报错，{}里是块级作用域，外面是访问不到里面的变量的</span>
<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0 1 2</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// i is not defined</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>注意点：</strong></p><p>对象的 { } 不会形成块级作用域</p></blockquote></blockquote><p><strong>③ 作用域链：</strong></p><blockquote><p>当代码在一个环境中执行时，会创建<strong>变量对象</strong>的一个作用域链（作用域形成的链条）</p><ul><li>作用域链的前端，始终都是当前执行的代码所在环境的变量对象</li><li>作用域链中的下一个对象来自于外部环境，再下一个变量对象则来自下下一个外部环境，一直到全局执行环境</li><li>全局执行环境的变量对象始终都是作用域链上的最后一个对象</li></ul><p><strong>作用域链查找：</strong></p><p>内部环境可以通过作用域链访问所有外部环境，但外部环境不能访问内部环境的任何变量和函数。</p><ul><li><p>在内部函数中，需要访问一个变量的时候，首先会访问函数本身的变量对象，是否有这个变量，如果没有，那么会继续沿作用域链往上查找</p></li><li><p>如果在某个变量对象中找到则使用该变量对象中的变量值，如果没有找到，则会一直找到全局作用域。如果最后还找不到，就会报错。</p></li><li><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2  自身没有，沿着作用域链向上找</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2  自身有，就用自身的</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//4  自身没有，沿着作用域链向上找，直到全局作用域中找到c=4</span>
    <span class="token punctuation">}</span>
    <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></blockquote><h2 id="_7月16日" tabindex="-1"><a class="header-anchor" href="#_7月16日" aria-hidden="true">#</a> @7月16日</h2><h3 id="一、怎么理解-js-静态作用域和动态作用域-小米" tabindex="-1"><a class="header-anchor" href="#一、怎么理解-js-静态作用域和动态作用域-小米" aria-hidden="true">#</a> 一、怎么理解 JS 静态作用域和动态作用域（小米）</h3><ul><li><strong>静态作用域</strong>：又称词法作用域，是指作用域在词法阶段就被确定了（<strong>函数定义的位置就决定了函数的作用域</strong>）不会改变，javascript 采用的是词法作用域。</li><li><strong>动态作用域</strong>：函数的作用域在函数调用时才决定的。</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>最终输出的结果为 1</p></blockquote><p>说明 fn 中打印的是全局下的 a ，这也印证了 JavaScript 使用了静态作用域。</p><p><strong>静态作用域执行过程</strong></p><p>当执行 fn 函数时，先从内部的<code>AO</code>对象查找是否有<code>a</code>变量，如果没有，沿着作用域链往上查找(由于<code>JavaScript</code>是词法作用域)，上层为全局<code>GO</code>，所以结果打印<code>1</code></p><h3 id="二、如何理解原型和原型链-腾讯、货拉拉、字节、招银、阿里、小米" tabindex="-1"><a class="header-anchor" href="#二、如何理解原型和原型链-腾讯、货拉拉、字节、招银、阿里、小米" aria-hidden="true">#</a> 二、如何理解原型和原型链 ？（腾讯、货拉拉、字节、招银、阿里、小米）</h3><ul><li>JavaScript 是一门基于原型的语言，在软件设计模式中，有一种模式叫做<strong>原型模式</strong></li><li>JavaScript 正是利用这种模式而被创建出来。</li></ul><p><strong>关于原型和原型链，我们需要了解以下几个方面的内容：</strong></p><table><thead><tr><th style="text-align:left;">问题</th><th style="text-align:left;">相关知识点</th></tr></thead><tbody><tr><td style="text-align:left;">什么是原型和原型特点</td><td style="text-align:left;">构造函数、对象实例、prototype、<code>__proto__</code>、constructor</td></tr><tr><td style="text-align:left;">什么是原型链</td><td style="text-align:left;">绘制实例对象原型链、数组原型链、原型链的终点</td></tr><tr><td style="text-align:left;">原型链查找</td><td style="text-align:left;">原型链查找、属性遮蔽</td></tr><tr><td style="text-align:left;">重写原型带来的问题</td><td style="text-align:left;">切断现有实例与新原型之间的联系、 会导致原型对象的 constructor 属性指向 Object</td></tr><tr><td style="text-align:left;">Object.create() 方法</td><td style="text-align:left;">手写 create 方法、用 create 方法实现继承</td></tr><tr><td style="text-align:left;">instanceof 操作符</td><td style="text-align:left;">用法和实现原理</td></tr><tr><td style="text-align:left;">in 和 hasOwnProperty 操作符</td><td style="text-align:left;">in 与 hasOwnProperty 的对比、如何判断一个属性是原型上属性</td></tr><tr><td style="text-align:left;">for ...in</td><td style="text-align:left;">for...in 的用法、可枚举对象的哪些属性？</td></tr></tbody></table><p><strong>扩展知识点：</strong></p><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">Object.keys()</td><td style="text-align:left;">Object.keys()方法可以将一个对象作为参数，然后把这个对象<code>[key，value]</code>对中的 key 值以数组的形式遍历出来。</td></tr><tr><td style="text-align:left;">Object.values()</td><td style="text-align:left;">Object.values()方法可以将一个对象作为参数，然后把这个对象<code>[key，value]</code>对中的 value 值以数组的形式遍历出来。</td></tr><tr><td style="text-align:left;">Object.entries()</td><td style="text-align:left;">Object.entries()方法可以将对象作为参数，返回一个给定对象自身可枚举属性的键值对数组，其排列与使用 <code>for...in</code>循环遍历该对象时返回的顺序一致（区别在于 for-in 循环还会枚举原型链中的属性）</td></tr><tr><td style="text-align:left;">getOwnPropertyNames()</td><td style="text-align:left;">方法返回一个由指定对象的所有<strong>自身属性的属性名</strong>（包括不可枚举属性但不包括 Symbol 值作为名称的属性）组成的数组。</td></tr></tbody></table><p><strong>① 原型和原型特点</strong></p><ul><li>我们创建的每一个函数都有一个<strong>prototype（原型）属性，被称为显示原型</strong>，这个属性是一个指针，指向一个对象（原型对象）。</li><li>这个对象的好处是，在它上面定义的属性和方法可以由特定类型的所有实例共享。</li><li>原型对象默认拥有一个 constructor 属性，指向它的构造函数</li></ul><p><strong>代码解析</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">/*Person 构造函数*/</span>
  <span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">/*构造函数的原型上添加方法*/</span>
  <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayHello</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">大家好，我是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">今年</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">岁了</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">/*构造函数的原型上添加方法*/</span>
  <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">study</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">我</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">要学习了</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;小明&quot;</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// p1为 构造函数Person new出来的实例对象</span>
  <span class="token comment">/*实例对象上的属性会屏蔽（遮蔽）原型上同名的属性*/</span>
  p1<span class="token punctuation">.</span><span class="token function-variable function">study</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">我</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">正在学习web前端开发课程</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>原型结构图：</strong></p><p><img src="https://www.arryblog.com/assets/img/20220523prototype011.7f1b23e4.png" alt="原型结构图"></p><ul><li>原型对象默认拥有一个 constructor 属性，指向它的构造函数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Person<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>每个<code>对象实例</code>都有一个隐藏的属性<code>__proto__</code>，被称为<code>隐式原型</code>,指向它的构造函数的原型</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>对象实例可以共享原型上面的所有属性和方法</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>p1<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 大家好，我是小明今年23岁了</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>实例自身的属性会<code>屏蔽(遮蔽)</code>原型上同名的属性，实例上没有的属性就会去原型上去找</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>p1<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 我小明正在学习web前端开发课程</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>② 原型链</strong></p><ul><li>JavaScript 中所有的对象都是由它的原型对象继承而来。</li><li>而原型对象自身也是一个对象，它也有自己的原型对象，这样层层上溯，就形成了一个类似链表的结构，这就是原型链</li></ul><p><strong>以下代码的原型链结构图：</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">/*Person 构造函数*/</span>
  <span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">/*构造函数的原型上添加方法*/</span>
  <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayHello</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">大家好，我是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">今年</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">岁了</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">/*构造函数的原型上添加方法*/</span>
  <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">study</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">我</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">要学习了</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;小明&quot;</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// p1为 构造函数Person new出来的实例对象</span>
  <span class="token comment">/*实例对象上的属性会屏蔽（遮蔽）原型上同名的属性*/</span>
  p1<span class="token punctuation">.</span><span class="token function-variable function">study</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">我</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">正在学习web前端开发课程</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Person<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Object<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//null</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>原型链结构图：</strong></p><p><img src="https://www.arryblog.com/assets/img/20220523proto0233.642ec42d.png" alt="原型链结构图"></p><blockquote><ul><li>所有原型链的终点都是 Object.prototype</li><li><code>Objec.prototype</code> 指向的原型对象同样拥有原型<code>Object.prototype.__proto__，不过它的原型是 null</code> ，而 <code>null</code> 则没有原型</li></ul></blockquote><p><strong>③ 原型链查找</strong></p><ul><li>当访问一个对象的某个属性时，会先在这个对象本身属性上查找，如果这个对象本身没有这个属性时，它就会去他的<code>__proto__隐式原型</code>上去找（即它的构造函数的 prototype）。</li><li>如果还找不到,就去原型的原型（<code>即构造函数的prototype的__proto__</code>）上去找，....一直找到最顶层（<code>Object.prototype</code>）为止。</li><li>如果还没有找到，则返回 undefined。</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayHello</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">大家好，我是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">正在吃饭</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//Student类继承People类</span>
  <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">正在吃肉肉</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">正在学习</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;小明&quot;</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token string">&quot;0001&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  s1<span class="token punctuation">.</span><span class="token function-variable function">run</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">每天都要跑步</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  s1<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//小明每天都要跑步  自身找到，以自身为主</span>
  s1<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//小明正在学习  自身没有，沿原型链查找，在Student.prototype中找到</span>
  s1<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//小明正在吃肉肉  自身没有，沿原型链查找，在Student.prototype中找到，就不再向上找了。</span>
  s1<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//大家好，我是小明   自身没有，沿原型链查找，在Object.prototype中找到</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>④ 重写原型带来的问题</strong></p><ul><li>在已经创建了实例的情况下重写原型，会切断现有实例与新原型之间的联系</li><li>如果要重写原型，一定要在重写原型后，再创建实例。</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;小明&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">eat</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">在吃饭</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">// 重写原型</span>
  <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;小明&quot;</span><span class="token punctuation">,</span>
    <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">大家好，我是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  p1<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 小明在吃饭</span>
  p1<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// p1.sayHello is not a function</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><ul><li>在这个例子中，Person 的实例在重写原型对象之前创建的，在调用 p1.eat()时会输入正确的信息。</li><li>但是在调用 p1.sayHello 时候，会报错。是因为 p1 指向的原型还是最初的原型，而这个最初的原型上并没有 sayHello 这个方法，而且 eat 这个方法。</li></ul></blockquote><ul><li>重写原型对象，会导致原型对象的 <code>constructor</code> 属性指向 <code>Object</code> ，导致原型链关系混乱，所以我们应该在重写原型对象的时候指定 <code>constructor</code>( 指定后<code>instanceof</code> 仍然会返回正确的值)</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">//重写原型,{}是一个对象实例，对象实例的原型指向的是Object.prototype,而Object.prototype中的constructor指向的是Object</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Object<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重写原型对象时，单独指定 constructor</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token comment">//重写原型,在prototype中需要重新指定constructor的值</span>
  <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">constructor</span><span class="token operator">:</span> Person<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Person<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>⑤ Object.create</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Object.create()\`方法创建一个新对象，使用现有的对象来提供新创建的对象的__proto__
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>语法：</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>Object.create(proto[,propertiesObject])
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>proto 新创建对象的原型对象</li><li>propertiesObject 可选。需要传入一个对象，将为新创建的对象添加指定的属性值和对应的属性描述符。</li></ul><p><strong>手写 create 方法</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  Object<span class="token punctuation">.</span><span class="token function-variable function">create</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token class-name">Fn</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> o<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>用 Object.create 实现类式继承</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Shape - 父类(superclass)</span>
<span class="token keyword">function</span> <span class="token function">Shape</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 父类的方法</span>
<span class="token class-name">Shape</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">move</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+=</span> x<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">+=</span> y<span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Shape moved.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Rectangle - 子类(subclass)</span>
<span class="token keyword">function</span> <span class="token function">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">Shape</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// call super constructor.</span>
<span class="token punctuation">}</span>

<span class="token comment">// 子类续承父类</span>
<span class="token class-name">Rectangle</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Shape</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Rectangle</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Rectangle<span class="token punctuation">;</span>

<span class="token keyword">var</span> rect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rect <span class="token keyword">instanceof</span> <span class="token class-name">Rectangle</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rect <span class="token keyword">instanceof</span> <span class="token class-name">Shape</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
rect<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Outputs, &#39;Shape moved.&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>⑥ instanceof 操作符</strong></p><ul><li>instanceof 用来判断两个对象是否属于实例关系，通过这种关系来判断对象是否属于某一类型。（但不能判断对象具体属于哪种类型）</li><li>instanceof 可以准确判断引用数据类型，它的原理是<strong>检测构造函数的 prototype 属性</strong> 是否在某个 <strong>实例对象的原型链上</strong></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1 <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1 <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>⑦ in 操作符</strong></p><p>用来判断该属性是否在实例或原型上，不管该属性是在实例上还是原型上，只要能找到就返回 true</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  p1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span> <span class="token keyword">in</span> p1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true 在原型Person.prototype</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span> <span class="token keyword">in</span> p1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true 来自实例</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;toString&quot;</span> <span class="token keyword">in</span> p1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//在原型Object的.prototype上</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>⑧ hasOwnProperty</strong></p><ul><li>用来判断某个属性是否是实例自身的属性，如果是返回 true，不是则返回 false</li><li>hasOwnProperty 是 JavaScript 中唯一一个处理属性但是不查找原型链的函数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>对象实例<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>属性名<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
  <span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  p1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false 在原型上</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true 来自实例</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&quot;toString&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false 在原型上</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>案例：如何判断某个属性是否是原型上的属性</strong></p><ul><li>只要属性在原型或实例身上，in 操作符就会返回 true。而 hasOwnProperty()只有属性存在于实例上时才返回 true。</li><li>因此，只要 in 操作符返回 true，同是 hasOwnProperty 返回 false，就说明该 属性就是一个原型属性。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">hasPrototypeProperty</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> name <span class="token keyword">in</span> obj <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProPerty</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// hasOwnProperty 是 Object 原型上的方法</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&quot;hasOwnProperty&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>⑨ for...in</strong></p><p>以任意顺序遍历一个对象的可枚举属性（<strong>除 Symbol 类型的属性</strong>）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// key 是一个变量，每次循环时会将object的一个属性的键值给变量key,直到对象中所有属性都遍历完</span>
  <span class="token comment">// 要执行的代码</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下对象中的 Symbol 创建的属性不会被枚举出来</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;不可遍历属性&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name age</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>一般情况下</strong>，for in 循环只会遍历我们自定义的属性，原型上默认的属性不会遍历出来。 例如：<code>Object.prototype.toString()</code>、<code>Object.prototype.hasOwnProperty()</code>是不会被遍历出来的。</p><p><strong>但在实际应用中</strong>，如果是在原型中新增属性或者方法，for…in 会将原型中新增的属性和方法遍历出来。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayHello</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">大家好</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;小明&quot;</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//自身属性只有name  age</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> p1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  name age sayHello score</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不想过滤原型中的属性，可以用 hasOwnProperty 来做判断。</p><p><strong>⑩ Object.keys() 、Object.values()、Object.entries()</strong></p><p>以上三个方法，都只会枚举<strong>对象自身可枚举的属性，不会枚举原型上</strong>的。同时也<strong>不会枚举 Sysmbol 类型</strong>属性。</p><ul><li>Object.keys()方法可以将一个对象作为参数，然后把这个对象[key，value]对中的 key 值以数组的形式遍历出来。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>Object.values()方法可以将一个对象作为参数，然后把这个对象[key，value]对中的 value 值以数组的形式遍历出来。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>Object.entries()方法可以将对象作为参数，返回一个给定对象自身可枚举属性的键值对数组，其排列与使用 <code>for...in</code>循环遍历该对象时返回的顺序一致（区别在于 for-in 循环还会枚举原型链中的属性）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;不可枚举&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token string">&quot;23&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&quot;不可枚举&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> arrkeys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> arrvalues <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> arrentries <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrkeys<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;name&#39;, &#39;age&#39;]</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrvalues<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;张三&#39;, &#39;23&#39;]</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrentries<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [[&#39;name&#39;,&#39;张三&#39;],[&#39;age&#39;,23]]</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>⑪、getOwnPropertyNames( )</strong></p><p>方法返回一个由指定对象的所有<strong>自身属性的属性名</strong>（包括不可枚举属性但不包括 Symbol 值作为名称的属性）组成的数组。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;数组&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> arr2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[&#39;0&#39;,&#39;1&#39;,&#39;2&#39;,&#39;length&#39;]</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[&#39;0&#39;,&#39;1&#39;,&#39;2&#39;]</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0 ,1,2,name</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="总结-可枚举对象中属性的范围" tabindex="-1"><a class="header-anchor" href="#总结-可枚举对象中属性的范围" aria-hidden="true">#</a> 总结：可枚举对象中属性的范围</h3><table><thead><tr><th style="text-align:left;">可枚举方法</th><th style="text-align:left;">自身可枚举属性</th><th style="text-align:left;">自身不可枚举</th><th style="text-align:left;">Sysmbol 类型</th><th style="text-align:left;">原型上属性</th></tr></thead><tbody><tr><td style="text-align:left;">for...in</td><td style="text-align:left;">✔</td><td style="text-align:left;">✘</td><td style="text-align:left;">✘</td><td style="text-align:left;">✔（自定义原型属性可枚举，默认原型上的不可以）</td></tr><tr><td style="text-align:left;">Object.keys</td><td style="text-align:left;">✔</td><td style="text-align:left;">✘</td><td style="text-align:left;">✘</td><td style="text-align:left;">✘</td></tr><tr><td style="text-align:left;">Object.values</td><td style="text-align:left;">✔</td><td style="text-align:left;">✘</td><td style="text-align:left;">✘</td><td style="text-align:left;">✘</td></tr><tr><td style="text-align:left;">Object.entries</td><td style="text-align:left;">✔</td><td style="text-align:left;">✘</td><td style="text-align:left;">✘</td><td style="text-align:left;">✘</td></tr><tr><td style="text-align:left;">Object.getOwnPropertyNames</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">✘</td><td style="text-align:left;">✘</td></tr></tbody></table><h3 id="三、原型链的终点是什么-货拉拉" tabindex="-1"><a class="header-anchor" href="#三、原型链的终点是什么-货拉拉" aria-hidden="true">#</a> 三、原型链的终点是什么？（货拉拉）</h3><p>原型链的终点是 null ，因为 <code>Object.prototype.__proto__</code> 指向 null</p><h3 id="四、说说-的原型链-腾讯" tabindex="-1"><a class="header-anchor" href="#四、说说-的原型链-腾讯" aria-hidden="true">#</a> 四、说说 [] 的原型链 ？（腾讯）</h3><ul><li><code>[].__proto__</code> 指向 Array.prototype</li><li><code>Array.prototype.__proto__</code> 指向 <code>Object.prototype</code></li><li><code>Object.protytype.__proto__</code> 的最终指向为 null</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true  所有数组都是由Array构造出来</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true  Array构造函数的是由 Object构造出来的。</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// null Objec.prototype 指向的原型对象同样拥有原型，不过它的原型是 null ，而 null 则没有原型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>[] 的原型链结构图</strong></p><p><img src="https://www.arryblog.com/assets/img/202205.23arrprototype.bc922d2b.png" alt="202205.23arrprototype"></p><h3 id="五、什么是继承" tabindex="-1"><a class="header-anchor" href="#五、什么是继承" aria-hidden="true">#</a> 五、什么是继承 ？</h3><ul><li>继承描述了两个类之间的 “ is a kind of ” 关系 <ul><li>比如：学生“是一种”人。所以，人类和学生类之间就构成继承关系</li></ul></li><li>People 是 &quot;父类&quot; （或 &quot;超类&quot;、”基类“）Student 是 ”子类“ (或 ”派生类“)</li><li>子类丰富了父类，让类描述得更具体、更细化</li></ul><p><img src="https://www.arryblog.com/assets/img/image-20220109145240276.6ccbc898.png" alt="image-20220109145240276"></p><blockquote><ul><li>在 UML 图示中使用<strong>白色的空心箭头</strong>来表示类和类之间的<strong>继承关系</strong></li><li>箭头的方向是由 子类指向父类</li><li>这样的表达方式就是继承</li></ul></blockquote>`,228),l=[c];function i(u,r){return s(),a("div",null,l)}const d=n(o,[["render",i],["__file","meirimianshiti.html.vue"]]);export{d as default};
