import{_ as t,r as p,o as c,c as l,b as e,d as n,e as a,a as o}from"./app-48690364.js";const i={},r=o('<p>前面章节中，我们详细讲解了 Webpack 的基本应用、性能优化、Loader 与 Plugin 组件开发方方面面的知识，相信学习过这些内容之后，你已经对 Webpack 有相当深入的理解了，可以开始从更底层的视角，自底向上重新审视 Webpack 实现原理。</p><p>Webpack 的功能集非常庞大：模块打包、代码分割、按需加载、Hot Module Replacement、文件监听、Tree-shaking、Sourcemap、Module Federation、Dev Server、DLL、多进程打包、Persistent Cache 等等，但抛开这些花里胡哨的能力，最最核心的功能依然是：<strong>At its core, webpack is a static module bundler for modern</strong> <strong>JavaScript</strong> <strong>applications</strong>，也就是所谓的<strong>静态模块打包能力</strong>。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f6c8846ed06646fdba24cc3053d66f5e~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>Webpack 能够将各种类型的资源 —— 包括图片、音视频、CSS、JavaScript 代码等，通通转译、组合、拼接、生成标准的、能够在不同版本浏览器兼容执行的 JavaScript 代码文件，这一特性能够轻易抹平开发 Web 应用时处理不同资源的逻辑差异，使得开发者以一致的心智模型开发、消费这些不同的资源文件。</p><p>打包功能的底层实现逻辑很复杂，抛去大多数分支逻辑后，大致包含如下步骤：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a26d60df160440adae904dcdeefb44d7~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>为了方便理解，我把上述过程划分为三个阶段：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3293ad8708e14a8db0567dac24fb8668~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>',8),u=e("li",null,[e("strong",null,"初始化阶段"),n("：修整配置参数，创建 Compiler、Compilation 等基础对象，并初始化插件及若干内置工厂、工具类，并最终根据 "),e("code",null,"entry"),n(" 配置，找到所有入口模块；")],-1),d=e("strong",null,"构建阶段",-1),k=e("code",null,"entry",-1),b=e("code",null,"loader",-1),m={href:"https://github.com/acornjs/acorn",target:"_blank",rel:"noopener noreferrer"},h=e("strong",null,"递归",-1),g={href:"https://webpack.js.org/concepts/dependency-graph/",target:"_blank",rel:"noopener noreferrer"},_=e("li",null,[e("strong",null,"生成阶段"),n("：根据 "),e("code",null,"entry"),n(" 配置，将模块组装为一个个 Chunk 对象，之后调用一系列 Template 工厂类翻译 Chunk 代码并封装为 Asset，最后写出到文件系统。")],-1),f=o('<blockquote><p>提示：单次构建过程自上而下按顺序执行，如果启动了 <code>watch</code> ，则构建完成后不会退出 Webpack 进程，而是持续监听文件内容，发生变化时回到「<strong>构建</strong>」阶段重新执行构建。</p></blockquote><p>三个阶段环环相扣，「<strong>初始化</strong>」的重点是根据用户配置设置好构建环境；「<strong>构建阶段</strong>」则重在解读文件输入与文件依赖关系；最后在「<strong>生成阶段</strong>」按规则组织、包装模块，并翻译为适合能够直接运行的产物包。三者结合，实现 Webpack 最核心的打包能力，其它功能特性也几乎都是在此基础上，通过 Hook 介入、修改不同阶段的对象状态、流程逻辑等方式实现。</p><p>可以说，深度理解这三个阶段，才算是真正掌握了 Webpack 核心原理，所以接下来，让我们一起深入底层源码，剖析各阶段的具体实现。</p><h2 id="初始化阶段" tabindex="-1"><a class="header-anchor" href="#初始化阶段" aria-hidden="true">#</a> 初始化阶段</h2><p>初始化阶段主要完成三个功能：修整 &amp; 校验配置对象、运行插件、调用 <code>compiler.compile</code> 方法开始执行构建操作，代码比较简单，如下图：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/83d697220d324ed5a3ddba7e90d332ca~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>首先，校验用户参数，并合并默认配置对象：</p>',7),v=e("li",null,[n("启动时，首先将 "),e("code",null,"process.args"),n(" 参数与 "),e("code",null,"webpack.config.js"),n(" 文件合并成用户配置；")],-1),w={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/validateSchema.js#L77-L78",target:"_blank",rel:"noopener noreferrer"},y=e("code",null,"validateSchema",-1),j={href:"https://www.npmjs.com/package/schema-utils",target:"_blank",rel:"noopener noreferrer"},C={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/config/normalization.js#L116-L117",target:"_blank",rel:"noopener noreferrer"},E={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/config/defaults.js#L120-L121",target:"_blank",rel:"noopener noreferrer"},A=e("p",null,"之后，创建 Compiler 对象并开始启动插件：",-1),L={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/webpack.js#L61-L62",target:"_blank",rel:"noopener noreferrer"},D=e("code",null,"compiler",-1),M={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/webpack.js#L68-L69",target:"_blank",rel:"noopener noreferrer"},S=e("code",null,"plugins",-1),H=e("code",null,"apply",-1),P={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/webpack.js#L80-L81",target:"_blank",rel:"noopener noreferrer"},x=e("code",null,"new WebpackOptionsApply().process",-1),W={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/EntryOptionPlugin.js",target:"_blank",rel:"noopener noreferrer"},T=e("code",null,"entry",-1),q=e("code",null,"DynamicEntryPlugin",-1),z=e("code",null,"EntryPlugin",-1),G=e("li",null,[n("根据 "),e("code",null,"devtool"),n(" 值注入 Sourcemap 插件，包括："),e("code",null,"SourceMapDevToolPlugin"),n("、"),e("code",null,"EvalSourceMapDevToolPlugin"),n(" 、"),e("code",null,"EvalDevToolModulePlugin"),n("；")],-1),J=e("li",null,[n("注入 "),e("code",null,"RuntimePlugin"),n(" ，用于根据代码内容动态注入 webpack 运行时。")],-1),N=o(`<p><strong>最后，调用 <code>compiler.compile</code> 方法开始执行构建</strong>，这一步非常重要，源码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack/lib/compiler.js </span>
<span class="token function">compile</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">newCompilationParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>beforeCompile<span class="token punctuation">.</span><span class="token function">callAsync</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// ...</span>
      <span class="token keyword">const</span> compilation <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">newCompilation</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>make<span class="token punctuation">.</span><span class="token function">callAsync</span><span class="token punctuation">(</span>compilation<span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>finishMake<span class="token punctuation">.</span><span class="token function">callAsync</span><span class="token punctuation">(</span>compilation<span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token comment">// ...</span>
          process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            compilation<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
              <span class="token comment">// ...</span>
              compilation<span class="token punctuation">.</span><span class="token function">seal</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token comment">// ...</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>afterCompile<span class="token punctuation">.</span><span class="token function">callAsync</span><span class="token punctuation">(</span>compilation<span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> compilation<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),O={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/Compiler.js#L1159-L1160",target:"_blank",rel:"noopener noreferrer"},X=e("li",null,[n("调用 "),e("code",null,"newCompilation"),n(" 方法创建 "),e("code",null,"compilation"),n(" 对象；")],-1),I=e("code",null,"make",-1),R={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/EntryPlugin.js#L47-L49",target:"_blank",rel:"noopener noreferrer"},B=e("code",null,"compilation",-1),V=e("code",null,"addEntry",-1),F=e("strong",null,"构建阶段",-1),K=o("<li><code>make</code> 执行完毕后，触发 <code>finishMake</code> 钩子；</li><li>执行 <code>compilation.seal</code> 函数，进入「<strong>生成阶段</strong>」，开始封装 Chunk，生成产物；</li><li><code>seal</code> 函数结束后，触发 <code>afterCompile</code> 钩子，开始执行收尾逻辑。</li>",3),Q=e("code",null,"compile",-1),U={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/Compiler.js#L1159-L1160",target:"_blank",rel:"noopener noreferrer"},Y=e("p",null,[n("调用 "),e("code",null,"compile"),n(" 函数触发 "),e("code",null,"make"),n(" 钩子后，初始化阶段就算是结束了，流程逻辑开始进入「"),e("strong",null,"构建阶段"),n("」。")],-1),Z=e("h2",{id:"构建阶段",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#构建阶段","aria-hidden":"true"},"#"),n(" 构建阶段")],-1),$=e("strong",null,"构建阶段",-1),nn=e("code",null,"entry",-1),en=e("code",null,"module",-1),sn=e("code",null,"module",-1),an={href:"https://webpack.js.org/concepts/dependency-graph/",target:"_blank",rel:"noopener noreferrer"},on=o(`<p>实现上，在上述「<strong>初始化阶段</strong>」的最后，<code>compiler.compile</code> 函数会触发 <code>compiler.hook.make</code> 钩子，<code>EntryPlugin</code> 监听该钩子并开始调用 <code>compilation.addEntry</code> 添加入口：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">EntryPlugin</span> <span class="token punctuation">{</span>
    <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> <span class="token punctuation">{</span> entry<span class="token punctuation">,</span> options<span class="token punctuation">,</span> context <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token comment">// 创建入口 Dependency 对象</span>
        <span class="token keyword">const</span> dep <span class="token operator">=</span> EntryPlugin<span class="token punctuation">.</span><span class="token function">createDependency</span><span class="token punctuation">(</span>entry<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>

        compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>make<span class="token punctuation">.</span><span class="token function">tapAsync</span><span class="token punctuation">(</span><span class="token string">&quot;EntryPlugin&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">compilation<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            compilation<span class="token punctuation">.</span><span class="token function">addEntry</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> dep<span class="token punctuation">,</span> options<span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>addEntry</code> 之后的执行逻辑：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1bf47933e15042deb0b2051d907847fa~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>`,4),tn={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/Compilation.js#L1476-L1477",target:"_blank",rel:"noopener noreferrer"},pn=e("code",null,"module",-1),cn={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/NormalModule.js",target:"_blank",rel:"noopener noreferrer"},ln={href:"https://www.npmjs.com/package/loader-runner",target:"_blank",rel:"noopener noreferrer"},rn=e("code",null,"module",-1),un={href:"https://www.npmjs.com/package/acorn",target:"_blank",rel:"noopener noreferrer"},dn={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/javascript/JavascriptParser.js",target:"_blank",rel:"noopener noreferrer"},kn=e("code",null,"import",-1),bn={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/javascript/JavascriptParser.js#L1983-L1984",target:"_blank",rel:"noopener noreferrer"},mn={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/dependencies/HarmonyExportDependencyParserPlugin.js#L153-L154",target:"_blank",rel:"noopener noreferrer"},hn=e("li",null,[n("调用 "),e("code",null,"module"),n(" 对象的 "),e("code",null,"addDependency"),n("， 将 Dependency 对象转换为 Module 对象并添加到依赖数组中。")],-1),gn=o('<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/604e4c7e9dac4069be57bd3be9f9800c~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><ol start="5"><li>AST 遍历完毕后，调用 <code>module.handleParseResult</code> 处理模块依赖数组；</li><li>对于 <code>module</code> 新增的依赖，调用 <code>handleModuleCreate</code>，控制流回到第一步；</li><li>所有依赖都解析完毕后，构建阶段结束。</li></ol><p>过程中模块源码经历了 <code>module =&gt; ast =&gt; dependences =&gt; module</code> 的流转，先将源码解析为 AST 结构，再在 AST 中遍历 <code>import</code> 等模块导入语句，收集模块依赖数组 —— <code>dependences</code>，最后遍历 <code>dependences</code> 数组将 Dependency 转换为 Module 对象，之后递归处理这些新的 Module，直到所有项目文件处理完毕。</p><blockquote><p>提示：这个过程会调用 acorn 将模块内容 —— 包括 JS、CSS，甚至多媒体文件，解析为 AST 结构，所以需要使用 <code>loaders</code> 将不同类型的资源转译为标准 JavaScript 代码。</p></blockquote><p>这个递归处理流程是「<strong>构建阶段</strong>」的精髓，我们来看个例子，假设对于下图这种简单模块依赖关系：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bdb0ecf9b1144117851a8279aabe59e2~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>其中 <code>index.js</code> 为 entry 文件，依赖于 a/b 文件；a 依赖于 c/d 文件。初始化编译环境之后，<code>EntryPlugin</code> 根据 <code>entry</code> 配置找到 <code>index.js</code> 文件，并调用 <code>compilation.addEntry</code> 函数将之添加为 Module 对象，触发构建流程，构建完毕后内部会生成这样的数据结构：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/29c82d31f5a144f1a63def697453caa5~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>之后，调用 Acorn 将 <code>index.js</code> 代码解析为 AST，并遍历 AST 找到 <code>index.js</code> 文件的依赖：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/42239b4cb1c24df9981ccb1477f60877~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>得到两个新的依赖对象：<code>dependence[a.js]</code> 与 <code>dependence[b.js]</code> ，这是下一步操作的关键线索，紧接着调用 <code>module[index.js]</code> 的 <code>handleParseResult</code> 函数处理这两个依赖对象，得到 a、b 两个新的 Module 对象：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7066113b7aeb4f78bd21d67121e16602~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>接着，又触发 <code>module[a/b]</code> 的 <code>handleModuleCreation</code> 方法，从 <code>a.js</code> 模块中又解析到 <code>c.js/d.js</code> 两个新依赖，于是再继续调用 <code>module[a]</code> 的 <code>handleParseResult</code>，递归上述流程：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6cfc533ae9204df48bf70ebc2dfda0fa~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>最终得到 <code>a/b/c/d</code> 四个 Module 与对应的 Dependency 对象：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8daff06d0ef544bd979b18b22d265735~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><blockquote><p>提示：Dependency、Module、Entry 等都是 Webpack 内部非常重要的基本类型，在后续章节中我们会单独展开这几个类型的基本涵义与相互之间的关系。</p></blockquote><p>到这里解析完所有模块，没有新的依赖后就可以继续推进，进入「生成阶段」。</p><h2 id="生成阶段" tabindex="-1"><a class="header-anchor" href="#生成阶段" aria-hidden="true">#</a> 生成阶段</h2>',19),_n={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/Module.js",target:"_blank",rel:"noopener noreferrer"},fn={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/Dependency.js",target:"_blank",rel:"noopener noreferrer"},vn=e("code",null,"make",-1),wn=e("code",null,"compiler.compile",-1),yn={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/Compilation.js#L2780-L2781",target:"_blank",rel:"noopener noreferrer"},jn=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack/lib/compiler.js </span>
<span class="token function">compile</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">const</span> compilation <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">newCompilation</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>make<span class="token punctuation">.</span><span class="token function">callAsync</span><span class="token punctuation">(</span>compilation<span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
        compilation<span class="token punctuation">.</span><span class="token function">seal</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token comment">/* */</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是说，<code>compilation.seal</code> 函数是「生成阶段」的入口函数，<code>seal</code> 原意密封、上锁，我个人理解在 Webpack 语境下接近于“将模块装进 Chunk”，核心流程：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2657e3ff33214d3aac023556d8858c77~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>`,3),Cn={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/ChunkGraph.js",target:"_blank",rel:"noopener noreferrer"},En={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/Compilation.js#L2815-L2816",target:"_blank",rel:"noopener noreferrer"},An=e("code",null,"compilation.entries",-1),Ln=e("code",null,"addChunk",-1),Dn={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/Compilation.js#L2817-L2818",target:"_blank",rel:"noopener noreferrer"},Mn={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/Compilation.js#L2832-L2833",target:"_blank",rel:"noopener noreferrer"},Sn={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/Compilation.js#L2835-L2836",target:"_blank",rel:"noopener noreferrer"},Hn={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/Compilation.js#L2837-L2838",target:"_blank",rel:"noopener noreferrer"},Pn={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/buildChunkGraph.js#L1347-L1348",target:"_blank",rel:"noopener noreferrer"},xn=e("code",null,"optimizeModules/optimizeChunks",-1),Wn={href:"https://webpack.js.org/plugins/split-chunks-plugin/",target:"_blank",rel:"noopener noreferrer"},Tn=e("code",null,"optimizeChunkModules",-1),qn={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/Compilation.js#L3160-L3161",target:"_blank",rel:"noopener noreferrer"},zn=e("code",null,"codeGeneration",-1),Gn={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/Compilation.js#L3297-L3298",target:"_blank",rel:"noopener noreferrer"},Jn=e("code",null,"_codeGenerationModule",-1),Nn={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/Module.js#L876-L877",target:"_blank",rel:"noopener noreferrer"},On=e("code",null,"codeGeneration",-1),Xn=e("p",null,[e("img",{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d3fe03a7c0c745e199d1b4c3f817c955~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"})],-1),In={start:"6"},Rn=e("code",null,"codeGeneration",-1),Bn={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/Compilation.js#L4520-L4521",target:"_blank",rel:"noopener noreferrer"},Vn={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/Compilation.js#L4638-L4639",target:"_blank",rel:"noopener noreferrer"},Fn=e("strong",null,"提交",-1),Kn=e("li",null,[n("上述所有操作正常完成后，触发 "),e("code",null,"callback"),n(" 回调，控制流回到 "),e("code",null,"compiler"),n(" 函数。")],-1),Qn={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/Compiler.js#L466-L467",target:"_blank",rel:"noopener noreferrer"},Un=e("code",null,"compiler",-1),Yn={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/Compiler.js#L592-L593",target:"_blank",rel:"noopener noreferrer"},Zn=o(`<p><code>seal</code> 很复杂，重点在于将 Module 按入口组织成多个 Chunk 对象，之后暴露 <code>optimizeXXX</code> 钩子，交由插件根据不同需求对 Chunk 做进一步修剪、整形、优化，最后按 Chunk 为单位做好代码合并与转换，输出为资产文件。</p><blockquote><p>提示：上述 <code>optimizeXXX</code> 钩子常被用于优化最终产物代码，例如 SplitChunksPlugin 就可以在这里分析 Chunk、Module 关系，将使用率较高的 Module 封装进新的 Chunk，实现 Common Chunk 效果。</p></blockquote><p>简单理解，Entry 与 Chunk 一一对应，而 Chunk 与最终输出的资源一一对应，我们来看个示例，假如有这样的配置：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">&quot;./src/a.js&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">&quot;./src/b.js&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实例配置中有两个入口，对应的文件结构：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/150a2a6fd43f401a806b61975f69ce42~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>a 依赖于 c/e；b 依赖于 c/d；a/b 同时依赖于 c。最终生成的 Chunk 结构为：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/58b94810c0df4ea485f9ab2c07c1d700~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>也就是根据依赖关系，<code>chunk[a]</code> 包含了 a/c/e 三个模块，<code>chunk[b]</code> 包含了 b/c/d 三个模块。</p><p><code>seal</code> 过程中会不断调用 <code>compilation.emitAssets</code> 提交资产记录，而直到 <code>seal</code> 结束后则调用 <code>compiler.emitAssets</code> 函数，函数内部调用 <code>compiler.outputFileSystem.writeFile</code> 方法将 <code>assets</code> 集合写入文件系统，Webpack 完成从源码到资产文件的转换，构建工作至此结束。</p><h2 id="资源形态流转" tabindex="-1"><a class="header-anchor" href="#资源形态流转" aria-hidden="true">#</a> 资源形态流转</h2><p>OK，上面我们已经把逻辑层面的构造主流程梳理完了，最后我们再结合<strong>资源形态流转</strong>的角度重新考察整个过程，加深理解：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/defaaadcd2f04cf4ae950a746455a86d~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><ul><li><code>compiler.make</code> 阶段： <ul><li><code>entry</code> 文件以 <code>dependence</code> 对象形式加入 <code>compilation</code> 的依赖列表，<code>dependence</code> 对象记录了 <code>entry</code> 的类型、路径等信息；</li><li>根据 <code>dependence</code> 调用对应的工厂函数创建 <code>module</code> 对象，之后读入 <code>module</code> 对应的文件内容，调用 <code>loader-runner</code> 对内容做转化，转化结果若有其它依赖则继续读入依赖资源，重复此过程直到所有依赖均被转化为 <code>module</code>。</li></ul></li><li><code>compilation.seal</code> 阶段： <ul><li>遍历 <code>module</code> 集合，根据 <code>entry</code> 配置及引入资源的方式，将 <code>module</code> 分配到不同的 Chunk；</li><li>Chunk 之间最终形成 ChunkGraph 结构；</li><li>遍历 ChunkGraph，调用 <code>compilation.emitAsset</code> 方法标记 <code>chunk</code> 的输出规则，即转化为 <code>assets</code> 集合。</li></ul></li><li><code>compiler.emitAssets</code> 阶段： <ul><li>将 <code>assets</code> 写入文件系统。</li></ul></li></ul><p>这个过程用到很多 Webpack 基础对象，包括：</p><ul><li><code>Entry</code>：编译入口；</li><li><code>Compiler</code>：编译管理器，Webpack 启动后会创建 <code>compiler</code> 对象，该对象一直存活直到构建结束进程退出；</li><li><code>Compilation</code>：单次构建过程的管理器，比如 <code>watch = true</code> 时，运行过程中只有一个 <code>compiler</code>，但每次文件变更触发重新编译时，都会创建一个新的 <code>compilation</code> 对象；</li><li><code>Dependence</code>：依赖对象，记录模块间依赖关系；</li><li><code>Module</code>：Webpack 内部所有资源都会以 Module 对象形式存在，所有关于资源的操作、转译、合并都是以 Module 为单位进行的；</li><li><code>Chunk</code>：编译完成准备输出时，将 Module 按特定的规则组织成一个一个的 Chunk。</li></ul><p>这里简单了解即可，后面章节中我们还会继续挖掘不同对象的作用与细节。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>综上，Webpack 底层源码非常复杂，但撇除所有分支逻辑后，构建主流程可以简单划分为三个阶段：</p><ul><li><strong>初始化阶段</strong>：负责设置构建环境，初始化若干工厂类、注入内置插件等；</li><li><strong>构建阶段</strong>：读入并分析 Entry 模块，找到模块依赖，之后递归处理这些依赖、依赖的依赖，直到所有模块都处理完毕，这个过程解决资源“输入”问题；</li><li><strong>生成阶段</strong>：根据 Entry 配置将模块封装进不同 Chunk 对象，经过一系列优化后，再将模块代码翻译成产物形态，按 Chunk 合并成最终产物文件，这个过程解决资源“输出”问题。</li></ul><p>这个过程串起资源「输入」到「输出」的关键步骤，可以说是 Webpack 最重要的流程骨架，没有之一！所以建议你务必跟随上述各个阶段的介绍，翻阅源码中对应的具体代码，深度理解 Webpack 构建功能的实现细节。</p><p>在后面章节中，我还会在这个流程骨架基础上，继续展开一些有代表性的对象、分支、功能实现逻辑，帮助你更体系化理解 Webpack 实现原理。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题" aria-hidden="true">#</a> 思考题</h2><p>在「构建阶段」，为什么需要先将依赖文件构建为 Dependency，之后再根据 Dependency 创建文件对应的 Module 对象？Dependency 对象到底有什么作用？欢迎在留言区讨论。</p>`,24);function $n(ne,ee){const s=p("ExternalLinkIcon");return c(),l("div",null,[r,e("ol",null,[u,e("li",null,[d,n("：从 "),k,n(" 文件开始，调用 "),b,n(" 将模块转译为 JavaScript 代码，调用 "),e("a",m,[n("Acorn"),a(s)]),n(" 将代码转换为 AST 结构，遍历 AST 从中找出该模块依赖的模块；之后 "),h,n(" 遍历所有依赖模块，找出依赖的依赖，直至遍历所有项目资源后，构建出完整的 "),e("strong",null,[e("a",g,[n("模块依赖关系图"),a(s)])]),n("；")]),_]),f,e("ol",null,[v,e("li",null,[n("调用 "),e("a",w,[n("validateSchema"),a(s)]),n(" 校验配置对象（"),y,n(" 底层依赖于 "),e("a",j,[n("schema-utils"),a(s)]),n(" 库）；")]),e("li",null,[n("调用 "),e("a",C,[n("getNormalizedWebpackOptions"),a(s)]),n(" + "),e("a",E,[n("applyWebpackOptionsBaseDefaults"),a(s)]),n(" 合并出最终配置。")])]),A,e("ol",null,[e("li",null,[n("调用 "),e("a",L,[n("createCompiler"),a(s)]),n(" 函数创建 "),D,n(" 对象。")]),e("li",null,[e("a",M,[n("遍历"),a(s)]),n(" 配置中的 "),S,n(" 集合，执行插件的 "),H,n(" 方法。")]),e("li",null,[e("a",P,[n("调用"),a(s)]),n(),x,n(" 方法，根据配置内容动态注入相应插件，包括： "),e("ul",null,[e("li",null,[n("调用 "),e("a",W,[n("EntryOptionPlugin"),a(s)]),n(" 插件，该插件根据 "),T,n(" 值注入 "),q,n(" 或 "),z,n(" 插件；")]),G,J])])]),N,e("p",null,[n("虽然 "),e("a",O,[n("compile"),a(s)]),n(" 方法并没有任何实质的功能逻辑，但它搭建起了后续构建流程框架：")]),e("ol",null,[X,e("li",null,[n("触发 "),I,n(" 钩子，紧接着 "),e("a",R,[n("EntryPlugin"),a(s)]),n(" 在这个钩子中调用 "),B,n(" 对象的 "),V,n(" 方法创建入口模块，主流程开始进入「"),F,n("」；")]),K]),e("blockquote",null,[e("p",null,[n("提示："),Q,n(" 函数是后续所有功能逻辑的起点，非常重要，请务必前往阅读 "),e("a",U,[n("源码"),a(s)]),n("。")])]),Y,Z,e("p",null,[n("「"),$,n("」从 "),nn,n(" 模块开始递归解析模块内容、找出模块依赖，按图索骥逐步构建出项目整体 "),en,n(" 集合以及 "),sn,n(" 之间的 "),e("a",an,[n("依赖关系图"),a(s)]),n("，这个阶段的主要作用就是读入并理解所有原始代码。")]),on,e("ol",null,[e("li",null,[n("调用 "),e("a",tn,[n("handleModuleCreation"),a(s)]),n("，根据文件类型构建 "),pn,n(" 子类 —— 一般是 "),e("a",cn,[n("NormalModule"),a(s)]),n("；")]),e("li",null,[n("调用 "),e("a",ln,[n("loader-runner"),a(s)]),n(" 转译 "),rn,n(" 内容，将各类资源类型转译为 Webpack 能够理解的标准 JavaScript 文本；")]),e("li",null,[n("调用 "),e("a",un,[n("acorn"),a(s)]),n(" 将 JavaScript 代码解析为 AST 结构；")]),e("li",null,[n("在 "),e("a",dn,[n("JavaScriptParser"),a(s)]),n(" 类中遍历 AST，触发各种钩子，其中最关键的： "),e("ol",null,[e("li",null,[n("遇到 "),kn,n(" 语句时，触发 "),e("a",bn,[n("exportImportSpecifier"),a(s)]),n(" 钩子；")]),e("li",null,[e("a",mn,[n("HarmonyExportDependencyParserPlugin"),a(s)]),n(" 监听该钩子，将依赖资源添加为 Dependency 对象；")]),hn])])]),gn,e("p",null,[n("「构建阶段」负责读入与分析源代码文件，将之一一转化为 "),e("a",_n,[n("Module"),a(s)]),n("、"),e("a",fn,[n("Dependency"),a(s)]),n(" 对象，解决的是资源“输入”问题；而「生成阶段」则负责根据一系列内置规则，将上一步构建出的所有 Module 对象拆分编排进若干 Chunk 对象中，之后以 Chunk 粒度将源码转译为适合在目标环境运行的产物形态，并写出为产物文件，解决的是资源“输出”问题。")]),e("p",null,[n("「生成阶段」发生在 "),vn,n(" 阶段执行完毕，"),wn,n(" 调用 "),e("a",yn,[n("compilation.seal"),a(s)]),n(" 函数时：")]),jn,e("ol",null,[e("li",null,[n("创建本次构建的 "),e("a",Cn,[n("ChunkGraph"),a(s)]),n(" 对象。")]),e("li",null,[e("a",En,[n("遍历"),a(s)]),n(" 入口集合 "),An,n("： "),e("ol",null,[e("li",null,[n("调用 "),Ln,n(" 方法为每一个入口 "),e("a",Dn,[n("创建"),a(s)]),n(" 对应的 Chunk 对象（EntryPoint Chunk）；")]),e("li",null,[e("a",Mn,[n("遍历"),a(s)]),n(" 该入口对应的 Dependency 集合，"),e("a",Sn,[n("找到"),a(s)]),n(" 相应 Module 对象并 "),e("a",Hn,[n("关联"),a(s)]),n(" 到该 Chunk。")])])]),e("li",null,[n("到这里可以得到若干 Chunk，之后调用 "),e("a",Pn,[n("buildChunkGraph"),a(s)]),n(" 方法将这些 Chunk 处理成 Graph 结构，方便后续处理。")]),e("li",null,[n("之后，触发 "),xn,n(" 等钩子，由插件（如 "),e("a",Wn,[n("SplitChunksPlugin"),a(s)]),n("）进一步修剪、优化 Chunk 结构。")]),e("li",null,[n("一直到最后一个 Optimize 钩子 "),Tn,n(" 执行完毕后，开始调用 "),e("a",qn,[n("compilation.codeGeneration"),a(s)]),n(" 方法生成 Chunk 代码，在 "),zn,n(" 方法内部： "),e("ol",null,[e("li",null,[n("遍历每一个 Chunk 的 Module 对象，调用 "),e("a",Gn,[n("_codeGenerationModule"),a(s)]),n("；")]),e("li",null,[Jn,n(" 又会继续往下调用 "),e("a",Nn,[n("module.codeGeneration"),a(s)]),n(" 生成单个 Module 的代码，这里注意不同 Module 子类有不同 "),On,n(" 实现，对应不同产物代码效果。")])])])]),Xn,e("ol",In,[e("li",null,[n("所有 Module 都执行完 "),Rn,n("，生成模块资产代码后，开始调用 "),e("a",Bn,[n("createChunkAssets"),a(s)]),n(" 函数，为每一个 Chunk 生成资产文件。")]),e("li",null,[n("调用 "),e("a",Vn,[n("compilation.emitAssets"),a(s)]),n(" 函数“"),Fn,n("”资产文件，注意这里还只是记录资产文件信息，还未写出磁盘文件。")]),Kn,e("li",null,[n("最后，"),e("a",Qn,[n("调用"),a(s)]),n(),Un,n(" 对象的 "),e("a",Yn,[n("emitAssets"),a(s)]),n(" 方法，输出资产文件。")])]),Zn])}const ae=t(i,[["render",$n],["__file","di24zhang—Init、Make、Seal：zhenzhengdudongWebpackhexinliucheng.html.vue"]]);export{ae as default};
