import{_ as p,r as o,o as c,c as l,b as s,d as n,e as t,a}from"./app-48690364.js";const i={},u=a('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>有些小伙伴在理解 <code>Vue</code> 的响应式原理的时候，可能会认为 <code>Vue</code> 的响应式是双向绑定的，但实际上这是不准确的，所谓数据的双向绑定可以体现为以下两部分：</p><ol><li>数据流向 <code>DOM</code> 的绑定：数据的更新最终映射到对应的视图更新。</li><li><code>DOM</code> 流向数据的绑定：操作 <code>DOM</code> 的变化引起数据的更新。</li></ol><p>我们在前面的章节花了不少篇幅介绍了响应式原理，其实这块就是着重在介绍数据流向 <code>DOM</code> 的过程。</p><p>在 <code>Vuejs</code> 中，我们则会经常通过 <code>v-model</code> 指令来实现数据的 “双向绑定”。 <code>v-model</code> 指令既可以作用在普通表单元素，也可以作用在一些组件上。接下来我们将分别介绍这两种情况的实现原理。</p><h2 id="表单元素" tabindex="-1"><a class="header-anchor" href="#表单元素" aria-hidden="true">#</a> 表单元素</h2><p>在使用 <code>Vuejs</code> 编写表单类的 <code>UI</code> 控件时，经常会使用 <code>v-model</code> 指令来为 <code>&lt;input&gt;</code>、<code>&lt;select&gt;</code>、<code>&lt;textarea&gt;</code> 进行数据的双向绑定。</p>',7),d=s("code",null,"Vue",-1),r={href:"https://vue-next-template-explorer.netlify.app/",target:"_blank",rel:"noopener noreferrer"},k=s("code",null,"<input>",-1),v=s("code",null,"<select>",-1),m=s("code",null,"<textarea>",-1),b=s("code",null,"v-model",-1),g=a(`<p><strong>模版：</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>value1<span class="token punctuation">&#39;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>value2<span class="token punctuation">&#39;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>value3<span class="token punctuation">&#39;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>编译结果</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> vModelText <span class="token keyword">as</span> _vModelText<span class="token punctuation">,</span> createElementVNode <span class="token keyword">as</span> _createElementVNode<span class="token punctuation">,</span> withDirectives <span class="token keyword">as</span> _withDirectives<span class="token punctuation">,</span> vModelSelect <span class="token keyword">as</span> _vModelSelect<span class="token punctuation">,</span> Fragment <span class="token keyword">as</span> _Fragment<span class="token punctuation">,</span> openBlock <span class="token keyword">as</span> _openBlock<span class="token punctuation">,</span> createElementBlock <span class="token keyword">as</span> _createElementBlock <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span>

<span class="token keyword">const</span> _hoisted_1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;onUpdate:modelValue&quot;</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> _hoisted_2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;onUpdate:modelValue&quot;</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> _hoisted_3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;onUpdate:modelValue&quot;</span><span class="token punctuation">]</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">_ctx<span class="token punctuation">,</span> _cache<span class="token punctuation">,</span> $props<span class="token punctuation">,</span> $setup<span class="token punctuation">,</span> $data<span class="token punctuation">,</span> $options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_createElementBlock</span><span class="token punctuation">(</span>_Fragment<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
    <span class="token function">_withDirectives</span><span class="token punctuation">(</span><span class="token function">_createElementVNode</span><span class="token punctuation">(</span><span class="token string">&quot;input&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;onUpdate:modelValue&quot;</span><span class="token operator">:</span> <span class="token parameter">$event</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>value1<span class="token punctuation">)</span> <span class="token operator">=</span> $event<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token comment">/* PROPS */</span><span class="token punctuation">,</span> _hoisted_1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
      <span class="token punctuation">[</span>_vModelText<span class="token punctuation">,</span> _ctx<span class="token punctuation">.</span>value1<span class="token punctuation">]</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">_withDirectives</span><span class="token punctuation">(</span><span class="token function">_createElementVNode</span><span class="token punctuation">(</span><span class="token string">&quot;textarea&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;onUpdate:modelValue&quot;</span><span class="token operator">:</span> <span class="token parameter">$event</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>value2<span class="token punctuation">)</span> <span class="token operator">=</span> $event<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token comment">/* PROPS */</span><span class="token punctuation">,</span> _hoisted_2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
      <span class="token punctuation">[</span>_vModelText<span class="token punctuation">,</span> _ctx<span class="token punctuation">.</span>value2<span class="token punctuation">]</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">_withDirectives</span><span class="token punctuation">(</span><span class="token function">_createElementVNode</span><span class="token punctuation">(</span><span class="token string">&quot;select&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;onUpdate:modelValue&quot;</span><span class="token operator">:</span> <span class="token parameter">$event</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>value3<span class="token punctuation">)</span> <span class="token operator">=</span> $event<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token comment">/* PROPS */</span><span class="token punctuation">,</span> _hoisted_3<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
      <span class="token punctuation">[</span>_vModelSelect<span class="token punctuation">,</span> _ctx<span class="token punctuation">.</span>value3<span class="token punctuation">]</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">64</span> <span class="token comment">/* STABLE_FRAGMENT */</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到通过 <code>v-model</code> 绑定的元素，在转成渲染函数的时候，最外层都被套上了一个 <code>withDirectives</code> 函数，这个函数传入了两个变量，一个通过 <code>createElementVNode</code> 创建的 <code>vnode</code> 节点，另一个是一个数组类型的参 <code>directives</code>，这个我们后面再介绍。我们先来简单看一下 <code>withDirectives</code> 这个函数的实现：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">withDirectives</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> directives</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> internalInstance <span class="token operator">=</span> currentRenderingInstance
  <span class="token keyword">if</span> <span class="token punctuation">(</span>internalInstance <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> vnode
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token function">getExposeProxy</span><span class="token punctuation">(</span>internalInstance<span class="token punctuation">)</span> <span class="token operator">||</span> internalInstance<span class="token punctuation">.</span>proxy
  <span class="token comment">// 获取指令集</span>
  <span class="token keyword">const</span> bindings <span class="token operator">=</span> vnode<span class="token punctuation">.</span>dirs <span class="token operator">||</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>dirs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token comment">// 遍历 directives</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> directives<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token punctuation">[</span>dir<span class="token punctuation">,</span> value<span class="token punctuation">,</span> arg<span class="token punctuation">,</span> modifiers <span class="token operator">=</span> <span class="token constant">EMPTY_OBJ</span><span class="token punctuation">]</span> <span class="token operator">=</span> directives<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token comment">// 如果存在指令</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 指令是个函数，构造 mounted、updated 钩子</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFunction</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dir <span class="token operator">=</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">mounted</span><span class="token operator">:</span> dir<span class="token punctuation">,</span>
          <span class="token literal-property property">updated</span><span class="token operator">:</span> dir
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// 存在 deep 属性，遍历访问每个属性</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>dir<span class="token punctuation">.</span>deep<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">traverse</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// bindings 中添加构造好的指令元素</span>
      bindings<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        dir<span class="token punctuation">,</span>
        instance<span class="token punctuation">,</span>
        value<span class="token punctuation">,</span>
        <span class="token literal-property property">oldValue</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">,</span>
        arg<span class="token punctuation">,</span>
        modifiers
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> vnode
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到 <code>withDirectives</code> 函数主要就是为 <code>vnode</code> 节点上添加 <code>dirs</code> 属性，对于我们示例中的 <code>&lt;input&gt;</code> 节点而言，生成的 <code>dir</code> 内容大致为（ <code>select</code> 节点类似，这里就不再介绍了，有兴趣的可以在源码详细了解）：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{
  dir: vModelText,
  value: _ctx.value1,
  ...
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>vModelText</code> 是一个对象，内置了 <code>v-model</code> 指令相关的生命周期的实现：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>export const vModelText = {
  // created 生命周期
  created(el, { modifiers: { lazy, trim, number } }, vnode) {
    // 获取 props 上 onUpdate:modelValue 函数
    el._assign = getModelAssigner(vnode)
    const castToNumber =
      number || (vnode.props &amp;&amp; vnode.props.type === &#39;number&#39;)
    // 注册 input/change 事件  
    addEventListener(el, lazy ? &#39;change&#39; : &#39;input&#39;, e =&gt; {
      // ...
      let domValue = el.value
      // .trim 修饰符
      if (trim) {
        domValue = domValue.trim()
      }
      if (castToNumber) {
        domValue = looseToNumber(domValue)
      }
      // 执行 onUpdate:modelValue 函数
      el._assign(domValue)
    })
    if (trim) {
      addEventListener(el, &#39;change&#39;, () =&gt; {
        el.value = el.value.trim()
      })
    }
    // ...
  },
  mounted(el, { value }) {
    // 赋值
    el.value = value == null ? &#39;&#39; : value
  },
  beforeUpdate(el, { value, modifiers: { lazy, trim, number } }, vnode) {
    // 更新 el._assign
    el._assign = getModelAssigner(vnode)
    if (el.composing) return
    if (document.activeElement === el &amp;&amp; el.type !== &#39;range&#39;) {
      if (lazy) {
        return
      }
      if (trim &amp;&amp; el.value.trim() === value) {
        return
      }
      if (
        (number || el.type === &#39;number&#39;) &amp;&amp;
        looseToNumber(el.value) === value
      ) {
        return
      }
    }
    // 更新值
    const newValue = value == null ? &#39;&#39; : value
    if (el.value !== newValue) {
      el.value = newValue
    }
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到 <code>vModelText</code> 内置了 <code>created</code>、<code>mounted</code>、<code>beforeUpdate</code> 钩子函数。</p><p>在 <code>created</code> 的时候，会从 <code>pops</code> 上获取 <code>onUpdate:modelValue</code> 函数，这个函数也就是我们在遇到 <code>v-model</code> 指令后，<code>Vue</code> 的编译器自动转换生成的。然后再监听对应 <code>DOM</code> 上的 <code>change</code> 或者 <code>input</code> 事件，事件触发时再回调执行 <code>onUpdate:modelValue</code> 函数。</p><p>在 <code>mounted</code> 的时候，会将当前的值 <code>value</code> 赋值给 <code>el.value</code>。</p><h3 id="指令生命周期的触发" tabindex="-1"><a class="header-anchor" href="#指令生命周期的触发" aria-hidden="true">#</a> 指令生命周期的触发</h3><p>前面我们提到了 <code>v-model</code> 注册的指令节点，会生成一个带有 <code>dirs</code> 的属性，属性中会包含类似于 <code>vModelText</code> 这样的对象，这个对象内部包含了一些生命周期函数，那这些生命周期函数又是在何时执行的呢？再回到我们之前的 <code>mountElement</code> 函数内，这次我们着重看一下与指令相关的代码实现：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">mountElement</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">,</span> parentComponent<span class="token punctuation">,</span> parentSuspense<span class="token punctuation">,</span> isSVG<span class="token punctuation">,</span> optimized</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> props<span class="token punctuation">,</span> shapeFlag<span class="token punctuation">,</span> transition<span class="token punctuation">,</span> dirs <span class="token punctuation">}</span> <span class="token operator">=</span> vnode

  <span class="token keyword">if</span> <span class="token punctuation">(</span>dirs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 执行 created 钩子函数</span>
    <span class="token function">invokeDirectiveHook</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> parentComponent<span class="token punctuation">,</span> <span class="token string">&#39;created&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// ...</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 处理 props，比如 class、style、event 等属性</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>dirs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 执行 beforeMount 钩子函数</span>
    <span class="token function">invokeDirectiveHook</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> parentComponent<span class="token punctuation">,</span> <span class="token string">&#39;beforeMount&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 挂载 dom</span>
  <span class="token function">hostInsert</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span>
  
  <span class="token keyword">if</span> <span class="token punctuation">(</span>
    <span class="token punctuation">(</span>vnodeHook <span class="token operator">=</span> props <span class="token operator">&amp;&amp;</span> props<span class="token punctuation">.</span>onVnodeMounted<span class="token punctuation">)</span> <span class="token operator">||</span>
    needCallTransitionHooks <span class="token operator">||</span>
    dirs
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">queuePostRenderEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      vnodeHook <span class="token operator">&amp;&amp;</span> <span class="token function">invokeVNodeHook</span><span class="token punctuation">(</span>vnodeHook<span class="token punctuation">,</span> parentComponent<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span>
      needCallTransitionHooks <span class="token operator">&amp;&amp;</span> transition<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">enter</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>
      <span class="token comment">// 执行 mounted 钩子函数</span>
      dirs <span class="token operator">&amp;&amp;</span> <span class="token function">invokeDirectiveHook</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> parentComponent<span class="token punctuation">,</span> <span class="token string">&#39;mounted&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> parentSuspense<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到指令相关的钩子函数在进行 <code>vnode</code> 初始化挂载的时候，会在挂载的各个阶段被分别调用，从而完成生命周期函数的执行过程。</p><h2 id="组件" tabindex="-1"><a class="header-anchor" href="#组件" aria-hidden="true">#</a> 组件</h2><p>我们首先来看一下，<code>v-model</code> 在组件中一些常规的使用方式：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Component</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>value1<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Component</span> <span class="token attr-name"><span class="token namespace">v-model:</span>title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bookTitle<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Component</span> <span class="token attr-name"><span class="token namespace">v-model:</span>first-name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>first<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">v-model:</span>last-name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>last<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在组件上，<code>v-model</code> 不仅仅可以使用 <code>modelValue</code> 作为 <code>prop</code>，以 <code>update:modelValue</code> 作为对应的事件，还支持了给 <code>v-model</code> 一个自定义参数来更改这些名字。因为有了自定义参数的功能，所以也就支持了一个组件多个 <code>v-model</code> 绑定的功能。</p>`,21),y={href:"https://vue-next-template-explorer.netlify.app/",target:"_blank",rel:"noopener noreferrer"},_=a(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> resolveComponent <span class="token keyword">as</span> _resolveComponent<span class="token punctuation">,</span> createVNode <span class="token keyword">as</span> _createVNode<span class="token punctuation">,</span> Fragment <span class="token keyword">as</span> _Fragment<span class="token punctuation">,</span> openBlock <span class="token keyword">as</span> _openBlock<span class="token punctuation">,</span> createElementBlock <span class="token keyword">as</span> _createElementBlock <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">_ctx<span class="token punctuation">,</span> _cache<span class="token punctuation">,</span> $props<span class="token punctuation">,</span> $setup<span class="token punctuation">,</span> $data<span class="token punctuation">,</span> $options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> _component_Component <span class="token operator">=</span> <span class="token function">_resolveComponent</span><span class="token punctuation">(</span><span class="token string">&quot;Component&quot;</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_createElementBlock</span><span class="token punctuation">(</span>_Fragment<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
    <span class="token function">_createVNode</span><span class="token punctuation">(</span>_component_Component<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">modelValue</span><span class="token operator">:</span> _ctx<span class="token punctuation">.</span>value1<span class="token punctuation">,</span>
      <span class="token string-property property">&quot;onUpdate:modelValue&quot;</span><span class="token operator">:</span> <span class="token parameter">$event</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>value1<span class="token punctuation">)</span> <span class="token operator">=</span> $event<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token comment">/* PROPS */</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;modelValue&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;onUpdate:modelValue&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">_createVNode</span><span class="token punctuation">(</span>_component_Component<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">title</span><span class="token operator">:</span> _ctx<span class="token punctuation">.</span>bookTitle<span class="token punctuation">,</span>
      <span class="token string-property property">&quot;onUpdate:title&quot;</span><span class="token operator">:</span> <span class="token parameter">$event</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>bookTitle<span class="token punctuation">)</span> <span class="token operator">=</span> $event<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token comment">/* PROPS */</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;title&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;onUpdate:title&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">_createVNode</span><span class="token punctuation">(</span>_component_Component<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;first-name&quot;</span><span class="token operator">:</span> _ctx<span class="token punctuation">.</span>first<span class="token punctuation">,</span>
      <span class="token string-property property">&quot;onUpdate:firstName&quot;</span><span class="token operator">:</span> <span class="token parameter">$event</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>first<span class="token punctuation">)</span> <span class="token operator">=</span> $event<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token string-property property">&quot;last-name&quot;</span><span class="token operator">:</span> _ctx<span class="token punctuation">.</span>last<span class="token punctuation">,</span>
      <span class="token string-property property">&quot;onUpdate:lastName&quot;</span><span class="token operator">:</span> <span class="token parameter">$event</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>last<span class="token punctuation">)</span> <span class="token operator">=</span> $event<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token comment">/* PROPS */</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;first-name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;onUpdate:firstName&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;last-name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;onUpdate:lastName&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">64</span> <span class="token comment">/* STABLE_FRAGMENT */</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，编译器在处理组件带有 <code>v-model</code> 指令的时候，会将其根据相关参数进行解析，最后组成一个 <code>props</code> 传入组件中。拿一个 <code>v-model:title = &#39;bookTitle&#39;</code> 举例，生成的 <code>props</code> 大致是这样的：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">title</span><span class="token operator">:</span> value<span class="token punctuation">,</span>
  <span class="token string-property property">&quot;onUpdate:title&quot;</span><span class="token operator">:</span> <span class="token parameter">$event</span> <span class="token operator">=&gt;</span> _ctx<span class="token punctuation">.</span>bookTitle <span class="token operator">=</span> $event
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以这也解释了为什么组件内部需要定义一个 <code>props</code> 用来承接 <code>title</code> 的值；定义一个 <code>emit</code>，在 <code>title</code> 值变化的时候，用来触发 <code>onUpdate:title</code>，并传入更新后的值。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- Component.vue --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;update:title&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>
    <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>title<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">@input</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$emit(&#39;update:title&#39;, $event.target.value)<span class="token punctuation">&quot;</span></span>
  <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们再看看这个 <code>$emit</code> 是如何触发 <code>onUpdate:title</code> 函数的执行的。先来看看 <code>$emit</code> 函数的实现：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">emit</span><span class="token punctuation">(</span><span class="token parameter">instance<span class="token punctuation">,</span> event<span class="token punctuation">,</span> <span class="token operator">...</span>rawArgs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>isUnmounted<span class="token punctuation">)</span> <span class="token keyword">return</span>
  <span class="token keyword">const</span> props <span class="token operator">=</span> instance<span class="token punctuation">.</span>vnode<span class="token punctuation">.</span>props <span class="token operator">||</span> <span class="token constant">EMPTY_OBJ</span>
  
  <span class="token keyword">let</span> args <span class="token operator">=</span> rawArgs
  
  <span class="token comment">// 定义事件名称</span>
  <span class="token keyword">let</span> handlerName
  <span class="token comment">// update:xxx =&gt; onUpdate:xxx</span>
  <span class="token keyword">let</span> handler <span class="token operator">=</span>
    props<span class="token punctuation">[</span><span class="token punctuation">(</span>handlerName <span class="token operator">=</span> <span class="token function">toHandlerKey</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">||</span>
    props<span class="token punctuation">[</span><span class="token punctuation">(</span>handlerName <span class="token operator">=</span> <span class="token function">toHandlerKey</span><span class="token punctuation">(</span><span class="token function">camelize</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
  <span class="token comment">// 找到了 handler 触发调用</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">callWithAsyncErrorHandling</span><span class="token punctuation">(</span>
      handler<span class="token punctuation">,</span>
      instance<span class="token punctuation">,</span>
      ErrorCodes<span class="token punctuation">.</span><span class="token constant">COMPONENT_EVENT_HANDLER</span><span class="token punctuation">,</span>
      args
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中第一个参数是当前组件实例，<code>$emit</code> 自动为我们绑定了当前组件，<code>event</code> 为事件名称，<code>rawArgs</code> 就是传入的一些参数。整个函数逻辑还是很清晰的，就是将传入的 <code>event</code> 名称转成 <code>onUpdate:xxx</code> 的写法，然后在 <code>props</code> 上找对应的函数，也就是我们传入的那个事件函数。找到了后就通过 <code>callWithAsyncErrorHandling</code> 方法进行调用，完成事件的执行。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p><code>v-model</code> 不管是在表单元素还是在组件元素上都会被编译器转成一个 <code>props</code> 对象，在表单元素上是这样的：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;onUpdate:modelValue&quot;</span><span class="token operator">:</span> <span class="token parameter">$event</span> <span class="token operator">=&gt;</span> _ctx<span class="token punctuation">.</span>bookTitle <span class="token operator">=</span> $event
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而在组件时则会编译成：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">title</span><span class="token operator">:</span> value<span class="token punctuation">,</span>
  <span class="token string-property property">&quot;onUpdate:title&quot;</span><span class="token operator">:</span> <span class="token parameter">$event</span> <span class="token operator">=&gt;</span> _ctx<span class="token punctuation">.</span>bookTitle <span class="token operator">=</span> $event
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么，所谓的双向数据绑定的 <code>DOM</code> 操作触发数据的更新就可以理解为：</p><p>在表单元素上，事件名 <code>modelValue</code> 是默认的，通过 <code>vModelText</code> 函数在内部实现了一个监听 <code>DOM</code> 变更的事件 <code>change/input</code> 来实现对数据值的更新操作。</p><p>在组件元素上，则是通过组件内部自定义值接受和事件派发机制完成对数据的更新操作。</p>`,16);function h(f,x){const e=o("ExternalLinkIcon");return c(),l("div",null,[u,s("p",null,[n("我们使用 "),d,n(" 提供的官方"),s("a",r,[n("模版转换工具"),t(e)]),n("来尝试一下在 "),k,n("、"),v,n("、"),m,n(" 输入类型的表单中使用 "),b,n(" 指令会被编译成什么样子：")]),g,s("p",null,[n("接下来再看看通过 "),s("a",y,[n("Vue 3 Template Explorer"),t(e)]),n(" 将上述模版转出来的渲染函数的表达形式：")]),_])}const w=p(i,[["render",h],["__file","20 teshuyuansu_zhiling：shuangxiangbangdingshiruheshixiande？.html.vue"]]);export{w as default};
