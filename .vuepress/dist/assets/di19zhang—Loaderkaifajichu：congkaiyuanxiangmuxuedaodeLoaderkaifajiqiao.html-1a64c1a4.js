import{_ as p,r as o,o as c,c as l,b as s,d as n,e,a as t}from"./app-48690364.js";const i={},r=t(`<p>如何扩展 Webpack？有两种主流方式，一是 Loader —— 主要负责将资源内容翻译成 Webpack 能够理解、处理的 JavaScript 代码；二是 Plugin —— 深度介入 Webpack 构建过程，<strong>重塑</strong> 构建逻辑。</p><p>相对而言，Loader 的职责更单一，入门成本相对较低。</p><p>接下来我将集中介绍“<strong>如何开发一个 Loader</strong>”，由于内容太多，所以拆分成上下两篇文章。本文先从基础入手：</p><ul><li>Loader 的基本形态与输入输出；</li><li>如何使用 Loader Context 上下文接口，并结合一些知名开源项目展开介绍部分常用接口；</li><li>如何为 Loader 编写自动测试代码；</li><li>深入剖析 Loader 链式调用模型。</li></ul><h2 id="为什么需要-loader" tabindex="-1"><a class="header-anchor" href="#为什么需要-loader" aria-hidden="true">#</a> 为什么需要 Loader？</h2><p>为什么 Webpack 需要设计出 Loader 这一扩展方式？本质上是因为计算机世界中的文件资源格式实在太多，不可能一一穷举， 那何不将&quot;<strong>解析</strong>&quot;资源这部分任务开放出去，由第三方实现呢？Loader 正是为了将文件资源的“读”与“处理”逻辑解耦，Webpack 内部只需实现对标准 JavaScript 代码解析/处理能力，由第三方开发者以 Loader 方式补充对特定资源的解析逻辑。</p><blockquote><p>提示：Webpack5 之后增加了 Parser 对象，事实上已经内置支持图片、JSON 等格式的内容，不过这并不影响我们对 Loader 这一概念的理解。</p></blockquote><p>实现上，Loader 通常是一种 mapping 函数形式，接收原始代码内容，返回翻译结果，如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 执行各种代码计算</span>
  <span class="token keyword">return</span> modifySource<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),u={href:"https://github.com/webpack/loader-runner",target:"_blank",rel:"noopener noreferrer"},d=s("code",null,"source",-1),k=s("code",null,"source",-1),v=t(`<p>Loader 函数签名如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">source<span class="token punctuation">,</span> sourceMap<span class="token operator">?</span><span class="token punctuation">,</span> data<span class="token operator">?</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> source<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Loader 接收三个参数，分别为：</p>`,3),m=s("li",null,[s("code",null,"source"),n("：资源输入，对于第一个执行的 Loader 为资源文件的内容；后续执行的 Loader 则为前一个 Loader 的执行结果，可能是字符串，也可能是代码的 AST 结构；")],-1),b=s("code",null,"sourceMap",-1),g={href:"https://sourcemap.com/",target:"_blank",rel:"noopener noreferrer"},h=s("code",null,"data",-1),f={href:"https://github.com/posthtml/posthtml-loader",target:"_blank",rel:"noopener noreferrer"},y=s("code",null,"source",-1),w=s("code",null,"source",-1),_=s("code",null,"output",-1),x={href:"https://github.com/webpack-contrib/raw-loader",target:"_blank",rel:"noopener noreferrer"},j=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//... </span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">rawLoader</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token keyword">const</span> json <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\u2028</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;\\\\u2028&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\u2029</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;\\\\u2029&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> esModule <span class="token operator">=</span>
    <span class="token keyword">typeof</span> options<span class="token punctuation">.</span>esModule <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span> <span class="token operator">?</span> options<span class="token punctuation">.</span>esModule <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>esModule <span class="token operator">?</span> <span class="token string">&#39;export default&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;module.exports =&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>json<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码的作用是将文本内容包裹成 JavaScript 模块，例如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// source
I am 范文杰

// output
module.exports = &quot;I am 范文杰&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>经过模块化包装之后，这段文本内容变成 Webpack 可以理解的 JavaScript，其它 Module 也就能引用、使用它了。</p><p>需要注意，Loader 中执行的各种资源内容转译操作通常都是 CPU 密集型 —— 这放在 JavaScript 单线程架构下可能导致性能问题；又或者异步 Loader 会挂起后续的加载器队列直到异步 Loader 触发回调，稍微不注意就可能导致整个加载器链条的执行时间过长。</p><p>为此，Webpack 默认会缓存 Loader 的执行结果直到资源或资源依赖发生变化，开发者需要对此有个基本的理解，必要时可以通过 <code>this.cachable</code> 显式声明不作缓存：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cacheable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// ...</span>
  <span class="token keyword">return</span> output<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="loader-简单示例" tabindex="-1"><a class="header-anchor" href="#loader-简单示例" aria-hidden="true">#</a> Loader 简单示例</h2><p>接下来我们尝试编写一个简单的 Loader Demo，理解如何开发、调试、使用自定义 Loader 组件。示例代码结构如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>loader<span class="token operator">-</span>custom
├─ src
│  ├─ cjs<span class="token punctuation">.</span>js
│  ├─ index<span class="token punctuation">.</span>js
│  └─ options<span class="token punctuation">.</span>json
├─ <span class="token keyword">package</span><span class="token punctuation">.</span>json
└─ babel<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),L={href:"https://github1s.com/Tecvan-fe/webpack-book-samples/blob/main/loader-custom/package.json",target:"_blank",rel:"noopener noreferrer"},q=t(`<p>核心代码 <code>src/index.js</code> 内容如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> validate <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;schema-utils&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> schema <span class="token keyword">from</span> <span class="token string">&quot;./options.json&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">loader</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> version<span class="token punctuation">,</span> webpack <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">validate</span><span class="token punctuation">(</span>schema<span class="token punctuation">,</span> options<span class="token punctuation">,</span> <span class="token string">&quot;Loader&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> newSource <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
  /**
   * Loader API Version: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>version<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">
   * Is this in &quot;webpack mode&quot;: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>webpack<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">
   */
  /**
   * Original Source From Loader
   */
  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>source<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> newSource<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),S=s("code",null,"debugger",-1),W={href:"https://www.npmjs.com/package/ndb",target:"_blank",rel:"noopener noreferrer"},F=s("p",null,[n("代码逻辑很简单，核心功能只是在原来 "),s("code",null,"source"),n(" 上拼接了一些文本，但该有的东西也都有了：")],-1),M=s("li",null,[n("通过 "),s("code",null,"this.getOptions"),n(" 接口获取 Loader 配置对象；")],-1),C={href:"https://www.npmjs.com/package/schema-utils",target:"_blank",rel:"noopener noreferrer"},T=s("code",null,"validate",-1),O=s("code",null,"src/options.json",-1),$=s("li",null,"返回经过修改的内容。",-1),D=t(`<p>开发完成后，可以通过 <code>module.rules</code> 测试该 Loader，如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> 
          <span class="token comment">// 传入示例 Loader 的绝对路径</span>
          <span class="token literal-property property">loader</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;../dist/index.js&quot;</span><span class="token punctuation">)</span> 
        <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),I={href:"https://github1s.com/Tecvan-fe/webpack-book-samples/blob/main/loader-custom/examples/webpack.config.js",target:"_blank",rel:"noopener noreferrer"},J=t(`<p>也可以将 <code>resolveLoader.modules</code> 配置指向到 Loader 所在目录，Webpack 会在该目录查找加载器，如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>
  <span class="token literal-property property">resolveLoader</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;node_modules&#39;</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;loaders&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们可以开始使用 Loader 上下文接口实现更丰富的功能。</p><h2 id="使用上下文接口" tabindex="-1"><a class="header-anchor" href="#使用上下文接口" aria-hidden="true">#</a> 使用上下文接口</h2><blockquote><p>提示：本节内容主要围绕 Webpack5 展开，Webpack4 稍有差异，不作单独解释。</p></blockquote>`,5),P={href:"https://webpack.js.org/api/loaders/#thisaddcontextdependency",target:"_blank",rel:"noopener noreferrer"},E=s("strong",null,"有限制",-1),R=s("code",null,"this",-1),A=s("p",null,[s("img",{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6bf7dcc372ca483ba07edf6f1018ebdf~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"})],-1),B={href:"https://webpack.js.org/api/loaders/#the-loader-context",target:"_blank",rel:"noopener noreferrer"},N=t(`<ul><li><code>fs</code>：Compilation 对象的 <code>inputFileSystem</code> 属性，我们可以通过这个对象获取更多资源文件的内容；</li><li><code>resource</code>：当前文件路径；</li><li><code>resourceQuery</code>：文件请求参数，例如 <code>import &quot;./a?foo=bar&quot;</code> 的 <code>resourceQuery</code> 值为 <code>?foo=bar</code>；</li><li><code>callback</code>：可用于返回多个结果；</li><li><code>getOptions</code>：用于获取当前 Loader 的配置对象；</li><li><code>async</code>：用于声明这是一个异步 Loader，开发者需要通过 <code>async</code> 接口返回的 <code>callback</code> 函数传递处理结果；</li><li><code>emitWarning</code>：添加警告；</li><li><code>emitError</code>：添加错误信息，注意这不会中断 Webpack 运行；</li><li><code>emitFile</code>：用于直接写出一个产物文件，例如 <code>file-loader</code> 依赖该接口写出 Chunk 之外的产物；</li><li><code>addDependency</code>：将 <code>dep</code> 文件添加为编译依赖，当 <code>dep</code> 文件内容发生变化时，会触发当前文件的重新构建；</li></ul><p>下面我会抽取几个比较关键的接口，结合开源项目的用法展开讲解。</p><h2 id="取消-loader-缓存" tabindex="-1"><a class="header-anchor" href="#取消-loader-缓存" aria-hidden="true">#</a> 取消 Loader 缓存</h2><p>需要注意，Loader 中执行的各种资源内容转译操作通常都是 CPU 密集型 —— 这放在 JavaScript 单线程架构下可能导致性能问题；又或者异步 Loader 会挂起后续的加载器队列直到异步 Loader 触发回调，稍微不注意就可能导致整个加载器链条的执行时间过长。</p><p>为此，Webpack 默认会缓存 Loader 的执行结果直到模块或模块所依赖的其它资源发生变化，我们也可以通过 <code>this.cacheable</code> 接口显式关闭缓存：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cacheable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// ...</span>
  <span class="token keyword">return</span> output<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="在-loader-中返回多个结果" tabindex="-1"><a class="header-anchor" href="#在-loader-中返回多个结果" aria-hidden="true">#</a> 在 Loader 中返回多个结果</h2>`,7),z=s("code",null,"return",-1),U=s("code",null,"callback",-1),V={href:"https://github.com/webpack-contrib/eslint-loader",target:"_blank",rel:"noopener noreferrer"},Q=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">loader</span><span class="token punctuation">(</span><span class="token parameter">content<span class="token punctuation">,</span> map</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  linter<span class="token punctuation">.</span><span class="token function">printOutput</span><span class="token punctuation">(</span>linter<span class="token punctuation">.</span><span class="token function">lint</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> content<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 <code>this.callback(null, content, map)</code> 语句，同时返回转译后的内容与 sourcemap 内容。<code>callback</code> 的完整签名如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span>
    <span class="token comment">// 异常信息，Loader 正常运行时传递 null 值即可</span>
    <span class="token literal-property property">err</span><span class="token operator">:</span> Error <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token comment">// 转译结果</span>
    <span class="token literal-property property">content</span><span class="token operator">:</span> string <span class="token operator">|</span> Buffer<span class="token punctuation">,</span>
    <span class="token comment">// 源码的 sourcemap 信息</span>
    sourceMap<span class="token operator">?</span><span class="token operator">:</span> SourceMap<span class="token punctuation">,</span>
    <span class="token comment">// 任意需要在 Loader 间传递的值</span>
    <span class="token comment">// 经常用来传递 ast 对象，避免重复解析</span>
    data<span class="token operator">?</span><span class="token operator">:</span> any
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="在-loader-返回异步结果" tabindex="-1"><a class="header-anchor" href="#在-loader-返回异步结果" aria-hidden="true">#</a> 在 Loader 返回异步结果</h2>`,4),G={href:"https://github.com/webpack-contrib/less-loader",target:"_blank",rel:"noopener noreferrer"},H=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> less <span class="token keyword">from</span> <span class="token string">&quot;less&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">lessLoader</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 1. 获取异步回调函数</span>
  <span class="token keyword">const</span> callback <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// ...</span>

  <span class="token keyword">let</span> result<span class="token punctuation">;</span>

  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">// 2. 调用less 将模块内容转译为 css</span>
    result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>implementation <span class="token operator">||</span> less<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> lessOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> <span class="token punctuation">{</span> css<span class="token punctuation">,</span> imports <span class="token punctuation">}</span> <span class="token operator">=</span> result<span class="token punctuation">;</span>

  <span class="token comment">// ...</span>

  <span class="token comment">// 3. 转译结束，返回结果</span>
  <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> css<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> lessLoader<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 less-loader 中，包含三个重要逻辑：</p><ul><li>调用 <code>this.async</code> 获取异步回调函数，此时 Webpack 会将该 Loader 标记为异步加载器，会挂起当前执行队列直到 <code>callback</code> 被触发；</li><li>调用 <code>less</code> 库将 less 资源转译为标准 css；</li><li>调用异步回调 <code>callback</code> 返回处理结果。</li></ul><p><code>this.async</code> 返回的异步回调函数签名与上一节介绍的 <code>this.callback</code> 相同，此处不再赘述。</p><h2 id="在-loader-中直接写出文件" tabindex="-1"><a class="header-anchor" href="#在-loader-中直接写出文件" aria-hidden="true">#</a> 在 Loader 中直接写出文件</h2><p>Loader Context 的 <code>emitFile</code> 接口可用于直接写出新的产物文件，例如在 <code>file-loader</code> 中：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">loader</span><span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token function">getOptions</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">validate</span><span class="token punctuation">(</span>schema<span class="token punctuation">,</span> options<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;File Loader&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">baseDataPath</span><span class="token operator">:</span> <span class="token string">&#39;options&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// ...</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> options<span class="token punctuation">.</span>emitFile <span class="token operator">===</span> <span class="token string">&#39;undefined&#39;</span> <span class="token operator">||</span> options<span class="token punctuation">.</span>emitFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emitFile</span><span class="token punctuation">(</span>outputPath<span class="token punctuation">,</span> content<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> assetInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> esModule <span class="token operator">=</span>
    <span class="token keyword">typeof</span> options<span class="token punctuation">.</span>esModule <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span> <span class="token operator">?</span> options<span class="token punctuation">.</span>esModule <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>esModule <span class="token operator">?</span> <span class="token string">&#39;export default&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;module.exports =&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>publicPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> raw <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>借助 <code>emitFile</code> 接口，我们能够在 Webpack 构建主流程之外提交更多产物，这有时候是必要的，除上面提到的 <code>file-loader</code> 外，<code>response-loader</code> 、<code>mermaid-loader</code> 等也依赖于 <code>emitFile</code> 实现构建功能。</p><h2 id="在-loader-中添加额外依赖" tabindex="-1"><a class="header-anchor" href="#在-loader-中添加额外依赖" aria-hidden="true">#</a> 在 Loader 中添加额外依赖</h2><p>Loader Context 的 <code>addDependency</code> 接口用于添加额外的文件依赖，当这些依赖发生变化时，也会触发重新构建，例如在 <code>less-loader</code> 中包含这样一段代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>implementation <span class="token operator">||</span> less<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> lessOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> <span class="token punctuation">{</span> css<span class="token punctuation">,</span> imports <span class="token punctuation">}</span> <span class="token operator">=</span> result<span class="token punctuation">;</span>

  imports<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addDependency</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">normalize</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码中首先调用 <code>less</code> 库编译文件内容，之后遍历所有 <code>@import</code> 语句(<code>result.imports</code> 数组)，调用 <code>this.addDependency</code> 函数将 import 到的文件都注册为依赖，此后这些资源文件发生变化时都会触发重新编译。</p><p>为什么 <code>less-loader</code> 需要这么处理？因为 <code>less</code> 工具本身已经会递归所有 Less 文件树，一次性将所有 <code>.less</code> 文件打包在一起，例如在 <code>a.less</code> 中 <code>@import (less) &#39;./b.less&#39;</code> ，a、b 文件会被 <code>less</code> 打包在一起。这里面的文件依赖对 Webpack 来说是无感知的，如果不用 <code>addDependency</code> 显式声明依赖，后续 <code>b.less</code> 文件的变化不会触发 <code>a.less</code> 重新构建，不符合预期啊。</p><p>所以，<code>addDependency</code> 接口适用于那些 Webpack 无法理解隐式文件依赖的场景。除上例 <code>less-loader</code>，<code>babel-loader</code> 也是一个特别经典的案例。在 <code>babel-loader</code> 内部会添加对 Babel 配置文件如 <code>.babelrc</code> 的依赖，当 <code>.babelrc</code> 内容发生变化时，也会触发 <code>babel-loader</code> 重新运行。</p><p>此外，Loader Context 还提供了下面几个与依赖处理相关的接口：</p><ul><li><code>addContextDependency(directory: String)</code>：添加文件目录依赖，目录下内容变更时会触发文件变更；</li><li><code>addMissingDependency(file: String)</code>：用于添加文件依赖，效果与 <code>addDependency</code> 类似；</li><li><code>clearDependencies()</code>：清除所有文件依赖。</li></ul><h2 id="处理二进制资源" tabindex="-1"><a class="header-anchor" href="#处理二进制资源" aria-hidden="true">#</a> 处理二进制资源</h2><p>有时候我们期望以二进制方式读入资源文件，例如在 <code>file-loader</code>、<code>image-loader</code> 等场景中，此时只需要添加 <code>export const raw = true</code> 语句即可，如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">loader</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> raw <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后，<code>loader</code> 函数中获取到的第一个参数 <code>source</code> 将会是 Buffer 对象形式的二进制内容。</p><h2 id="在-loader-中正确处理日志" tabindex="-1"><a class="header-anchor" href="#在-loader-中正确处理日志" aria-hidden="true">#</a> 在 Loader 中正确处理日志</h2>`,21),K={href:"https://webpack.js.org/configuration/other-options/#infrastructurelogging",target:"_blank",rel:"noopener noreferrer"},X={href:"https://github.com/log4js-node/log4js-node",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://github.com/winstonjs/winston",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://webpack.js.org/configuration/other-options/#infrastructurelogging",target:"_blank",rel:"noopener noreferrer"},nn=s("blockquote",null,[s("p",null,[n("提示：作为对比，假如我们使用 "),s("code",null,"console.log"),n(" 等硬编码方式输出日志信息，用户无法过滤这部分输出，可能会造成较大打扰，体感很不好。")])],-1),sn={href:"https://v4.webpack.js.org/api/loaders/#logging",target:"_blank",rel:"noopener noreferrer"},an=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">loader</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> logger <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">&quot;xxx-loader&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 使用适当的 logging 接口</span>
  <span class="token comment">// 支持：verbose/log/info/warn/error</span>
  logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;information&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> source<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),en=s("code",null,"getLogger",-1),tn=s("code",null,"logger",-1),pn=s("code",null,"verbose/log/info/warn/error",-1),on={href:"https://webpack.js.org/configuration/other-options/#level",target:"_blank",rel:"noopener noreferrer"},cn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">infrastructureLogging</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">level</span><span class="token operator">:</span> <span class="token string">&#39;warn&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="在-loader-中正确上报异常" tabindex="-1"><a class="header-anchor" href="#在-loader-中正确上报异常" aria-hidden="true">#</a> 在 Loader 中正确上报异常</h2><p>Webpack Loader 中有多种上报异常信息的方式：</p><ul><li>使用 <code>logger.error</code>，仅输出错误日志，不会打断编译流程，效果：</li></ul><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/41c7568e25394b258824516207392fc7~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><ul><li>使用 <code>this.emitError</code> 接口，同样不会打断编译流程，效果：</li></ul><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d8e5b25744af47f79734155a1094ca3e~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>与 <code>logger.error</code> 相比，<code>emitError</code> 不受 <code>infragstrustureLogging</code> 规则控制，必然会强干扰到最终用户；其次，<code>emitError</code> 会抛出异常的 Loader 文件、代码行、对应模块，更容易帮助定位问题。</p><ul><li>使用 <code>this.callback</code> 接口提交错误信息，但注意导致当前模块编译失败，效果与直接使用 <code>throw</code> 相同，用法：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">loader</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;发生了一些异常&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> source<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后，Webpack 会将 <code>callback</code> 传递过来的错误信息当做模块内容，打包进产物文件：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ef581459bbfd47bc93c9ef73c02f7424~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>总的来说，这些方式各自有适用场景，我个人会按如下规则择优选用：</p><ul><li>一般应尽量使用 <code>logger.error</code>，减少对用户的打扰；</li><li>对于需要明确警示用户的错误，优先使用 <code>this.emitError</code>；</li><li>对于已经严重到不能继续往下编译的错误，使用 <code>callback</code> 。</li></ul><h2 id="为-loader-编写单元测试" tabindex="-1"><a class="header-anchor" href="#为-loader-编写单元测试" aria-hidden="true">#</a> 为 Loader 编写单元测试</h2><p>在 Loader 中编写单元测试收益非常高，一方面对开发者来说，不用重复手动测试各种特性；一方面对于最终用户来说，带有一定测试覆盖率的项目通常意味着更高、更稳定的质量。常规的 Webpack Loader 单元测试流程大致如下：</p><ol><li>创建在 Webpack 实例，并运行 Loader；</li><li>获取 Loader 执行结果，比对、分析判断是否符合预期；</li><li>判断执行过程中是否出错。</li></ol><p>下面我们逐一展开讲解。</p><blockquote><p>如何运行 Loader？</p></blockquote><p>有两种办法，一是在 node 环境下运行调用 Webpack 接口，用代码而非命令行执行编译，很多框架都会采用这种方式，例如 vue-loader、stylus-loader、babel-loader 等，优点是运行效果最接近最终用户，缺点是运行效率相对较低（可以忽略）。</p>`,20),ln={href:"https://github.com/posthtml/posthtml-loader",target:"_blank",rel:"noopener noreferrer"},rn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// posthtml-loader/test/helpers/compiler.js 文件</span>
module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">fixture<span class="token punctuation">,</span> config<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  config <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span>

  options <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span>

  <span class="token comment">// 创建 Webpack 实例</span>
  <span class="token keyword">const</span> compiler <span class="token operator">=</span> <span class="token function">webpack</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>

  <span class="token comment">// 以 MemoryFS 方式输出构建结果，避免写磁盘</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>options<span class="token punctuation">.</span>output<span class="token punctuation">)</span> compiler<span class="token punctuation">.</span>outputFileSystem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MemoryFS</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token comment">// 执行，并以 promise 方式返回结果</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> compiler<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> stats</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token comment">// 异步返回执行结果</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span>stats<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>提示：上面的示例中用到 <code>compiler.outputFileSystem = new MemoryFS()</code> 语句将 Webpack 设定成输出到内存，能避免写盘操作，提升编译速度。</p></blockquote>`,2),un={href:"https://github.com/emaphp/underscore-template-loader",target:"_blank",rel:"noopener noreferrer"},dn=t(`<blockquote><p>如何校验 Loader 执行结果？</p></blockquote><p>上例运行结束之后会以 <code>resolve(stats)</code> 方式返回执行结果，<code>stats</code> 对象中几乎包含了编译过程所有信息，包括：耗时、产物、模块、chunks、errors、warnings 等等，我们可以从 <code>stats</code> 对象中读取编译最终输出的产物，例如 <code>style-loader</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// style-loader/src/test/helpers/readAsset.js 文件</span>
<span class="token keyword">function</span> <span class="token function">readAsset</span><span class="token punctuation">(</span><span class="token parameter">compiler<span class="token punctuation">,</span> stats<span class="token punctuation">,</span> assets</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> usedFs <span class="token operator">=</span> compiler<span class="token punctuation">.</span>outputFileSystem
  <span class="token keyword">const</span> outputPath <span class="token operator">=</span> stats<span class="token punctuation">.</span>compilation<span class="token punctuation">.</span>outputOptions<span class="token punctuation">.</span>path
  <span class="token keyword">const</span> queryStringIdx <span class="token operator">=</span> targetFile<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;?&#39;</span><span class="token punctuation">)</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>queryStringIdx <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 解析出输出文件路径</span>
    asset <span class="token operator">=</span> asset<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> queryStringIdx<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 读文件内容</span>
  <span class="token keyword">return</span> usedFs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>outputPath<span class="token punctuation">,</span> targetFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解释一下，这段代码首先计算 asset 输出的文件路径，之后调用 outputFileSystem 的 <code>readFile</code> 方法读取文件内容。</p><p>接下来，有两种分析内容的方法：</p><ul><li>调用 Jest 的 <code>expect(xxx).toMatchSnapshot()</code> 断言，判断当前运行结果是否与之前的运行结果一致，从而确保多次修改的结果一致性，很多框架都大量用了这种方法；</li><li>解读资源内容，判断是否符合预期，例如 less-loader 的单元测试中会对同一份代码跑两次 less 编译，一次由 Webpack 执行，一次直接调用 <code>less</code> 库，之后分析两次运行结果是否相同。</li></ul><p>对此有兴趣的同学，强烈建议看看 <code>less-loader</code> 的 test 目录。</p><blockquote><p>如何判断执行过程是否触发异常？</p></blockquote><p>最后，还需要判断编译过程是否出现异常，同样可以从 <code>stats</code> 对象解析：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function-variable function">getErrors</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">stats</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> errors <span class="token operator">=</span> stats<span class="token punctuation">.</span>compilation<span class="token punctuation">.</span>errors<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>
    <span class="token parameter">e</span> <span class="token operator">=&gt;</span> e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大多数情况下都希望编译没有错误，此时只要判断结果数组是否为空即可。某些情况下可能需要判断是否抛出特定异常，此时可以 <code>expect(xxx).toMatchSnapshot()</code> 断言，用快照对比更新前后的结果。</p><h2 id="链式调用模型详解" tabindex="-1"><a class="header-anchor" href="#链式调用模型详解" aria-hidden="true">#</a> 链式调用模型详解</h2><p>举个例子，为了读取 <code>less</code> 文件，我们通常需要同时配置多个加载器：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.less$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;style-loader&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;css-loader&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;less-loader&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例针对 <code>.less</code> 后缀的文件设定了 less、css、style 三个 Loader，Webpack 启动后会以一种所谓“链式调用”的方式按 <code>use</code> 数组顺序从后到前调用 Loader：</p><ul><li>首先调用 <code>less-loader</code> 将 Less 代码转译为 CSS 代码；</li><li>将 <code>less-loader</code> 结果传入 <code>css-loader</code>，进一步将 CSS 内容包装成类似 <code>module.exports = &quot;\${css}&quot;</code> 的 JavaScript 代码片段；</li><li>将 <code>css-loader</code> 结果传入 <code>style-loader</code>，在运行时调用 injectStyle 等函数，将内容注入到页面的 <code>&lt;style&gt;</code> 标签。</li></ul><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b30799fe744941f1b66aeb43f5df49c4~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>三个 Loader 分别完成内容转化工作的一部分，形成从右到左的执行链条。链式调用这种设计有两个好处，一是保持单个 Loader 的单一职责，一定程度上降低代码的复杂度；二是细粒度的功能能够被组装成复杂而灵活的处理链条，提升单个 Loader 的可复用性。</p><p>不过，这只是链式调用的一部分，这里面有两个问题：</p><ul><li>Loader 链条一旦启动之后，需要所有 Loader 都执行完毕才会结束，没有中断的机会 —— 除非显式抛出异常；</li><li>某些场景下并不需要关心资源的具体内容，但 Loader 需要在 source 内容被读取出来之后才会执行。</li></ul><p>为了解决这两个问题，Webpack 在 Loader 基础上叠加了 <code>pitch</code> 的概念。</p><blockquote><p>Q: 什么是 <code>pitch</code>？</p></blockquote><p>Webpack 允许在 Loader 函数上挂载名为 <code>pitch</code> 的函数，运行时 pitch 会比 Loader 本身更早执行，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">loader</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;后执行&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> source<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

loader<span class="token punctuation">.</span><span class="token function-variable function">pitch</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">requestString</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;先执行&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> loader
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Pitch 函数的完整签名：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">pitch</span><span class="token punctuation">(</span>
    <span class="token parameter"><span class="token literal-property property">remainingRequest</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">previousRequest</span><span class="token operator">:</span> string<span class="token punctuation">,</span> data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>包含三个参数：</p><ul><li><code>remainingRequest</code> : 当前 loader 之后的资源请求字符串；</li><li><code>previousRequest</code> : 在执行当前 loader 之前经历过的 loader 列表；</li><li><code>data</code> : 与 Loader 函数的 <code>data</code> 相同，用于传递需要在 Loader 传播的信息。</li></ul><p>这些参数不复杂，但与 requestString 紧密相关，我们看个例子加深了解：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.less$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token string">&quot;style-loader&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;css-loader&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;less-loader&quot;</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>css-loader.pitch</code> 中拿到的参数依次为：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// css-loader 之后的 loader 列表及资源路径</span>
remainingRequest <span class="token operator">=</span> less<span class="token operator">-</span>loader<span class="token operator">!</span><span class="token punctuation">.</span><span class="token operator">/</span>xxx<span class="token punctuation">.</span>less
<span class="token comment">// css-loader 之前的 loader 列表</span>
previousRequest <span class="token operator">=</span> style<span class="token operator">-</span>loader
<span class="token comment">// 默认值</span>
data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>pitch</code> 函数调度逻辑</p></blockquote><p>Pitch 翻译成中文是_抛、球场、力度、事物最高点_等，它背后折射的是一整套 Loader 被执行的生命周期概念。</p><p>实现上，Loader 链条执行过程分三个阶段：pitch、解析资源、执行，设计上与 DOM 的事件模型非常相似，pitch 对应到捕获阶段；执行对应到冒泡阶段；而两个阶段之间 Webpack 会执行资源内容的读取、解析操作，对应 DOM 事件模型的 AT_TARGET 阶段：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/55d6c8006a4243d687f044aab0bd1b86~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p><code>pitch</code> 阶段按配置顺序从左到右逐个执行 <code>loader.pitch</code> 函数(如果有的话)，开发者可以在 <code>pitch</code> 返回任意值中断后续的链路的执行：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/06f0126b303644449fce1cb8970001a6~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>那么为什么要设计 pitch 这一特性呢？</p><p>在分析了 style-loader、vue-loader、to-string-loader 等开源项目之后，我个人总结出两个字：<strong>阻断</strong>！</p><p>回顾一下前面提到过的 less 加载链条：</p><ul><li><code>less-loader</code> ：将 less 规格的内容转换为标准 css；</li><li><code>css-loader</code> ：将 css 内容包裹为 JavaScript 模块；</li><li><code>style-loader</code> ：将 JavaScript 模块的导出结果以 <code>link</code> 、<code>style</code> 标签等方式挂载到 html 中，让 css 代码能够正确运行在浏览器上。</li></ul><p>实际上， <code>style-loader</code> 只是负责让 CSS 在浏览器环境下跑起来，并不需要关心具体内容，很适合用 pitch 来处理，核心代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ...</span>
<span class="token comment">// Loader 本身不作任何处理</span>
<span class="token keyword">const</span> <span class="token function-variable function">loaderApi</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// pitch 中根据参数拼接模块代码</span>
loaderApi<span class="token punctuation">.</span><span class="token function-variable function">pitch</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">loader</span><span class="token punctuation">(</span><span class="token parameter">remainingRequest</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>

  <span class="token keyword">switch</span> <span class="token punctuation">(</span>injectType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string">&#39;linkTag&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>
        esModule
          <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">...</span><span class="token template-punctuation string">\`</span></span>
          <span class="token comment">// 引入 runtime 模块</span>
          <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">var api = require(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>loaderUtils<span class="token punctuation">.</span><span class="token function">stringifyRequest</span><span class="token punctuation">(</span>
              <span class="token keyword">this</span><span class="token punctuation">,</span>
              <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">!</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;runtime/injectStylesIntoLinkTag.js&#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
            <span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">);
            // 引入 css 模块
            var content = require(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>loaderUtils<span class="token punctuation">.</span><span class="token function">stringifyRequest</span><span class="token punctuation">(</span>
              <span class="token keyword">this</span><span class="token punctuation">,</span>
              <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">!!</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>remainingRequest<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
            <span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">);

            content = content.__esModule ? content.default : content;</span><span class="token template-punctuation string">\`</span></span>
      <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> // ...</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">case</span> <span class="token string">&#39;lazyStyleTag&#39;</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token string">&#39;lazySingletonStyleTag&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">//...</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">case</span> <span class="token string">&#39;styleTag&#39;</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token string">&#39;singletonStyleTag&#39;</span><span class="token operator">:</span>
    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> loaderApi<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关键点：</p><ul><li><code>loaderApi</code> 为空函数，不做任何处理；</li><li><code>loaderApi.pitch</code> 中拼接结果，导出的代码包含： <ul><li>引入运行时模块 <code>runtime/injectStylesIntoLinkTag.js</code>；</li><li>复用 <code>remainingRequest</code> 参数，重新引入 css 文件。</li></ul></li></ul><p>运行后，关键结果大致如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> api <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;xxx/style-loader/lib/runtime/injectStylesIntoLinkTag.js&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> content <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;!!css-loader!less-loader!./xxx.less&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意了，到这里 style-loader 的 pitch 函数返回这一段内容，后续的 Loader 就不会继续执行，当前调用链条中断了：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a29c25f292e14dd690552d53dae05f9e~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>之后，Webpack 继续解析、构建 style-loader 返回的结果，遇到 inline loader 语句：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> content <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;!!css-loader!less-loader!./xxx.less&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>所以从 Webpack 的角度看，对同一个文件实际调用了两次 loader 链，第一次在 style-loader 的 pitch 中断，第二次根据 inline loader 的内容跳过了 style-loader。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>`,54),kn={href:"https://webpack.js.org/api/loaders/#the-loader-context",target:"_blank",rel:"noopener noreferrer"},vn=t('<p>下一篇我还会继续沿着 “如何开发 Loader” 这一主题，介绍如何使用 <code>loader-utils</code>、<code>schema-utils</code> 等辅助工具，以及作为实践案例，深度剖析 <code>vue-loader</code> 的实现逻辑。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题" aria-hidden="true">#</a> 思考题</h2><p>读完文章后，建议同学们同步看看一些知名 Loader 的源码，包括：<code>file-loader</code>、<code>url-loader</code>、<code>style-loader</code>、<code>less-loader</code>、<code>babel-loader</code> 等，学习它们的开发模式，巩固对上述各项接口的认识。</p>',3);function mn(bn,gn){const a=o("ExternalLinkIcon");return c(),l("div",null,[r,s("p",null,[n("在 Webpack 进入构建阶段后，首先会通过 IO 接口读取文件内容，之后调用 "),s("a",u,[n("LoaderRunner"),e(a)]),n(" 并将文件内容以 "),d,n(" 参数形式传递到 Loader 数组，"),k,n(" 数据在 Loader 数组内可能会经过若干次形态转换，最终以标准 JavaScript 代码提交给 Webpack 主流程，以此实现内容翻译功能。")]),v,s("ul",null,[m,s("li",null,[b,n(": 可选参数，代码的 "),s("a",g,[n("sourcemap"),e(a)]),n(" 结构；")]),s("li",null,[h,n(": 可选参数，其它需要在 Loader 链中传递的信息，比如 "),s("a",f,[n("posthtml/posthtml-loader"),e(a)]),n(" 就会通过这个参数传递额外的 AST 对象。")])]),s("p",null,[n("其中 "),y,n(" 是最重要的参数，大多数 Loader 要做的事情就是将 "),w,n(" 转译为另一种形式的 "),_,n(" ，比如 "),s("a",x,[n("webpack-contrib/raw-loader"),e(a)]),n(" 的核心源码：")]),j,s("blockquote",null,[s("p",null,[n("提示：示例已上传到小册 "),s("a",L,[n("仓库"),e(a)]),n("。")])]),q,s("blockquote",null,[s("p",null,[n("提示：也可以在 Loader 代码中插入 "),S,n(" 语句，配合 "),s("a",W,[n("ndb"),e(a)]),n(" 工具启动调试模式。")])]),F,s("ol",null,[M,s("li",null,[n("使用 "),s("a",C,[n("schema-utils"),e(a)]),n(" 的 "),T,n(" 接口校验 Loader 配置是否符合预期，配置 Schema 定义在 "),O,n(" 文件；")]),$]),D,s("blockquote",null,[s("p",null,[n("提示：示例代码已上传到小册 "),s("a",I,[n("仓库"),e(a)]),n("。")])]),J,s("p",null,[n("除了作为内容转换器外，Loader 运行过程还可以通过一些"),s("a",P,[n("上下文接口"),e(a)]),n("，"),E,n("地影响 Webpack 编译过程，从而产生内容转换之外的副作用。上下文接口将在运行 Loader 时以 "),R,n(" 方式注入到 Loader 函数：")]),A,s("p",null,[n("Webpack 官网对 "),s("a",B,[n("Loader Context"),e(a)]),n(" 已经有比较详细的说明，这里简单介绍几个比较常用的接口：")]),N,s("p",null,[n("简单的 Loader 可直接 "),z,n(" 语句返回处理结果，复杂场景还可以通过 "),U,n(" 接口返回更多信息，供下游 Loader 或者 Webpack 本身使用，例如在 "),s("a",V,[n("webpack-contrib/eslint-loader"),e(a)]),n(" 中：")]),Q,s("p",null,[n("涉及到异步或 CPU 密集操作时，Loader 中还可以以异步形式返回处理结果，例如 "),s("a",G,[n("webpack-contrib/less-loader"),e(a)]),n(" 的核心逻辑：")]),H,s("p",null,[n("Webpack 内置了一套 "),s("a",K,[n("infrastructureLogging"),e(a)]),n(" 接口，专门用于处理 Webpack 内部及各种第三方组件的日志需求，与 "),s("a",X,[n("log4js"),e(a)]),n("、"),s("a",Y,[n("winston"),e(a)]),n(" 等日志工具类似，"),s("a",Z,[n("infrastructureLogging"),e(a)]),n(" 也提供了根据日志分级筛选展示功能，从而将日志的写逻辑与输出逻辑解耦。")]),nn,s("p",null,[n("因此，在编写 Loader 时也应该尽可能复用 Webpack 内置的这套 Logging 规则，方法很简单，只需使用 Loader Context 的 "),s("a",sn,[n("getLogger"),e(a)]),n(" 接口，如：")]),an,s("p",null,[en,n(" 返回的 "),tn,n(" 对象支持 "),pn,n(" 五种级别的日志，最终用户可以通过 "),s("a",on,[n("infrastructureLogging.level"),e(a)]),n(" 配置项筛选不同日志内容，例如：")]),cn,s("p",null,[n("以 "),s("a",ln,[n("posthtml/posthtml-loader"),e(a)]),n(" 为例，它会在启动测试之前创建并运行 Webpack 实例：")]),rn,s("p",null,[n("另外一种方法是编写一系列 mock 方法，搭建起一个模拟的 Webpack 运行环境，例如 "),s("a",un,[n("emaphp/underscore-template-loader"),e(a)]),n(" ，优点是运行速度更快，缺点是开发工作量大通用性低，了解即可。")]),dn,s("p",null,[n("Loader 主要负责将资源内容转换为 Webpack 能够理解的 JavaScript 代码形式，开发时我们可以借助 "),s("a",kn,[n("Loader Context"),e(a)]),n(" 提供的丰富接口实现各种各样的诉求。此外，也需要结合 Loader 的链式调用模型，尽可能设计出复用性更强，更简洁的资源加载器。")]),vn])}const fn=p(i,[["render",mn],["__file","di19zhang—Loaderkaifajichu：congkaiyuanxiangmuxuedaodeLoaderkaifajiqiao.html.vue"]]);export{fn as default};
