import{_ as p,r as o,o as i,c,b as s,d as n,e as a,a as t}from"./app-48690364.js";const l={},r=t("<p>在上一节的内容中，我们详细讲解了如何在 Vite 中实现 CSS 工程化方案，迈出了搭建脚手架项目的第一步。本节，让我们把目光投向项目中另外一个非常重要的部分——<strong>代码规范</strong>。</p><blockquote><p>代码不仅是让机器看的，它也是给人看的。</p></blockquote><p>在真实的工程项目中，尤其是多人协作的场景下，代码规范就变得非常重要了，它可以用来统一团队代码风格，避免不同风格的代码混杂到一起难以阅读，有效提高<strong>代码质量</strong>，甚至可以将一些<strong>语法错误</strong>在开发阶段提前规避掉。但仅有规范本身不够，我们需要<strong>自动化的工具</strong>(即<code>Lint 工具</code>)来保证规范的落地，把代码规范检查(包括<code>自动修复</code>)这件事情交给机器完成，开发者只需要专注应用逻辑本身。</p><p>本节，我们将一起来完成 Lint 工具链在项目中的落地，实现自动化代码规范检查及修复的能力。学完本节内容后，你不仅能熟悉诸如<code>ESLint</code>、<code>Prettier</code>、<code>Stylelint</code>和<code>Commitlint</code> 等诸多主流 Lint 工具的概念和使用，还能配合<code>husky</code>、<code>lint-staged</code>、<code>VSCode 插件</code>和<code>Vite 生态</code>在项目中集成完整的 Lint 工具链，搭建起完整的前端开发和代码提交工作流，这部分内容虽然和 Vite 没有直接的联系，但也是 Vite 项目搭建中非常重要的一环，是前端工程化的必备知识。</p>",4),d={href:"https://github.com/sanyuan0704/juejin-book-vite/tree/main/4~7-vite-project-framework",target:"_blank",rel:"noopener noreferrer"},u=t('<h2 id="js-ts-规范工具-eslint" tabindex="-1"><a class="header-anchor" href="#js-ts-规范工具-eslint" aria-hidden="true">#</a> JS/TS 规范工具: ESLint</h2><h3 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h3><blockquote><p>ESLint 是在 ECMAScript/JavaScript 代码中识别和报告模式匹配的工具，它的目标是保证代码的一致性和避免错误。</p></blockquote><p>Eslint 是国外的前端大牛<code>Nicholas C. Zakas</code>在 2013 年发起的一个开源项目，有一本书被誉为前端界的&quot;圣经&quot;，叫《JavaScript 高级程序设计》(即红宝书)，他正是这本书的作者。</p><p><code>Nicholas</code> 当初做这个开源项目，就是为了打造一款插件化的 JavaScript 代码静态检查工具，通过解析代码的 AST 来分析代码格式，检查代码的风格和质量问题。现在，Eslint 已经成为一个非常成功的开源项目了，基本上属于前端项目中 Lint 工具的标配。</p>',5),m=s("code",null,"rules",-1),v={href:"https://github.com/airbnb/javascript",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/standard/standard/blob/master/docs/README-zhcn.md",target:"_blank",rel:"noopener noreferrer"},b={href:"https://google.github.io/styleguide/jsguide.html",target:"_blank",rel:"noopener noreferrer"},g=t(`<h3 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化" aria-hidden="true">#</a> 初始化</h3><p>接下来我们来利用 ESLint 官方的 cli 在现有的脚手架项目中进行初始化操作，首先我们需要安装 ESLint:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> i eslint <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接着执行 ESLint 的初始化命令，并进行如下的命令行交互:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>npx eslint <span class="token operator">--</span>init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c71cb725150d4e5c9d46539916047ef1~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>接着 ESLint 会帮我们自动生成<code>.eslintrc.js</code>配置文件。需要注意的是，在上述初始化流程中我们并没有用 npm 安装依赖，需要进行手动安装:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> i eslint-plugin-react@latest @typescript-eslint/eslint-plugin@latest @typescript-eslint/parser@latest <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="核心配置解读" tabindex="-1"><a class="header-anchor" href="#核心配置解读" aria-hidden="true">#</a> 核心配置解读</h3><p>大家初次接触配置文件可能会有点不太理解，接下来我来为你介绍一下几个核心的配置项，你可以对照目前生成的<code>.eslintrc.js</code>一起学习。</p><h4 id="_1-parser-解析器" tabindex="-1"><a class="header-anchor" href="#_1-parser-解析器" aria-hidden="true">#</a> 1. parser - 解析器</h4>`,11),h={href:"https://github.com/eslint/espree",target:"_blank",rel:"noopener noreferrer"},y=s("code",null,"Acron",-1),q=s("code",null,"Acron",-1),f={href:"https://github.com/acornjs/acorn/tree/master/acorn",target:"_blank",rel:"noopener noreferrer"},x=s("code",null,"@typescript-eslint/parser",-1),S=s("code",null,"TS",-1),j=s("code",null,"Espree",-1),_={href:"https://github.com/estree/estree",target:"_blank",rel:"noopener noreferrer"},E=s("strong",null,"Estree 格式",-1),L=s("code",null,"Espree",-1),V=s("h4",{id:"_2-parseroptions-解析器选项",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_2-parseroptions-解析器选项","aria-hidden":"true"},"#"),n(" 2. parserOptions - 解析器选项")],-1),w=s("p",null,"这个配置可以对上述的解析器进行能力定制，默认情况下 ESLint 支持 ES5 语法，你可以配置这个选项，具体内容如下:",-1),T=s("code",null,"Acron",-1),P={href:"https://github.com/acornjs/acorn/tree/master/acorn",target:"_blank",rel:"noopener noreferrer"},C=s("code",null,"ES + 数字",-1),D=s("code",null,"ES + 年份",-1),A=s("code",null,"latest",-1),H=s("li",null,[n("sourceType: 默认为"),s("code",null,"script"),n("，如果使用 ES Module 则应设置为"),s("code",null,"module")],-1),G=s("li",null,[n("ecmaFeatures: 为一个对象，表示想使用的额外语言特性，如开启 "),s("code",null,"jsx"),n("。")],-1),N=t(`<h4 id="_3-rules-具体代码规则" tabindex="-1"><a class="header-anchor" href="#_3-rules-具体代码规则" aria-hidden="true">#</a> 3. rules - 具体代码规则</h4><p><code>rules</code> 配置即代表在 ESLint 中手动调整哪些代码规则，比如<code>禁止在 if 语句中使用赋值语句</code>这条规则可以像如下的方式配置:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// .eslintrc.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 其它配置省略</span>
  rules<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// key 为规则名，value 配置内容</span>
    <span class="token string-property property">&quot;no-cond-assign&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;always&quot;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 rules 对象中，<code>key</code> 一般为<code>规则名</code>，<code>value</code> 为具体的配置内容，在上述的例子中我们设置为一个数组，数组第一项为规则的 <code>ID</code>，第二项为<code>规则的配置</code>。</p><p>这里重点说一说规则的 ID，它的语法对所有规则都适用，你可以设置以下的值:</p><ul><li><code>off</code> 或 <code>0</code>: 表示关闭规则。</li><li><code>warn</code> 或 <code>1</code>: 表示开启规则，不过违背规则后只抛出 warning，而不会导致程序退出。</li><li><code>error</code> 或 <code>2</code>: 表示开启规则，不过违背规则后抛出 error，程序会退出。</li></ul>`,6),J={href:"https://cn.eslint.org/docs/rules/",target:"_blank",rel:"noopener noreferrer"},z=t(`<p>当然，你也能直接将 <code>rules</code> 对象的 <code>value</code> 配置成 ID，如: <code>&quot;no-cond-assign&quot;: &quot;error&quot;</code>。</p><h4 id="_4-plugins" tabindex="-1"><a class="header-anchor" href="#_4-plugins" aria-hidden="true">#</a> 4. plugins</h4><p>上面提到过 ESLint 的 parser 基于<code>Acorn</code>实现，不能直接解析 TypeScript，需要我们指定 parser 选项为<code>@typescript-eslint/parser</code>才能兼容 TS 的解析。同理，ESLint 本身也没有内置 TypeScript 的代码规则，这个时候 ESLint 的插件系统就派上用场了。我们需要通过添加 ESLint 插件来增加一些特定的规则，比如添加<code>@typescript-eslint/eslint-plugin</code> 来拓展一些关于 TS 代码的规则，如下代码所示:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// .eslintrc.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 添加 TS 规则，可省略\`eslint-plugin\`</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;@typescript-eslint&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>值得注意的是，添加插件后只是拓展了 ESLint 本身的规则集，但 ESLint 默认并<strong>没有开启</strong>这些规则的校验！如果要开启或者调整这些规则，你需要在 rules 中进行配置，如:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// .eslintrc.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 开启一些 TS 规则</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&#39;@typescript-eslint/ban-ts-comment&#39;</span><span class="token operator">:</span> <span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;@typescript-eslint/no-explicit-any&#39;</span><span class="token operator">:</span> <span class="token string">&#39;warn&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-extends-继承配置" tabindex="-1"><a class="header-anchor" href="#_5-extends-继承配置" aria-hidden="true">#</a> 5. extends - 继承配置</h4><p>extends 相当于<code>继承</code>另外一份 ESLint 配置，可以配置为一个字符串，也可以配置成一个字符串数组。主要分如下 3 种情况:</p><ol><li>从 ESLint 本身继承；</li><li>从类似 <code>eslint-config-xxx</code> 的 npm 包继承；</li><li>从 ESLint 插件继承。</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// .eslintrc.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
   <span class="token string-property property">&quot;extends&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
     <span class="token comment">// 第1种情况 </span>
     <span class="token string">&quot;eslint:recommended&quot;</span><span class="token punctuation">,</span>
     <span class="token comment">// 第2种情况，一般配置的时候可以省略 \`eslint-config\`</span>
     <span class="token string">&quot;standard&quot;</span>
     <span class="token comment">// 第3种情况，可以省略包名中的 \`eslint-plugin\`</span>
     <span class="token comment">// 格式一般为: \`plugin:\${pluginName}/\${configName}\`</span>
     <span class="token string">&quot;plugin:react/recommended&quot;</span>
     <span class="token string">&quot;plugin:@typescript-eslint/recommended&quot;</span><span class="token punctuation">,</span>
   <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了 extends 的配置，对于之前所说的 ESLint 插件中的繁多配置，我们就<strong>不需要手动一一开启</strong>了，通过 extends 字段即可自动开启插件中的推荐规则:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;plugin:@typescript-eslint/recommended&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_6-env-和-globals" tabindex="-1"><a class="header-anchor" href="#_6-env-和-globals" aria-hidden="true">#</a> 6. env 和 globals</h4><p>这两个配置分别表示<code>运行环境</code>和<code>全局变量</code>，在指定的运行环境中会预设一些全局变量，比如:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// .eslint.js</span>
module<span class="token punctuation">.</span>export <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&quot;env&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;browser&quot;</span><span class="token operator">:</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;node&quot;</span><span class="token operator">:</span> <span class="token string">&quot;true&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>指定上述的 <code>env</code> 配置后便会启用浏览器和 Node.js 环境，这两个环境中的一些全局变量(如 <code>window</code>、<code>global</code> 等)会同时启用。</p><p>有些全局变量是业务代码引入的第三方库所声明，这里就需要在<code>globals</code>配置中声明全局变量了。每个全局变量的配置值有 3 种情况:</p><ol><li><code>&quot;writable&quot;</code>或者 <code>true</code>，表示变量可重写；</li><li><code>&quot;readonly&quot;</code>或者<code>false</code>，表示变量不可重写；</li><li><code>&quot;off&quot;</code>，表示禁用该全局变量。</li></ol><p>那<code>jquery</code>举例，我们可以在配置文件中声明如下:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// .eslintrc.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&quot;globals&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 不可重写</span>
    <span class="token string-property property">&quot;$&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> 
    <span class="token string-property property">&quot;jQuery&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span> 
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相信有了上述核心配置部分的讲解，你再回头看看初始化生成的 ESLint 配置文件，你也能很好地理解各个配置项的含义了。</p><h3 id="与-prettier-强强联合" tabindex="-1"><a class="header-anchor" href="#与-prettier-强强联合" aria-hidden="true">#</a> 与 Prettier 强强联合</h3><p>虽然 ESLint 本身具备自动格式化代码的功能(<code>eslint --fix</code>)，但术业有专攻，ESLint 的主要优势在于<code>代码的风格检查并给出提示</code>，而在代码格式化这一块 Prettier 做的更加专业，因此我们经常将 ESLint 结合 Prettier 一起使用。</p><p>首先我们来安装一下 Prettier:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>pnpm i prettier <span class="token operator">-</span><span class="token constant">D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在项目根目录新建<code>.prettierrc.js</code>配置文件，填写如下的配置内容:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// .prettierrc.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">printWidth</span><span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token comment">//一行的字符数，如果超过会进行换行，默认为80</span>
  <span class="token literal-property property">tabWidth</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">// 一个 tab 代表几个空格数，默认为 2 个</span>
  <span class="token literal-property property">useTabs</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//是否使用 tab 进行缩进，默认为false，表示用空格进行缩减</span>
  <span class="token literal-property property">singleQuote</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 字符串是否使用单引号，默认为 false，使用双引号</span>
  <span class="token literal-property property">semi</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 行尾是否使用分号，默认为true</span>
  <span class="token literal-property property">trailingComma</span><span class="token operator">:</span> <span class="token string">&quot;none&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 是否使用尾逗号</span>
  <span class="token literal-property property">bracketSpacing</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 对象大括号直接是否有空格，默认为 true，效果：{ a: 1 }</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们将<code>Prettier</code>集成到现有的<code>ESLint</code>工具中，首先安装两个工具包:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>pnpm i eslint<span class="token operator">-</span>config<span class="token operator">-</span>prettier eslint<span class="token operator">-</span>plugin<span class="token operator">-</span>prettier <span class="token operator">-</span><span class="token constant">D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中<code>eslint-config-prettier</code>用来覆盖 ESLint 本身的规则配置，而<code>eslint-plugin-prettier</code>则是用于让 Prettier 来接管<code>eslint --fix</code>即修复代码的能力。</p><p>在 <code>.eslintrc.js</code> 配置文件中接入 prettier 的相关工具链，最终的配置代码如下所示，你可以直接粘贴过去:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// .eslintrc.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">env</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">browser</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">es2021</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;eslint:recommended&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;plugin:react/recommended&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;plugin:@typescript-eslint/recommended&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// 1. 接入 prettier 的规则</span>
    <span class="token string">&quot;prettier&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;plugin:prettier/recommended&quot;</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token string">&quot;@typescript-eslint/parser&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">parserOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">ecmaFeatures</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">jsx</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">ecmaVersion</span><span class="token operator">:</span> <span class="token string">&quot;latest&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">sourceType</span><span class="token operator">:</span> <span class="token string">&quot;module&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 2. 加入 prettier 的 eslint 插件</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;react&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;@typescript-eslint&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;prettier&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 3. 注意要加上这一句，开启 prettier 自动修复的功能</span>
    <span class="token string-property property">&quot;prettier/prettier&quot;</span><span class="token operator">:</span> <span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">quotes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;single&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">semi</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;always&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;react/react-in-jsx-scope&quot;</span><span class="token operator">:</span> <span class="token string">&quot;off&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>OK，现在我们回到项目中来见证一下<code>ESLint + Prettier</code>强强联合的威力，在 <code>package.json</code> 中定义一个脚本:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 省略已有 script</span>
    <span class="token property">&quot;lint:script&quot;</span><span class="token operator">:</span> <span class="token string">&quot;eslint --ext .js,.jsx,.ts,.tsx --fix --quiet ./src&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来在命令行终端执行:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>pnpm run lint<span class="token operator">:</span>script
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样我们就完成了 <code>ESLint 的规则检查</code>以及 <code>Prettier 的自动修复</code>。不过每次执行这个命令未免会有些繁琐，我们可以在<code>VSCode</code>中安装<code>ESLint</code>和<code>Prettier</code>这两个插件，并且在设置区中开启<code>Format On Save</code>:</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8a3d00d6cabd4093b7ce7121464d5bb2~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>接下来在你按<code>Ctrl + S</code>保存代码的时候，Prettier 便会自动帮忙修复代码格式。</p><h3 id="在-vite-中接入-eslint" tabindex="-1"><a class="header-anchor" href="#在-vite-中接入-eslint" aria-hidden="true">#</a> 在 Vite 中接入 ESLint</h3><p>除了安装编辑器插件，我们也可以通过 Vite 插件的方式在开发阶段进行 ESLint 扫描，以命令行的方式展示出代码中的规范问题，并能够直接定位到原文件。</p><p>首先我们安装 Vite 中的 ESLint 插件:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>pnpm i vite<span class="token operator">-</span>plugin<span class="token operator">-</span>eslint <span class="token operator">-</span><span class="token constant">D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后在 <code>vite.config.ts</code> 中接入:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// vite.config.ts</span>
<span class="token keyword">import</span> viteEslint <span class="token keyword">from</span> <span class="token string">&#39;vite-plugin-eslint&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 具体配置</span>
<span class="token punctuation">{</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// 省略其它插件</span>
    <span class="token function">viteEslint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在你可以试着重新启动项目， ESLint 的错误已经能够及时显示到命令行窗口中了。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fe73069469414debbef973c6a9f0f8ae~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><blockquote><p>由于这个插件采用另一个进程来运行 ESLint 的扫描工作，因此不会影响 Vite 项目的启动速度，这个大家不用担心。</p></blockquote><h2 id="样式规范工具-stylelint" tabindex="-1"><a class="header-anchor" href="#样式规范工具-stylelint" aria-hidden="true">#</a> 样式规范工具: Stylelint</h2><p>接下来我们进入<code>Stylelint</code>的部分，先来看看官方的定义:</p><blockquote><p>Stylelint，一个强大的现代化样式 Lint 工具，用来帮助你避免语法错误和统一代码风格。</p></blockquote><p>Stylelint 主要专注于样式代码的规范检查，内置了 <strong>170 多个 CSS 书写规则</strong>，支持 <strong>CSS 预处理器</strong>(如 Sass、Less)，提供<strong>插件化机制</strong>以供开发者扩展规则，已经被 Google、Github 等<strong>大型团队</strong>投入使用。与 ESLint 类似，在规范检查方面，Stylelint 已经做的足够专业，而在代码格式化方面，我们仍然需要结合 Prettier 一起来使用。</p><p>首先让我们来安装 Stylelint 以及相应的工具套件：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>pnpm i stylelint stylelint<span class="token operator">-</span>prettier stylelint<span class="token operator">-</span>config<span class="token operator">-</span>prettier stylelint<span class="token operator">-</span>config<span class="token operator">-</span>recess<span class="token operator">-</span>order stylelint<span class="token operator">-</span>config<span class="token operator">-</span>standard stylelint<span class="token operator">-</span>config<span class="token operator">-</span>standard<span class="token operator">-</span>scss <span class="token operator">-</span><span class="token constant">D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后，我们在 Stylelint 的配置文件<code>.stylelintrc.js</code>中一一使用这些工具套件:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// .stylelintrc.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 注册 stylelint 的 prettier 插件</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;stylelint-prettier&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// 继承一系列规则集合</span>
  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// standard 规则集合</span>
    <span class="token string">&#39;stylelint-config-standard&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">// standard 规则集合的 scss 版本</span>
    <span class="token string">&#39;stylelint-config-standard-scss&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">// 样式属性顺序规则</span>
    <span class="token string">&#39;stylelint-config-recess-order&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">// 接入 Prettier 规则</span>
    <span class="token string">&#39;stylelint-config-prettier&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;stylelint-prettier/recommended&#39;</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// 配置 rules</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 开启 Prettier 自动格式化功能</span>
    <span class="token string-property property">&#39;prettier/prettier&#39;</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现 Stylelint 的配置文件和 ESLint 还是非常相似的，常用的<code>plugins</code>、<code>extends</code>和<code>rules</code>属性在 ESLint 同样存在，并且与 ESLint 中这三个属性的功能也基本相同。不过需要强调的是在 Stylelint 中 rules 的配置会和 ESLint 有些区别，对于每个具体的 rule 会有三种配置方式:</p><ul><li><code>null</code>，表示关闭规则。</li><li>一个简单值(如 true，字符串，根据不同规则有所不同)，表示开启规则，但并不做过多的定制。</li><li>一个数组，包含两个元素，即<code>[简单值，自定义配置]</code>，第一个元素通常为一个简单值，第二个元素用来进行更精细化的规则配置。</li></ul><p>接下来我们将 Stylelint 集成到项目中，回到 <code>package.json</code> 中，增加如下的 <code>scripts</code> 配置:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 整合 lint 命令</span>
    <span class="token property">&quot;lint&quot;</span><span class="token operator">:</span> <span class="token string">&quot;npm run lint:script &amp;&amp; npm run lint:style&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// stylelint 命令</span>
    <span class="token property">&quot;lint:style&quot;</span><span class="token operator">:</span> <span class="token string">&quot;stylelint --fix \\&quot;src/**/*.{css,scss}\\&quot;&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行<code>pnpm run lint:style</code>即可完成样式代码的规范检查和自动格式化。当然，你也可以在 VSCode 中安装<code>Stylelint</code>插件，这样能够在开发阶段即时感知到代码格式问题，提前进行修复。</p><p>当然，我们也可以直接在 Vite 中集成 Stylelint。社区中提供了 Stylelint 的 Vite 插件，实现在项目开发阶段提前暴露出样式代码的规范问题。我们来安装一下这个插件:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Vite 2.x</span>
<span class="token function">pnpm</span> i @amatlash/vite-plugin-stylelint <span class="token parameter variable">-D</span>

<span class="token comment"># Vite 3.x 及以后的版本</span>
<span class="token function">pnpm</span> i vite-plugin-stylelint <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在 Vite 配置文件中添加如下的内容:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> viteStylelint <span class="token keyword">from</span> <span class="token string">&#39;@amatlash/vite-plugin-stylelint&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 注意: Vite 3.x 以及以后的版本需要引入 vite-plugin-stylelint</span>

<span class="token comment">// 具体配置</span>
<span class="token punctuation">{</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// 省略其它插件</span>
    <span class="token function">viteStylelint</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token comment">// 对某些文件排除检查</span>
      exclude<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">windicss|node_modules</span><span class="token regex-delimiter">/</span></span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，你就可以在命令行界面看到对应的 Stylelint 提示了:</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7e0957eaa8d1444f98a80173502f2395~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h2 id="husky-lint-staged-的-git-提交工作流集成" tabindex="-1"><a class="header-anchor" href="#husky-lint-staged-的-git-提交工作流集成" aria-hidden="true">#</a> Husky + lint-staged 的 Git 提交工作流集成</h2><h3 id="提交前的代码-lint-检查" tabindex="-1"><a class="header-anchor" href="#提交前的代码-lint-检查" aria-hidden="true">#</a> 提交前的代码 Lint 检查</h3><p>在上文中我们提到了安装 <code>ESLint</code>、<code>Prettier</code>和<code>Stylelint</code>的 VSCode 插件或者 Vite 插件，在开发阶段提前规避掉代码格式的问题，但实际上这也只是将问题提前暴露，并不能保证规范问题能完全被解决，还是可能导致线上的代码出现不符合规范的情况。那么如何来避免这类问题呢？</p><p>我们可以在代码提交的时候进行卡点检查，也就是拦截 <code>git commit</code> 命令，进行代码格式检查，只有确保通过格式检查才允许正常提交代码。社区中已经有了对应的工具——<code>Husky</code>来完成这件事情，让我们来安装一下这个工具:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>pnpm i husky <span class="token operator">-</span><span class="token constant">D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>值得提醒的是，有很多人推荐在<code>package.json</code>中配置 husky 的钩子:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// package.json</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;husky&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;pre-commit&quot;</span><span class="token operator">:</span> <span class="token string">&quot;npm run lint&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种做法在 Husky <code>4.x</code> 及以下版本没问题，而在最新版本(7.x 版本)中是无效的！在新版 Husky 版本中，我们需要做如下的事情:</p><ol><li>初始化 Husky: <code>npx husky install</code>，并将 <code>husky install</code>作为项目启动前脚本，如:</li></ol><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 会在安装 npm 依赖后自动执行</span>
    <span class="token property">&quot;prepare&quot;</span><span class="token operator">:</span> <span class="token string">&quot;husky install&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>添加 Husky 钩子，在终端执行如下命令:</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>npx husky add <span class="token punctuation">.</span>husky<span class="token operator">/</span>pre<span class="token operator">-</span>commit <span class="token string">&quot;npm run lint&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接着你将会在项目根目录的<code>.husky</code>目录中看到名为<code>pre-commit</code>的文件，里面包含了 <code>git commit</code>前要执行的脚本。现在，当你执行 <code>git commit</code> 的时候，会首先执行 <code>npm run lint</code>脚本，通过 Lint 检查后才会正式提交代码记录。</p><p>不过，刚才我们直接在 Husky 的钩子中执行 <code>npm run lint</code>，这会产生一个额外的问题: Husky 中每次执行<code>npm run lint</code>都对仓库中的代码进行全量检查，也就是说，即使某些文件并没有改动，也会走一次 Lint 检查，当项目代码越来越多的时候，提交的过程会越来越慢，影响开发体验。</p><p>而<code>lint-staged</code>就是用来解决上述全量扫描问题的，可以实现只对存入<code>暂存区</code>的文件进行 Lint 检查，大大提高了提交代码的效率。首先，让我们安装一下对应的 npm 包:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>pnpm i <span class="token operator">-</span><span class="token constant">D</span> lint<span class="token operator">-</span>staged
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后在 <code>package.json</code>中添加如下的配置:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;lint-staged&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;**/*.{js,jsx,tsx,ts}&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">&quot;npm run lint:script&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;git add .&quot;</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;**/*.{scss}&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">&quot;npm run lint:style&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;git add .&quot;</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们需要在 Husky 中应用<code>lint-stage</code>，回到<code>.husky/pre-commit</code>脚本中，将原来的<code>npm run lint</code>换成如下脚本:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>npx <span class="token operator">--</span>no <span class="token operator">--</span> lint<span class="token operator">-</span>staged
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如此一来，我们便实现了提交代码时的<code>增量 Lint 检查</code>。</p><h3 id="提交时的-commit-信息规范" tabindex="-1"><a class="header-anchor" href="#提交时的-commit-信息规范" aria-hidden="true">#</a> 提交时的 commit 信息规范</h3><p>除了代码规范检查之后，Git 提交信息的规范也是不容忽视的一个环节，规范的 commit 信息能够方便团队协作和问题定位。首先我们来安装一下需要的工具库，执行如下的命令:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> i commitlint @commitlint/cli @commitlint/config-conventional <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来新建<code>.commitlintrc.js</code>：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// .commitlintrc.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;@commitlint/config-conventional&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一般我们直接使用<code>@commitlint/config-conventional</code>规范集就可以了，它所规定的 commit 信息一般由两个部分: <code>type</code> 和 <code>subject</code> 组成，结构如下:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// type 指提交的类型</span>
<span class="token comment">// subject 指提交的摘要信息</span>
<span class="token operator">&lt;</span>type<span class="token operator">&gt;</span><span class="token operator">:</span> <span class="token operator">&lt;</span>subject<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>常用的 <code>type</code> 值包括如下:</p><ul><li><code>feat</code>: 添加新功能。</li><li><code>fix</code>: 修复 Bug。</li><li><code>chore</code>: 一些不影响功能的更改。</li><li><code>docs</code>: 专指文档的修改。</li><li><code>perf</code>: 性能方面的优化。</li><li><code>refactor</code>: 代码重构。</li><li><code>test</code>: 添加一些测试代码等等。</li></ul><p>接下来我们将<code>commitlint</code>的功能集成到 Husky 的钩子当中，在终端执行如下命令即可:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>npx husky add <span class="token punctuation">.</span>husky<span class="token operator">/</span>commit<span class="token operator">-</span>msg <span class="token string">&quot;npx --no-install commitlint -e $HUSKY_GIT_PARAMS&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你可以发现在<code>.husky</code>目录下多出了<code>commit-msg</code>脚本文件，表示<code>commitlint</code>命令已经成功接入到 husky 的钩子当中。现在我们可以尝试对代码进行提交，假如输入一个错误的 commit 信息，commitlint 会自动抛出错误并退出:</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0380e4bb149540649fc8b5f7f8e71c6e~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>至此，我们便完成了 Git 提交信息的卡点扫描和规范检查。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>恭喜你，学完了本节的内容。本小节你应该了解前端的<strong>自动化代码规范工具的使用</strong>以及<strong>在 Vite 中的接入方法</strong>。</p><p>我主要给你介绍了 3 个方面的自动化代码规范工具:</p><ol><li>JavaScript/TypeScript 规范。主流的 Lint 工具包括 <code>Eslint</code>、<code>Prettier</code>；</li><li>样式开发规范。主流的 Lint 工具包括<code>Stylelint</code>、<code>Prettier</code>；</li><li>Git 提交规范。主流的 Lint 工具包括<code>Commitlint</code>。</li></ol><p>我们可以通过编辑器的插件或者 Vite 插件在开发阶段暴露出规范问题，但也无法保证这类问题在开发时完全被解决掉，因此我们尝试在代码提交阶段来解决这个问题，通过<code>Husky</code>+<code>lint-staged</code>成功地拦截 <code>git commit</code>过程，只有在各项 Lint 检查通过后才能正常提交代码，这样就有效提高了线上代码和 Git 提交信息的质量。</p>`,107);function I(M,B){const e=o("ExternalLinkIcon");return i(),c("div",null,[r,s("blockquote",null,[s("p",null,[n("小节示例项目仓库: "),s("a",d,[n("点击直达"),a(e)])])]),u,s("p",null,[n("ESLint 的使用并不复杂，主要通过配置文件对各种代码格式的规则("),m,n(")进行配置，以指定具体的代码规范。目前开源社区也有一些成熟的规范集可供使用，著名的包括"),s("a",v,[n("Airbnb JavaScript 代码规范"),a(e)]),n("、"),s("a",k,[n("Standard JavaScript 规范"),a(e)]),n("、"),s("a",b,[n("Google JavaScript 规范"),a(e)]),n("等等，你可以在项目中直接使用这些成熟的规范，也可以自己定制一套团队独有的代码规范，这在一些大型团队当中还是很常见的。")]),g,s("p",null,[n("ESLint 底层默认使用 "),s("a",h,[n("Espree"),a(e)]),n("来进行 AST 解析，这个解析器目前已经基于 "),y,n(" 来实现，虽然说 "),q,n(" 目前能够解析绝大多数的 "),s("a",f,[n("ECMAScript 规范的语法"),a(e)]),n("，但还是不支持 TypeScript ，因此需要引入其他的解析器完成 TS 的解析。")]),s("p",null,[n("社区提供了"),x,n("这个解决方案，专门为了 TypeScript 的解析而诞生，将 "),S,n(" 代码转换为 "),j,n(" 能够识别的格式(即 "),s("a",_,[E,a(e)]),n(")，然后在 Eslint 下通过"),L,n("进行格式检查， 以此兼容了 TypeScript 语法。")]),V,w,s("ul",null,[s("li",null,[n("ecmaVersion: 这个配置和 "),T,n(" 的 "),s("a",P,[n("ecmaVersion"),a(e)]),n(" 是兼容的，可以配置 "),C,n("(如 ES6)或者"),D,n("(如 ES2015)，也可以直接配置为"),A,n("，启用最新的 ES 语法。")]),H,G]),N,s("p",null,[n("具体的规则配置可能会不一样，有的是一个字符串，有的可以配置一个对象，你可以参考 "),s("a",J,[n("ESLint 官方文档"),a(e)]),n("。")]),z])}const $=p(l,[["render",I],["__file","di05zhang—daimaguifan：ruheliyongLintgongjulianlaibaozhengdaimafenggehezhiliang.html.vue"]]);export{$ as default};
