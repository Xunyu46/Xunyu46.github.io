import{_ as t,r as c,o as i,c as p,b as n,d as s,e as o,a}from"./app-e6acbbcc.js";const l={},d=a(`<h1 id="typescript-注释指令-tsconfig-json-tsc-命令行编辑器" tabindex="-1"><a class="header-anchor" href="#typescript-注释指令-tsconfig-json-tsc-命令行编辑器" aria-hidden="true">#</a> TypeScript 注释指令，tsconfig.json，tsc 命令行编辑器</h1><p>从本节内容开始学习 TypeScript 的注释指令，tsconfig.json，tsc 命令行编辑器相关内容</p><ul><li>TypeScript 的注释指令</li><li><code>tsconfig.json</code> TypeScript 项目的配置文件</li><li>tsc 命令行编辑器</li></ul><h2 id="一、typescript-的注释指令" tabindex="-1"><a class="header-anchor" href="#一、typescript-的注释指令" aria-hidden="true">#</a> 一、TypeScript 的注释指令</h2><p>TypeScript 接受一些注释指令。所谓“注释指令”，指的是采用 JS 双斜杠注释的形式，向编译器发出的命令。</p><h3 id="_1、-ts-nocheck" tabindex="-1"><a class="header-anchor" href="#_1、-ts-nocheck" aria-hidden="true">#</a> 1、<code>// @ts-nocheck</code></h3><p><code>// @ts-nocheck</code>告诉编译器不对当前脚本进行类型检查，可以用于 TypeScript 脚本，也可以用于 JavaScript 脚本。</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// @ts-nocheck</span>

<span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// document.getElementById(123) 存在类型错误，但是编译器不对该脚本进行类型检查，所以不会报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、-ts-check" tabindex="-1"><a class="header-anchor" href="#_2、-ts-check" aria-hidden="true">#</a> 2、<code>// @ts-check</code></h3><p>如果一个 JavaScript 脚本顶部添加了<code>// @ts-check</code>，那么编译器将对该脚本进行类型检查，不论是否启用了<code>checkJs</code>编译选项。</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// @ts-check</span>
<span class="token keyword">let</span> isChecked <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>isChceked<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 报错</span>

<span class="token comment">// 以上是 JavaScript 脚本，// @ts-check 告诉 TypeScript 编译器对其进行类型检查，所以最后一行会报错，提示拼写错误</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、-ts-ignore" tabindex="-1"><a class="header-anchor" href="#_3、-ts-ignore" aria-hidden="true">#</a> 3、<code>// @ts-ignore</code></h3><p><code>// @ts-ignore</code>告诉编译器不对下一行代码进行类型检查，可以用于 TypeScript 脚本，也可以用于 JavaScript 脚本。</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">let</span> x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>

x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token comment">// @ts-ignore</span>
x <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 不报错</span>

<span class="token comment">// 以上代码中，最后一行是类型错误，变量 x 的类型是 number，不能等于布尔值</span>
<span class="token comment">// 但是因为前面加上了 // @ts-ignore，编译器会跳过这一行的类型检查，所以不会报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、-ts-expect-error" tabindex="-1"><a class="header-anchor" href="#_4、-ts-expect-error" aria-hidden="true">#</a> 4、<code>// @ts-expect-error</code></h3><p><code>// @ts-expect-error</code>主要用在测试用例，当下一行有类型错误时，它会压制 TypeScript 的报错信息（即不显示报错信息），把错误留给代码自己处理。</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>abc<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> xyz<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> abc <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> xyz <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// do some stuff</span>
<span class="token punctuation">}</span>

<span class="token comment">// @ts-expect-error</span>
<span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toThrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 以上代码是一个测试用例，上面示例是一个测试用例，倒数第二行的 foo(123, 456) 的参数类型与定义不一致，TypeScript 引擎会报错</span>
<span class="token comment">// 但是，测试用例本身测试的就是这个错误，已经有专门的处理代码，所以这里可以使用 // @ts-expect-error，不显示引擎的报错信息</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果下一行没有类型错误，<code>// @ts-expect-error</code>则会显示一行提示</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// @ts-expect-error</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 输出 Unused &#39;@ts-expect-error&#39; directive.</span>

<span class="token comment">// 以上代码中，第二行是正确代码，这时系统会给出一个提示，表示 @ts-expect-error 没有用到</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、jsdoc" tabindex="-1"><a class="header-anchor" href="#_5、jsdoc" aria-hidden="true">#</a> 5、JSDoc</h3><p>TypeScript 直接处理 JS 文件时，如果无法推断出类型，会使用 JS 脚本里面的 JSDoc 注释。</p><blockquote><p>使用 JSDoc 时，有两个基本要求</p></blockquote><ul><li>①、JSDoc 注释必须以<code>/**</code>开始，其中星号（<code>*</code>）的数量必须为两个。若使用其他形式的多行注释，则 JSDoc 会忽略该条注释。</li><li>②、JSDoc 注释必须与它描述的代码处于相邻的位置，并且注释在上，代码在下</li></ul><blockquote><p>下面是 JSDoc 的一个简单例子</p></blockquote><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">/**
 * @param {string} somebody
 */</span>
<span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>somebody<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Hello &quot;</span> <span class="token operator">+</span> somebody<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 注释里面的 @param 是一个 JSDoc 声明，表示下面的函数 sayHello() 的参数 somebody 类型为 string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>TypeScript 编译器支持大部分的 JSDoc 声明，下面介绍其中的一些</p><h3 id="_5-1、-typedef" tabindex="-1"><a class="header-anchor" href="#_5-1、-typedef" aria-hidden="true">#</a> 5.1、@typedef</h3><p><code>@typedef</code>命令创建自定义类型，等同于 TypeScript 里面的类型别名</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">/**
 * @typedef {(number | string)} NumberLike
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码中，定义了一个名为<code>NumberLike</code>的新类型，它是由<code>number</code>和<code>string</code>构成的联合类型，等同于 TypeScript 的如下语句。</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">type</span> <span class="token class-name">NumberLike</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-2、-type" tabindex="-1"><a class="header-anchor" href="#_5-2、-type" aria-hidden="true">#</a> 5.2、@type</h3><p><code>@type</code>命令定义变量的类型</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">/**
 * @type {string}
 */</span>
<span class="token keyword">let</span> a<span class="token punctuation">;</span>

<span class="token comment">// @type 定义了变量 a 的类型为 string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>@type</code>命令中可以使用由<code>@typedef</code>命令创建的类型</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">/**
 * @typedef {(number | string)} NumberLike
 */</span>

<span class="token comment">/**
 * @type {NumberLike}
 */</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>@type</code>命令中允许使用 TypeScript 类型及其语法</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">/**@type {true | false} */</span>
<span class="token keyword">let</span> a<span class="token punctuation">;</span>

<span class="token comment">/** @type {number[]} */</span>
<span class="token keyword">let</span> b<span class="token punctuation">;</span>

<span class="token comment">/** @type {Array&lt;number&gt;} */</span>
<span class="token keyword">let</span> c<span class="token punctuation">;</span>

<span class="token comment">/** @type {{ readonly x: number, y?: string }} */</span>
<span class="token keyword">let</span> d<span class="token punctuation">;</span>

<span class="token comment">/** @type {(s: string, b: boolean) =&gt; number} */</span>
<span class="token keyword">let</span> e<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3、-param" tabindex="-1"><a class="header-anchor" href="#_5-3、-param" aria-hidden="true">#</a> 5.3、@param</h3><p><code>@param</code>命令用于定义函数参数的类型</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">/**
 * @param {string}  x
 */</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果是可选参数，需要将参数名放在方括号<code>[]</code>里面</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">/**
 * @param {string}  [x]
 */</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方括号里面，还可以指定参数默认值</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">/**
 * @param {string} [x=&quot;bar&quot;]
 */</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// 参数 x 的默认值是字符串 bar</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-4、-return-returns" tabindex="-1"><a class="header-anchor" href="#_5-4、-return-returns" aria-hidden="true">#</a> 5.4、@return，@returns</h3><p><code>@return</code>和<code>@returns</code>命令的作用相同，指定函数返回值的类型</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">/**
 * @return {boolean}
 */</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 * @returns {number}
 */</span>
<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-5、-extends-和-类型修饰符" tabindex="-1"><a class="header-anchor" href="#_5-5、-extends-和-类型修饰符" aria-hidden="true">#</a> 5.5、@extends 和 类型修饰符</h3><p><code>@extends</code>命令用于定义继承的基类</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">/**
 * @extends {Base}
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Derived</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>@public</code>、<code>@protected</code>、<code>@private</code>分别指定类的公开成员、保护成员和私有成员</p><blockquote><p><code>@readonly</code>指定只读成员</p></blockquote><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>
  <span class="token comment">/**
   * @public
   * @readonly
   */</span>
  x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">/**
   *  @protected
   */</span>
  y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、tsconfig-json-配置文件相关选项" tabindex="-1"><a class="header-anchor" href="#二、tsconfig-json-配置文件相关选项" aria-hidden="true">#</a> 二、tsconfig.json 配置文件相关选项</h2><p><code>tsconfig.json</code>是 TypeScript 项目的配置文件，放在项目的根目录。反过来说，如果一个目录里面有<code>tsconfig.json</code>，TypeScript 就认为这是项目的根目录。</p><p>如果项目源码是 JavaScript，但是想用 TypeScript 处理，那么配置文件的名字是<code>jsconfig.json</code>，它跟<code>tsconfig</code>的写法是一样的。</p><p><code>tsconfig.json</code>文件主要供<code>tsc</code>编译器使用，它的命令行参数<code>--project</code>或<code>-p</code>可以指定<code>tsconfig.json</code>的位置（目录或文件皆可）。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>tsc <span class="token parameter variable">-p</span> ./dir
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果不指定配置文件的位置，<code>tsc</code>就会在当前目录下搜索<code>tsconfig.json</code>文件，如果不存在，就到上一级目录搜索，直到找到为止。</p><p><code>tsconfig.json</code>文件的格式，是一个 JSON 对象，最简单的情况可以只放置一个空对象<code>{}</code>。下面是一个示例。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;outDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./src/dist&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;allowJs&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;es2016&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;./src/**/*&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：</p><p>上面示例的四个属性的含义：</p><ul><li>include：指定哪些文件需要编译。</li><li>allowJs：指定源目录的 JavaScript 文件是否原样拷贝到编译后的目录。</li><li>outDir：指定编译产物存放的目录。</li><li>target：指定编译产物的 JS 版本。</li></ul><p><code>tsconfig.json</code>文件可以不必手写，使用 tsc 命令的<code>--init</code>参数自动生成。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>tsc <span class="token parameter variable">--init</span>

<span class="token comment"># 该命令生成的 tsconfig.json 文件，里面会有一些默认配置</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你也可以使用别人预先写好的 tsconfig.json 文件，npm 的<code>@tsconfig</code>名称空间下面有很多模块，都是写好的<code>tsconfig.json</code>样本，比如 <code>@tsconfig/recommended</code>和<code>@tsconfig/node16</code>。</p><blockquote><p>这些模块需要安装，以<code>@tsconfig/deno</code>为例</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> --save-dev @tsconfig/deno
<span class="token comment"># 或</span>
<span class="token function">yarn</span> <span class="token function">add</span> <span class="token parameter variable">--dev</span> @tsconfig/deno
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>安装以后，就可以在<code>tsconfig.json</code>里面引用这个模块，相当于继承它的设置，然后进行扩展</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;extends&quot;</span><span class="token operator">:</span> <span class="token string">&quot;@tsconfig/deno/tsconfig.json&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,72),r=n("code",null,"@tsconfig",-1),u={href:"https://github.com/tsconfig/bases/tree/main/bases",target:"_blank",rel:"noopener noreferrer"},m=a(`<p><code>tsconfig.json</code>的一级属性并不多，只有很少几个，但是<code>compilerOptions</code>属性有很多二级属性。下面先逐一介绍一级属性，然后再介绍<code>compilerOptions</code>的二级属性，按照首字母排序。</p><h3 id="_1、与文件相关的选项" tabindex="-1"><a class="header-anchor" href="#_1、与文件相关的选项" aria-hidden="true">#</a> 1、与文件相关的选项</h3><p>新建一个项目工程，目录结构如下</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>icoding-ts-config
├─ build
│ ├─ webpack.base.config.js
│ ├─ webpack.config.js
│ ├─ webpack.dev.config.js
│ └─ webpack.pro.config.js
├─ package-lock.json
├─ package.json
├─ src
│ ├─ index.ts
│ ├─ a.ts
│ └─ tpl
│ └─ index.html
└─ tsconfig.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先清空 <code>tsconfig.json</code> 配置文件，如果没有任何配置，编译器就会按照默认配置编译当前目录下的所有 TS 文件。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>新建 <code>/src/a.ts</code> 文件</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// 定义一个变量</span>
<span class="token keyword">let</span> s<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;arry&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在命令行终端中输入命令，编译 TS 文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 直接输入 tsc 命令</span>
tsc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在工程中，所有的 TS 文件都被编译成了 JS 文件</p><p><img src="https://www.arryblog.com/assets/img/image-20230820005357324.09f60aef.png" alt="image-20230820005357324"></p><h3 id="_1-1、files-选项" tabindex="-1"><a class="header-anchor" href="#_1-1、files-选项" aria-hidden="true">#</a> 1.1、files 选项</h3><ul><li><code>files</code>属性指定编译的文件列表，如果其中有一个文件不存在，就会报错。</li><li>它是一个数组，排在前面的文件先编译。</li></ul><p>在 <code>tsconfig.json</code> 中</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;files&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src/a.ts&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在命令行终端中输入命令，编译该 TS 文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 直接输入 tsc 命令</span>
tsc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/image-20230820011643510.508c24ee.png" alt="image-20230820011643510"></p><p>注：</p><p>可以看到只有 <code>a.ts</code> 文件被编译了</p><p>该属性必须逐一列出文件，不支持文件匹配。如果文件较多，建议使用<code>include</code>和<code>exclude</code>属性。</p><h3 id="_1-2、include-选项" tabindex="-1"><a class="header-anchor" href="#_1-2、include-选项" aria-hidden="true">#</a> 1.2、include 选项</h3><p><code>include</code>属性指定所要编译的文件列表，既支持逐一列出文件，也支持通配符。文件位置相对于当前配置文件而定。</p><p>新建 <code>src/lib/lib.ts</code> 文件</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// 定义 libs 变量</span>
<span class="token keyword">let</span> libs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>tsconfig.json</code> 中，添加 <code>include</code> 选项，值为 <code>src</code> 目录</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;files&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src/a.ts&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在命令行终端中输入命令，编译 TS 文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 直接输入 tsc 命令</span>
tsc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/image-20230820012533505.9e1b9163.png" alt="image-20230820012533505"></p><p>运行结果可以看到，编译器会将 <code>src</code> 目录下的所有 TS 文件 全部编译成 JS 文件，包括子目录的文件。</p><h3 id="_1-3、include-属性支持三种通配符" tabindex="-1"><a class="header-anchor" href="#_1-3、include-属性支持三种通配符" aria-hidden="true">#</a> 1.3、include 属性支持三种通配符</h3><ul><li><code>?</code>：指代单个字符</li><li><code>*</code>：指代任意字符，不含路径分隔符</li><li><code>**</code>：指定任意目录层级。</li></ul><p>如果不指定文件后缀名，默认包括<code>.ts</code>、<code>.tsx</code>和<code>.d.ts</code>文件。如果打开了<code>allowJs</code>，那么还包括<code>.js</code>和<code>.jsx</code>。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token comment">// &quot; src/* &quot; 只会编译 src 一级目录下的文件</span>
  <span class="token property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src/*&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/image-20230820013436012.14284a8c.png" alt="image-20230820013436012"></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token comment">// &quot; src/*/* &quot; 只会编译 src 二级目录下的文件</span>
  <span class="token property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src/*/*&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当 <code>files</code> 和 <code>include</code> 同时存在时，是会合并的</p><p><img src="https://www.arryblog.com/assets/img/image-20230820014149851.5b6fb514.png" alt="image-20230820014149851"></p><h3 id="_1-4、exclude-选项" tabindex="-1"><a class="header-anchor" href="#_1-4、exclude-选项" aria-hidden="true">#</a> 1.4、exclude 选项</h3><p>表示编译器需要排除的文件 或 文件夹</p><p><code>exclude</code>属性是一个数组，必须与<code>include</code>属性一起使用，用来从编译列表中去除指定的文件。它也支持使用与<code>include</code>属性相同的通配符。</p><blockquote><p>默认 TS 会排除 <code>node_modules</code> 下的所有文件，也会排除所有的声明文件</p></blockquote><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;files&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src/a.ts&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// 指定了 src 下的所有文件</span>
  <span class="token property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// 排除 “src/lib” 下的所有文件</span>
  <span class="token property">&quot;exclude&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src/lib&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/image-20230820015803349.ba13f275.png" alt="image-20230820015803349"></p><p>注：</p><ul><li><code>include</code> 指定了 <code>src</code> 文件夹下的所有文件</li><li><code>exclude</code> 排除了 <code>lib</code> 下的文件</li></ul><p>结果就只剩下 <code>a.ts</code> 和 <code>index.ts</code> 文件会被编译成 JS 文件了</p><h3 id="_1-5、extends-选项" tabindex="-1"><a class="header-anchor" href="#_1-5、extends-选项" aria-hidden="true">#</a> 1.5、extends 选项</h3><p>配置文件之间是可以继承的，我们可以将继承的配置信息抽离出来方便复用。</p><p><code>tsconfig.json</code>可以继承另一个<code>tsconfig.json</code>文件的配置。如果一个项目有多个配置，可以把共同的配置写成<code>tsconfig.base.json</code>，其他的配置文件继承该文件，这样便于维护和修改。</p><p>在项目的根目录中新建基础的 TS 配置文件 <code>tsconfig.base.json</code></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;files&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src/a.ts&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;exclude&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src/lib&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>tsconfig.json</code> 中配置 <code>extends</code> 选项，继承 <code>tsconfig.base.json</code></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;extends&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./tsconfig.base&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从运行结果中可以看到和上边一样</p><p><img src="https://www.arryblog.com/assets/img/image-20230820020856272.fea4777f.png" alt="image-20230820020856272"></p><p>另外，在 <code>tsconfig.json</code> 文件中也可以覆盖 <code>tsconfig.base.json</code> 中的配置项</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;extends&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./tsconfig.base&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// 不排除任何目录（会覆盖 tsconfig.base.json 中 exclude 选项的值）</span>
  <span class="token property">&quot;exclude&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/image-20230820021544543.684a59b7.png" alt="image-20230820021544543"></p><p>如果<code>extends</code>属性指定的路径不是以<code>./</code>或<code>../</code>开头，那么编译器将在<code>node_modules</code>目录下查找指定的配置文件。</p><p><code>extends</code>属性也可以继承已发布的 npm 模块里面的 tsconfig 文件。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;extends&quot;</span><span class="token operator">:</span> <span class="token string">&quot;@tsconfig/node12/tsconfig.json&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>extends</code>指定的<code>tsconfig.json</code>会先加载，然后加载当前的<code>tsconfig.json</code>。如果两者有重名的属性，后者会覆盖前者。</p><h3 id="_1-6、compileonsave-选项" tabindex="-1"><a class="header-anchor" href="#_1-6、compileonsave-选项" aria-hidden="true">#</a> 1.6、compileOnSave 选项</h3><p>设置保存文件的时候自动编译</p><blockquote><p>遗憾的是，VSCode 暂不支持该功能，可以使用 Atom 编辑器</p></blockquote><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compileOnSave&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、tsconfig-json-编译相关选项" tabindex="-1"><a class="header-anchor" href="#三、tsconfig-json-编译相关选项" aria-hidden="true">#</a> 三、tsconfig.json 编译相关选项</h2><p>在 TS 的 <code>tsconfig.json</code> 中跟编译相关的选项有 100 余项，我们只需要学习常用的选项（满足开发使用）即可。不常用的直接查阅官方文档即可 ！</p><h3 id="_1、compileoptions-选项" tabindex="-1"><a class="header-anchor" href="#_1、compileoptions-选项" aria-hidden="true">#</a> 1、compileOptions 选项</h3><p><code>compilerOptions</code>属性用来定制编译行为。这个属性可以省略，这时编译器将使用默认设置。</p><blockquote><p>创建配置选项如下</p></blockquote><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;incremental&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// TS 编译器在第一次编译之后会生成一个存储编译信息的文件，第二次编译会在第一次的基础上进行增量编译，可以提高编译的速度</span>
  <span class="token property">&quot;tsBuildInfoFile&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./buildFile&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 增量编译文件的存储位置</span>
  <span class="token property">&quot;diagnostics&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 打印诊断信息</span>

  <span class="token property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ES5&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 目标语言的版本</span>
  <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;CommonJS&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 生成代码的模板标准</span>
  <span class="token property">&quot;outFile&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./app.js&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 将多个相互依赖的文件生成一个文件，可以用在 AMD 模块中，即开启时应设置 &quot;module&quot;: &quot;AMD&quot;,</span>
  <span class="token property">&quot;lib&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;DOM&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ES2015&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ScriptHost&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ES2019.Array&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// TS 需要引用的库，即声明文件，es5 默认引用 dom、es5、scripthost,如需要使用es的高级版本特性，通常都需要配置，如 es8 的数组新特性需要引入&quot;ES2019.Array&quot;,</span>
  <span class="token property">&quot;allowJS&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 允许编译器编译 JS，JSX 文件</span>
  <span class="token property">&quot;checkJs&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 允许在JS文件中报错，通常与 allowJS 一起使用</span>
  <span class="token property">&quot;outDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./dist&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 指定输出目录</span>
  <span class="token property">&quot;rootDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 指定输出文件目录(用于输出)，用于控制输出目录结构</span>
  <span class="token property">&quot;declaration&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 生成声明文件，开启后会自动生成声明文件</span>
  <span class="token property">&quot;declarationDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./file&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 指定生成声明文件存放目录</span>
  <span class="token property">&quot;emitDeclarationOnly&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 只生成声明文件，而不会生成 js 文件</span>
  <span class="token property">&quot;sourceMap&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 生成目标文件的 sourceMap 文件</span>
  <span class="token property">&quot;inlineSourceMap&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 生成目标文件的 inline SourceMap，inline SourceMap 会包含在生成的js文件中</span>
  <span class="token property">&quot;declarationMap&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 为声明文件生成 sourceMap</span>
  <span class="token property">&quot;typeRoots&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 声明文件目录，默认时 node_modules/@types</span>
  <span class="token property">&quot;types&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 加载的声明文件包</span>
  <span class="token property">&quot;removeComments&quot;</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 删除注释</span>
  <span class="token property">&quot;noEmit&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 不输出文件，即编译后不会生成任何 js 文件</span>
  <span class="token property">&quot;noEmitOnError&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 发送错误时不输出任何文件</span>
  <span class="token property">&quot;noEmitHelpers&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 不生成 helper 函数，减小体积，需要额外安装，常配合importHelpers一起使用</span>
  <span class="token property">&quot;importHelpers&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 通过 tslib 引入 helpe r 函数，文件必须是模块</span>
  <span class="token property">&quot;downlevelIteration&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 降级遍历器实现，如果目标源是 es3/5，那么遍历器会有降级的实现</span>
  <span class="token property">&quot;strict&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 开启所有严格的类型检查</span>
  <span class="token property">&quot;alwaysStrict&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 在代码中注入&#39;use strict&#39;</span>
  <span class="token property">&quot;noImplicitAny&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 不允许隐式的 any 类型</span>
  <span class="token property">&quot;strictNullChecks&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 不允许把 null、undefined 赋值给其他类型的变量</span>
  <span class="token property">&quot;strictFunctionTypes&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 不允许函数参数双向协变</span>
  <span class="token property">&quot;strictPropertyInitialization&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 类的实例属性必须初始化</span>
  <span class="token property">&quot;strictBindCallApply&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 严格的 bind/call/apply 检查</span>
  <span class="token property">&quot;noImplicitThis&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 不允许 this 有隐式的any类型</span>
  <span class="token property">&quot;noUnusedLocals&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 检查只声明、未使用的局部变量(只提示不报错)</span>
  <span class="token property">&quot;noUnusedParameters&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 检查未使用的函数参数(只提示不报错)</span>
  <span class="token property">&quot;noFallthroughCasesInSwitch&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 防止 switch 语句贯穿（即如果没有 break 语句后面不会执行）</span>
  <span class="token property">&quot;noImplicitReturns&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 每个分支都会有返回值</span>
  <span class="token property">&quot;esModuleInterop&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 允许 export = 导出，由 import from 导入</span>
  <span class="token property">&quot;allowUmdGlobalAccess&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 允许在模块中全局变量的方式访问 umd 模块</span>
  <span class="token property">&quot;moduleResolution&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 模块解析策略，ts 默认用 node 的解析策略，即相对的方式导入</span>
  <span class="token property">&quot;baseUrl&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 解析非相对模块的基地址，默认是当前目录</span>
  <span class="token property">&quot;paths&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 路径映射，相对于 baseUrl</span>
    <span class="token comment">// 如使用jq时不想使用默认版本，而需要手动指定版本，可进行如下配置</span>
    <span class="token property">&quot;jquery&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;node_modules/jquery/dist/jquery.min.js&quot;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;rootDirs&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;out&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 将多个目录放在一个虚拟目录下，用于运行时，即编译后引入文件的位置可能发生变化，这也设置可以虚拟 src 和 out 在同一个目录下，不用再去改变路径也不会报错</span>
  <span class="token property">&quot;listEmittedFiles&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 打印输出文件</span>
  <span class="token property">&quot;listFiles&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token comment">// 打印编译的文件(包括引用的声明文件)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、allowjs" tabindex="-1"><a class="header-anchor" href="#_2、allowjs" aria-hidden="true">#</a> 2、allowJs</h3><p><code>allowJs</code>允许 TypeScript 项目加载 JS 脚本（允许编译器编译 JS，JSX 文件）。编译时，也会将 JS 文件，一起拷贝到输出目录。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;allowJs&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、alwaysstrict" tabindex="-1"><a class="header-anchor" href="#_3、alwaysstrict" aria-hidden="true">#</a> 3、alwaysStrict</h3><p><code>alwaysStrict</code>确保脚本以 ECMAScript 严格模式进行解析，因此脚本头部不用写<code>&quot;use strict&quot;</code>。</p><blockquote><p>它的值是一个布尔值，默认为<code>true</code>。</p></blockquote><h3 id="_4、allowsyntheticdefaultimports" tabindex="-1"><a class="header-anchor" href="#_4、allowsyntheticdefaultimports" aria-hidden="true">#</a> 4、allowSyntheticDefaultImports</h3><p><code>allowSyntheticDefaultImports</code>允许<code>import</code>命令默认加载没有<code>default</code>输出的模块。</p><p>比如，打开这个设置，就可以写<code>import React from &quot;react&quot;;</code>，而不是<code>import * as React from &quot;react&quot;;</code></p><h3 id="_5、allowunreachablecode" tabindex="-1"><a class="header-anchor" href="#_5、allowunreachablecode" aria-hidden="true">#</a> 5、allowUnreachableCode</h3><p><code>allowUnreachableCode</code>设置是否允许存在不可能执行到的代码。它的值有三种可能</p><ul><li><code>undefined</code>： 默认值，编辑器显示警告</li><li><code>true</code>：忽略不可能执行到的代码</li><li><code>false</code>：编译器报错</li></ul><h3 id="_6、allowunusedlabels" tabindex="-1"><a class="header-anchor" href="#_6、allowunusedlabels" aria-hidden="true">#</a> 6、allowUnusedLabels</h3><p><code>allowUnusedLabels</code>设置是否允许存在没有用到的代码标签（label）。它的值有三种可能</p><ul><li><code>undefined</code>： 默认值，编辑器显示警告</li><li><code>true</code>：忽略没有用到的代码标签</li><li><code>false</code>：编译器报错</li></ul><h3 id="_7、baseurl" tabindex="-1"><a class="header-anchor" href="#_7、baseurl" aria-hidden="true">#</a> 7、baseUrl</h3><p><code>baseUrl</code>的值为字符串，指定 TypeScript 项目的基准目录。</p><p>由于默认是以 <code>tsconfig.json</code> 的位置作为基准目录，所以一般情况不需要使用该属性。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;baseUrl&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，<code>baseUrl</code>为当前目录<code>./</code>。那么，当遇到下面的语句，TypeScript 将以<code>./</code>为起点，寻找<code>hello/world.ts</code></p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> helloWorld <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;hello/world&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_8、checkjs" tabindex="-1"><a class="header-anchor" href="#_8、checkjs" aria-hidden="true">#</a> 8、checkJs</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>checkJS\`设置对 JS 文件同样进行类型检查。打开这个属性，也会自动打开\`allowJs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>它等同于在 JS 脚本的头部添加<code>// @ts-check</code>命令。</p></blockquote><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;checkJs&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9、composite" tabindex="-1"><a class="header-anchor" href="#_9、composite" aria-hidden="true">#</a> 9、composite</h3><p><code>composite</code>打开某些设置，使得 TypeScript 项目可以进行增量构建，往往跟<code>incremental</code>属性配合使用。</p><h3 id="_10、declaration" tabindex="-1"><a class="header-anchor" href="#_10、declaration" aria-hidden="true">#</a> 10、declaration</h3><p><code>declaration</code>设置编译时是否为每个脚本生成类型声明文件<code>.d.ts</code>。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;declaration&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11、declarationdir" tabindex="-1"><a class="header-anchor" href="#_11、declarationdir" aria-hidden="true">#</a> 11、declarationDir</h3><p><code>declarationDir</code>设置生成的<code>.d.ts</code>文件所在的目录</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;declaration&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">&quot;declarationDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./types&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12、declarationmap" tabindex="-1"><a class="header-anchor" href="#_12、declarationmap" aria-hidden="true">#</a> 12、declarationMap</h3><p><code>declarationMap</code>设置生成<code>.d.ts</code>类型声明文件的同时，还会生成对应的 Source Map 文件</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;declaration&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">&quot;declarationMap&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_13、emitbom" tabindex="-1"><a class="header-anchor" href="#_13、emitbom" aria-hidden="true">#</a> 13、emitBOM</h3><p><code>emitBOM</code>设置是否在编译结果的文件头添加字节顺序标志 BOM，默认值是<code>false</code>。</p><h3 id="_14、emitdeclarationonly" tabindex="-1"><a class="header-anchor" href="#_14、emitdeclarationonly" aria-hidden="true">#</a> 14、emitDeclarationOnly</h3><p><code>emitDeclarationOnly</code>设置编译后只生成<code>.d.ts</code>文件，不生成<code>.js</code>文件。</p><h3 id="_15、esmoduleinterop" tabindex="-1"><a class="header-anchor" href="#_15、esmoduleinterop" aria-hidden="true">#</a> 15、esModuleInterop</h3><p><code>esModuleInterop</code>修复了一些 CommonJS 和 ES6 模块之间的兼容性问题。</p><p>如果<code>module</code>属性为<code>node16</code>或<code>nodenext</code>，则<code>esModuleInterop</code>默认为<code>true</code>，其他情况默认为<code>false</code>。</p><p>打开这个属性，使用<code>import</code>命令加载 CommonJS 模块时，TypeScript 会严格检查兼容性问题是否存在。</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> moment <span class="token keyword">from</span> <span class="token string">&quot;moment&quot;</span><span class="token punctuation">;</span>
<span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 报错</span>

<span class="token comment">// 根据 ES6 规范， import * as moment 里面的 moment 是一个对象，不能当作函数调用，所以第二行报错了</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解决方法就是改写上面的语句，改成加载默认接口。</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> moment <span class="token keyword">from</span> <span class="token string">&quot;moment&quot;</span><span class="token punctuation">;</span>
<span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>打开<code>esModuleInterop</code>以后，如果将上面的代码编译成 CommonJS 模块格式，就会加入一些辅助函数，保证编译后的代码行为正确。</p><p>注：</p><p>打开<code>esModuleInterop</code>，将自动打开<code>allowSyntheticDefaultImports</code></p><h3 id="_16、exactoptionalpropertytypes" tabindex="-1"><a class="header-anchor" href="#_16、exactoptionalpropertytypes" aria-hidden="true">#</a> 16、exactOptionalPropertyTypes</h3><p><code>exactOptionalPropertyTypes</code>设置可选属性不能赋值为<code>undefined</code>。</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// 打开 exactOptionalPropertyTypes</span>
<span class="token keyword">interface</span> <span class="token class-name">MyObj</span> <span class="token punctuation">{</span>
  foo<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">&quot;A&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> obj<span class="token operator">:</span> MyObj <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token string">&quot;A&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

obj<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// 报错</span>

<span class="token comment">//  foo 是可选属性，打开 exactOptionalPropertyTypes 以后，该属性就不能显式赋值为 undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_17、forceconsistentcasinginfilenames" tabindex="-1"><a class="header-anchor" href="#_17、forceconsistentcasinginfilenames" aria-hidden="true">#</a> 17、forceConsistentCasingInFileNames</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>forceConsistentCasingInFileNames\`设置文件名是否为大小写敏感，默认为\`true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_18、incremental" tabindex="-1"><a class="header-anchor" href="#_18、incremental" aria-hidden="true">#</a> 18、incremental</h3><p><code>incremental</code>让 TypeScript 项目构建时产生文件<code>tsbuildinfo</code>，从而完成增量构建。</p><h3 id="_19、inlinesourcemap" tabindex="-1"><a class="header-anchor" href="#_19、inlinesourcemap" aria-hidden="true">#</a> 19、inlineSourceMap</h3><p><code>inlineSourceMap</code>设置将 SourceMap 文件写入编译后的 JS 文件中，否则会单独生成一个<code>.js.map</code>文件。</p><h3 id="_20、inlinesources" tabindex="-1"><a class="header-anchor" href="#_20、inlinesources" aria-hidden="true">#</a> 20、inlineSources</h3><p><code>inlineSources</code>设置将原始的<code>.ts</code>代码嵌入编译后的 JS 中。</p><blockquote><p>它要求<code>sourceMap</code>或<code>inlineSourceMap</code>至少打开一个</p></blockquote><h3 id="_21、isolatedmodules" tabindex="-1"><a class="header-anchor" href="#_21、isolatedmodules" aria-hidden="true">#</a> 21、isolatedModules</h3><p><code>isolatedModules</code>设置如果当前 TypeScript 脚本作为单个模块编译，是否会因为缺少其他脚本的类型信息而报错，主要便于非官方的编译工具（比如 Babel）正确编译单个脚本。</p><h3 id="_22、jsx" tabindex="-1"><a class="header-anchor" href="#_22、jsx" aria-hidden="true">#</a> 22、jsx</h3><p><code>jsx</code>设置如何处理<code>.tsx</code>文件。它可以取以下五个值。</p><ul><li><code>preserve</code>：保持 jsx 语法不变，输出的文件名为<code>.jsx</code>。</li><li><code>react</code>：将<code>&lt;div /&gt;</code>编译成<code>React.createElement(&quot;div&quot;)</code>，输出的文件名为<code>.js</code>。</li><li><code>react-native</code>：保持 jsx 语法不变，输出的文件后缀名为<code>.js</code>。</li><li><code>react-jsx</code>：将<code>&lt;div /&gt;</code>编译成<code>_jsx(&quot;div&quot;)</code>，输出的文件名为<code>.js</code>。</li><li><code>react-jsxdev</code>：跟<code>react-jsx</code>类似，但是为<code>_jsx()</code>加上更多的开发调试项，输出的文件名为<code>.js</code>。</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;jsx&quot;</span><span class="token operator">:</span> <span class="token string">&quot;preserve&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_23、lib" tabindex="-1"><a class="header-anchor" href="#_23、lib" aria-hidden="true">#</a> 23、lib</h3><p><code>lib</code>值是一个数组，描述项目需要加载的 TypeScript 内置类型描述文件，跟三斜线指令<code>/// &lt;reference lib=&quot;&quot; /&gt;</code>作用相同。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;lib&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;dom&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;es2021&quot;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,146),v={href:"https://github.com/microsoft/TypeScript/tree/main/src/lib",target:"_blank",rel:"noopener noreferrer"},k=a(`<ul><li>ES5</li><li>ES2015</li><li>ES6</li><li>ES2016</li><li>ES7</li><li>ES2017</li><li>ES2018</li><li>ES2019</li><li>ES2020</li><li>ES2021</li><li>ES2022</li><li>ESNext</li><li>DOM</li><li>WebWorker</li><li>ScriptHost</li></ul><h3 id="_24、listemittedfiles" tabindex="-1"><a class="header-anchor" href="#_24、listemittedfiles" aria-hidden="true">#</a> 24、listEmittedFiles</h3><p><code>listEmittedFiles</code>设置编译时在终端显示，生成了哪些文件。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;listEmittedFiles&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_25、listfiles" tabindex="-1"><a class="header-anchor" href="#_25、listfiles" aria-hidden="true">#</a> 25、listFiles</h3><p><code>listFiles</code>设置编译时在终端显示，参与本次编译的文件列表。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;listFiles&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_26、maproot" tabindex="-1"><a class="header-anchor" href="#_26、maproot" aria-hidden="true">#</a> 26、mapRoot</h3><p><code>mapRoot</code>指定 SourceMap 文件的位置，而不是默认的生成位置。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;sourceMap&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">&quot;mapRoot&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://my-website.com/debug/sourcemaps/&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_27、module" tabindex="-1"><a class="header-anchor" href="#_27、module" aria-hidden="true">#</a> 27、module</h3><p><code>module</code>指定编译产物的模块格式。它的默认值与<code>target</code>属性有关，如果<code>target</code>是<code>ES3</code>或<code>ES5</code>，它的默认值是<code>commonjs</code>，否则就是<code>ES6/ES2015</code>。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;commonjs&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 它可以取以下值：none、commonjs、amd、umd、system、es6/es2015、es2020、es2022、esnext、node16、nodenext</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_28、moduleresolution" tabindex="-1"><a class="header-anchor" href="#_28、moduleresolution" aria-hidden="true">#</a> 28、moduleResolution</h3><p><code>moduleResolution</code>确定模块路径的算法，即如何查找模块。它可以取以下四种值。</p>`,15),h=n("li",null,[n("code",null,"node"),s("：采用 Node.js 的 CommonJS 模块算法。")],-1),b=n("li",null,[n("code",null,"node16"),s("或"),n("code",null,"nodenext"),s("：采用 Node.js 的 ECMAScript 模块算法，从 TypeScript 4.7 开始支持。")],-1),g=n("li",null,[n("code",null,"classic"),s("：TypeScript 1.6 之前的算法，新项目不建议使用。")],-1),x=n("code",null,"bundler",-1),y=n("code",null,"module",-1),f=n("code",null,"es2015",-1),q={href:"https://github.com/microsoft/TypeScript/pull/51669",target:"_blank",rel:"noopener noreferrer"},_=a(`<p>它的默认值与<code>module</code>属性有关，如果<code>module</code>为<code>AMD</code>、<code>UMD</code>、<code>System</code>或<code>ES6/ES2015</code>，默认值为<code>classic</code>；如果<code>module</code>为<code>node16</code>或<code>nodenext</code>，默认值为这两个值；其他情况下,默认值为<code>Node</code>。</p><h3 id="_29、modulesuffixes" tabindex="-1"><a class="header-anchor" href="#_29、modulesuffixes" aria-hidden="true">#</a> 29、moduleSuffixes</h3><p><code>moduleSuffixes</code>指定模块的后缀名</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;moduleSuffixes&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;.ios&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.native&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的设置使得 TypeScript 对于语句<code>import * as foo from &quot;./foo&quot;;</code>，会搜索以下脚本<code>./foo.ios.ts</code>、<code>./foo.native.ts</code>和<code>./foo.ts</code></p><h3 id="_30、newline" tabindex="-1"><a class="header-anchor" href="#_30、newline" aria-hidden="true">#</a> 30、newLine</h3><p><code>newLine</code>设置换行符为<code>CRLF</code>（Windows）还是<code>LF</code>（Linux）。</p><h3 id="_31、noemit" tabindex="-1"><a class="header-anchor" href="#_31、noemit" aria-hidden="true">#</a> 31、noEmit</h3><p><code>noEmit</code>设置是否产生编译结果。如果不生成，TypeScript 编译就纯粹作为类型检查了。</p><h3 id="_32、noemithelpers" tabindex="-1"><a class="header-anchor" href="#_32、noemithelpers" aria-hidden="true">#</a> 32、noEmitHelpers</h3><p><code>noEmitHelpers</code>设置在编译结果文件不插入 TypeScript 辅助函数，而是通过外部引入辅助函数来解决，比如 NPM 模块<code>tslib</code>。</p><h3 id="_33、noemitonerror" tabindex="-1"><a class="header-anchor" href="#_33、noemitonerror" aria-hidden="true">#</a> 33、noEmitOnError</h3><p><code>noEmitOnError</code>指定一旦编译报错，就不生成编译产物，默认为<code>false</code>。</p><h3 id="_34、nofallthroughcasesinswitch" tabindex="-1"><a class="header-anchor" href="#_34、nofallthroughcasesinswitch" aria-hidden="true">#</a> 34、noFallthroughCasesInSwitch</h3><p><code>noFallthroughCasesInSwitch</code>设置是否对没有<code>break</code>语句（或者<code>return</code>和<code>throw</code>语句）的 switch 分支报错，即<code>case</code>代码里面必须有终结语句（比如<code>break</code>）。</p><h3 id="_35、noimplicitany" tabindex="-1"><a class="header-anchor" href="#_35、noimplicitany" aria-hidden="true">#</a> 35、noImplicitAny</h3><p><code>noImplicitAny</code>设置当一个表达式没有明确的类型描述、且编译器无法推断出具体类型时，是否允许将它推断为<code>any</code>类型。</p><blockquote><p>它是一个布尔值，默认为<code>true</code>，即只要推断出<code>any</code>类型就报错。</p></blockquote><h3 id="_36、noimplicitreturns" tabindex="-1"><a class="header-anchor" href="#_36、noimplicitreturns" aria-hidden="true">#</a> 36、noImplicitReturns</h3><p><code>noImplicitReturns</code>设置是否要求函数任何情况下都必须返回一个值，即函数必须有<code>return</code>语句。</p><h3 id="_37、noimplicitthis" tabindex="-1"><a class="header-anchor" href="#_37、noimplicitthis" aria-hidden="true">#</a> 37、noImplicitThis</h3><p><code>noImplicitThis</code>设置如果<code>this</code>被推断为<code>any</code>类型是否报错。</p><h3 id="_38、nounusedlocals" tabindex="-1"><a class="header-anchor" href="#_38、nounusedlocals" aria-hidden="true">#</a> 38、noUnusedLocals</h3><p><code>noUnusedLocals</code>设置是否允许未使用的局部变量。</p><h3 id="_39、nounusedparameters" tabindex="-1"><a class="header-anchor" href="#_39、nounusedparameters" aria-hidden="true">#</a> 39、noUnusedParameters</h3><p><code>noUnusedParameters</code>设置是否允许未使用的函数参数。</p><h3 id="_40、outdir" tabindex="-1"><a class="header-anchor" href="#_40、outdir" aria-hidden="true">#</a> 40、outDir</h3><p><code>outDir</code>指定编译产物的存放目录。如果不指定，编译出来的<code>.js</code>文件存放在对应的<code>.ts</code>文件的相同位置。</p><h3 id="_41、outfile" tabindex="-1"><a class="header-anchor" href="#_41、outfile" aria-hidden="true">#</a> 41、outFile</h3><p><code>outFile</code>设置将所有非模块的全局文件，编译在同一个文件里面。它只有在<code>module</code>属性为<code>None</code>、<code>System</code>、<code>AMD</code>时才生效，并且不能用来打包 CommonJS 或 ES6 模块。</p><h3 id="_42、paths" tabindex="-1"><a class="header-anchor" href="#_42、paths" aria-hidden="true">#</a> 42、paths</h3><p><code>paths</code>设置模块名和模块路径的映射，也就是 TypeScript 如何导入<code>require</code>或<code>imports</code>语句加载的模块。</p><p><code>paths</code>基于<code>baseUrl</code>进行加载，所以必须同时设置后者。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;baseUrl&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;paths&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;b&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;bar/b&quot;</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它还可以使用通配符<code>*</code></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;baseUrl&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;paths&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;@bar/*&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;bar/*&quot;</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_43、preserveconstenums" tabindex="-1"><a class="header-anchor" href="#_43、preserveconstenums" aria-hidden="true">#</a> 43、preserveConstEnums</h3><p><code>preserveConstEnums</code>将<code>const enum</code>结构保留下来，不替换成常量值。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;preserveConstEnums&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_44、pretty" tabindex="-1"><a class="header-anchor" href="#_44、pretty" aria-hidden="true">#</a> 44、pretty</h3><p><code>pretty</code>设置美化输出终端的编译信息，默认为<code>true</code>。</p><h3 id="_45、removecomments" tabindex="-1"><a class="header-anchor" href="#_45、removecomments" aria-hidden="true">#</a> 45、removeComments</h3><p><code>removeComments</code>移除 TypeScript 脚本里面的注释，默认为<code>false</code>。</p><h3 id="_46、resolvejsonmodule" tabindex="-1"><a class="header-anchor" href="#_46、resolvejsonmodule" aria-hidden="true">#</a> 46、resolveJsonModule</h3><p><code>resolveJsonModule</code>允许 import 命令导入 JSON 文件。</p><h3 id="_47、rootdir" tabindex="-1"><a class="header-anchor" href="#_47、rootdir" aria-hidden="true">#</a> 47、rootDir</h3><p><code>rootDir</code>设置源码脚本所在的目录，主要跟编译后的脚本结构有关。<code>rootDir</code>对应目录下的所有脚本，会成为输出目录里面的顶层脚本。</p><h3 id="_48、rootdirs" tabindex="-1"><a class="header-anchor" href="#_48、rootdirs" aria-hidden="true">#</a> 48、rootDirs</h3><p><code>rootDirs</code>把多个不同目录，合并成一个目虚拟目录，便于模块定位。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;rootDirs&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;bar&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// rootDirs 将 bar 和 foo 组成一个虚拟目录</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_49、sourcemap" tabindex="-1"><a class="header-anchor" href="#_49、sourcemap" aria-hidden="true">#</a> 49、sourceMap</h3><p><code>sourceMap</code>设置编译时是否生成 SourceMap 文件。</p><h3 id="_50、sourceroot" tabindex="-1"><a class="header-anchor" href="#_50、sourceroot" aria-hidden="true">#</a> 50、sourceRoot</h3><p><code>sourceRoot</code>在 SourceMap 里面设置 TypeScript 源文件的位置。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;sourceMap&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">&quot;sourceRoot&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://my-website.com/debug/source/&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_51、strict" tabindex="-1"><a class="header-anchor" href="#_51、strict" aria-hidden="true">#</a> 51、strict</h3><p><code>strict</code>用来打开 TypeScript 的严格检查。它的值是一个布尔值，默认是关闭的。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;strict&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：</p><p>这个设置相当于同时打开以下的一系列设置</p><ul><li>alwaysStrict</li><li>strictNullChecks</li><li>strictBindCallApply</li><li>strictFunctionTypes</li><li>strictPropertyInitialization</li><li>noImplicitAny</li><li>noImplicitThis</li><li>useUnknownInCatchVaria</li></ul><p>打开<code>strict</code>的时候，允许单独关闭其中一项。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;strict&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">&quot;alwaysStrict&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_52、strictbindcallapply" tabindex="-1"><a class="header-anchor" href="#_52、strictbindcallapply" aria-hidden="true">#</a> 52、strictBindCallApply</h3><p><code>strictBindCallApply</code>设置是否对函数的<code>call()</code>、<code>bind()</code>、<code>apply()</code>这三个方法进行类型检查。</p><p>如果不打开<code>strictBindCallApply</code>编译选项，编译器不会对以上三个方法进行类型检查，参数类型都是<code>any</code>，传入任何参数都不会产生编译错误。</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// strictBindCallApply:false</span>
<span class="token keyword">const</span> n <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 以上不报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_53、strictfunctiontypes" tabindex="-1"><a class="header-anchor" href="#_53、strictfunctiontypes" aria-hidden="true">#</a> 53、strictFunctionTypes</h3><p><code>strictFunctionTypes</code>允许对函数更严格的参数检查。具体来说，如果函数 B 的参数是函数 A 参数的子类型，那么函数 B 不能替代函数 A。</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, &quot;</span> <span class="token operator">+</span> x<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">StringOrNumberFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span>ns<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>

<span class="token comment">// 打开 strictFunctionTypes，下面代码会报错</span>
<span class="token keyword">let</span> func<span class="token operator">:</span> StringOrNumberFunc <span class="token operator">=</span> fn<span class="token punctuation">;</span>

<span class="token comment">// 函数 fn() 的参数是 StringOrNumberFunc 参数的子集，因此 fn 不能替代 StringOrNumberFunc</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_54、strictnullchecks" tabindex="-1"><a class="header-anchor" href="#_54、strictnullchecks" aria-hidden="true">#</a> 54、strictNullChecks</h3><p><code>strictNullChecks</code>设置对<code>null</code>和<code>undefined</code>进行严格类型检查。如果打开<code>strict</code>属性，这一项就会自动设为<code>true</code>，否则为<code>false</code>。</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">let</span> value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

<span class="token comment">// strictNullChecks:false</span>
<span class="token comment">// 下面语句不报错</span>
value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它可以理解成只要打开，就需要显式检查<code>null</code>或<code>undefined</code>。</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// do nothing</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, &quot;</span> <span class="token operator">+</span> x<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_55、strictpropertyinitialization" tabindex="-1"><a class="header-anchor" href="#_55、strictpropertyinitialization" aria-hidden="true">#</a> 55、strictPropertyInitialization</h3><p><code>strictPropertyInitialization</code>设置类的实例属性都必须初始化，包括以下几种情况。</p><ul><li>设为<code>undefined</code>类型</li><li>显式初始化</li><li>构造函数中赋值</li></ul><blockquote><p>注意，使用该属性的同时，必须打开<code>strictNullChecks</code>。</p></blockquote><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// strictPropertyInitialization：true</span>
<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  <span class="token comment">// 报错，属性 username 没有初始化</span>
  username<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 解决方法一</span>
<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  username <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 解决方法二</span>
<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  username<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 解决方法三</span>
<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  username<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span>username<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 或者</span>
<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> username<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 解决方法四：赋值断言</span>
<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  username<span class="token operator">!</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span>username<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">private</span> <span class="token function">initialize</span><span class="token punctuation">(</span>username<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_56、suppressexcesspropertyerrors" tabindex="-1"><a class="header-anchor" href="#_56、suppressexcesspropertyerrors" aria-hidden="true">#</a> 56、suppressExcessPropertyErrors</h3><p><code>suppressExcessPropertyErrors</code>关闭对象字面量的多余参数的报错。</p><h3 id="_57、target" tabindex="-1"><a class="header-anchor" href="#_57、target" aria-hidden="true">#</a> 57、target</h3><p><code>target</code>指定编译出来的 JavaScript 代码的 ECMAScript 版本，比如<code>es2021</code>，默认是<code>es3</code>。</p><p>它可以取以下值。</p><ul><li>es3</li><li>es5</li><li>es6/es2015</li><li>es2016</li><li>es2017</li><li>es2018</li><li>es2019</li><li>es2020</li><li>es2021</li><li>es2022</li><li>esnext</li></ul><p>注意，如果编译的目标版本过老，比如<code>&quot;target&quot;: &quot;es3&quot;</code>，有些语法可能无法编译，<code>tsc</code>命令会报错。</p><h3 id="_58、traceresolution" tabindex="-1"><a class="header-anchor" href="#_58、traceresolution" aria-hidden="true">#</a> 58、traceResolution</h3><p><code>traceResolution</code>设置编译时，在终端输出模块解析的具体步骤。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;traceResolution&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_59、typeroots" tabindex="-1"><a class="header-anchor" href="#_59、typeroots" aria-hidden="true">#</a> 59、typeRoots</h3><p><code>typeRoots</code>设置类型模块所在的目录，默认是<code>node_modules/@types</code>，该目录里面的模块会自动加入编译。一旦指定了该属性，就不会再用默认值<code>node_modules/@types</code>里面的类型模块。</p><p>该属性的值是一个数组，数组的每个成员就是一个目录，它们的路径是相对于<code>tsconfig.json</code>位置。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;typeRoots&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;./typings&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;./vendor/types&quot;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_60、types" tabindex="-1"><a class="header-anchor" href="#_60、types" aria-hidden="true">#</a> 60、types</h3><p>默认情况下，<code>typeRoots</code>目录下所有模块都会自动加入编译，如果指定了<code>types</code>属性，那么只有其中列出的模块才会自动加入编译。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;types&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;node&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jest&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;express&quot;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：</p><p>上面的设置表示，默认情况下，只有<code>./node_modules/@types/node</code>、<code>./node_modules/@types/jest</code>和<code>./node_modules/@types/express</code>会自动加入编译，其他<code>node_modules/@types/</code>目录下的模块不会加入编译。</p><blockquote><p>如果<code>&quot;types&quot;: []</code>，就表示不会自动将所有<code>@types</code>模块加入编译。</p></blockquote><h3 id="_61、useunknownincatchvariables" tabindex="-1"><a class="header-anchor" href="#_61、useunknownincatchvariables" aria-hidden="true">#</a> 61、useUnknownInCatchVariables</h3><p><code>useUnknownInCatchVariables</code>设置<code>catch</code>语句捕获的<code>try</code>抛出的返回值类型，从<code>any</code>变成<code>unknown</code>。</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token function">someExternalFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  err<span class="token punctuation">;</span> <span class="token comment">// 类型 any</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>上面示例中，默认情况下，<code>catch</code>语句的参数<code>err</code>类型是<code>any</code>，即可以是任何值。</p></blockquote><p>打开<code>useUnknownInCatchVariables</code>以后，<code>err</code>的类型抛出的错误将是<code>unknown</code>类型。这带来的变化就是使用<code>err</code>之前，必须缩小它的类型，否则会报错。</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token function">someExternalFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token keyword">instanceof</span> <span class="token class-name">Error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、tsc-命令行编译器" tabindex="-1"><a class="header-anchor" href="#四、tsc-命令行编译器" aria-hidden="true">#</a> 四、tsc 命令行编译器</h2><p>tsc 是 TypeScript 官方的命令行编译器，用来检查代码，并将其编译成 JavaScript 代码。</p><p>tsc 默认使用当前目录下的配置文件<code>tsconfig.json</code>，但也可以接受独立的命令行参数。命令行参数会覆盖<code>tsconfig.json</code>，比如命令行指定了所要编译的文件，那么 tsc 就会忽略<code>tsconfig.json</code>的<code>files</code>属性。</p><h3 id="_1、tsc-的基本语法" tabindex="-1"><a class="header-anchor" href="#_1、tsc-的基本语法" aria-hidden="true">#</a> 1、tsc 的基本语法</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 使用 tsconfig.json 的配置</span>
$ tsc

<span class="token comment"># 只编译 index.ts</span>
$ tsc index.ts

<span class="token comment"># 编译 src 目录的所有 .ts 文件</span>
$ tsc src/*.ts

<span class="token comment"># 指定编译配置文件</span>
$ tsc <span class="token parameter variable">--project</span> tsconfig.production.json

<span class="token comment"># 只生成类型声明文件，不编译出 JS 文件</span>
$ tsc index.js <span class="token parameter variable">--declaration</span> <span class="token parameter variable">--emitDeclarationOnly</span>

<span class="token comment"># 多个 TS 文件编译成单个 JS 文件</span>
$ tsc app.ts util.ts <span class="token parameter variable">--target</span> esnext <span class="token parameter variable">--outfile</span> index.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、命令行参数" tabindex="-1"><a class="header-anchor" href="#_2、命令行参数" aria-hidden="true">#</a> 2、命令行参数</h3><p>tsc 的命令行参数，大部分与 <code>tsconfig.json</code> 的属性一一对应。</p><p>下面只是按照首字母排序，简单罗列出主要的一些参数，详细解读查阅以上《tsconfig.json 配置文件》部分</p><h3 id="_2-1、-all" tabindex="-1"><a class="header-anchor" href="#_2-1、-all" aria-hidden="true">#</a> 2.1、--all</h3><p><code>--all</code>：输出所有可用的参数</p><h3 id="_2-2、-allowjs" tabindex="-1"><a class="header-anchor" href="#_2-2、-allowjs" aria-hidden="true">#</a> 2.2、--allowJs</h3><p><code>--allowJs</code>：允许 TS 脚本加载 JS 模块，编译时将 JS 一起拷贝到输出目录</p><h3 id="_2-3、-allowunreachablecode" tabindex="-1"><a class="header-anchor" href="#_2-3、-allowunreachablecode" aria-hidden="true">#</a> 2.3、--allowUnreachableCode</h3><p><code>--allowUnreachableCode</code>：如果 TS 脚本有不可能运行到的代码，不报错</p><h3 id="_2-4、-allowunusedlabels" tabindex="-1"><a class="header-anchor" href="#_2-4、-allowunusedlabels" aria-hidden="true">#</a> 2.4、--allowUnusedLabels</h3><p><code>--allowUnusedLabels</code>：如果 TS 脚本有没有用到的标签，不报错</p><h3 id="_2-5、-alwaysstrict" tabindex="-1"><a class="header-anchor" href="#_2-5、-alwaysstrict" aria-hidden="true">#</a> 2.5、--alwaysStrict</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>--alwaysStrict\`：总是在编译产物的头部添加\`use strict
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-6、-baseurl" tabindex="-1"><a class="header-anchor" href="#_2-6、-baseurl" aria-hidden="true">#</a> 2.6、--baseUrl</h3><p><code>--baseUrl</code>：指定非相对位置的模块定位的基准 URL</p><h3 id="_2-7、-build" tabindex="-1"><a class="header-anchor" href="#_2-7、-build" aria-hidden="true">#</a> 2.7、--build</h3><p><code>--build</code>：启用增量编译</p><h3 id="_2-8、-checkjs" tabindex="-1"><a class="header-anchor" href="#_2-8、-checkjs" aria-hidden="true">#</a> 2.8、--checkJs</h3><p><code>--checkJs</code>：对 JS 脚本进行类型检查</p><h3 id="_2-9、-declaration" tabindex="-1"><a class="header-anchor" href="#_2-9、-declaration" aria-hidden="true">#</a> 2.9、--declaration</h3><p><code>--declaration</code>：为 TS 脚本生成一个类型生成文件</p><h3 id="_3-0、-declarationdir" tabindex="-1"><a class="header-anchor" href="#_3-0、-declarationdir" aria-hidden="true">#</a> 3.0、--declarationDir</h3><p><code>--declarationDir</code>：指定生成的类型声明文件的所在目录</p><h3 id="_3-1、-declarationmap" tabindex="-1"><a class="header-anchor" href="#_3-1、-declarationmap" aria-hidden="true">#</a> 3.1、--declarationMap</h3><p><code>--declarationMap</code>：为<code>.d.ts</code>文件生成 SourceMap 文件</p><h3 id="_3-2、-diagnostics" tabindex="-1"><a class="header-anchor" href="#_3-2、-diagnostics" aria-hidden="true">#</a> 3.2、--diagnostics</h3><p><code>--diagnostics</code>：构建后输出编译性能信息</p><h3 id="_3-3、-emitbom" tabindex="-1"><a class="header-anchor" href="#_3-3、-emitbom" aria-hidden="true">#</a> 3.3、--emitBOM</h3><p><code>--emitBOM</code>：在编译输出的 UTF-8 文件头部加上 BOM 标志</p><h3 id="_3-4、-emitdeclarationonly" tabindex="-1"><a class="header-anchor" href="#_3-4、-emitdeclarationonly" aria-hidden="true">#</a> 3.4、--emitDeclarationOnly</h3><p><code>--emitDeclarationOnly</code>：只编译输出类型声明文件，不输出 JS 文件</p><h3 id="_3-5、-esmoduleinterop" tabindex="-1"><a class="header-anchor" href="#_3-5、-esmoduleinterop" aria-hidden="true">#</a> 3.5、--esModuleInterop</h3><p><code>--esModuleInterop</code>：更容易使用 import 命令加载 CommonJS 模块</p><h3 id="_3-6、-exactoptionalpropertytypes" tabindex="-1"><a class="header-anchor" href="#_3-6、-exactoptionalpropertytypes" aria-hidden="true">#</a> 3.6、--exactOptionalPropertyTypes</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>--exactOptionalPropertyTypes\`：不允许将可选属性设置为\`undefined
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-7、-experimentaldecorators" tabindex="-1"><a class="header-anchor" href="#_3-7、-experimentaldecorators" aria-hidden="true">#</a> 3.7、--experimentalDecorators</h3><p><code>--experimentalDecorators</code>：支持早期的装饰器语法</p><h3 id="_3-8、-explainfiles" tabindex="-1"><a class="header-anchor" href="#_3-8、-explainfiles" aria-hidden="true">#</a> 3.8、--explainFiles</h3><p><code>--explainFiles</code>：输出进行编译的文件信息</p><h3 id="_3-9、-forceconsistentcasinginfilenames" tabindex="-1"><a class="header-anchor" href="#_3-9、-forceconsistentcasinginfilenames" aria-hidden="true">#</a> 3.9、--forceConsistentCasingInFileNames</h3><p><code>--forceConsistentCasingInFileNames</code>：文件名大小写敏感，默认打开</p><h3 id="_4-0、-help" tabindex="-1"><a class="header-anchor" href="#_4-0、-help" aria-hidden="true">#</a> 4.0、--help</h3><p><code>--help</code>：输出帮助信息、</p><h3 id="_4-1、-importhelpers" tabindex="-1"><a class="header-anchor" href="#_4-1、-importhelpers" aria-hidden="true">#</a> 4.1、--importHelpers</h3><p><code>--importHelpers</code>：从外部库（比如 tslib）输入辅助函数</p><h3 id="_4-2、-incremental" tabindex="-1"><a class="header-anchor" href="#_4-2、-incremental" aria-hidden="true">#</a> 4.2、--incremental</h3><p><code>--incremental</code>：启用增量构建</p><h3 id="_4-3、-init" tabindex="-1"><a class="header-anchor" href="#_4-3、-init" aria-hidden="true">#</a> 4.3、--init</h3><p><code>--init</code>：在当前目录创建一个全新的<code>tsconfig.json</code>文件，里面是预设的设置</p><h3 id="_4-4、-inlinesourcemap" tabindex="-1"><a class="header-anchor" href="#_4-4、-inlinesourcemap" aria-hidden="true">#</a> 4.4、--inlineSourceMap</h3><p><code>--inlineSourceMap</code>：SourceMap 信息嵌入 JS 文件，而不是生成独立的<code>.js.map</code>文件</p><h3 id="_4-5、-inlinesources" tabindex="-1"><a class="header-anchor" href="#_4-5、-inlinesources" aria-hidden="true">#</a> 4.5、--inlineSources</h3><p><code>--inlineSources</code>：将 TypeScript 源码作为 SourceMap 嵌入编译出来的 JS 文件</p><h3 id="_4-6、-isolatedmodules" tabindex="-1"><a class="header-anchor" href="#_4-6、-isolatedmodules" aria-hidden="true">#</a> 4.6、--isolatedModules</h3><p><code>--isolatedModules</code>：确保每个模块能够独立编译，不依赖其他输入的模块</p><h3 id="_4-7、-jsx" tabindex="-1"><a class="header-anchor" href="#_4-7、-jsx" aria-hidden="true">#</a> 4.7、--jsx</h3><p><code>--jsx</code>：设置如何处理 JSX 文件</p><h3 id="_4-8、-lib" tabindex="-1"><a class="header-anchor" href="#_4-8、-lib" aria-hidden="true">#</a> 4.8、--lib</h3><p><code>--lib</code>：设置目标环境需要哪些内置库的类型描述</p><h3 id="_4-9、-listemittedfiles" tabindex="-1"><a class="header-anchor" href="#_4-9、-listemittedfiles" aria-hidden="true">#</a> 4.9、--listEmittedFiles</h3><p><code>--listEmittedFiles</code>：编译后输出编译产物的文件名</p><h3 id="_5-0、-listfiles" tabindex="-1"><a class="header-anchor" href="#_5-0、-listfiles" aria-hidden="true">#</a> 5.0、--listFiles</h3><p><code>--listFiles</code>：编译过程中，列出读取的文件名</p><h3 id="_5-1、-listfilesonly" tabindex="-1"><a class="header-anchor" href="#_5-1、-listfilesonly" aria-hidden="true">#</a> 5.1、--listFilesOnly</h3><p><code>--listFilesOnly</code>：列出编译所要处理的文件，然后停止编译</p><h3 id="_5-2、-locale" tabindex="-1"><a class="header-anchor" href="#_5-2、-locale" aria-hidden="true">#</a> 5.2、--locale</h3><p><code>--locale</code>：指定编译时输出的语言，不影响编译结果</p><h3 id="_5-3、-maproot" tabindex="-1"><a class="header-anchor" href="#_5-3、-maproot" aria-hidden="true">#</a> 5.3、--mapRoot</h3><p><code>--mapRoot</code>：指定 SourceMap 文件的位置</p><h3 id="_5-4、-module" tabindex="-1"><a class="header-anchor" href="#_5-4、-module" aria-hidden="true">#</a> 5.4、--module</h3><p><code>--module</code>：指定编译生成的模块格式</p><h3 id="_5-5、-moduleresolution" tabindex="-1"><a class="header-anchor" href="#_5-5、-moduleresolution" aria-hidden="true">#</a> 5.5、--moduleResolution</h3><p><code>--moduleResolution</code>：指定如何根据模块名找到模块的位置</p><h3 id="_5-6、-modulesuffixes" tabindex="-1"><a class="header-anchor" href="#_5-6、-modulesuffixes" aria-hidden="true">#</a> 5.6、--moduleSuffixes</h3><p><code>--moduleSuffixes</code>：指定模块文件的后缀名</p><h3 id="_5-7、-newline" tabindex="-1"><a class="header-anchor" href="#_5-7、-newline" aria-hidden="true">#</a> 5.7、--newLine</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>--newLine\`：指定编译产物的换行符，可以设为\`crlf\`或者\`lf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-8、-noemit" tabindex="-1"><a class="header-anchor" href="#_5-8、-noemit" aria-hidden="true">#</a> 5.8、--noEmit</h3><p><code>--noEmit</code>：不生成编译产物，只进行类型检查</p><h3 id="_5-9、-noemithelpers" tabindex="-1"><a class="header-anchor" href="#_5-9、-noemithelpers" aria-hidden="true">#</a> 5.9、--noEmitHelpers</h3><p><code>--noEmitHelpers</code>：不在编译产物中加入辅助函数</p><h3 id="_6-0、-noemitonerror" tabindex="-1"><a class="header-anchor" href="#_6-0、-noemitonerror" aria-hidden="true">#</a> 6.0、--noEmitOnError</h3><p><code>--noEmitOnError</code>：一旦报错，就停止编译，没有编译产物。</p><h3 id="_6-1、-nofallthroughcasesinswitch" tabindex="-1"><a class="header-anchor" href="#_6-1、-nofallthroughcasesinswitch" aria-hidden="true">#</a> 6.1、--noFallthroughCasesInSwitch</h3><p><code>--noFallthroughCasesInSwitch</code>：Switch 结构的<code>case</code>分支必须有终止语句（比如<code>break</code>）</p><h3 id="_6-2、-noimplicitany" tabindex="-1"><a class="header-anchor" href="#_6-2、-noimplicitany" aria-hidden="true">#</a> 6.2、--noImplicitAny</h3><p><code>--noImplicitAny</code>：类型推断只要为<code>any</code>类型就报错</p><h3 id="_6-3、-noimplicitreturns" tabindex="-1"><a class="header-anchor" href="#_6-3、-noimplicitreturns" aria-hidden="true">#</a> 6.3、--noImplicitReturns</h3><p><code>--noImplicitReturns</code>：函数内部没有显式返回语句（比如<code>return</code>）就报错</p><h3 id="_6-4、-noimplicitthis" tabindex="-1"><a class="header-anchor" href="#_6-4、-noimplicitthis" aria-hidden="true">#</a> 6.4、--noImplicitThis</h3><p><code>--noImplicitThis</code>：如果<code>this</code>关键字是<code>any</code>类型，就报错</p><h3 id="_6-5、-noimplicitusestrict" tabindex="-1"><a class="header-anchor" href="#_6-5、-noimplicitusestrict" aria-hidden="true">#</a> 6.5、--noImplicitUseStrict</h3><p><code>--noImplicitUseStrict</code>：编译产生的 JS 文件头部不添加<code>use strict</code>语句</p><h3 id="_6-6、-noresolve" tabindex="-1"><a class="header-anchor" href="#_6-6、-noresolve" aria-hidden="true">#</a> 6.6、--noResolve</h3><p><code>--noResolve</code>：不进行模块定位，除非该模块是由命令行传入</p><h3 id="_6-7、-nounusedlocals" tabindex="-1"><a class="header-anchor" href="#_6-7、-nounusedlocals" aria-hidden="true">#</a> 6.7、--noUnusedLocals</h3><p><code>--noUnusedLocals</code>：如果有未使用的局部变量就报错</p><h3 id="_6-8、-nounusedparameters" tabindex="-1"><a class="header-anchor" href="#_6-8、-nounusedparameters" aria-hidden="true">#</a> 6.8、--noUnusedParameters</h3><p><code>--noUnusedParameters</code>：如果有未使用的函数参数就报错</p><h3 id="_6-9、-outdir" tabindex="-1"><a class="header-anchor" href="#_6-9、-outdir" aria-hidden="true">#</a> 6.9、--outDir</h3><p><code>--outDir</code>：指定编译产物的存放目录</p><h3 id="_7-0、-outfile" tabindex="-1"><a class="header-anchor" href="#_7-0、-outfile" aria-hidden="true">#</a> 7.0、--outFile</h3><p><code>--outFile</code>：所有编译产物打包成一个指定文件</p><h3 id="_7-1、-preserveconstenums" tabindex="-1"><a class="header-anchor" href="#_7-1、-preserveconstenums" aria-hidden="true">#</a> 7.1、--preserveConstEnums</h3><p><code>--preserveConstEnums</code>：不将<code>const enum</code>结构在生成的代码中，替换成常量</p><h3 id="_7-2、-preservewatchoutput" tabindex="-1"><a class="header-anchor" href="#_7-2、-preservewatchoutput" aria-hidden="true">#</a> 7.2、--preserveWatchOutput</h3><p><code>--preserveWatchOutput</code>： watch 模式下不清屏</p><h3 id="_7-3、-pretty" tabindex="-1"><a class="header-anchor" href="#_7-3、-pretty" aria-hidden="true">#</a> 7.3、--pretty</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>--pretty\`：美化显示编译时的终端输出。这是默认值，但是可以关闭\`--pretty false
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_7-4、-project" tabindex="-1"><a class="header-anchor" href="#_7-4、-project" aria-hidden="true">#</a> 7.4、--project</h3><p><code>--project</code>（或者<code>-p</code>）：指定编译配置文件，或者该文件所在的目录</p><h3 id="_7-5、-removecomments" tabindex="-1"><a class="header-anchor" href="#_7-5、-removecomments" aria-hidden="true">#</a> 7.5、--removeComments</h3><p><code>--removeComments</code>：编译结果中移除代码注释</p><h3 id="_7-6、-resolvejsonmodule" tabindex="-1"><a class="header-anchor" href="#_7-6、-resolvejsonmodule" aria-hidden="true">#</a> 7.6、--resolveJsonModule</h3><p><code>--resolveJsonModule</code>：允许加载 JSON 文件</p><h3 id="_7-7、-rootdir" tabindex="-1"><a class="header-anchor" href="#_7-7、-rootdir" aria-hidden="true">#</a> 7.7、--rootDir</h3><p><code>--rootDir</code>：指定加载文件所在的根目录，该目录里面的目录结构会被复制到输出目录</p><h3 id="_7-8、-rootdirs" tabindex="-1"><a class="header-anchor" href="#_7-8、-rootdirs" aria-hidden="true">#</a> 7.8、--rootDirs</h3><p><code>--rootDirs</code>：允许模块定位时，多个目录被当成一个虚拟目录</p><h3 id="_7-9、-skipdefaultlibcheck" tabindex="-1"><a class="header-anchor" href="#_7-9、-skipdefaultlibcheck" aria-hidden="true">#</a> 7.9、--skipDefaultLibCheck</h3><p><code>--skipDefaultLibCheck</code>：跳过 TypeScript 内置类型声明文件的类型检查</p><h3 id="_8-0、-skiplibcheck" tabindex="-1"><a class="header-anchor" href="#_8-0、-skiplibcheck" aria-hidden="true">#</a> 8.0、--skipLibCheck</h3><p><code>--skipLibCheck</code>：跳过<code>.d.ts</code>类型声明文件的类型检查。这样可以加快编译速度</p><h3 id="_8-1、-showconfig" tabindex="-1"><a class="header-anchor" href="#_8-1、-showconfig" aria-hidden="true">#</a> 8.1、--showConfig</h3><p><code>--showConfig</code>：终端输出编译配置信息，而不进行配置</p><h3 id="_8-2、-sourcemap" tabindex="-1"><a class="header-anchor" href="#_8-2、-sourcemap" aria-hidden="true">#</a> 8.2、--sourcemap</h3><p><code>--sourcemap</code>：为编译产生的 JS 文件生成 SourceMap 文件（<code>.map</code> 文件）</p><h3 id="_8-3、-sourceroot" tabindex="-1"><a class="header-anchor" href="#_8-3、-sourceroot" aria-hidden="true">#</a> 8.3、--sourceRoot</h3><p><code>--sourceRoot</code>：指定 SourceMap 文件里面的 TypeScript 源码根目录位置</p><h3 id="_8-4、-strict" tabindex="-1"><a class="header-anchor" href="#_8-4、-strict" aria-hidden="true">#</a> 8.4、--strict</h3><p><code>--strict</code>：打开 TypeScript 严格检查模式</p><h3 id="_8-5、-strictbindcallapply" tabindex="-1"><a class="header-anchor" href="#_8-5、-strictbindcallapply" aria-hidden="true">#</a> 8.5、--strictBindCallApply</h3><p><code>--strictBindCallApply</code>：bind, call、apply 这三个函数的类型，匹配原始函数</p><h3 id="_8-6、-strictfunctiontypes" tabindex="-1"><a class="header-anchor" href="#_8-6、-strictfunctiontypes" aria-hidden="true">#</a> 8.6、--strictFunctionTypes</h3><p><code>--strictFunctionTypes</code>：如果函数 B 的参数是函数 A 参数的子类型，那么函数 B 不能替代函数 A</p><h3 id="_8-7、-strictnullchecks" tabindex="-1"><a class="header-anchor" href="#_8-7、-strictnullchecks" aria-hidden="true">#</a> 8.7、--strictNullChecks</h3><p><code>--strictNullChecks</code>：对<code>null</code>和<code>undefined</code>进行严格类型检查</p><h3 id="_8-8、-strictpropertyinitialization" tabindex="-1"><a class="header-anchor" href="#_8-8、-strictpropertyinitialization" aria-hidden="true">#</a> 8.8、--strictPropertyInitialization</h3><p><code>--strictPropertyInitialization</code>：类的属性必须进行初始值，但是允许在构造函数里面赋值</p><h3 id="_8-9、-suppressexcesspropertyerrors" tabindex="-1"><a class="header-anchor" href="#_8-9、-suppressexcesspropertyerrors" aria-hidden="true">#</a> 8.9、--suppressExcessPropertyErrors</h3><p><code>--suppressExcessPropertyErrors</code>：关闭对象字面量的多余参数的报错</p><h3 id="_9-0、-target" tabindex="-1"><a class="header-anchor" href="#_9-0、-target" aria-hidden="true">#</a> 9.0、--target</h3><p><code>--target</code>：指定编译出来的 JS 代码的版本，TypeScript 还会在编译时自动加入对应的库类型声明文件</p><h3 id="_9-1、-traceresolution" tabindex="-1"><a class="header-anchor" href="#_9-1、-traceresolution" aria-hidden="true">#</a> 9.1、--traceResolution</h3><p><code>--traceResolution</code>：编译时在终端输出模块解析（moduleResolution）的具体步骤</p><h3 id="_9-2、-typeroots" tabindex="-1"><a class="header-anchor" href="#_9-2、-typeroots" aria-hidden="true">#</a> 9.2、--typeRoots</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>--typeRoots\`：设置类型模块所在的目录，替代默认的\`node_modules/@types
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_9-3、-types" tabindex="-1"><a class="header-anchor" href="#_9-3、-types" aria-hidden="true">#</a> 9.3、--types</h3><p><code>--types</code>：设置<code>typeRoots</code>目录下需要包括在编译之中的类型模块</p><h3 id="_9-4、-version" tabindex="-1"><a class="header-anchor" href="#_9-4、-version" aria-hidden="true">#</a> 9.4、--version</h3><p><code>--version</code>：终端输出 tsc 的版本号</p><h3 id="_9-5、-watch" tabindex="-1"><a class="header-anchor" href="#_9-5、-watch" aria-hidden="true">#</a> 9.5、--watch</h3><p><code>--watch</code>（或者<code>-w</code>）：进入观察模式，只要文件有修改，就会自动重新编译</p>`,264);function j(S,w){const e=c("ExternalLinkIcon");return i(),p("div",null,[d,n("blockquote",null,[n("p",null,[r,s("空间下包含的完整 tsconfig 文件目录，可以查看 "),n("a",u,[s("GitHub(opens new window)"),o(e)])])]),m,n("p",null,[s("TypeScript 内置的类型描述文件，主要有以下一些，完整的清单可以参考 "),n("a",v,[s("TypeScript 源码 (opens new window)"),o(e)]),s("。")]),k,n("ul",null,[h,b,g,n("li",null,[x,s("：TypeScript 5.0 新增的选项，表示当前代码会被其他打包器（比如 Webpack、Vite、esbuild、Parcel、rollup、swc）处理，从而放宽加载规则，它要求"),y,s("设为"),f,s("或更高版本，详见加入该功能的 "),n("a",q,[s("PR 说明 (opens new window)"),o(e)]),s("。")])]),_])}const J=t(l,[["render",j],["__file","TypeScript zhushizhiling，tsconfig.json，tsc minglingxingbianjiqi.html.vue"]]);export{J as default};
