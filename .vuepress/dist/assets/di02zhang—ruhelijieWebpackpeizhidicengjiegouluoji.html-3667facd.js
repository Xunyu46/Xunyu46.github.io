import{_ as o,r as p,o as c,c as i,b as e,d as n,e as a,a as t}from"./app-48690364.js";const l={},r=t(`<p>Webpack 5 提供了非常强大、灵活的模块打包功能，配合其成熟生态下数量庞大的插件、Loader 资源，已经能够满足大多数前端项目的工程化需求，<strong>但代价则是日益复杂、晦涩的使用方法</strong>，开发者通常需要根据项目环境、资源类型、编译目标编写一份复杂的配置文件，用以定制资源打包行为。</p><p>问题是，仅 Webpack 原生配置项就多达上百种，且各项之间缺乏一致性与关联度，对初学者而言单是掌握每一个配置的作用与变种就已经很难，更不用说理解配置与配置之间的协作关系。</p><p>对此，本章将尝试通过一种结构化视角分类讨论 Webpack 各个核心配置项的功能与作用；再用一个简单的例子介绍配置项结构的逻辑；最后介绍一些业界比较知名，能迅速生成项目脚手架的工具。</p><h2 id="结构化理解-webpack-配置项" tabindex="-1"><a class="header-anchor" href="#结构化理解-webpack-配置项" aria-hidden="true">#</a> 结构化理解 Webpack 配置项</h2><p>Webpack 原生提供了上百种配置项，这些配置最终都会作用于 Webpack 打包过程的不同阶段，因此我们可以从流程角度更框架性、结构化地了解各项配置的作用。</p><p>Webpack 的打包过程非常复杂，但大致上可简化为：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/784ef02a144a4b3ebfbcbe13b06ac7bb~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><ul><li><strong>输入</strong>：从文件系统读入代码文件；</li><li><strong>模块递归处理</strong>：调用 Loader 转译 Module 内容，并将结果转换为 AST，从中分析出模块依赖关系，进一步递归调用模块处理过程，直到所有依赖文件都处理完毕；</li><li><strong>后处理</strong>：所有模块递归处理完毕后开始执行后处理，包括模块合并、注入运行时、产物优化等，最终输出 Chunk 集合；</li><li><strong>输出</strong>：将 Chunk 写出到外部文件系统；</li></ul><p>从上述打包流程角度，Webpack 配置项大体上可分为两类：</p><ul><li><strong>流程类</strong>：作用于打包流程某个或若干个环节，直接影响编译打包效果的配置项</li><li><strong>工具类</strong>：打包主流程之外，提供更多工程化工具的配置项</li></ul><blockquote><p>流程类配置项综述</p></blockquote><p>与打包流程强相关的配置项有：</p><ul><li>输入输出： <ul><li><code>entry</code>：用于定义项目入口文件，Webpack 会从这些入口文件开始按图索骥找出所有项目文件；</li><li><code>context</code>：项目执行上下文路径；</li><li><code>output</code>：配置产物输出路径、名称等；</li></ul></li><li>模块处理： <ul><li><code>resolve</code>：用于配置模块路径解析规则，可用于帮助 Webpack 更精确、高效地找到指定模块</li><li><code>module</code>：用于配置模块加载规则，例如针对什么类型的资源需要使用哪些 Loader 进行处理</li><li><code>externals</code>：用于声明外部资源，Webpack 会直接忽略这部分资源，跳过这些资源的解析、打包操作</li></ul></li><li>后处理： <ul><li><code>optimization</code>：用于控制如何优化产物包体积，内置 Dead Code Elimination、Scope Hoisting、代码混淆、代码压缩等功能</li><li><code>target</code>：用于配置编译产物的目标运行环境，支持 web、node、electron 等值，不同值最终产物会有所差异</li><li><code>mode</code>：编译模式短语，支持 <code>development</code>、<code>production</code> 等值，可以理解为一种声明环境的短语</li></ul></li></ul><p>这里的重点是，Webpack <strong>首先</strong>需要根据输入配置(<code>entry/context</code>) 找到项目入口文件；<strong>之后</strong>根据按模块处理(<code>module/resolve/externals</code> 等) 所配置的规则逐一处理模块文件，处理过程包括转译、依赖分析等；模块处理完毕后，最后<strong>再根据</strong>后处理相关配置项(<code>optimization/target</code> 等)合并模块资源、注入运行时依赖、优化产物结构等。</p><p>这些配置项与打包流程强相关，建议学习时多关注它们对主流程的影响，例如 <code>entry</code> 决定了项目入口，而 <code>output</code> 则决定产物最终往哪里输出；<code>resolve</code> 决定了怎么找到模块，而 <code>module</code> 决定了如何解读模块内容，等等。</p><blockquote><p>工具类配置项综述</p></blockquote><p>除了核心的打包功能之外，Webpack 还提供了一系列用于提升研发效率的工具，大体上可划分为：</p><ul><li>开发效率类： <ul><li><code>watch</code>：用于配置持续监听文件变化，持续构建</li><li><code>devtool</code>：用于配置产物 Sourcemap 生成规则</li><li><code>devServer</code>：用于配置与 HMR 强相关的开发服务器功能</li></ul></li><li>性能优化类： <ul><li><code>cache</code>：Webpack 5 之后，该项用于控制如何缓存编译过程信息与编译结果</li><li><code>performance</code>：用于配置当产物大小超过阈值时，如何通知开发者</li></ul></li><li>日志类： <ul><li><code>stats</code>：用于精确地控制编译过程的日志内容，在做比较细致的性能调试时非常有用</li><li><code>infrastructureLogging</code>：用于控制日志输出方式，例如可以通过该配置将日志输出到磁盘文件</li></ul></li><li>等等</li></ul><p>逻辑上，每一个工具类配置都在主流程之外提供额外的工程化能力，例如 <code>devtool</code> 用于配置产物 Sourcemap 生成规则，与 Sourcemap 强相关；<code>devServer</code> 用于配置与 HMR 相关的开发服务器功能；<code>watch</code> 用于实现持续监听、构建。</p><p>工具类配置内聚性较强，通常一个配置项专注于解决一类工程问题，学习时建议先对配置项按其功能做个简单分类，例如上述开发效率类、性能优化类等，之后再展开研究其可选值与效果。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/02ccea1194e045689143011ef62ff553~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>综上，虽然 Webpack 提供了上百项复杂配置，但大体上都可以归类为流程类配置或工具类配置，对于流程类配置应该多关注它们对编译主流程的影响；而工具类则更加内聚，基本上一种配置项解决一种工程化问题。</p><p>除了上面提到的属性外，Webpack 还提供了诸如 <code>amd</code>、<code>bail</code>、<code>dependencies</code> 等配置项，但使用频率较低，此处先不展开讨论。</p><h2 id="配置逻辑综合解析" tabindex="-1"><a class="header-anchor" href="#配置逻辑综合解析" aria-hidden="true">#</a> 配置逻辑综合解析</h2><p>接下来，我们构造一个简单示例，了解设计一个 Webpack 配置的过程，示例文件结构：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>.
├── src
|   └── index.js
└── webpack.config.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>src/index.js</code> 为项目入口文件，<code>webpack.config.js</code> 为 Webpack 配置文件。在配置文件中，首先我们需要声明项目入口：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&quot;./src/index&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后，还需要声明产物输出路径：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&quot;./src/index&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;[name].js&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;./dist&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，已经足够驱动一个最简单项目的编译工作。但是，在前端项目中经常需要处理 JS 之外的其它资源，包括 css、ts、图片等，此时需要为这些资源配置适当的加载器：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&quot;./src/index&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;[name].js&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;./dist&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
      <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.less$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">include</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">and</span><span class="token operator">:</span> <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./src/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">&quot;style-loader&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;css-loader&quot;</span><span class="token punctuation">,</span>
        <span class="token comment">// &quot;./loader&quot;,</span>
        <span class="token punctuation">{</span>
          <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&quot;less-loader&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到这里已经是一个简单但足够完备的配置结构了，接下来还可以根据需要使用其它工程化工具，例如使用 <code>devtool</code> 生成 Sourcemap 文件；使用 <code>watch</code> 持续监听文件变化并随之重新构建。后面章节会展开细节，此处不赘述。</p><h2 id="脚手架工具" tabindex="-1"><a class="header-anchor" href="#脚手架工具" aria-hidden="true">#</a> 脚手架工具</h2><p>上述概览只是对从流程角度对 Webpack 配置项做了一个简单的分类总结，实际应用中往往需要牵涉更多 Loader、Plugin，加之性能、效率方面的考虑，配置复杂度往往会随项目推进而极速膨胀，届时配置管理会变得比较困难。为此，社区提供了许多用于快捷管理配置的工具，包括：</p>`,35),u={href:"https://cli.vuejs.org/guide/",target:"_blank",rel:"noopener noreferrer"},d={href:"https://reactjs.org/docs/create-a-new-react-app.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://angular.io/cli",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.npmjs.com/package/webpack-cli",target:"_blank",rel:"noopener noreferrer"},b={href:"https://neutrinojs.org/installation/create-new-project/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/kriasoft/react-starter-kit",target:"_blank",rel:"noopener noreferrer"},g={href:"https://reactjs.org/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://relay.dev/",target:"_blank",rel:"noopener noreferrer"},f={href:"https://graphql.org/",target:"_blank",rel:"noopener noreferrer"},_={href:"https://cli.vuejs.org/guide/",target:"_blank",rel:"noopener noreferrer"},j={href:"https://reactjs.org/docs/create-a-new-react-app.html",target:"_blank",rel:"noopener noreferrer"},y={id:"使用-vue-cli-搭建项目脚手架",tabindex:"-1"},x=e("a",{class:"header-anchor",href:"#使用-vue-cli-搭建项目脚手架","aria-hidden":"true"},"#",-1),W={href:"https://cli.vuejs.org/guide/",target:"_blank",rel:"noopener noreferrer"},w={href:"https://cli.vuejs.org/",target:"_blank",rel:"noopener noreferrer"},q={href:"https://cli.vuejs.org/",target:"_blank",rel:"noopener noreferrer"},V=e("code",null,".vue",-1),C={href:"https://cli.vuejs.org/",target:"_blank",rel:"noopener noreferrer"},L=t(`<p>与其它工具类似，使用 Vue CLI 时首先需要安装依赖：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> @vue/cli

<span class="token comment"># 或者使用 yarn</span>
<span class="token function">yarn</span> global <span class="token function">add</span> @vue/cli
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>安装完毕后，可以使用 <code>vue -V</code> 测试是否安装成功：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d212c315f0f44ca49178e6e9a8c695c9~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>接下来，使用 <code>vue create</code> 命令创建项目：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>vue create <span class="token punctuation">[</span>项目名<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>提示：可使用 <code>vue create --help</code> 命令查看 <code>create</code> 的参数列表</p></blockquote><p>执行 <code>create</code> 命令后，CLI 会进一步询问使用何种脚手架方案：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Vue CLI v4.5.15
? Please pick a preset: <span class="token punctuation">(</span>Use arrow keys<span class="token punctuation">)</span>
❯ Default <span class="token punctuation">(</span><span class="token punctuation">[</span>Vue <span class="token number">2</span><span class="token punctuation">]</span> babel, eslint<span class="token punctuation">)</span>
  Default <span class="token punctuation">(</span>Vue <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>Vue <span class="token number">3</span><span class="token punctuation">]</span> babel, eslint<span class="token punctuation">)</span>
  Manually <span class="token keyword">select</span> features
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里 Vue CLI 内置了为 Vue 2、Vue 3 分别定制的脚手架方案，对应上述第一、二项，不过这两种方案默认只会包含 Babel、Eslint 工具，实用性不强。所以结合项目的实际需求，通常会选择第三个选项 &quot;Manually select features&quot; 定制各项特性：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5e0f2b01c9864747a63f212c6fee355e~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p>`,11),I={href:"https://cli.vuejs.org/",target:"_blank",rel:"noopener noreferrer"},S=t(`<p>经过上述步骤后，Vue CLI 最终都会生成对应的文件并自动安装依赖，之后就可以使用 <code>serve</code> 命令启动项目：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> run serve
<span class="token comment"># 或者</span>
<span class="token function">yarn</span> serve
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>顺利的话，最终会运行起页面如：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/040c12736c64414f9c9390ea31eaae59~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>Vue CLI 底层依赖于 Webpack 实现编译打包等工程化能力，开发者可通过 <code>configureWebpack</code> 与 <code>chainWebpack</code> 配置项修改 Webpack 配置信息。</p><p>以 <code>configureWebpack</code> 为例，使用时需要在 <code>vue.config.js</code> 文件中写入配置：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vue.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">configureWebpack</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token keyword">new</span> <span class="token class-name">MyAwesomeWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),R=e("code",null,"configureWebpack",-1),z=e("code",null,"plugins/module/resolve",-1),A={href:"https://github.com/survivejs/webpack-merge",target:"_blank",rel:"noopener noreferrer"},E=e("code",null,"configureWebpack",-1),M=e("code",null,"chainWebpack",-1),H=e("code",null,"configureWebpack",-1),T={href:"https://github.com/neutrinojs/webpack-chain",target:"_blank",rel:"noopener noreferrer"},D=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vue.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">chainWebpack</span><span class="token operator">:</span> <span class="token parameter">config</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    config<span class="token punctuation">.</span>module
      <span class="token punctuation">.</span><span class="token function">rule</span><span class="token punctuation">(</span><span class="token string">&#39;vue&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;vue-loader&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token parameter">options</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token comment">// modify the options...</span>
          <span class="token keyword">return</span> options
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),N={href:"https://cli.vuejs.org/guide/webpack.html#simple-configuration",target:"_blank",rel:"noopener noreferrer"},B=t(`<p>Vue CLI 在 Webpack 基础上包装多一层更易用的功能结构，这确实能极速提升研发效率与体验，但代价则是我们完全不清楚其内部运作细节，这会导致开发者比较难做一些深度定制或者性能优化，此时可使用 <code>inspect</code> 命令生成完整的 Webpack 配置信息：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>vue inspect &gt; output.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>inspect</code> 命令执行完毕后，会生成内容如：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dbe1cb77ffa0492cb32d5236cc0e22f0~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>此外，<code>inspect</code> 还提供许多根据不同条件生成配置的参数，例如针对编译环境生成配置：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>vue inspect --mode production &gt; output.prod.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>更多用法，可查阅帮助文档：<code>vue inspect --help</code>。</p>`,7),J={id:"使用-cra-搭建项目脚手架",tabindex:"-1"},P=e("a",{class:"header-anchor",href:"#使用-cra-搭建项目脚手架","aria-hidden":"true"},"#",-1),F={href:"https://reactjs.org/docs/create-a-new-react-app.html",target:"_blank",rel:"noopener noreferrer"},G={href:"https://reactjs.org/docs/create-a-new-react-app.html",target:"_blank",rel:"noopener noreferrer"},Q=t(`<p>CRA 用法同样简单：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npx create-react-app my-app
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行完毕后，生成项目文件：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>my-app
├── README.md
├── node_modules
├── package.json
├── .gitignore
├── public
│   ├── favicon.ico
│   ├── index.html
│   └── manifest.json
└── src
    ├── App.css
    ├── App.js
    ├── App.test.js
    ├── index.css
    ├── index.js
    ├── logo.svg
    └── serviceWorker.js
    └── setupTests.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后，进入 <code>my-app</code> 目录执行 <code>npm start</code> 命令即可运行项目。</p>`,5),U={href:"https://github.com/facebook/create-react-app",target:"_blank",rel:"noopener noreferrer"},X=e("p",null,"默认规则创建的脚手架包含如下工程能力：",-1),$=e("li",null,"JSX、ES6、TypeScript、Flow 语法支持",-1),K=e("li",null,[n("CSS 自动添加 "),e("code",null,"--webkit--"),n(" 前缀")],-1),O={href:"https://jestjs.io/",target:"_blank",rel:"noopener noreferrer"},Y=e("li",null,"支持 HMR 的开发服务器",-1),Z={href:"https://github.com/nitishdayal/cra_closer_look",target:"_blank",rel:"noopener noreferrer"},nn=t(`<p>必要时，读者也可以通过 <code>npm run eject</code> 命令导出完整的项目配置结构：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>my-app
├─ .gitignore
├─ README.md
├─ config
│  ├─ env.js
│  ├─ getHttpsConfig.js
│  ├─ jest
│  │  ├─ babelTransform.js
│  │  ├─ cssTransform.js
│  │  └─ fileTransform.js
│  ├─ modules.js
│  ├─ paths.js
│  ├─ webpack
│  │  └─ persistentCache
│  │     └─ createEnvironmentHash.js
│  ├─ webpack.config.js
│  └─ webpackDevServer.config.js
├─ package-lock.json
├─ package.json
├─ node_modules
├─ ...
└─ src
   ├─ ...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>导出配置后，直接修改 <code>webpack.config.js</code> 等相关配置文件即可控制各项功能行为。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>Webpack 配置项的用法虽然比较复杂难懂，但通常可以分为流程类或工具类，流程类配置项通常会直接影响 Webpack 打包编译的规则；而工具类相对比较独立，通常用于在编译主流程之外提供额外的工程化能力。</p>`,5),en={href:"https://cli.vuejs.org/guide/",target:"_blank",rel:"noopener noreferrer"},sn={href:"https://reactjs.org/docs/create-a-new-react-app.html",target:"_blank",rel:"noopener noreferrer"},an={href:"https://angular.io/cli",target:"_blank",rel:"noopener noreferrer"},tn=e("h2",{id:"思考题",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#思考题","aria-hidden":"true"},"#"),n(" 思考题")],-1),on=e("p",null,"工具类与流程类配置有什么区别？分别有什么特点？",-1);function pn(cn,ln){const s=p("ExternalLinkIcon");return c(),i("div",null,[r,e("ul",null,[e("li",null,[e("a",u,[n("Vue CLI"),a(s)]),n("：用于帮助用户快速创建、运行 Vue.js 项目脚手架的命令行工具；")]),e("li",null,[e("a",d,[n("create-react-app"),a(s)]),n("：用于创建 React 项目脚手架的命令行工具；")]),e("li",null,[e("a",v,[n("@angular/cli"),a(s)]),n("：用于创建 angular 项目的命令行工具；")]),e("li",null,[e("a",k,[n("webpack-cli"),a(s)]),n("：Webpack 官方提供的命令行工具，提供了一套交互式生成配置文件的指令集，以及项目编译、开发、迁移等功能；")]),e("li",null,[e("a",b,[n("Neutrino"),a(s)]),n("：用于快速创建、运行现代 JavaScript 应用的工具，同时支持 React、Preact、Vue、Web、Node.js、Library 等场景；")]),e("li",null,[e("a",m,[n("react-starter-kit"),a(s)]),n("：用于创建 "),e("a",g,[n("React"),a(s)]),n(" + "),e("a",h,[n("Relay"),a(s)]),n(" + "),e("a",f,[n("GraphQL"),a(s)]),n(" 应用的脚手架工具，内置 SSR 支持。")])]),e("p",null,[n("这些工具都内置了许多开箱即用的工程化能力，开发者无需从 0 开始学习 Webpack 与各种工程化组件，就可以直接使用工具一键生成足够应对中小型项目需求的工程化环境。下面我们逐一展开介绍 "),e("a",_,[n("Vue CLI"),a(s)]),n("、"),e("a",j,[n("create-react-app"),a(s)]),n("，你可根据技术栈需要侧重学习。")]),e("h2",y,[x,n(" 使用 "),e("a",W,[n("Vue CLI"),a(s)]),n(" 搭建项目脚手架")]),e("p",null,[e("a",w,[n("Vue CLI"),a(s)]),n(" 全称 Vue.js Command-Line Interface，是由 Vue 核心团队开发，用于帮助用户快速创建、运行 Vue.js 项目脚手架的命令行工具。实现上，"),e("a",q,[n("Vue CLI"),a(s)]),n(" 底层调用 Webpack 实现针对 "),V,n(" 等资源的编译打包功能；调用 webpack-dev-server 实现包含 HMR 功能的开发服务器功能；还能通过插件方式整合 ESLint、Babal、Less 等工具。")]),e("p",null,[n("总之， "),e("a",C,[n("Vue CLI"),a(s)]),n(" 提供了全套开箱即用的 Vue 项目开发、调试环境，开发者可以跳过繁琐复杂的环境配置过程，而专注于业务代码开发上。")]),L,e("blockquote",null,[e("p",null,[n("提示：具体用法，请参考 "),e("a",I,[n("Vue CLI"),a(s)]),n(" 官网：https://cli.vuejs.org/")])]),S,e("p",null,[R,n(" 的配置规则与 Webpack 一致，同样支持 "),z,n(" 等配置项。实际上，Vue CLI 内部最终会调用 "),e("a",A,[n("webpack-merge"),a(s)]),n(" 将 "),E,n(" 值与其它上下文配置合并，生成最终的 Webpack 配置信息。")]),e("p",null,[M,n(" 的用法与 "),H,n(" 一致，区别仅在于此处支持 "),e("a",T,[n("webpack-chain"),a(s)]),n(" 语法 —— 即以函数方式链式修改 Webpack 配置：")]),D,e("blockquote",null,[e("p",null,[n("提示：更多信息可参考 Vue CLI 官网 "),e("strong",null,[e("a",N,[n("Working with Webpack"),a(s)])]),n(" 一节。")])]),B,e("h2",J,[P,n(" 使用 "),e("a",F,[n("CRA"),a(s)]),n(" 搭建项目脚手架")]),e("p",null,[e("a",G,[n("CRA"),a(s)]),n(" 全称 Create React Application，同样是用于帮助用户快速创建、运行 React 项目脚手架的命令行工具，功能、底层实现、用法都与 Vue CLI 相似，都提供了全套开箱即用的 React 项目开发、调试环境。")]),Q,e("blockquote",null,[e("p",null,[n("提示：更多用法，请参考 "),e("a",U,[n("CRA 官网"),a(s)]),n("： https://github.com/facebook/create-react-app。")])]),X,e("ul",null,[$,K,e("li",null,[n("基于 "),e("a",O,[n("Jest"),a(s)]),n(" 的自动化测试能力")]),Y,e("li",null,[n("等等，具体可参考"),e("a",Z,[n("官网"),a(s)])])]),nn,e("p",null,[n("此外，为了降低 Webpack 的应用成本，社区已经出现了不少优秀的脚手架工具，包括 "),e("a",en,[n("Vue CLI"),a(s)]),n("、"),e("a",sn,[n("create-react-app"),a(s)]),n("、"),e("a",an,[n("@angular/cli"),a(s)]),n(" 等，读者可在具体技术栈上下文下使用适当工具，简化工程化管理。")]),tn,on])}const un=o(l,[["render",pn],["__file","di02zhang—ruhelijieWebpackpeizhidicengjiegouluoji.html.vue"]]);export{un as default};
