import{_ as e,r as o,o as c,c as l,b as n,d as a,e as t,a as p}from"./app-48690364.js";const i={},u=p(`<h1 id="javascript-继承的-6-种方式、应用场景-内置构造函数" tabindex="-1"><a class="header-anchor" href="#javascript-继承的-6-种方式、应用场景-内置构造函数" aria-hidden="true">#</a> JavaScript 继承的 6 种方式、应用场景，内置构造函数</h1><p>本章节我们开始学习继承相关的内容，我们会从以下几个方面展开讲解</p><ul><li>什么是继承</li><li>JavaScript 实现继承的 6 种方式 <ul><li>原型链实现继承</li><li>借用构造函数（经典继承）</li><li>组合继承</li><li>原型式继承</li><li>寄生式继承</li><li>寄生式组合继承</li></ul></li><li>常用的内置构造函数</li></ul><h2 id="一、什么是继承呢" tabindex="-1"><a class="header-anchor" href="#一、什么是继承呢" aria-hidden="true">#</a> 一、什么是继承呢 ？</h2><ul><li>首先继承是一种关系，类（Class）与类之间的关系</li><li>JS 中没有类,但是可以通过<strong>构造函数模拟类</strong>，然后通过原型来实现继承。</li><li>继承是为了<strong>实现数据共享</strong>，同时对于<strong>实现代码的复用</strong>非常有用</li></ul><blockquote><p>我们先来看下面两个类</p></blockquote><p><img src="https://www.arryblog.com/assets/img/image-20220109134146856.007dbee2.png" alt="image-20220109134146856"></p><p>解说</p><ul><li><code>People</code>类拥有的属性和方法<code>Student</code>类都有，同时<code>Student</code>类还扩展了一些自已独有的属性和方法</li><li>我们可以按上图结构定义<code>People</code>类，然后再定义一个<code>Student</code>类，在<code>Student</code>类上只需要定义<code>People</code>类上没有的属性和方法。</li><li>然后用<code>Student</code>类<strong>继承</strong><code>People</code>类，这样<code>Student</code>类就可以直接拥有<code>People</code>类的所有属性和方法了</li></ul><blockquote><p>Student 类继承 People 类，在这个继承关系中</p><ul><li>People 类称为”父类“（或 “超类”、“基类”）</li><li>Student 类称为“子类”（或 ”派生类“）</li><li>Student 子类可以访问 People 父类的所有属性和方法</li><li>Student &quot; 是 一种&quot; People ，两个继承类之间是<code>“is a kind of”</code>关系</li></ul></blockquote><p>继承描述了两个类之间的<code>“ is a kind of &quot;关系</code>，也就是两个类之间存在<code>&quot; is a kind of &quot;</code>关系，就可以实现继承。</p><blockquote><p>如下</p></blockquote><table><thead><tr><th style="text-align:left;">父类</th><th style="text-align:left;">子类</th></tr></thead><tbody><tr><td style="text-align:left;">人类</td><td style="text-align:left;">学生类、医生类、教师类、...</td></tr><tr><td style="text-align:left;">动物类</td><td style="text-align:left;"><strong>狗类</strong>、猫类、老虎类、<strong>鸟类</strong></td></tr><tr><td style="text-align:left;">鸟类</td><td style="text-align:left;">鹦鹉类、麻雀类、猫头鹰类</td></tr><tr><td style="text-align:left;">狗类</td><td style="text-align:left;">二哈类、牧羊犬类、拉布拉多类、泰迪类</td></tr></tbody></table><blockquote><p>接下来，我们来学习下，如何实现类与类之间的继承关系。</p></blockquote><p>JavaScript 实现继承有以下 6 种方式</p><ul><li>原型链实现继承</li><li>借用构造函数（经典继承）</li><li>组合继承</li><li>原型式继承</li><li>寄生式继承</li><li>寄生式组合继承</li></ul><blockquote><p><strong>实现继承的关键在于：</strong> 子类必须拥有父类的<strong>全部公有（属性和方法）</strong>，同时子类还应该能定义自己特有的属性和方法</p></blockquote><h2 id="二、通过原型链实现继承" tabindex="-1"><a class="header-anchor" href="#二、通过原型链实现继承" aria-hidden="true">#</a> 二、通过原型链实现继承</h2><p>接下来，我们来学习下，如何利用原型链实现 <code>Student</code>类 <strong>继承</strong> <code>People</code>类</p><p><img src="https://www.arryblog.com/assets/img/image-20220109134146856.007dbee2.png" alt="image-20220109134146856"></p><h3 id="_1、原型链实现继承的本质" tabindex="-1"><a class="header-anchor" href="#_1、原型链实现继承的本质" aria-hidden="true">#</a> 1、原型链实现继承的本质</h3><p>让子类构造函数的 prototype ，指向父类的一个实例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 子类 Student 父类 People</span>
<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 以上原型链方式实现继承，Student 的实例，就可以访问 Popele类原型上的所有方法和属性</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过前面的学习我们知道，每个构造函数都有一个 prototype 属性，这个属性指向一个对象。</li><li>构造函数构造出来的实例对象，可以访问构造函数 prototype 属性上所有方法和属性。</li><li>如果 <strong><code>子类构造函数.prototype = 父类的实例</code></strong> ，那<strong>子类的实例</strong> 就可以通过原型链查找，访问到父类构造函数原型 prototype 上面的所有属性和方法。</li></ul><h3 id="_1-1、student-类继承-people-类关系图" tabindex="-1"><a class="header-anchor" href="#_1-1、student-类继承-people-类关系图" aria-hidden="true">#</a> 1.1、Student 类继承 People 类关系图</h3><p><img src="https://www.arryblog.com/assets/img/image-20220109160201709.2355d950.png" alt="image-20220109160201709"></p><p>本质</p><p>原型链实现继承本质上是扩展了<strong>原型的搜索机制</strong>。</p><ul><li>实例在访问某个属性时，会在自己身上找，找不到，就会去原型上找</li><li>原型上找不到，就会去<strong>继承的实例的原型</strong>上去找，一层层向上找，找到就不找</li><li>找不到就会一直找到原型链的终点（Object 原型的原型，为 null）</li></ul><blockquote><p>Student 类 与 People 类 通过原型链实现继承，代码如下</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 父类  人类</span>
<span class="token keyword">function</span> <span class="token function">People</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">People</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayHello</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
    <span class="token string">&quot;我是&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot;今年&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">&quot;岁，我是&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">+</span> <span class="token string">&quot;生&quot;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">People</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sleep</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot;开始睡觉了zzzzz&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 子类  学生类</span>
<span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> scholl<span class="token punctuation">,</span> sid</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>scholl <span class="token operator">=</span> scholl<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>sid <span class="token operator">=</span> sid<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 实现继承   一定要先实现继承，再添加新的方法和属性</span>
<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">study</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot;正在学习！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">exam</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot;正在考试，加油！！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 创建父类 实例</span>
<span class="token keyword">var</span> laoliu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token string">&quot;老刘&quot;</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token string">&quot;男&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
laoliu<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建子类实例</span>
<span class="token keyword">var</span> cuihua <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;翠花&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">&quot;女&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;雅礼中学&quot;</span><span class="token punctuation">,</span> <span class="token number">20800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cuihua<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cuihua<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cuihua<span class="token punctuation">.</span><span class="token function">exam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cuihua<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/image-20221115224403914.9f574ea4.png" alt="image-20221115224403914"></p><h3 id="_2、注意事项-1-重写父类方法" tabindex="-1"><a class="header-anchor" href="#_2、注意事项-1-重写父类方法" aria-hidden="true">#</a> 2、注意事项 1 - 重写父类方法</h3><ul><li>子类有时候需要覆盖父类的方法，或者增加父类没有的方法。这些方法必须在原型赋值之后再添加到原型上去。</li><li>子类覆盖父类上没有的方法，我们称为 <strong>重写</strong> （override）父类方法</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 以下代码必需写在 Student.prototype = new People(); 之后</span>
<span class="token comment">// 也可以重写（override）父类的 sayHello方法</span>
<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayHello</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;大家好，我是&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scholl <span class="token operator">+</span> <span class="token string">&quot;学校的学生,我叫&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-、注意事项-2-子类的-constructor-指向问题" tabindex="-1"><a class="header-anchor" href="#_3-、注意事项-2-子类的-constructor-指向问题" aria-hidden="true">#</a> 3 、注意事项 2 - 子类的 constructor 指向问题</h3><ul><li>因为 <code>Student.prototype=new People()</code></li><li>则<code>Student.prototype</code>中的<code>constructor</code>属性被重写为指向<code>People</code></li><li>即<code>Student</code>的所有实例访问到的<code>constructor</code>都指向<code>People</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">===</span> People<span class="token punctuation">;</span> <span class="token comment">// true</span>
cuihua<span class="token punctuation">.</span>constructor <span class="token operator">===</span> People<span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、注意事项-3-instanceof" tabindex="-1"><a class="header-anchor" href="#_4、注意事项-3-instanceof" aria-hidden="true">#</a> 4、注意事项 3 - instanceof</h3><ul><li>instanceof 操作符确认 实例与构造函数的关系</li><li>如果实例的原型链中出现过对应的构造函数的原型，则实例为对应构造函数的实例</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cuihua <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
cuihua <span class="token keyword">instanceof</span> <span class="token class-name">People</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
cuihua <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、注意事项-4" tabindex="-1"><a class="header-anchor" href="#_5、注意事项-4" aria-hidden="true">#</a> 5、注意事项 4</h3><ul><li>任意函数的<strong>默认</strong><code>prototype</code>原型都是一个 Object 的实例</li><li>这就意味着函数的默认原型中有一个<code>__proto__</code>属性指向<code>Object.prototype</code></li><li>这就为什么自定义类型能继承（访问）Object 原型上的<code>toString()</code>、<code>valueOf()</code>等方法的原型</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token class-name">People</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/image-20221115231512866.c3c33618.png" alt="image-20221115231512866"></p><h3 id="_6、原型链实现继承的不足之一" tabindex="-1"><a class="header-anchor" href="#_6、原型链实现继承的不足之一" aria-hidden="true">#</a> 6、原型链实现继承的不足之一</h3><ul><li>如果原型中某个属性的值是<strong>引用类型值</strong>时,这个值会被所有实例共享。当实例修改这个属性值时，其它实例身上对应的这个属性值也被改变了</li><li>这也是为什么属性通常会在构造函数中定义，而不会定义在原型上的原因</li><li>原型链实现继承，子类的原型实际上变成父类的实例，则就意味父类实例身上的属性变成了子类原型属性</li><li>所有子类的实例都能访问这个属性</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 超类 （父类）</span>
<span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;red&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;blue&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;yellow&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 子类</span>
<span class="token keyword">function</span> <span class="token function">subType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

subType<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> sub1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">subType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> sub2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">subType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

sub1<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// 修改值，相当于重写属性（遮蔽效应）</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sub1<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sub2<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>

sub1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;green&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 修改数组中值</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sub1<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  [&#39;red&#39;, &#39;blue&#39;, &#39;yellow&#39;, &#39;green&#39;]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sub2<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;red&#39;, &#39;blue&#39;, &#39;yellow&#39;, &#39;green&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7、原型链实现继承的不足之二" tabindex="-1"><a class="header-anchor" href="#_7、原型链实现继承的不足之二" aria-hidden="true">#</a> 7、原型链实现继承的不足之二</h3><p>子类在实例化时，不能给父类的构造函数传参。 也就意味着，子类不能应用父类已有的属性，而需要自己重写一份</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> scholl<span class="token punctuation">,</span> sid</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>scholl <span class="token operator">=</span> scholl<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>sid <span class="token operator">=</span> sid<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、借用构造函数-经典继承" tabindex="-1"><a class="header-anchor" href="#三、借用构造函数-经典继承" aria-hidden="true">#</a> 三、借用构造函数（经典继承）</h2><ul><li>为了解决<strong>子类原型中包含引用类型值</strong>所带来问题和在<strong>子类构造函数中不能给父类构造函数传参</strong>的问题</li><li>开发人员通常使用一种叫做 <strong>&quot;借用构造函数&quot;</strong> 的技术，也被称为 <strong>“伪造对象”</strong> 或 <strong>“经典继承”</strong></li></ul><h3 id="_1、借用构造函数的基本思路" tabindex="-1"><a class="header-anchor" href="#_1、借用构造函数的基本思路" aria-hidden="true">#</a> 1、借用构造函数的基本思路</h3><ul><li>在子类构造函数内部调用父类的构造函数</li><li>但要注意使用<code>call</code>或<code>apply</code>方法将新创建的对象作为父类构造函数的上下文对象</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">People</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> age<span class="token punctuation">,</span> school<span class="token punctuation">,</span> sid</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 借用构造函数</span>
  <span class="token function">People</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>school <span class="token operator">=</span> school<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>sid <span class="token operator">=</span> sid<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> cuihua <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;翠花&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;女&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">&quot;雅礼中学&quot;</span><span class="token punctuation">,</span> <span class="token number">20230106</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cuihua<span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cuihua<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cuihua<span class="token punctuation">.</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> dandan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;蛋蛋&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;女&quot;</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">&quot;雅礼中学&quot;</span><span class="token punctuation">,</span> <span class="token number">20231897</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dandan<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dandan<span class="token punctuation">.</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/image-20221116001801093.f548efba.png" alt="image-20221116001801093"></p><h3 id="_2、借用构造函数实现继承的不足之处" tabindex="-1"><a class="header-anchor" href="#_2、借用构造函数实现继承的不足之处" aria-hidden="true">#</a> 2、借用构造函数实现继承的不足之处</h3><ul><li>如果采用借用构造函数的方式实现继承，是没有办法把父类原型上的方法继承过来，只能继承父类构造函数中的属性</li><li>如果要把父类上的方法继承过来，那父类的方法就必需定义在构造函数内部，之显然是不合理的</li></ul><h2 id="四、组合继承" tabindex="-1"><a class="header-anchor" href="#四、组合继承" aria-hidden="true">#</a> 四、组合继承</h2><ul><li>将<strong>原型链实现继承</strong>和<strong>借用构造函数实现继承</strong>的技术组合到一起，这样就可以将两者的优点集中起来</li><li>这种继承方式，叫做 <code>&quot;组合继承&quot;</code> ，也叫作<code>&quot;伪经典继承&quot;</code></li></ul><h3 id="_1、组合继承的基本思路" tabindex="-1"><a class="header-anchor" href="#_1、组合继承的基本思路" aria-hidden="true">#</a> 1、组合继承的基本思路</h3><ul><li>使用原型链继承来实现继承父类原型上的属性和方法</li><li>借用构造函数来实现继承父类实例上的属性</li></ul><blockquote><p>这样就可以把父类的方法定义在原型上，实现重用。同时又可以让每个实例都有自己的属性。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 父类  人类</span>
<span class="token keyword">function</span> <span class="token function">People</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">People</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayHello</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
    <span class="token string">&quot;我是&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot;今年&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">&quot;岁，我是&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">+</span> <span class="token string">&quot;生&quot;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">People</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sleep</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot;开始睡觉了zzzzz&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 子类  学生类</span>
<span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> scholl<span class="token punctuation">,</span> sid</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 借用构造函数 实现继承</span>
  <span class="token function">People</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>scholl <span class="token operator">=</span> scholl<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>sid <span class="token operator">=</span> sid<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 借用原型链 实现继承</span>
<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">study</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot;正在学习！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">exam</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot;正在考试，加油！！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 创建父类 实例</span>
<span class="token keyword">var</span> laoliu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token string">&quot;老刘&quot;</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token string">&quot;男&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
laoliu<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
laoliu<span class="token punctuation">.</span>a<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;我是老刘的&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>laoliu<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建子类实例</span>
<span class="token keyword">var</span> cuihua <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;翠花&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">&quot;女&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;雅礼中学&quot;</span><span class="token punctuation">,</span> <span class="token number">20800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cuihua<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cuihua<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cuihua<span class="token punctuation">.</span><span class="token function">exam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cuihua<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cuihua<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>组合式继承是 JavaScript 中使用最多的继承模式。但也有不足之处。</p></blockquote><h3 id="_2、组合继承的不足之处" tabindex="-1"><a class="header-anchor" href="#_2、组合继承的不足之处" aria-hidden="true">#</a> 2、组合继承的不足之处</h3><p>组合继承最大的问题就是无论什么情况下，都会调用 <strong>两次父（超）类的构造函数</strong></p><ul><li>一次是在创建子类原型的时候，如</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Student</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用父类构造函数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>另一次是在子类构造函数的内部，如</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">People</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用父类的构造函数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>子类原型中的<code>constructor</code>被丢失，当访问子类原型中的 constructor 时，其本质是通过原型链查找，最终查找到的是父类的构造函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">===</span> People<span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>关于组合继承的不足之处如何解决，我们在后面会讲到</p></blockquote><h2 id="五、原型式继承" tabindex="-1"><a class="header-anchor" href="#五、原型式继承" aria-hidden="true">#</a> 五、原型式继承</h2><p><strong>重点强调</strong>：原型式继承是一种不涉及严格意义上构造函数的继承方法</p><h3 id="_1、原型式继承适用场景" tabindex="-1"><a class="header-anchor" href="#_1、原型式继承适用场景" aria-hidden="true">#</a> 1、原型式继承适用场景</h3><ul><li>如果你有一个对象，想在它的基础上再创建一个新对象</li><li>现有对象 obj1，现希望在创建一个 obj2 对象，obj2 需要继承 obj1 实例身上的所有方法和属性</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;C&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token function-variable function">sum</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>obj2 要能继承 obj1 身上的所有方法和属性，则<code>obj2.__proto__</code>属性需要指向 obj1</li><li>我们知道<code>obj2.__proto__</code>指向的是<code>obj2</code>的构造函数的<code>prototype</code>，则说明<code>obj2</code>肯定是要用构造函数构造出来。</li><li>同时<code>obj2</code>的<strong>构造函数</strong>的<code>prototype=obj1</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token class-name">Fn</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> obj1<span class="token punctuation">;</span>
<span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>我们可以把上面的代码封装成一个函数，这个函数接受一个<strong>参数</strong>（原型指向的对象）</li><li>当我们调用这个函数时，就会创建出一个新的对象，同时这个对象的原型指向函数的参数。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createObject</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token class-name">Fn</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> o<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>原型式继承：完整版代码</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;C&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token function-variable function">sum</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">createObject</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token class-name">Fn</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> o<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token function">createObject</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 以obj1为原型，创建一个新对象</span>
<span class="token keyword">var</span> obj3 <span class="token operator">=</span> <span class="token function">createObject</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>
obj2<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 新对象添加自已的属性</span>
obj2<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// 重写原型上属性 a</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {c: 3, a: 4}</span>
obj2<span class="token punctuation">.</span>b<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;obj2新加&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj2<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4  [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;obj2新加&#39;]</span>
obj1<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;obj2新加&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意事项</p><ul><li>以上方法创建出来的多个对象会共享 原型上的引用类型属性</li><li>其中一个对象修改了这个引用类型中的值，相当于所有创建出来的对象上的这个属性值都改变了</li></ul><h3 id="_2、object-create-方法" tabindex="-1"><a class="header-anchor" href="#_2、object-create-方法" aria-hidden="true">#</a> 2、Object.create 方法</h3><ul><li>ECMAScript5 增加了<code>Object.create()</code>方法将原型式继承的概念规范化了</li><li><code>Object.create()</code>方法用于创建一个新对象，使用现有的对象来作为新创建对象的原型（prototype）</li></ul><p><strong>语法</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>proto<span class="token punctuation">[</span><span class="token punctuation">,</span>propertiesObject<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>proto 为新创建对象的原型对象</li><li>propertiesObject 可选参数，给新对象定义额外属性的对象。 他与 <code>Object.defineProperties()</code>的第二个参数一样，每个新增属性都通过各自的描述符来描述。以这种方式添加的属性会遮蔽原型对象上的同名属性</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;C&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token function-variable function">sum</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> obj2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token keyword">var</span> obj3 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {b:4}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj3<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-1、注意事项" tabindex="-1"><a class="header-anchor" href="#_2-1、注意事项" aria-hidden="true">#</a> 2.1、注意事项</h3><p><code>Object.create(proto)</code>中的 proto，只能是 <code>null</code> 或 <code>对象类型</code>，否则会抛出<code>TypeError</code>异常</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 报错</span>
Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不报错</span>
Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 报错</span>
Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Object.defineProperties(newObj,propertiesObject)</code>中的第二个参数，不能是<code>null</code>和<code>undefined</code>，字符串，否则会报错。实际上只要这里传的不是一个对象，就没有意义</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 报错</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、手写-object-create-方法-经典面试题" tabindex="-1"><a class="header-anchor" href="#_3、手写-object-create-方法-经典面试题" aria-hidden="true">#</a> 3、手写 Object.create 方法（经典面试题）</h3><ul><li>面试中经常会要求我们手写 <code>Object.create</code> 方法</li><li>当<code>Object.create()</code>只有一个参数时，其作用与上面我们自已封装的<code>createObject()</code>方法效果一样，所以我们只需要在<code>createObject</code>的基础上来完善第二个参数的相关功能等</li></ul><p><strong>完善的功能：</strong></p><ul><li>判断传入的<code>proto</code>是否为<code>对象</code>或<code>null</code></li><li>利用<code>Ojbect.defineProperties(newObj,propertiesObject)</code>来实现第二个参数功能</li><li>同时要判断 <code>propertiesObject</code> 是否是一个对象</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Object<span class="token punctuation">.</span><span class="token function-variable function">_create</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">proto<span class="token punctuation">,</span> propertiesObject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// proto只能是null 或 对象</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>proto <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>proto <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&quot;proto只能是null或者对象,不能是其它类型&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 实现原型式继承</span>
  <span class="token keyword">function</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token class-name">Fn</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> proto<span class="token punctuation">;</span>
  <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 给新对象添加属性，只要当前属性不是对象，就没有意义</span>
  propertiesObject <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token operator">&amp;&amp;</span>
    Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> propertiesObject<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>实践应用</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> obj2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">_create</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
    <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {age:12}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 张三</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 12</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> obj2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  张三  12</span>
<span class="token punctuation">}</span>
obj2<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 22</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、原型式继承注意事项" tabindex="-1"><a class="header-anchor" href="#_3、原型式继承注意事项" aria-hidden="true">#</a> 3、原型式继承注意事项</h3><p>注：</p><ul><li><strong>适用场景：</strong> 原型式继承非常适合不需要单独创建构造函数，但仍然需要在对象间共享信息的场合</li><li><strong>注意事项：</strong> 如果原型对象的属性包含引用类型值时，所有以这个对象为原型创建的新对象的这个属性指向的是堆内中的同一个内容</li></ul><h2 id="六、寄生式继承" tabindex="-1"><a class="header-anchor" href="#六、寄生式继承" aria-hidden="true">#</a> 六、寄生式继承</h2><p><strong>寄生式继承的实现思路：</strong> 编写一个函数，它接收一个参数 O，返回以 O 为原型的新对象 p，同时给 p 添加了一些预置的新方法</p><p>新对象相当于是寄生在原来的对象上，然后又添加了一些自己的新方法，所以称为 <strong>“寄生式继承”</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建一个对象</span>
<span class="token keyword">var</span> ball <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">r</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
  <span class="token literal-property property">opacity</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 创建一个函数，实现增强某个对象，实现寄生式继承</span>
<span class="token keyword">function</span> <span class="token function">enHanceObject</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 以o为原型，创建出一个新对象</span>
  <span class="token keyword">var</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 为新创建的对象添加一些预置的方法，用来增强对象</span>
  obj<span class="token punctuation">.</span><span class="token function-variable function">changeColor</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">&quot;blue&quot;</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;我已经将颜色变成&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">// ....可以为新对象添加更多的预置方法</span>
  <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> ball2 <span class="token operator">=</span> <span class="token function">enHanceObject</span><span class="token punctuation">(</span>ball<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ball2<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ball2<span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
ball2<span class="token punctuation">.</span><span class="token function">changeColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/image-20221117162352082.64e0014e.png" alt="image-20221117162352082"></p><p>注：</p><ul><li><strong>寄生式继承</strong>相当于一个小工厂，他接受一个参数，然后返回一个新的对象</li><li><strong>寄生式继承适用场景</strong>：主要关注的是对象，而不在乎类型和构造函数的场景</li><li><strong>注意事项：</strong> 寄生式继承给新对象添加的函数是没有办法实现重用的。每创建一个新对象身上都会独有一份预置的方法</li></ul><h2 id="七、寄生式组合继承" tabindex="-1"><a class="header-anchor" href="#七、寄生式组合继承" aria-hidden="true">#</a> 七、寄生式组合继承</h2><p>在前面学习的组合继承中也存在以下不足之处</p><h3 id="_1、组合继承不足之处" tabindex="-1"><a class="header-anchor" href="#_1、组合继承不足之处" aria-hidden="true">#</a> 1、组合继承不足之处</h3><p>组合继承最大的问题就是无论什么情况下，都会调用两次父（超）类的构造函数。一次是在创建子类原型的时候 ，另一次是在子类构造函数的内部</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Student</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建子类原型时，调用父类构造函数</span>

<span class="token function">People</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在子类的构造函数内部，调用父类的构造函数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>子类原型中的<code>constructor</code>被丢失，当访问子类原型中的 constructor 时，其本质是通过原型链查找，最终查找到的是父类的构造函数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">===</span> People<span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在接下来学习的寄生式组合继承中，就能解决上面的两大问题</p><h3 id="_2、寄生式组合的基本思路" tabindex="-1"><a class="header-anchor" href="#_2、寄生式组合的基本思路" aria-hidden="true">#</a> 2、寄生式组合的基本思路</h3><ul><li><strong>借用构造函数实现继承父类属性：</strong> 在子类的构造函数中调用父类的构造函数来实现继承父类属性</li><li><strong>混合式原型链，实现继承父类原型上方法</strong>：以父类的原型对象为原型，来创建出一个新的对象。让子类的原型指向新创建出来的对象。解决了不用再次调用父类构造函数，同时父类构造函数中的属性也不会成为原型的属性</li><li><strong>修正子类构造函数的 constructor 属性的指向：</strong> 把新创建对象中的<code>constructor</code>指向子类的构造函数。解决了原型中<code>constructor</code>丢失问题，同是修正了子类构造函数中的 constructor 指向子类构造函数</li></ul><p><img src="https://www.arryblog.com/assets/img/image-20221117182834399.e5dddec4.png" alt="image-20221117182834399"></p><blockquote><p>以下图把 prototype 隐藏的 Fn 构造函数绘制出来了</p></blockquote><p><img src="https://www.arryblog.com/assets/img/16710318727342.62a07a7d.png" alt="16710318727342.png"></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 父类  人类</span>
<span class="token keyword">function</span> <span class="token function">People</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">People</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayHello</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;大家好，我是&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot;今年&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">&quot;岁了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 子类  学生类</span>
<span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> scholl<span class="token punctuation">,</span> sid</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">People</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>scholl <span class="token operator">=</span> scholl<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>sid <span class="token operator">=</span> sid<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 寄生式组合继承</span>
<span class="token comment">// 以 People的原型为原型，创建一个新对象</span>
<span class="token keyword">var</span> prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">People</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 更改prototype中的constructor指向</span>
prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Student<span class="token punctuation">;</span>
<span class="token comment">// 将新创建的prototype对象，赋值给Student.prototype</span>
<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> prototype<span class="token punctuation">;</span>

<span class="token comment">// 子类原型上对象上添加新方法</span>
<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">exam</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot;正在考试&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> cuihua <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;翠花&quot;</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">&quot;高新中学&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;A0001&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> laoliu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;老刘&quot;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">&quot;北京大学&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;SD0001&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cuihua<span class="token punctuation">)</span><span class="token punctuation">;</span>
cuihua<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cuihua<span class="token punctuation">.</span><span class="token function">exam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>laoliu<span class="token punctuation">)</span><span class="token punctuation">;</span>
laoliu<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
laoliu<span class="token punctuation">.</span><span class="token function">exam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>温馨提示：</p><p>继承的代码要写在给子类原型添加新方法的前面，否则子类在原型上新添加的方法会被覆盖</p><h3 id="_3、封装函数-寄生式组合继承" tabindex="-1"><a class="header-anchor" href="#_3、封装函数-寄生式组合继承" aria-hidden="true">#</a> 3、封装函数 - 寄生式组合继承</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 寄生式组合继承
 * subType子类
 * superType 超类（父类）
 */</span>
<span class="token keyword">function</span> <span class="token function">inheritPrototype</span><span class="token punctuation">(</span><span class="token parameter">subType<span class="token punctuation">,</span> superType</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 以父类的原型为原型，创建一个新对象</span>
  <span class="token keyword">var</span> prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>superType<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 新对象的constructor指向子类的构造函数</span>
  prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> subType<span class="token punctuation">;</span>
  <span class="token comment">// 子类的原型指向新创建的对象</span>
  subType<span class="token punctuation">.</span>prototype <span class="token operator">=</span> prototype<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 父类  人类</span>
<span class="token keyword">function</span> <span class="token function">People</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">People</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayHello</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;大家好，我是&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot;今年&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">&quot;岁了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 子类  学生类</span>
<span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> scholl<span class="token punctuation">,</span> sid</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">People</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>scholl <span class="token operator">=</span> scholl<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>sid <span class="token operator">=</span> sid<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 寄生式组合继承</span>
<span class="token function">inheritPrototype</span><span class="token punctuation">(</span>Student<span class="token punctuation">,</span> People<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 子类原型上对象上添加新方法</span>
<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">exam</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot;正在考试&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> cuihua <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;翠花&quot;</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">&quot;高新中学&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;A0001&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> laoliu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;老刘&quot;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">&quot;北京大学&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;SD0001&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cuihua<span class="token punctuation">)</span><span class="token punctuation">;</span>
cuihua<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cuihua<span class="token punctuation">.</span><span class="token function">exam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>laoliu<span class="token punctuation">)</span><span class="token punctuation">;</span>
laoliu<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
laoliu<span class="token punctuation">.</span><span class="token function">exam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="八、javascript-6-种继承方式的实现原理、优缺点总结" tabindex="-1"><a class="header-anchor" href="#八、javascript-6-种继承方式的实现原理、优缺点总结" aria-hidden="true">#</a> 八、JavaScript 6 种继承方式的实现原理、优缺点总结</h2><p>总结本章重难点知识，理清思路，把握重难点。并能轻松回答以下问题，说明自己就真正的掌握了。</p><p>用于故而知新，快速复习。</p><table><thead><tr><th style="text-align:left;">继承方式</th><th style="text-align:left;">实现原理</th><th style="text-align:left;">继承的对象</th><th style="text-align:left;">优缺点</th></tr></thead><tbody><tr><td style="text-align:left;">原型链实现继承</td><td style="text-align:left;">子类的原型指向父类的实例 <code>子类.prototype=new 父类()</code></td><td style="text-align:left;">类与类</td><td style="text-align:left;">不能实现属性的复用，同时父类的属性中有引用类型，则所有子类的实例共享这个属性值</td></tr><tr><td style="text-align:left;">借用构造函数</td><td style="text-align:left;">子类构造函数中调用父类构造函数 <code>父类.call(this,参数)</code></td><td style="text-align:left;">类与类</td><td style="text-align:left;">不能实现方法的继承</td></tr><tr><td style="text-align:left;">组合式继承</td><td style="text-align:left;">将原型链实现继承和借用构造函数实现继承组合一起使用</td><td style="text-align:left;">类与类</td><td style="text-align:left;">两次调用父类的构造函数，也因此造成子类原型上多了一份无用的属性</td></tr><tr><td style="text-align:left;">原型式继承</td><td style="text-align:left;">利用<code>Object.create()</code>实现以 obj 对象为原型，创建出一个新的对象 newObj,同时可以给新创建的对象添加新的属性 <code>var newObj=Object.create(obj，propertiesObject)</code></td><td style="text-align:left;">对象与对象</td><td style="text-align:left;">如果原型对象上有引用数据类型，则所有新创建的对象共享同一个属性值</td></tr><tr><td style="text-align:left;">寄生式继承</td><td style="text-align:left;">以 obj 为原型，创建出一个新的对象，同时为新创建的对象添加一个预置的方法</td><td style="text-align:left;">对象与对象</td><td style="text-align:left;">给新对象添加的函数是没有办法实现重用的</td></tr><tr><td style="text-align:left;">寄生式组合继承</td><td style="text-align:left;">将借用构造函数与原型式继承组合在一起来使用 以父类的原型为原型创建出一个新对象，同时将新对象的 constructor 指向子类，再将新对象作为子类的原型。</td><td style="text-align:left;">类与类</td><td style="text-align:left;">完美解决类与类之间的继承</td></tr></tbody></table><h2 id="九、内置构造函数" tabindex="-1"><a class="header-anchor" href="#九、内置构造函数" aria-hidden="true">#</a> 九、内置构造函数</h2><blockquote><p>在学习内置构造函数前，我们先来了解下 JS 中对象的分类，JS 对象分为以下 3 大类</p></blockquote><table><thead><tr><th style="text-align:left;">类别</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">内部对象</td><td style="text-align:left;">JS 中的内部对象很多包括但不限于以下 常用构造函数（对象）：Object、Function、Array 包装类（对象）：String、Boolean、Number Date 日期类、RegExp 正则表达式 错误处理类：Error、EvalError、RangeError、ReferenceError、SyntaxError、TypeError、URIError 内置对象：Global、Math</td></tr><tr><td style="text-align:left;">宿主对象</td><td style="text-align:left;">宿主对象就是执行 JS 脚本的环境提供的对象 对于嵌入到网页中的 JS 来说，其宿主对象就是浏览器提供的对象，所以又称为<strong>浏览器对象</strong> 不同的浏览器提供的宿主对象可能不同，即使提供的对象相同，其实现方式也大相径庭！这会带来浏览器兼容问题，增加开发难度 浏览器对象有很多，所有的 BOM 和 DOM 都是宿主对象，如<code>Window</code>、<code>Document</code>，<code>Element</code>，<code>Form</code>，<code>Image</code>等等</td></tr><tr><td style="text-align:left;">自定义对象</td><td style="text-align:left;">就是开发人员自己定义的对象</td></tr></tbody></table><p>注：</p><p>我们接下来要学习的内置构造函数，指的就是内部对象中的相关对象</p><blockquote><p>内置构造函数非常有用，所有该类型的方法都是定义在它的内置构造函数的 prototype 上的，我们可以给这个对象添加新的方法，从而拓展某类型的功能。</p></blockquote><p><strong>内置构造函数</strong></p><ul><li>常用构造函数：Object、Function、Array</li><li>包装类：String、Boolean、Number</li><li>Date 日期类、RegExp 正则表达式</li><li>错误处理类：Error、EvalError、RangeError、ReferenceError、SyntaxError、TypeError、URIError</li><li>......还有更多，在后面慢慢介绍</li></ul><p><strong>内置对象</strong></p><ul><li>Global 对象，全局对象</li><li>Math 对象</li></ul><blockquote><p>这两个对象在脚本程序初始化时被创建，不必实例化这两个对象。即不用 new 来调用</p></blockquote><h3 id="_1、常用构造函数" tabindex="-1"><a class="header-anchor" href="#_1、常用构造函数" aria-hidden="true">#</a> 1、常用构造函数</h3><ul><li>关于 Array、Function、Object 三个构造函数，我们在之前就有接触过，特别是 Array 构造函数。</li><li>这三个构造函数身上有那些：静态属性、静态方法、实例属性、实例方法大家可以参考 MDN 官方文档来复习。</li></ul><blockquote><p>在后期的课程中，我们会慢慢的来学习这些构造函数身上的方法和属性</p></blockquote>`,152),r=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"构造函数"),n("th",{style:{"text-align":"left"}},"MDN 官方地址")])],-1),k=n("td",{style:{"text-align":"left"}},"Array",-1),d={style:{"text-align":"left"}},v={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array",target:"_blank",rel:"noopener noreferrer"},m=n("td",{style:{"text-align":"left"}},"Function",-1),b={style:{"text-align":"left"}},g={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function",target:"_blank",rel:"noopener noreferrer"},h=n("td",{style:{"text-align":"left"}},"Object",-1),y={style:{"text-align":"left"}},f={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function",target:"_blank",rel:"noopener noreferrer"},j=p(`<blockquote><p>接下来，我们来复习下这三个构造函数的继承关系和原型链</p></blockquote><p><img src="https://www.arryblog.com/assets/img/image-20221117203604374.1fa2cd75.png" alt="image-20221117203604374"></p><h3 id="_2、object-构造函数" tabindex="-1"><a class="header-anchor" href="#_2、object-构造函数" aria-hidden="true">#</a> 2、Object 构造函数</h3><ul><li>Object 构造函数用来构造对象，所有对象都是 Object 的实例</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>__proto__<span class="token operator">===</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>Object 的原型也是一个对象，按理来说<code>Object.prototype.___proto__===Object.prototype</code>，但显然是不合理的。实际 Object 原型的原型指向原型链的终点，即 null</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// true;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Object 构造函数也是函数，所以 Object 也是 Function 构造函数的实例</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Object<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>所以 Object 可以打点调用 Function 原型上的方法</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;call&quot;</span> <span class="token keyword">in</span> Object<span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token string">&quot;bind&quot;</span> <span class="token keyword">in</span> Object<span class="token punctuation">;</span> <span class="token comment">// true</span>

<span class="token function">Object</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、array-构造函数" tabindex="-1"><a class="header-anchor" href="#_3、array-构造函数" aria-hidden="true">#</a> 3、Array 构造函数</h3><ul><li>Array 构造函数，用来构造数组，所有数组都是 Array 的实例</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>Array.prototype 是一个对象，所以 Array.prototype 也是 Object 的实例</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>Object 原型的原型为原型链的终点,即 null</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>Array 构造函数也是函数，所以 Array 也是 Function 构造函数的实例</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Array<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4、function-构造函数" tabindex="-1"><a class="header-anchor" href="#_4、function-构造函数" aria-hidden="true">#</a> 4、Function 构造函数</h3><ul><li>Function 构造函数用来构造函数，所有函数都是 Function 的实例</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
fn<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Function 构造函数也是一个函数，所以下面这种特殊情况也成立</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Function<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="十、重难点" tabindex="-1"><a class="header-anchor" href="#十、重难点" aria-hidden="true">#</a> 十、重难点</h2><ul><li><strong>重点：</strong> 掌握寄生式组合继承的写法</li><li><strong>难点：</strong> 手写 <code>Object.create()</code> 方法</li></ul>`,27);function w(q,_){const s=o("ExternalLinkIcon");return c(),l("div",null,[u,n("table",null,[r,n("tbody",null,[n("tr",null,[k,n("td",d,[n("a",v,[a("https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array(opens new window)"),t(s)])])]),n("tr",null,[m,n("td",b,[n("a",g,[a("https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function(opens new window)"),t(s)])])]),n("tr",null,[h,n("td",y,[n("a",f,[a("https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object(opens new window)"),t(s)])])])])]),j])}const O=e(i,[["render",w],["__file","JavaScript jichengde 6 zhongfangshi、yingyongchangjing，nazhigouzaohanshu.html.vue"]]);export{O as default};
