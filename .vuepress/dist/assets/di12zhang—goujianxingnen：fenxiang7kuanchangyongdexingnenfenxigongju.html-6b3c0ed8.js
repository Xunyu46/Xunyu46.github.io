import{_ as p,r as o,o as l,c,b as n,d as s,e,a as t}from"./app-48690364.js";const i={},r=t('<p>Webpack 最大的优势在于它的功能非常强大、全面，加之繁荣活跃的组件生态，已经足够应对几乎所有 Web 构建需求，包括：SPA、MPA、SSR、桌面应用、Node 程序、WebAssemsbly、PWA、微前端等等，所以即使在近几年工程化领域异军突起、百花齐放的背景下，Webpack 也依然能保持老大哥的位置。</p><p>但软件世界没有银弹！Webpack 在大型项目中通常性能表现不佳，这一方面是因为 JavaScript 语言的单线程架构决定了 Webpack 的运算效率就不可能很高；另一方面则是因为在大型项目中，Webpack 通常需要借助许多组件（插件、Loader）完成大量的文件读写、代码编译操作。</p><p>幸运的是，站在开发者视角，我们有许多行之有效的性能优化方法，包括缓存、并发、优化文件处理步骤等，但在着手优化之前，有必要先简单了解一下 Webpack 打包的核心流程；了解哪些步骤比较耗时，可能会造成性能卡点；以及，如何借助一些可视化工具分析 Webpack 的编译性能。</p><h2 id="核心流程" tabindex="-1"><a class="header-anchor" href="#核心流程" aria-hidden="true">#</a> 核心流程</h2><p>Webpack 最最核心的功能，一是使用适当 Loader 将任意类型文件转译为 JavaScript 代码，例如将 CSS 代码转译为 JS 字符串，将多媒体文件转译为 Base64 代码等；二是将这些经过 Loader 处理的文件资源合并、打包成向下兼容的产物文件。</p><p>为了实现这些功能，Webpack 底层的工作流程大致可以总结为这么几个阶段：</p><ol><li>初始化阶段： <ul><li><strong>初始化参数</strong>：从配置文件、 配置对象、Shell 参数中读取，与默认配置结合得出最终的参数；</li><li><strong>创建编译器对象</strong>：用上一步得到的参数创建 Compiler 对象；</li><li><strong>初始化编译环境</strong>：包括注入内置插件、注册各种模块工厂、初始化 RuleSet 集合、加载配置的插件等；</li><li><strong>开始编译</strong>：执行 compiler 对象的 run 方法，创建 Compilation 对象；</li><li><strong>确定入口</strong>：根据配置中的 <code>entry</code> 找出所有的入口文件，调用 <code>compilation.addEntry</code> 将入口文件转换为 <code>dependence</code> 对象。</li></ul></li><li>构建阶段： <ul><li><strong>编译模块(make)</strong>：从 <code>entry</code> 文件开始，调用 <code>loader</code> 将模块转译为标准 JS 内容，调用 JS 解析器将内容转换为 AST 对象，从中找出该模块依赖的模块，再 <strong>递归</strong> 处理这些依赖模块，直到所有入口依赖的文件都经过了本步骤的处理；</li><li><strong>完成模块编译</strong>：上一步递归处理所有能触达到的模块后，得到了每个模块被翻译后的内容以及它们之间的<code>依赖关系图</code>。</li></ul></li><li>封装阶段： <ul><li><strong>合并(<strong><strong>seal</strong></strong>)</strong>：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 <code>Chunk</code>；</li><li><strong>优化(optimization)</strong>：对上述 <code>Chunk</code> 施加一系列优化操作，包括：tree-shaking、terser、scope-hoisting、压缩、Code Split 等；</li><li><strong>写入文件系统(emitAssets)</strong>：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统。</li></ul></li></ol><p>在这个过程中有不少可能造成性能问题的地方：</p>',8),u=n("li",null,[s("首先需要将文件的相对引用路径转换为绝对路径，这个过程可能涉及多次 IO 操作，执行效率取决于 "),n("strong",null,"文件层次深度"),s("；")],-1),d={href:"https://github1s.com/webpack/loader-runner/blob/HEAD/lib/LoaderRunner.js",target:"_blank",rel:"noopener noreferrer"},k=n("strong",null,"Loader 的数量与复杂度",-1),b=n("li",null,[s("需要将模块内容解析为 AST 结构，并遍历 AST 找出模块的依赖资源，这个过程同样需要较密集的 CPU 操作，执行效率取决于 "),n("strong",null,"代码复杂度"),s("；")],-1),m=n("li",null,[s("递归处理依赖资源，执行效率取决于 "),n("strong",null,"模块数量"),s("。")],-1),v=n("li",null,[s("根据 "),n("code",null,"splitChunks"),s(" 配置、"),n("code",null,"entry"),s(" 配置、动态模块引用语句等，确定模块与 Chunk 的映射关系，其中 "),n("code",null,"splitChunks"),s(" 相关的分包算法非常复杂，涉及大量 CPU 计算；")],-1),h=n("code",null,"optimization",-1),g={href:"https://github.com/webpack-contrib/terser-webpack-plugin",target:"_blank",rel:"noopener noreferrer"},_=n("strong",null,"产物代码量",-1),f=n("li",null,"等等。",-1),w=n("p",null,"可以看出，Webpack 需要执行非常密集的 IO 与 CPU 操作，计算成本高，再加上 Webpack 以及大多数组件都使用 JavaScript 编写，无法充分利用多核 CPU 能力，所以在中大型项性能通常表现较差。",-1),y=n("p",null,"不过，这些性能问题是可以被优化的！",-1),x=n("h2",{id:"性能分析",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#性能分析","aria-hidden":"true"},"#"),s(" 性能分析")],-1),j=n("p",null,"有许多被反复实践、行之有效的构建性能优化手段，包括并行编译、缓存、缩小资源搜索范围等等，但在介绍这些具体的优化方法之前，有必要先聊聊：如何收集、分析 Webpack 打包过程的性能数据。",-1),q={href:"https://webpack.js.org/api/stats/",target:"_blank",rel:"noopener noreferrer"},W=t(`<ol><li>添加 <code>profile = true</code> 配置：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">profile</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>运行编译命令，并添加 <code>--json</code> 参数，参数值为最终生成的统计文件名，如：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx webpack <span class="token parameter variable">--json</span><span class="token operator">=</span>stats.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上述命令执行完毕后，会在文件夹下生成 <code>stats.json</code> 文件，内容大致如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;hash&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2c0b66247db00e494ab8&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;5.36.1&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;time&quot;</span><span class="token operator">:</span> <span class="token number">81</span><span class="token punctuation">,</span>
  <span class="token property">&quot;builtAt&quot;</span><span class="token operator">:</span> <span class="token number">1620401092814</span><span class="token punctuation">,</span>
  <span class="token property">&quot;publicPath&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;outputPath&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/Users/tecvan/learn-webpack/hello-world/dist&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;assetsByChunkName&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;index.js&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;assets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;chunks&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;modules&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;entrypoints&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;namedChunkGroups&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;errors&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;errorsCount&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token property">&quot;warnings&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;warningsCount&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token property">&quot;children&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>stats</code> 对象收集了 Webpack 运行过程中许多值得关注的信息，包括：</p>`,7),z=t("<li><code>modules</code>：本次打包处理的所有模块列表，内容包含模块的大小、所属 <code>chunk</code>、构建原因、依赖模块等，特别是 <code>modules.profile</code> 属性，包含了构建该模块时，解析路径、编译、打包、子模块打包等各个环节所花费的时间，非常有用；</li><li><code>chunks</code>：构建过程生成的 <code>chunks</code> 列表，数组内容包含 <code>chunk</code> 名称、大小、包含了哪些模块等；</li><li><code>assets</code>：编译后最终输出的产物列表、文件路径、文件大小等；</li><li><code>entrypoints</code>：entry 列表，包括动态引入所生产的 entry 项也会包含在这里面；</li>",4),S=n("code",null,"children",-1),C=n("code",null,"extract-css-chunk-plugin",-1),P={href:"https://github1s.com/faceyspacey/extract-css-chunks-webpack-plugin/blob/HEAD/src/loader.js#L82",target:"_blank",rel:"noopener noreferrer"},A={href:"https://webpack.js.org/api/stats/",target:"_blank",rel:"noopener noreferrer"},D={href:"https://github1s.com/Tecvan-fe/webpack-book-samples/blob/HEAD/stats-with-profile/stats.json",target:"_blank",rel:"noopener noreferrer"},B=n("p",null,"我们可以从这些数据中分析出模块之间的依赖关系、体积占比、编译构建耗时等，Webpack 社区还提供了许多优秀的分析工具，能够将这些数据转换各种风格的可视化图表，帮助我们更高效地找出性能卡点，包括：",-1),T={href:"https://webpack.github.io/analyse/",target:"_blank",rel:"noopener noreferrer"},U=n("code",null,"stats",-1),L={href:"https://github.com/statoscope/statoscope",target:"_blank",rel:"noopener noreferrer"},M={href:"https://chrisbateman.github.io/webpack-visualizer/",target:"_blank",rel:"noopener noreferrer"},E={href:"https://www.npmjs.com/package/webpack-bundle-analyzer",target:"_blank",rel:"noopener noreferrer"},V={href:"https://www.npmjs.com/package/webpack-dashboard",target:"_blank",rel:"noopener noreferrer"},N={href:"https://www.npmjs.com/package/unused-webpack-plugin",target:"_blank",rel:"noopener noreferrer"},H=n("code",null,"stats",-1),I=n("h2",{id:"webpack-analysis",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#webpack-analysis","aria-hidden":"true"},"#"),s(" Webpack Analysis")],-1),J={href:"https://webpack.github.io/analyse/",target:"_blank",rel:"noopener noreferrer"},R=t('<p>使用上只需要将上一节 <code>webpack --json=stats.json</code> 命令生成的 <code>stats.json</code> 文件导入页面，就可以看到一些关键统计信息：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/faa5b4982c6d49679099edf11967ae29~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>点击页面中的 <code>modules/chunks/assets</code> 按钮，页面会渲染出对应实体的依赖关系图，例如：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9b28a6b379e24edfabcbd1e9d3567b56~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>除 <code>modules/chunks/assets</code> 外，右上方菜单栏 <strong>Hints</strong> 还可以查看构建过程各阶段、各模块的处理耗时，可以用于对比分析各个阶段的性能情况：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3af3b249f4d64133ace6893bdadd5a8c~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><blockquote><p>提示：不过，实测发现 <strong>Hints</strong> 还不支持 webpack 5 版本的 <code>stats</code> 数据，等待官方更新吧。</p></blockquote>',7),O={href:"https://webpack.github.io/analyse/",target:"_blank",rel:"noopener noreferrer"},G={href:"https://mshustov.github.io/webpack-deps-tree/static/",target:"_blank",rel:"noopener noreferrer"},F=n("h2",{id:"statoscope",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#statoscope","aria-hidden":"true"},"#"),s(" Statoscope")],-1),K={href:"https://github.com/statoscope/statoscope",target:"_blank",rel:"noopener noreferrer"},Q=n("ul",null,[n("li",null,"完整的依赖关系视图，涵盖 modules/chunks/assets/entrypoints/packages 维度；"),n("li",null,"entrypoints/chunks/packages/module 体积分析；"),n("li",null,"重复包检测；"),n("li",null,[s("多份 "),n("code",null,"stats"),s(" 数据对比；")]),n("li",null,"等等。")],-1),X=n("code",null,"stats",-1),Y={href:"https://github.com/statoscope/statoscope",target:"_blank",rel:"noopener noreferrer"},Z=n("code",null,"@statoscope/webpack-plugin",-1),$=t(`<ol><li>安装依赖：</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yarn add -D @statoscope/webpack-plugin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>注册插件：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> StatoscopeWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@statoscope/webpack-plugin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">StatoscopeWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后，运行 <code>npx webpack</code> 命令，编译结束后默认打开分析视图：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f2d2eae9a84c4dad9af99532c82046aa~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>可以看到，Statoscope 提供了多种维度的统计信息，包括：Chunk 数量、模块总数、重复模块树、编译耗时、Initial Chunk 体积等；更重要的是，Statoscope 还展示了模块与模块、Chunk、Entry 等维度的依赖关系：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/89229aa5d14e4abe8c07e2866fd7e6d1~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>我们可以据此推断出模块体积、为何需要打包该模块、有哪些模块被重复引用等信息。</p><h2 id="webpack-bundle-analyzer" tabindex="-1"><a class="header-anchor" href="#webpack-bundle-analyzer" aria-hidden="true">#</a> Webpack Bundle Analyzer</h2>`,10),nn={href:"https://www.npmjs.com/package/webpack-bundle-analyzer",target:"_blank",rel:"noopener noreferrer"},sn=t(`<ol><li>安装模块依赖：</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yarn add -D webpack-bundle-analyzer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>添加插件：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> BundleAnalyzerPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;webpack-bundle-analyzer&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span>BundleAnalyzerPlugin<span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">BundleAnalyzerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译结束后，默认自动打开本地视图页面：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9e303d6c4fc14656bfb4d385479c2900~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>也可以直接用 Webpack-bundle-analyzer 命令直接打开 <code>stats</code> 文件：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npx webpack-bundle-analyzer ./stats.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>基于 Webpack Bundle Analyzer 提供的视图，我们可以分析出：</p><ul><li>Bundle 包所包含的模块内容 —— 从而推断出产物中是否包含预期之外的模块；</li><li>确定模块体积大小与占比 —— 从而确定是否存在优化空间；</li><li>了解 Bundle 产物体积，以及经过压缩后的体积。</li></ul>`,10),an={href:"https://www.npmjs.com/package/webpack-bundle-size-analyzer",target:"_blank",rel:"noopener noreferrer"},en={href:"https://github.com/danvk/source-map-explorer",target:"_blank",rel:"noopener noreferrer"},tn=n("h2",{id:"webpack-visualizer",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#webpack-visualizer","aria-hidden":"true"},"#"),s(" Webpack Visualizer")],-1),pn={href:"https://chrisbateman.github.io/webpack-visualizer/",target:"_blank",rel:"noopener noreferrer"},on=n("code",null,"stats.json",-1),ln={href:"https://chrisbateman.github.io/webpack-visualizer/",target:"_blank",rel:"noopener noreferrer"},cn=n("code",null,"webpack-visualizer-plugin",-1),rn=t(`<ol><li>安装依赖：</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yarn add —D webpack-visualizer-plugin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>添加插件：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>
<span class="token keyword">const</span> VisualizerPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack-visualizer-plugin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">Visualizer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;./stats.html&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token comment">//...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两种方式最终都可以生成如下视图：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0df8d57ed3144d688f42d30a028fc1ad~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>`,6),un={href:"https://github.com/chrisbateman/webpack-visualizer#plugin-usage",target:"_blank",rel:"noopener noreferrer"},dn={href:"https://alexkuz.github.io/webpack-chart/",target:"_blank",rel:"noopener noreferrer"},kn=n("h2",{id:"webpack-dashboard",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#webpack-dashboard","aria-hidden":"true"},"#"),s(" Webpack Dashboard")],-1),bn={href:"https://www.npmjs.com/package/webpack-dashboard",target:"_blank",rel:"noopener noreferrer"},mn=t(`<ol><li>安装依赖：</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yarn add -D webpack-dashboard
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>注册插件：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> DashboardPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;webpack-dashboard/plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">DashboardPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>注意了，需要用 <code>webpack-dashboard</code> 命令启动编译：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 打包</span>
npx webpack-dashboard -- webpack
<span class="token comment"># Dev Server</span>
npx webpack-dashboard -- webpack-dev-server
<span class="token comment"># 运行 Node 程序</span>
npx webpack-dashboard -- <span class="token function">node</span> index.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后，就可以在命令行看到一个漂亮的可视化界面：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/db6aca635d2048768123e27b79647896~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h2 id="speed-measure-plugin" tabindex="-1"><a class="header-anchor" href="#speed-measure-plugin" aria-hidden="true">#</a> Speed Measure Plugin</h2>`,9),vn={href:"https://www.npmjs.com/package/speed-measure-webpack-plugin",target:"_blank",rel:"noopener noreferrer"},hn=t(`<ol><li>安装依赖：</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yarn add -D speed-measure-webpack-plugin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>修改配置：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> SpeedMeasurePlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;speed-measure-webpack-plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> smp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpeedMeasurePlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&quot;./src/index.ts&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 注意，这里是用 \`smp.wrap\` 函数包裹住 Webpack 配置</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> smp<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后运行打包命令如 <code>npx webpack</code> 即可，运行效果：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b1deeb71f04745b1ac71d05b5490f2b9~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h2 id="unusedwebpackplugin" tabindex="-1"><a class="header-anchor" href="#unusedwebpackplugin" aria-hidden="true">#</a> UnusedWebpackPlugin</h2>`,7),gn={href:"https://www.npmjs.com/package/unused-webpack-plugin",target:"_blank",rel:"noopener noreferrer"},_n=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> UnusedWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;unused-webpack-plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">UnusedWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">directories</span><span class="token operator">:</span> <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;src&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">root</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;../&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例中，<code>directories</code> 用于指定需要分析的文件目录；<code>root</code> 用于指定根路径，与输出有关。配置插件后，webpack 每次运行完毕都会输出 <code>directories</code> 目录中，有哪些文件没有被用到：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f342a98ef19e42e8ab756891b814d942~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>这是一篇介绍 Webpack 性能分析的实践方法类文章，我们首先需要理解 Webpack 编译的基本过程，以及过程中各个步骤的耗时，理解哪些节点可能会消耗更多时间等，在此基础上我们才能更精确、有的放矢地排查出项目中的性能问题。</p><p>理解基本原理后，我们可以借助一系列可视化工具分析构建、产物性能，你可以沿着上面的介绍，逐一试用、学习这些分析工具。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题" aria-hidden="true">#</a> 思考题</h2>`,7),fn=n("code",null,"stats",-1),wn={href:"https://github1s.com/Tecvan-fe/webpack-book-samples/blob/HEAD/stats-with-profile/stats.json",target:"_blank",rel:"noopener noreferrer"},yn=n("ul",null,[n("li",null,"如何推断一个 Chunk 中包含了哪些模块？"),n("li",null,"如何判断 Chunk 类型(Initial/Async/Runtime Chunk)？"),n("li",null,"如何分析 Module 与 Module 之间的依赖关系？")],-1);function xn(jn,qn){const a=o("ExternalLinkIcon");return l(),c("div",null,[r,n("ul",null,[n("li",null,[s("构建阶段： "),n("ul",null,[u,n("li",null,[s("找到具体文件后，需要读入文件内容并调用 "),n("a",d,[s("loader-runner"),e(a)]),s(" 遍历 Loader 数组完成内容转译，这个过程需要执行较密集的 CPU 操作，执行效率取决于 "),k,s("；")]),b,m])]),n("li",null,[s("封装阶段： "),n("ul",null,[v,n("li",null,[s("根据 "),h,s(" 配置执行一系列产物优化操作，特别是 "),n("a",g,[s("Terser"),e(a)]),s(" 插件需要执行大量 AST 相关的运算，执行效率取决于 "),_,s("；")])])]),f]),w,y,x,j,n("p",null,[s("收集数据的方法很简单 —— Webpack 内置了 "),n("a",q,[s("stats"),e(a)]),s(" 接口，专门用于统计模块构建耗时、模块依赖关系等信息，推荐用法：")]),W,n("ul",null,[z,n("li",null,[S,s("：子 Compiler 对象的性能数据，例如 "),C,s(" 插件内部就会调用 "),n("a",P,[s("compilation.createChildCompiler"),e(a)]),s(" 函数创建出子 Compiler 来做 CSS 抽取的工作。")])]),n("p",null,[s("篇幅有限，这里不展开介绍每个节点的具体内容，有需要的同学可以查阅 Webpack 官网的 "),n("a",A,[s("stats"),e(a)]),s(" 介绍文档，或到小册代码仓库查看"),n("a",D,[s("示例"),e(a)]),s("。")]),B,n("ul",null,[n("li",null,[n("a",T,[s("Webpack Analysis"),e(a)]),s(" ：Webpack 官方提供的，功能比较全面的 "),U,s(" 可视化工具；")]),n("li",null,[n("a",L,[s("Statoscope"),e(a)]),s("：主要侧重于模块与模块、模块与 chunk、chunk 与 chunk 等，实体之间的关系分析；")]),n("li",null,[n("a",M,[s("Webpack Visualizer"),e(a)]),s("：一个简单的模块体积分析工具，真的很简单！")]),n("li",null,[n("a",E,[s("Webpack Bundle Analyzer"),e(a)]),s("：应该是使用率最高的性能分析工具之一，主要实现以 Tree Map 方式展示各个模块的体积占比；")]),n("li",null,[n("a",V,[s("Webpack Dashboard"),e(a)]),s("：能够在编译过程实时展示编译进度、模块分布、产物信息等；")]),n("li",null,[n("a",N,[s("Unused Webpack Plugin"),e(a)]),s("：能够根据 "),H,s(" 数据反向查找项目中未被使用的文件。")])]),I,n("p",null,[n("a",J,[s("Webpack Analysis"),e(a)]),s(" 是 webpack 官方提供的可视化分析工具，相比于其它工具，它提供的视图更全，功能更强大，能够通过创建依赖关系图对你的包进行更彻底的检查。")]),R,n("p",null,[n("a",O,[s("Webpack Analysis"),e(a)]),s(" 提供了非常齐全的分析视角，信息几乎没有失真，但上手难度稍高，信息噪音比较多，所以社区还提供了一个简化版 "),n("a",G,[s("webpack-deps-tree"),e(a)]),s("，功能相似但用法更简单、信息更简洁，大家可以根据实际需要交叉使用。")]),F,n("p",null,[n("a",K,[s("Statoscope"),e(a)]),s(" 也是一个非常强大的可视化分析工具，主要提供如下功能：")]),Q,n("p",null,[s("有两种用法，一是将 "),X,s(" 数据导入到 "),n("a",Y,[s("Statoscope"),e(a)]),s(" 在线页面；二是使用 "),Z,s(" 插件，用法：")]),$,n("p",null,[n("a",nn,[s("Webpack-bundle-analyzer"),e(a)]),s(" 是一个非常有名的性能分析插件，只需要一些简单配置就可以在 Webpack 构建结束后生成 Tree Map 形态的模块分布统计图，用户可以通过对比 Tree Map 内容推断各模块的体积占比，是否包含重复模块、不必要的模块等，用法：")]),sn,n("blockquote",null,[n("p",null,[s("提示： "),n("a",an,[s("webpack-bundle-size-analyzer"),e(a)]),s("、"),n("a",en,[s("source-map-explorer"),e(a)]),s(" 等工具也实现了类似功能，但分别适用于不同场景，建议你也了解一下相关用法，择优选用。")])]),tn,n("p",null,[n("a",pn,[s("Webpack Visualizer"),e(a)]),s(" 是一个在线分析工具，可用于检测、可视化 Webpack 产物的构成模块。有两种用法，一是将 "),on,s(" 文件上传到在线 "),n("a",ln,[s("页面"),e(a)]),s("；二是使用 "),cn,s(" 生成统计页面，用法：")]),rn,n("blockquote",null,[n("p",null,[s("提示：很遗憾，实测发现 "),n("a",un,[s("webpack-visualizer-plugin"),e(a)]),s(" 插件年久失修，只兼容 webpack 1.x ，所以现在几乎没有使用价值了。")])]),n("p",null,[s("此外，在线工具 "),n("a",dn,[s("Webpack Chart"),e(a)]),s(" 也提供了类似的功能，功能重合度很高，这里就不展开讲了。")]),kn,n("p",null,[n("a",bn,[s("webpack-dashboard"),e(a)]),s(" 是一个命令行可视化工具，能够在编译过程中实时展示编译进度、模块分布、产物信息等，用法：")]),mn,n("p",null,[n("a",vn,[s("SpeedMeasureWebpackPlugin"),e(a)]),s(" 插件能够统计出各个 Loader、插件的处理耗时，开发者可以根据这些数据分析出哪些类型的文件处理更耗时间，用法：")]),hn,n("p",null,[s("最后分享 "),n("a",gn,[s("UnusedWebpackPlugin"),e(a)]),s(" 插件，它能够根据 webpack 统计信息，反向查找出工程项目里哪些文件没有被用到，我日常在各种项目重构工作中都会用到，非常实用。用法也比较简单：")]),_n,n("p",null,[s("请仔细观察 "),fn,s(),n("a",wn,[s("示例文件"),e(a)]),s("，思考几个问题：")]),yn])}const zn=p(i,[["render",xn],["__file","di12zhang—goujianxingnen：fenxiang7kuanchangyongdexingnenfenxigongju.html.vue"]]);export{zn as default};
