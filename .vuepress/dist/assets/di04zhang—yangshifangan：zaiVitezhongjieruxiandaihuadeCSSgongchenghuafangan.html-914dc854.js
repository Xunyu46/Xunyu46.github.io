import{_ as p,r as o,o as i,c,b as n,d as s,e,a as t}from"./app-48690364.js";const l={},d=t(`<p>上一小节，我们使用 Vite 初始化了一个 Web 项目，迈出了使用 Vite 的第一步。但在实际工作中，仅用 Vite 官方的脚手架项目是不够的，往往还需要考虑诸多的工程化因素，借助 Vite 本身的配置以及业界的各种生态，才能搭建一个名副其实的脚手架工程。</p><p>那在接下来的几个小节内容中，我们将以<code>实战</code>的方式逐个击破项目工程化的要素。你可以跟着我一起进行编码，从0搭建一个完整的 Vite 项目架构。不仅如此，在实战的过程中，你也会对 Vite 本身的功能有全面了解，能够熟练地将它应用到实际项目。</p><p>样式方案是前端工程化离不开的一个话题，也是本节要具体探讨的内容。在最原始的开发阶段大家都是手写原生的 CSS，但原生 CSS 存在着诸多问题。本小节，我们通过引入现代的各种 CSS 样式方案，一起动手实践，让你学会如何在 Vite 中落地这些样式方案。</p><h2 id="样式方案的意义" tabindex="-1"><a class="header-anchor" href="#样式方案的意义" aria-hidden="true">#</a> 样式方案的意义</h2><p>对初学者来说，谈到开发前端的样式，首先想到的便是直接写原生 CSS。但时间一长，难免会发现原生 CSS 开发的各种问题。那么，如果我们不用任何 CSS 工程方案，又会出现哪些问题呢？</p><ol><li><strong>开发体验</strong>欠佳。比如原生 CSS 不支持选择器的嵌套:</li></ol><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">// 选择器只能平铺，不能嵌套
.container .header .nav .title .text</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.container .header .nav .box</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid grey<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>样式污染</strong>问题。如果出现同样的类名，很容易造成不同的样式互相覆盖和污染。</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// a.css</span>
<span class="token punctuation">.</span>container <span class="token punctuation">{</span>
  color<span class="token operator">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// b.css</span>
<span class="token comment">// 很有可能覆盖 a.css 的样式！</span>
<span class="token punctuation">.</span>container <span class="token punctuation">{</span>
  color<span class="token operator">:</span> blue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>浏览器兼容</strong>问题。为了兼容不同的浏览器，我们需要对一些属性(如<code>transition</code>)加上不同的浏览器前缀，比如 <code>-webkit-</code>、<code>-moz-</code>、<code>-ms-</code>、<code>-o-</code>，意味着开发者要针对同一个样式属性写很多的冗余代码。</li><li>打包后的<strong>代码体积</strong>问题。如果不用任何的 CSS 工程化方案，所有的 CSS 代码都将打包到产物中，即使有部分样式并没有在代码中使用，导致产物体积过大。</li></ol><p>针对如上原生 CSS 的痛点，社区中诞生了不少解决方案，常见的有 5 类。</p><ol><li><code>CSS 预处理器</code>：主流的包括<code>Sass/Scss</code>、<code>Less</code>和<code>Stylus</code>。这些方案各自定义了一套语法，让 CSS 也能使用嵌套规则，甚至能像编程语言一样定义变量、写条件判断和循环语句，大大增强了样式语言的灵活性，解决原生 CSS 的<strong>开发体验问题</strong>。</li><li><code>CSS Modules</code>：能将 CSS 类名处理成哈希值，这样就可以避免同名的情况下<strong>样式污染</strong>的问题。</li><li>CSS 后处理器<code>PostCSS</code>，用来解析和处理 CSS 代码，可以实现的功能非常丰富，比如将 <code>px</code> 转换为 <code>rem</code>、根据目标浏览器情况自动加上类似于<code>--moz--</code>、<code>-o-</code>的属性前缀等等。</li><li><code>CSS in JS</code> 方案，主流的包括<code>emotion</code>、<code>styled-components</code>等等，顾名思义，这类方案可以实现直接在 JS 中写样式代码，基本包含<code>CSS 预处理器</code>和 <code>CSS Modules</code> 的各项优点，非常灵活，解决了开发体验和全局样式污染的问题。</li><li>CSS 原子化框架，如<code>Tailwind CSS</code>、<code>Windi CSS</code>，通过类名来指定样式，大大简化了样式写法，提高了样式开发的效率，主要解决了原生 CSS <strong>开发体验</strong>的问题。</li></ol><p>不过，各种方案没有孰优孰劣，各自解决的方案有重叠的部分，但也有一定的差异，大家可以根据自己项目的痛点来引入。接下来，我们进入实战阶段，在 Vite 中应用上述常见的 CSS 方案。</p><h3 id="css-预处理器" tabindex="-1"><a class="header-anchor" href="#css-预处理器" aria-hidden="true">#</a> CSS 预处理器</h3><p>Vite 本身对 CSS 各种预处理器语言(<code>Sass/Scss</code>、<code>Less</code>和<code>Stylus</code>)做了内置支持。也就是说，即使你不经过任何的配置也可以直接使用各种 CSS 预处理器。我们以 <code>Sass/Scss</code> 为例，来具体感受一下 Vite 的<code>零配置</code>给我们带来的便利。</p><p>由于 Vite 底层会调用 CSS 预处理器的官方库进行编译，而 Vite 为了实现按需加载，并没有内置这些工具库，而是让用户根据需要安装。因此，我们首先安装 Sass 的官方库，安装命令如下:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> i sass <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后，在上一节初始化后的项目中新建 <code>src/components/Header</code> 目录，并且分别新建<code>index.tsx</code> 和 <code>index.scss</code>文件，代码如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// index.tsx</span>
<span class="token keyword">import</span> <span class="token string">&#39;./index.scss&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>p className<span class="token operator">=</span><span class="token string">&quot;header&quot;</span><span class="token operator">&gt;</span>This <span class="token keyword">is</span> Header<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// index.scss</span>
<span class="token punctuation">.</span>header <span class="token punctuation">{</span>
  color<span class="token operator">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就完成了一个最简单的 demo 组件。接着我们在 <code>App.tsx</code> 应用这个组件:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Header <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./components/Header&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>Header <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在你可以执行<code>pnpm run dev</code>，然后到浏览器上查看效果:</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0f2b53ea3fd74ef6bd7029749a282b91~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>内容比较简单，如果页面出现红色的文字部分，就说明 <code>scss</code> 文件中的样式已经成功生效。好，现在我们封装一个全局的主题色，新建<code>src/variable.scss</code>文件，内容如下:</p><div class="language-scss line-numbers-mode" data-ext="scss"><pre class="language-scss"><code><span class="token comment">// variable.scss</span>
<span class="token property"><span class="token variable">$theme-color</span></span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们在原来 Header 组件的样式中应用这个变量:</p><div class="language-scss line-numbers-mode" data-ext="scss"><pre class="language-scss"><code><span class="token keyword">@import</span> <span class="token string">&quot;../../variable&quot;</span><span class="token punctuation">;</span>

<span class="token selector">.header </span><span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">$theme-color</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>回到浏览器访问页面，可以看到样式依然生效。你可能会注意到，每次要使用<code>$theme-color</code>属性的时候我们都需要手动引入<code>variable.scss</code>文件，那有没有自动引入的方案呢？这就需要在 Vite 中进行一些自定义配置了，在配置文件中增加如下的内容:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// vite.config.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> normalizePath <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 如果类型报错，需要安装 @types/node: pnpm i @types/node -D</span>
<span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">&#39;path&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 全局 scss 文件的路径</span>
<span class="token comment">// 用 normalizePath 解决 window 下的路径问题</span>
<span class="token keyword">const</span> variablePath <span class="token operator">=</span> <span class="token function">normalizePath</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;./src/variable.scss&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// css 相关的配置</span>
  css<span class="token operator">:</span> <span class="token punctuation">{</span>
    preprocessorOptions<span class="token operator">:</span> <span class="token punctuation">{</span>
      scss<span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">// additionalData 的内容会在每个 scss 文件的开头自动注入</span>
        additionalData<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">@import &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>variablePath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;;</span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在你可以直接在文件中使用全局文件的变量，相当于之前手动引入的方式显然方便了许多:</p><div class="language-scss line-numbers-mode" data-ext="scss"><pre class="language-scss"><code><span class="token selector">.header </span><span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">$theme-color</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样的，你可以对 <code>less</code>和<code>stylus</code>进行一些能力的配置，如果有需要你可以去下面的官方文档中查阅更多的配置项:</p>`,32),u={href:"https://sass-lang.com/documentation/js-api/modules#render",target:"_blank",rel:"noopener noreferrer"},r={href:"https://lesscss.org/usage/#less-options",target:"_blank",rel:"noopener noreferrer"},k={href:"https://stylus-lang.com/docs/js.html",target:"_blank",rel:"noopener noreferrer"},v=t(`<h3 id="css-modules" tabindex="-1"><a class="header-anchor" href="#css-modules" aria-hidden="true">#</a> CSS Modules</h3><p>CSS Modules 在 Vite 也是一个开箱即用的能力，Vite 会对后缀带有<code>.module</code>的样式文件自动应用 CSS Modules。接下来我们通过一个简单的例子来使用这个功能。</p><p>首先，将 Header 组件中的<code>index.scss</code>更名为<code>index.module.scss</code>，然后稍微改动一下<code>index.tsx</code>的内容，如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// index.tsx</span>
<span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">&#39;./index.module.scss&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>p className<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>header<span class="token punctuation">}</span><span class="token operator">&gt;</span>This <span class="token keyword">is</span> Header<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在打开浏览器，可以看见 p 标签的类名已经被处理成了哈希值的形式:</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b81adefe16484da98bebf6174db36300~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>说明现在 CSS Modules 已经正式生效了！同样的，你也可以在配置文件中的<code>css.modules</code>选项来配置 CSS Modules 的功能，比如下面这个例子:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// vite.config.ts</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  css<span class="token operator">:</span> <span class="token punctuation">{</span>
    modules<span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// 一般我们可以通过 generateScopedName 属性来对生成的类名进行自定义</span>
      <span class="token comment">// 其中，name 表示当前文件名，local 表示类名</span>
      generateScopedName<span class="token operator">:</span> <span class="token string">&quot;[name]__[local]___[hash:base64:5]&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    preprocessorOptions<span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// 省略预处理器配置</span>
    <span class="token punctuation">}</span>

  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次访问页面，我们可以发现刚才的类名已经变成了我们自定义的形式:</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9fc26be6dffd4b13b8b15603ba069f62~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>`,10),m={href:"https://github.com/madyankin/postcss-modules",target:"_blank",rel:"noopener noreferrer"},b=t(`<h3 id="postcss" tabindex="-1"><a class="header-anchor" href="#postcss" aria-hidden="true">#</a> PostCSS</h3><p>一般你可以通过 <code>postcss.config.js</code> 来配置 postcss ，不过在 Vite 配置文件中已经提供了 PostCSS 的配置入口，我们可以直接在 Vite 配置文件中进行操作。</p><p>首先，我们来安装一个常用的 PostCSS 插件——<code>autoprefixer</code>:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> i autoprefixer <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个插件主要用来自动为不同的目标浏览器添加样式前缀，解决的是浏览器兼容性的问题。接下来让我们在 Vite 中接入这个插件:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// vite.config.ts 增加如下的配置</span>
<span class="token keyword">import</span> autoprefixer <span class="token keyword">from</span> <span class="token string">&#39;autoprefixer&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  css<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 进行 PostCSS 配置</span>
    postcss<span class="token operator">:</span> <span class="token punctuation">{</span>
      plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token function">autoprefixer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          <span class="token comment">// 指定目标浏览器</span>
          overrideBrowserslist<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;Chrome &gt; 40&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ff &gt; 31&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ie 11&#39;</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置完成后，我们回到 Header 组件的样式文件中添加一个新的 CSS 属性:</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.header</span> <span class="token punctuation">{</span>
  &lt;!-- 前面的样式省略 --&gt;
  <span class="token property">text-decoration</span><span class="token punctuation">:</span> dashed<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以执行<code>pnpm run build</code>命令进行打包，可以看到产物中自动补上了浏览器前缀，如:</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">._header_kcvt0_1</span> <span class="token punctuation">{</span>
  &lt;!-- 前面的样式省略 --&gt;
  <span class="token property">-webkit-text-decoration</span><span class="token punctuation">:</span> dashed<span class="token punctuation">;</span>
  <span class="token property">-moz-text-decoration</span><span class="token punctuation">:</span> dashed<span class="token punctuation">;</span>
  <span class="token property">text-decoration</span><span class="token punctuation">:</span> dashed<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于有 CSS 代码的 AST (抽象语法树)解析能力，PostCSS 可以做的事情非常多，甚至能实现 CSS 预处理器语法和 CSS Modules，社区当中也有不少的 PostCSS 插件，除了刚刚提到的<code>autoprefixer</code>插件，常见的插件还包括:</p>`,11),g={href:"https://github.com/cuth/postcss-pxtorem",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/csstools/postcss-preset-env",target:"_blank",rel:"noopener noreferrer"},S={href:"https://github.com/cssnano/cssnano",target:"_blank",rel:"noopener noreferrer"},f=t(`<p>关于 PostCSS 插件，这里还给大家推荐一个站点：https://www.postcss.parts/ ，你可以去里面探索更多的内容。</p><h3 id="css-in-js" tabindex="-1"><a class="header-anchor" href="#css-in-js" aria-hidden="true">#</a> CSS In JS</h3><p>社区中有两款主流的<code>CSS In JS</code> 方案: <code>styled-components</code>和<code>emotion</code>。</p><p>对于 CSS In JS 方案，在构建侧我们需要考虑<code>选择器命名问题</code>、<code>DCE</code>(Dead Code Elimination 即无用代码删除)、<code>代码压缩</code>、<code>生成 SourceMap</code>、<code>服务端渲染(SSR)</code>等问题，而<code>styled-components</code>和<code>emotion</code>已经提供了对应的 babel 插件来解决这些问题，我们在 Vite 中要做的就是集成这些 babel 插件。</p><p>具体来说，上述的两种主流 CSS in JS 方案在 Vite 中集成方式如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// vite.config.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>
<span class="token keyword">import</span> react <span class="token keyword">from</span> <span class="token string">&#39;@vitejs/plugin-react&#39;</span>

<span class="token comment">// https://vitejs.dev/config/</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">react</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      babel<span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">// 加入 babel 插件</span>
        <span class="token comment">// 以下插件包都需要提前安装</span>
        <span class="token comment">// 当然，通过这个配置你也可以添加其它的 Babel 插件</span>
        plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token comment">// 适配 styled-component</span>
          <span class="token string">&quot;babel-plugin-styled-components&quot;</span>
          <span class="token comment">// 适配 emotion</span>
          <span class="token string">&quot;@emotion/babel-plugin&quot;</span>
        <span class="token punctuation">]</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token comment">// 注意: 对于 emotion，需要单独加上这个配置</span>
      <span class="token comment">// 通过 \`@emotion/react\` 包编译 emotion 中的特殊 jsx 语法</span>
      jsxImportSource<span class="token operator">:</span> <span class="token string">&quot;@emotion/react&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="css-原子化框架" tabindex="-1"><a class="header-anchor" href="#css-原子化框架" aria-hidden="true">#</a> CSS 原子化框架</h3>`,7),y=n("code",null,"Tailwind CSS",-1),x=n("code",null,"Windi CSS",-1),w=n("code",null,"Tailwind CSS v2",-1),C={href:"https://v2.tailwindcss.com/docs/just-in-time-mode",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"attributify",-1),q=n("code",null,"shortcuts",-1),j=t(`<h4 id="_1-windi-css-接入" tabindex="-1"><a class="header-anchor" href="#_1-windi-css-接入" aria-hidden="true">#</a> 1. Windi CSS 接入</h4><p>首先安装 <code>windicss</code> 及对应的 Vite 插件:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pnpm i windicss vite-plugin-windicss -D
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>随后我们在配置文件中来使用它:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// vite.config.ts</span>
<span class="token keyword">import</span> windi <span class="token keyword">from</span> <span class="token string">&quot;vite-plugin-windicss&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// 省略其它插件</span>
    <span class="token function">windi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着要注意在<code>src/main.tsx</code>中引入一个必需的 import 语句:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// main.tsx</span>
<span class="token comment">// 用来注入 Windi CSS 所需的样式，一定要加上！</span>
<span class="token keyword">import</span> <span class="token string">&quot;virtual:windi.css&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样我们就完成了 Windi CSS 在 Vite 中的接入，接下来我们在 Header 组件中来测试，组件代码修改如下:</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// src/components/Header/index.tsx</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> devDependencies <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../../../package.json&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>p-20px text-center<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>font-bold text-2xl mb-2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        vite version: </span><span class="token punctuation">{</span>devDependencies<span class="token punctuation">.</span>vite<span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动项目可以看到如下的效果，说明样式已经正常生效:</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/365202ff835848558a2fd69cffd97d83~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>除了本身的原子化 CSS 能力，Windi CSS 还有一些非常好用的高级功能，在此我给大家推荐自己常用的两个能力: <strong>attributify</strong> 和 <strong>shortcuts</strong>。</p><p>要开启这两个功能，我们需要在项目根目录新建<code>windi.config.ts</code>，配置如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vite-plugin-windicss&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 开启 attributify</span>
  attributify<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先我们来看看<code>attributify</code>，翻译过来就是<code>属性化</code>，也就是说我们可以用 props 的方式去定义样式属性，如下所示:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> 
  <span class="token attr-name">bg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>blue-400 hover:blue-500 dark:blue-500 dark:hover:blue-600<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sm white<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">font</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mono light<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>y-2 x-4<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>2 rounded blue-200<span class="token punctuation">&quot;</span></span>
<span class="token punctuation">&gt;</span></span>
  Button
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样的开发方式不仅省去了繁琐的 className 内容，还加强了语义化，让代码更易维护，大大提升了开发体验。</p><p>不过使用<code>attributify</code>的时候需要注意类型问题，你需要添加<code>types/shim.d.ts</code>来增加类型声明，以防类型报错:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> AttributifyAttributes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;windicss/types/jsx&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;react&#39;</span> <span class="token punctuation">{</span>
  <span class="token keyword">type</span> <span class="token class-name">HTMLAttributes<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> AttributifyAttributes<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>shortcuts</code> 用来封装一系列的原子化能力，尤其是一些常见的类名集合，我们在 <code>windi.config.ts</code>来配置它:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">//windi.config.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vite-plugin-windicss&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  attributify<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  shortcuts<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;flex-c&quot;</span><span class="token operator">:</span> <span class="token string">&quot;flex justify-center items-center&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比如这里封装了<code>flex-c</code>的类名，接下来我们可以在业务代码直接使用这个类名:</p><div class="language-HTML line-numbers-mode" data-ext="HTML"><pre class="language-HTML"><code>&lt;div className=&quot;flex-c&quot;&gt;&lt;/div&gt;
&lt;!-- 等同于下面这段 --&gt;
&lt;div className=&quot;flex justify-center items-center&quot;&gt;&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你也有过 Windi CSS 的开发经历，欢迎把你用到的高级功能分享到评论区，让大家一起来见识见识。</p><h4 id="_2-tailwind-css" tabindex="-1"><a class="header-anchor" href="#_2-tailwind-css" aria-hidden="true">#</a> 2. Tailwind CSS</h4><p>接下来我们来接入 Tailwind CSS 方案，为了避免和之前的 Windi CSS 混淆，这里我建议你新起一个 Vite 项目。</p>`,26),V={href:"https://github.com/sanyuan0704/juejin-book-vite/tree/main/other/tailwind-demo",target:"_blank",rel:"noopener noreferrer"},H=t(`<p>首先安装 <code>tailwindcss</code> 及其必要的依赖:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>pnpm install <span class="token operator">-</span><span class="token constant">D</span> tailwindcss postcss autoprefixer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后新建两个配置文件<code>tailwind.config.js</code>和<code>postcss.config.js</code>:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// tailwind.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  content<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;./index.html&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;./src/**/*.{vue,js,ts,jsx,tsx}&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  theme<span class="token operator">:</span> <span class="token punctuation">{</span>
    extend<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// postcss.config.js</span>
<span class="token comment">// 从中你可以看到，Tailwind CSS 的编译能力是通过 PostCSS 插件实现的</span>
<span class="token comment">// 而 Vite 本身内置了 PostCSS，因此可以通过 PostCSS 配置接入 Tailwind CSS </span>
<span class="token comment">// 注意: Vite 配置文件中如果有 PostCSS 配置的情况下会覆盖掉 post.config.js 的内容!</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">{</span>
    tailwindcss<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    autoprefixer<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着在项目的入口 CSS 中引入必要的样板代码:</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@tailwind</span> base<span class="token punctuation">;</span></span>
<span class="token atrule"><span class="token rule">@tailwind</span> components<span class="token punctuation">;</span></span>
<span class="token atrule"><span class="token rule">@tailwind</span> utilities<span class="token punctuation">;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，你就可以在项目中安心地使用 Tailwind 样式了，如下所示:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// App.tsx</span>

<span class="token keyword">import</span> logo <span class="token keyword">from</span> <span class="token string">&quot;./logo.svg&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">&quot;./App.css&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>header className<span class="token operator">=</span><span class="token string">&quot;App-header&quot;</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">{</span>logo<span class="token punctuation">}</span> className<span class="token operator">=</span><span class="token string">&quot;w-20&quot;</span> alt<span class="token operator">=</span><span class="token string">&quot;logo&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>p className<span class="token operator">=</span><span class="token string">&quot;bg-red-400&quot;</span><span class="token operator">&gt;</span>Hello Vite <span class="token operator">+</span> React<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>header<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当你启动项目之后可以看到 Tailwind CSS 的样式已经正常生效:</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ee40cd8839f74ab6987e49d9bbe470a1~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>OK，本小节的内容到这里就结束了。这一节我们完成了脚手架项目样式部分的搭建，你需要重点掌握前端工程中各种样式方案在 Vite 的接入方法。这些样式方案包括，包括<code>CSS 预处理器</code>、<code>CSS Modules</code>、<code>PostCSS</code>、<code>CSS In JS</code>和 <code>CSS 原子化框架(Windi CSS)</code>。与此同时，你应该明白了各种样式方案的含义以及背后所解决的问题。接下来，我们将会进入项目规范搭建的部分，让我们下一节再见！</p>`,12);function T(P,N){const a=o("ExternalLinkIcon");return i(),c("div",null,[d,n("ul",null,[n("li",null,[n("a",u,[s("Sass"),e(a)])]),n("li",null,[n("a",r,[s("Less"),e(a)])]),n("li",null,[n("a",k,[s("Stylus"),e(a)])])]),v,n("p",null,[s("这是一个 CSS Modules 中很常见的配置，对开发时的调试非常有用。其它的一些配置项不太常用，大家可以去这个"),n("a",m,[s("地址"),e(a)]),s("进行查阅。")]),b,n("ul",null,[n("li",null,[n("a",g,[s("postcss-pxtorem"),e(a)]),s("： 用来将 px 转换为 rem 单位，在适配移动端的场景下很常用。")]),n("li",null,[n("a",h,[s("postcss-preset-env"),e(a)]),s(": 通过它，你可以编写最新的 CSS 语法，不用担心兼容性问题。")]),n("li",null,[n("a",S,[s("cssnano"),e(a)]),s(": 主要用来压缩 CSS 代码，跟常规的代码压缩工具不一样，它能做得更加智能，比如提取一些公共样式进行复用、缩短一些常见的属性值等等。")])]),f,n("p",null,[s("在目前的社区当中，CSS 原子化框架主要包括"),y,s(" 和 "),x,s("。Windi CSS 作为前者的替换方案，实现了按需生成 CSS 类名的功能，开发环境下的 CSS 产物体积大大减少，速度上比"),w,s("快 20~100 倍！当然，Tailwind CSS 在 v3 版本也引入 "),n("a",C,[s("JIT(即时编译)"),e(a)]),s(" 的功能，解决了开发环境下 CSS 产物体积庞大的问题。接下来我们将这两个方案分别接入到 Vite 中，在实际的项目中你只需要使用其中一种就可以了。我个人比较喜欢 Windi CSS 本身的"),_,s("、"),q,s("等独有的特性，因此首先从 windicss 开始说起。")]),j,n("blockquote",null,[n("p",null,[s("小册中对应的 GitHub "),n("a",V,[s("代码地址"),e(a)]),s("。")])]),H])}const A=p(l,[["render",T],["__file","di04zhang—yangshifangan：zaiVitezhongjieruxiandaihuadeCSSgongchenghuafangan.html.vue"]]);export{A as default};
