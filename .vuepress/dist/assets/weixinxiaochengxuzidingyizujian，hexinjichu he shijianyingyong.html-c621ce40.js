const l=JSON.parse('{"key":"v-9c3194b6","path":"/blogs/web/applet/weixinxiaochengxuzidingyizujian，hexinjichu he shijianyingyong.html","title":"微信小程序自定义组件，核心基础 和 实践应用","lang":"en-US","frontmatter":{"title":"微信小程序自定义组件，核心基础 和 实践应用","date":"2023-10-28T00:00:00.000Z","sidebar":"auto","categories":["applet"],"tags":["applet"],"publish":true},"headers":[{"level":2,"title":"一、自定义组件的基本概念","slug":"一、自定义组件的基本概念","link":"#一、自定义组件的基本概念","children":[{"level":3,"title":"1、创建自定义组件","slug":"_1、创建自定义组件","link":"#_1、创建自定义组件","children":[]},{"level":3,"title":"2、引用自定义组件","slug":"_2、引用自定义组件","link":"#_2、引用自定义组件","children":[]},{"level":3,"title":"2.1、局部引用 和 使用自定义组件","slug":"_2-1、局部引用-和-使用自定义组件","link":"#_2-1、局部引用-和-使用自定义组件","children":[]},{"level":3,"title":"2.2、全局引用 和 使用自定义组件","slug":"_2-2、全局引用-和-使用自定义组件","link":"#_2-2、全局引用-和-使用自定义组件","children":[]},{"level":3,"title":"3、全局引用 VS 局部引用 的应用场景","slug":"_3、全局引用-vs-局部引用-的应用场景","link":"#_3、全局引用-vs-局部引用-的应用场景","children":[]},{"level":3,"title":"4、自定义组件和页面的区别","slug":"_4、自定义组件和页面的区别","link":"#_4、自定义组件和页面的区别","children":[]}]},{"level":2,"title":"二、自定义组件 - 模板和样式","slug":"二、自定义组件-模板和样式","link":"#二、自定义组件-模板和样式","children":[{"level":3,"title":"1、自定义组件的模板","slug":"_1、自定义组件的模板","link":"#_1、自定义组件的模板","children":[]},{"level":3,"title":"2、自定义组件样式隔离","slug":"_2、自定义组件样式隔离","link":"#_2、自定义组件样式隔离","children":[]},{"level":3,"title":"3、自定义组件样式隔离的注意事项","slug":"_3、自定义组件样式隔离的注意事项","link":"#_3、自定义组件样式隔离的注意事项","children":[]},{"level":3,"title":"4、修改自定义组件的样式隔离选项","slug":"_4、修改自定义组件的样式隔离选项","link":"#_4、修改自定义组件的样式隔离选项","children":[]},{"level":3,"title":"5、styleIsolation 的可选值","slug":"_5、styleisolation-的可选值","link":"#_5、styleisolation-的可选值","children":[]}]},{"level":2,"title":"三、自定义组件 - 数据、方法、属性","slug":"三、自定义组件-数据、方法、属性","link":"#三、自定义组件-数据、方法、属性","children":[{"level":3,"title":"1、data 数据","slug":"_1、data-数据","link":"#_1、data-数据","children":[]},{"level":3,"title":"2、methods 方法","slug":"_2、methods-方法","link":"#_2、methods-方法","children":[]},{"level":3,"title":"3、properties 属性","slug":"_3、properties-属性","link":"#_3、properties-属性","children":[]},{"level":3,"title":"4、properties 属性的应用","slug":"_4、properties-属性的应用","link":"#_4、properties-属性的应用","children":[]},{"level":3,"title":"5、data 和 properties 的区别","slug":"_5、data-和-properties-的区别","link":"#_5、data-和-properties-的区别","children":[]},{"level":3,"title":"6、使用 setData 修改 properties 属性的值","slug":"_6、使用-setdata-修改-properties-属性的值","link":"#_6、使用-setdata-修改-properties-属性的值","children":[]}]},{"level":2,"title":"四、自定义组件 - 数据监听器","slug":"四、自定义组件-数据监听器","link":"#四、自定义组件-数据监听器","children":[{"level":3,"title":"1、什么是数据监听器","slug":"_1、什么是数据监听器","link":"#_1、什么是数据监听器","children":[]},{"level":3,"title":"2、数据监听器的用法 - 监听字段","slug":"_2、数据监听器的用法-监听字段","link":"#_2、数据监听器的用法-监听字段","children":[]},{"level":3,"title":"3、监听对象属性的变化","slug":"_3、监听对象属性的变化","link":"#_3、监听对象属性的变化","children":[]},{"level":3,"title":"4、数据监听器的实践应用","slug":"_4、数据监听器的实践应用","link":"#_4、数据监听器的实践应用","children":[]},{"level":3,"title":"4.1、新建 color 自定义组件","slug":"_4-1、新建-color-自定义组件","link":"#_4-1、新建-color-自定义组件","children":[]},{"level":3,"title":"4.2、渲染 UI 结构 和 定义组件样式","slug":"_4-2、渲染-ui-结构-和-定义组件样式","link":"#_4-2、渲染-ui-结构-和-定义组件样式","children":[]},{"level":3,"title":"4.3、定义 button 按钮的事件处理函数","slug":"_4-3、定义-button-按钮的事件处理函数","link":"#_4-3、定义-button-按钮的事件处理函数","children":[]},{"level":3,"title":"4.4、监听对象中指定属性的变化","slug":"_4-4、监听对象中指定属性的变化","link":"#_4-4、监听对象中指定属性的变化","children":[]},{"level":3,"title":"5、监听对象中所有属性的变化","slug":"_5、监听对象中所有属性的变化","link":"#_5、监听对象中所有属性的变化","children":[]}]},{"level":2,"title":"五、自定义组件 - 纯数据字段","slug":"五、自定义组件-纯数据字段","link":"#五、自定义组件-纯数据字段","children":[{"level":3,"title":"1、什么是纯数据字段","slug":"_1、什么是纯数据字段","link":"#_1、什么是纯数据字段","children":[]},{"level":3,"title":"2、使用规则","slug":"_2、使用规则","link":"#_2、使用规则","children":[]},{"level":3,"title":"3、使用纯数据字段改造数据监听器应用案例","slug":"_3、使用纯数据字段改造数据监听器应用案例","link":"#_3、使用纯数据字段改造数据监听器应用案例","children":[]}]},{"level":2,"title":"六、自定义组件 - 生命周期","slug":"六、自定义组件-生命周期","link":"#六、自定义组件-生命周期","children":[{"level":3,"title":"1、自定义组件的全部生命周期函数","slug":"_1、自定义组件的全部生命周期函数","link":"#_1、自定义组件的全部生命周期函数","children":[]},{"level":3,"title":"2、自定义组件中主要（最重要）的生命周期函数","slug":"_2、自定义组件中主要-最重要-的生命周期函数","link":"#_2、自定义组件中主要-最重要-的生命周期函数","children":[]},{"level":3,"title":"3、定义生命周期函数的方法","slug":"_3、定义生命周期函数的方法","link":"#_3、定义生命周期函数的方法","children":[]},{"level":3,"title":"4、自定义组件所在页面的生命周期","slug":"_4、自定义组件所在页面的生命周期","link":"#_4、自定义组件所在页面的生命周期","children":[]},{"level":3,"title":"4.1、自定义组件所在页面的生命周期 - pageLifetimes 节点","slug":"_4-1、自定义组件所在页面的生命周期-pagelifetimes-节点","link":"#_4-1、自定义组件所在页面的生命周期-pagelifetimes-节点","children":[]},{"level":3,"title":"4.2、实践应用 - 在页面展示时为其中的自定义组件更新数据","slug":"_4-2、实践应用-在页面展示时为其中的自定义组件更新数据","link":"#_4-2、实践应用-在页面展示时为其中的自定义组件更新数据","children":[]}]},{"level":2,"title":"七、自定义组件 - 插槽","slug":"七、自定义组件-插槽","link":"#七、自定义组件-插槽","children":[{"level":3,"title":"1、什么是插槽","slug":"_1、什么是插槽","link":"#_1、什么是插槽","children":[]},{"level":3,"title":"2、自定义组件 - 单个插槽","slug":"_2、自定义组件-单个插槽","link":"#_2、自定义组件-单个插槽","children":[]},{"level":3,"title":"3、自定义组件 - 启用多个插槽","slug":"_3、自定义组件-启用多个插槽","link":"#_3、自定义组件-启用多个插槽","children":[]},{"level":3,"title":"4、定义多个插槽","slug":"_4、定义多个插槽","link":"#_4、定义多个插槽","children":[]},{"level":3,"title":"5、使用多个插槽","slug":"_5、使用多个插槽","link":"#_5、使用多个插槽","children":[]}]},{"level":2,"title":"八、自定义组件 - 父子组件之间的通信","slug":"八、自定义组件-父子组件之间的通信","link":"#八、自定义组件-父子组件之间的通信","children":[{"level":3,"title":"1、父子组件之间通信的 3 种方式","slug":"_1、父子组件之间通信的-3-种方式","link":"#_1、父子组件之间通信的-3-种方式","children":[]},{"level":3,"title":"2、属性绑定（WXML 数据绑定） - 实现父子组件间的通信","slug":"_2、属性绑定-wxml-数据绑定-实现父子组件间的通信","link":"#_2、属性绑定-wxml-数据绑定-实现父子组件间的通信","children":[]},{"level":3,"title":"3、实现子组件中属性值的操作","slug":"_3、实现子组件中属性值的操作","link":"#_3、实现子组件中属性值的操作","children":[]},{"level":3,"title":"4、事件绑定 - 实现父子组件间的通信","slug":"_4、事件绑定-实现父子组件间的通信","link":"#_4、事件绑定-实现父子组件间的通信","children":[]},{"level":3,"title":"4.1、步骤 1 在父组件中，定义一个函数","slug":"_4-1、步骤-1-在父组件中-定义一个函数","link":"#_4-1、步骤-1-在父组件中-定义一个函数","children":[]},{"level":3,"title":"4.2、步骤 2 在父组件中，通过自定义事件的形式引用函数","slug":"_4-2、步骤-2-在父组件中-通过自定义事件的形式引用函数","link":"#_4-2、步骤-2-在父组件中-通过自定义事件的形式引用函数","children":[]},{"level":3,"title":"4.3、步骤 3 在组件中，调用 this.triggerEvent 将数据发送给父组件","slug":"_4-3、步骤-3-在组件中-调用-this-triggerevent-将数据发送给父组件","link":"#_4-3、步骤-3-在组件中-调用-this-triggerevent-将数据发送给父组件","children":[]},{"level":3,"title":"4.4、步骤 4 在父组件中，通过 e.detail 获取子组件的数据","slug":"_4-4、步骤-4-在父组件中-通过-e-detail-获取子组件的数据","link":"#_4-4、步骤-4-在父组件中-通过-e-detail-获取子组件的数据","children":[]},{"level":3,"title":"5、获取自定义组件的实例","slug":"_5、获取自定义组件的实例","link":"#_5、获取自定义组件的实例","children":[]}]},{"level":2,"title":"九、自定义组件 - behaviors","slug":"九、自定义组件-behaviors","link":"#九、自定义组件-behaviors","children":[{"level":3,"title":"1、什么是 behaviors","slug":"_1、什么是-behaviors","link":"#_1、什么是-behaviors","children":[]},{"level":3,"title":"2、behaviors 的工作方式","slug":"_2、behaviors-的工作方式","link":"#_2、behaviors-的工作方式","children":[]},{"level":3,"title":"3、创建 behaviors","slug":"_3、创建-behaviors","link":"#_3、创建-behaviors","children":[]},{"level":3,"title":"4、导入并使用 behavior","slug":"_4、导入并使用-behavior","link":"#_4、导入并使用-behavior","children":[]},{"level":3,"title":"5、behavior 中所有可用的节点","slug":"_5、behavior-中所有可用的节点","link":"#_5、behavior-中所有可用的节点","children":[]},{"level":3,"title":"6、behavior 中同名字段的覆盖 和 组合规则","slug":"_6、behavior-中同名字段的覆盖-和-组合规则","link":"#_6、behavior-中同名字段的覆盖-和-组合规则","children":[]}]}],"git":{"createdTime":1698506571000,"updatedTime":1705051907000,"contributors":[{"name":"xunyu","email":"2548126293@qq.com","commits":2}]},"filePathRelative":"blogs/web/applet/微信小程序自定义组件，核心基础 和 实践应用.md"}');export{l as data};
