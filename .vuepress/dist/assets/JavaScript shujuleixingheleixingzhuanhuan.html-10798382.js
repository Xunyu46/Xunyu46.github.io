import{_ as e,r as p,o,c as l,b as n,d as s,e as c,a}from"./app-e6acbbcc.js";const i={},u=a(`<h1 id="javascript-数据类型和类型转换" tabindex="-1"><a class="header-anchor" href="#javascript-数据类型和类型转换" aria-hidden="true">#</a> JavaScript 数据类型和类型转换</h1><p>系统性的学习和掌握数据类型、类型转换是学好 JavaScript 的前提。</p><h2 id="一、数据类型简介和检测" tabindex="-1"><a class="header-anchor" href="#一、数据类型简介和检测" aria-hidden="true">#</a> 一、数据类型简介和检测</h2><p>本节课我们来学习数据类型的简介和检测，我们会从以下四个方面来讲解</p><ul><li>为什么需要数据类型</li><li>JS 中数据类型的分类</li><li>JS 中变量的类型</li><li>如何检测变量和值的类型</li></ul><h3 id="_1、为什么需要数据类型" tabindex="-1"><a class="header-anchor" href="#_1、为什么需要数据类型" aria-hidden="true">#</a> 1、为什么需要数据类型</h3><p>本节课我们来讲解 JS 中的数据类型。在正式学习数据类型前，我们先来思考一个问题 。</p><p><strong>为什么需要把数据分成不同的类型？</strong></p><ul><li>在现实生活中，我们为什么要把东西分类呀？因为不同的东西有不同的特性，我们需要用不同的方式来对待他。比如你会用肥皂洗衣服，但你会用他来洗苹果吗？肯定不会是吧。</li><li>那么在程序中也是一样，程序需要处理大量的不同数据，如果用同一种方式处理那肯定是处理不了的。所以在计算机中同样需要将数据分成不同类型，然后用不同的方式来处理和计算。</li></ul><p><strong>我们来看一段 js 代码</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//2</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token string">&quot;1&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 11</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2  11</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：</p><ul><li>计算机他如何知道 1+1 的结果是 2，而&#39;1&#39;+&#39;1&#39;的结果是 11 呢？</li><li>他就是通过数据类型来判断的。上面的 1+1 是数字的 1+1,他就会按照数字运算规则来计算。</li><li>而下面的的&#39;1&#39;+&#39;1&#39; 是字符串的&#39;1&#39;+&#39;1&#39; 那他就会根据字符串的拼接来操作，结果就是 11。</li></ul><p><strong>通过这个例子，我们知道</strong></p><p>数据类型背后，隐藏的是编译器或者解释器对数据处理方式的定义。把数据分成不同的数据类型，然后用不的处理的方式处理，这就显得非常有必要了。</p><p>所以我们需要了解 JS 中有那几种不同的数据类型，他们有什么特性，计算机是如何来处理这一类型的数据。</p><p>接下来我们就一起来学习下，JS 中数据类型的分类</p><h3 id="_2、js-中数据类型的分类" tabindex="-1"><a class="header-anchor" href="#_2、js-中数据类型的分类" aria-hidden="true">#</a> 2、JS 中数据类型的分类</h3><p>在 Javascript 中，从大的层面来讲，分为两种数据类型</p><p><strong>7 种基本数据类型（值类型）</strong></p><ul><li>String 字符串类型</li><li>Number 数字类型</li><li>Boolean 布尔类型</li><li>Null 类型</li><li>Undefined 未定义</li><li>Symbol 符号</li><li>BigInt 任意精度的整数</li></ul><p><strong>引用数据类型（对象类型）</strong></p><ul><li>对象（Object）、数组（Array）、函数（Function）</li><li>还有两个特殊的对象：正则（RegExp）和日期（Date）。</li></ul><h3 id="_3、变量的类型" tabindex="-1"><a class="header-anchor" href="#_3、变量的类型" aria-hidden="true">#</a> 3、变量的类型</h3><ul><li>在 JS 中，变量的数据类型是由变量中存储的值的数据类型来决定的。</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// num 的类型是数字类型</span>
  <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;1个苹果&quot;</span><span class="token punctuation">;</span> <span class="token comment">// str 的类型是字符串类型</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>同时 JS 是一种弱类型的语言，他不用提前声明变量的类型。</li><li>代码运行时，变量的数据类型是由<code>JS引擎根据=右边变量的数据类型</code>来判断的。</li><li>运行完毕之后，变量就确定了数据类型。</li><li>也就是说相同的变量在不同的时刻可以是不同的类型。</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">&quot;小明&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 此时a是 string字符串类型</span>
  a <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span> <span class="token comment">// 此时a就是 number 数字类型</span>
  a <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 此时a就是 boolean布尔型</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、typeof-操作符" tabindex="-1"><a class="header-anchor" href="#_4、typeof-操作符" aria-hidden="true">#</a> 4、typeof 操作符</h3><ul><li>JS 有很多种数据类型，我们需要有一种手段来确定变量的数据类型，那么 <strong>typeof 运算符</strong>就可以做到。</li><li>使用 typeof 运算符可以检测<strong>值</strong>或者<strong>变量</strong>的类型。</li><li>用法： <ul><li>检测值类型 <code>typeof 值;</code> 或 <code>typeof(值)</code></li><li>检测变量类型 <code>typeof 变量名;</code> 或 <code>typeof(变量名)</code></li><li>如果 typeof 标测的是一个表达式，则一定要带上括号,如 <code>typeof(2+&#39;2&#39;);</code></li></ul></li></ul><h4 id="_4-1-、检测值的值类" tabindex="-1"><a class="header-anchor" href="#_4-1-、检测值的值类" aria-hidden="true">#</a> 4.1 、检测值的值类</h4><p>如下代码，typeof 检测返回值的类型，然后 console.log 把值的类型在控制台输出。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// number</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token string">&quot;艾编程&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// number</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/image-20220907170026976.a38d4b12.png" alt="image-20220907170026976"></p><h4 id="_4-2-、检查变量的类型" tabindex="-1"><a class="header-anchor" href="#_4-2-、检查变量的类型" aria-hidden="true">#</a> 4.2 、检查变量的类型</h4><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
    b <span class="token operator">=</span> <span class="token string">&quot;艾编程&quot;</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// number</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-3-、注意区分变量和值" tabindex="-1"><a class="header-anchor" href="#_4-3-、注意区分变量和值" aria-hidden="true">#</a> 4.3 、注意区分变量和值</h4><p>变量是不能用<code>&#39; &#39;</code>单引号或<code>&quot;&quot;</code> 双引号包裹的，用<code>&#39;&#39;</code>或<code>“”</code>包裹的是字符串</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//string</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// number</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-4-、typeof-返回值的类型" tabindex="-1"><a class="header-anchor" href="#_4-4-、typeof-返回值的类型" aria-hidden="true">#</a> 4.4 、typeof 返回值的类型</h4><p>typeof 返回值的类型都是字符串类型</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// number</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">typeof</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、5-种基本数据类型" tabindex="-1"><a class="header-anchor" href="#二、5-种基本数据类型" aria-hidden="true">#</a> 二、5 种基本数据类型</h2><p>在接下的数据类型学习中，我们主要学习<code>Number</code>、<code>String</code>、<code>Boolean</code>、<code>null</code>、<code>undefined</code> 的 5 种基础数据类型</p><p>关于<code>BigInt</code>和<code>Symbol</code>在后面的 ES6 中，我们再来学习。</p><h3 id="_1、number-数字类型" tabindex="-1"><a class="header-anchor" href="#_1、number-数字类型" aria-hidden="true">#</a> 1、Number 数字类型</h3><p>关于数字类型，我们会从以下 5 个方面来展开讲解</p><ul><li>什么是数字类型的数据</li><li>不同进制的数字</li><li>数值中的最大值和最小值</li><li>数字型的三个特殊值</li><li>isNaN()方法</li></ul><h4 id="_1-1-、什么是-number-数字类型" tabindex="-1"><a class="header-anchor" href="#_1-1-、什么是-number-数字类型" aria-hidden="true">#</a> 1.1 、什么是 Number 数字类型</h4><ul><li>所有数字都是 Number 类型，包括整数（正负数）和浮点数（小数）；</li><li>在表达小于 1 的数时，小数点前面的 0 可以去掉，比如 <code>0.2</code>可以写成<code>.2</code></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">219</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">0.22334</span><span class="token punctuation">;</span> <span class="token comment">// 0.22334 是浮点数（小数）</span>
  <span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token number">0.22</span><span class="token punctuation">;</span> <span class="token comment">// .22表示0.22  是浮点数（小数）</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// number</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// number</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// number</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// number</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2、不同进制的数字" tabindex="-1"><a class="header-anchor" href="#_1-2、不同进制的数字" aria-hidden="true">#</a> 1.2、不同进制的数字</h4><ul><li>最常见的进制有<strong>二进制</strong>、<strong>八进制</strong>、<strong>十进制</strong>、<strong>十六进制</strong>。</li><li>不过我们用的最多的就是十进制，<strong>逢 10 进 1</strong></li><li>在 JS 中不同进制的数字是如何表示的</li></ul><p><strong>1.2.1、二进制数</strong></p><ul><li>二进制数以 <code>0b</code> 开头</li><li>二进制数字序列范围 <code>0-1</code>，逢 2 进 1</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0b10</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">0b101</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 5</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,56),r={href:"https://tool.lu/hexconvert/",target:"_blank",rel:"noopener noreferrer"},d=a(`<p><strong>1.2.2、八进制数</strong></p><ul><li>八进制数值以 0 开头</li><li>八进制数字序列范围 0-7 ,逢 8 进 1</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">012</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">024</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">09</span><span class="token punctuation">;</span> <span class="token comment">// 这里的09是10进制，因为8进制中，最大数不能超过7</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10 20</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>1.2.3、十六进制数</strong></p><ul><li>十六进制数以 0x 开头</li><li>十六进制序列范围 0-9 以及 A-F</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0xa</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">0x14</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10 20</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-3、科学记数法" tabindex="-1"><a class="header-anchor" href="#_1-3、科学记数法" aria-hidden="true">#</a> 1.3、科学记数法</h4><ul><li>对于非常大或非常小的数，我们可以用科学记数法来表示</li><li>e7 表时 10 的 7 次方，小数点向右移动 7 个点的位置</li><li>e-7 表示 0.1 的 7 次方，小数点向左移动 7 个点的位置</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3.15e7</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">3.2e-4</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 31500000</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0.00032</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-4、数字中最大值和最小值" tabindex="-1"><a class="header-anchor" href="#_1-4、数字中最大值和最小值" aria-hidden="true">#</a> 1.4、数字中最大值和最小值</h4><ul><li>由于内存的限制，js 中不支持表示这个世界上所有数值。js 中能表示的</li><li>最小数保存在 <code>Number.MIN_VALUE</code> 中</li><li>最大数保存在 <code>Number.MAX_VALUE</code> 中</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 最大值 1.7976931348623157e+308</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 最小值 5e-324</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-5、正无穷和负无穷大" tabindex="-1"><a class="header-anchor" href="#_1-5、正无穷和负无穷大" aria-hidden="true">#</a> 1.5、正无穷和负无穷大</h4><ul><li>因为计算机内存限制，js 中不支持表示这个世界上所有数值。</li><li>如果计算的数值超出了 js 能表示正数范围，则会以 <code>Infinity</code> 正无穷表示</li><li>如果计算的数值超出了 js 能表示负数范围，则以<code>-Infinity</code> 负无穷表示</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Infinity</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">-</span>Number<span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -Infinity</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-6-、nan" tabindex="-1"><a class="header-anchor" href="#_1-6-、nan" aria-hidden="true">#</a> 1.6 、NaN</h4><ul><li><code>NaN(Not a number)</code> 不是一个数字</li><li>NaN 用 typeof 检测，得到的结果是 number，说明 NaN 是一个数字类型</li><li>可以理解为 NaN 不是数字的数字类型</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// number</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：</p><p>为了帮助你理解 NaN 不是数字的数字类型这句话，我举一个生活中的例子来说明。</p><ul><li>比如一个人，他特别的坏，坏到极点了，那很多人就会说，这个人压根就不是个人，人那有这么坏的。</li><li>但实际上是个人吗 ？他是人这个类别，但是大家都不把他当人看。</li></ul><p>NaN 它是数字类型，但他不能代表任保数字含义，所以他不是一个数字。</p><p><strong>NaN 的作用</strong></p><ul><li>NaN 表示本来要返回的数值操作失败了</li><li>两个数值做运算，如果操作失败了，就会返回 NaN，而不是抛出错误</li><li>用 0 除任意数值在其他语言中通常都会导致错误，从而中止代码执行。</li><li>但是在 js 中，不会，而是返回 NaN</li></ul><p><strong>关于 NaN 的运算</strong></p><ul><li>0 除以 0 的结果是 NaN</li><li>在数学运算中，如果得不到数字的结果，其结果往往是 NaN。</li><li>任何数与 NaN 做运算，都会得到 NaN，除了与字符串拼接。</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">-</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token string">&quot;我&quot;</span> <span class="token operator">-</span> <span class="token string">&quot;你&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token number">NaN</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token number">NaN</span> <span class="token operator">+</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN  NaN  NaN NaN &#39;NaN1&#39;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>NaN 自己不与自己相等</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">==</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-7、isnan" tabindex="-1"><a class="header-anchor" href="#_1-7、isnan" aria-hidden="true">#</a> 1.7、isNaN()</h4><ul><li>这个函数接收一个参数，可以是任意数据类型，然后判断这个参数是否“不是数值”</li><li>isNaN 会尝试把它个值转换为数值，如果转换成数值字成功，也会认为是数字，则结果也是 false</li><li>特别注意：isNaN 并不是用来判断这个参数是不是<code>NaN</code>这个值</li><li>如果参数是数值，则返回 false，否则返回 true</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false  1是一个数字，所以返回false假的</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false &#39;1&#39;被转成数字1，所以返回false</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&quot;我&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true  &#39;我&#39;不是一个数字，是正确的，所以返回true</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true  NaN不是一个数字，是正确的</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false  Infinity是数字</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-8、number-数字类型总结" tabindex="-1"><a class="header-anchor" href="#_1-8、number-数字类型总结" aria-hidden="true">#</a> 1.8、Number 数字类型总结</h4><table><thead><tr><th style="text-align:left;">相关知识点</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">什么是数字类型的数据</td><td style="text-align:left;">所有数字都是 Number 类型，包括整数（正负数）和浮点数（小数）；</td></tr><tr><td style="text-align:left;">不同进制的数字</td><td style="text-align:left;">二进制数以<code>0b</code>开头 八进制数值以<code>0</code>开头 十六进制数以<code>0x</code>开头</td></tr><tr><td style="text-align:left;">科学记数法</td><td style="text-align:left;">5e4 表示 <code>50000</code> 5e-4 表示 <code>0.0005</code></td></tr><tr><td style="text-align:left;">数字中的最大值和最小值</td><td style="text-align:left;">最大值 <code>Number.MAX_VALUE</code> 最小值 <code>Number.MIN_VALUE</code></td></tr><tr><td style="text-align:left;">数字型的三个特殊值</td><td style="text-align:left;">正无穷<code>Infinity</code> 负无穷<code>-Infinity</code> NaN 不是数字的数字类型</td></tr><tr><td style="text-align:left;">NaN</td><td style="text-align:left;">不是数字的数字类型</td></tr><tr><td style="text-align:left;">isNAN( )</td><td style="text-align:left;">判断一个值或变量是否为非数字的类型 不是数值 返回 <code>true</code> 是数值返回<code>false</code></td></tr></tbody></table><h3 id="_2、string-字符串类型" tabindex="-1"><a class="header-anchor" href="#_2、string-字符串类型" aria-hidden="true">#</a> 2、String 字符串类型</h3><ul><li>字符串就是 &quot;人类的自然语言&quot;</li><li>字符串要用引号包裹，双引号 或者 单引号均可</li></ul><h4 id="_2-1、定义字符串" tabindex="-1"><a class="header-anchor" href="#_2-1、定义字符串" aria-hidden="true">#</a> 2.1、定义字符串</h4><p>用<code>英文</code>状态下的<code>&quot;&quot;</code>双引号 或 <code>&#39;&#39;</code>单引号 包裹起来值就是字符串类型的值</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123  123</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">,</span> <span class="token keyword">typeof</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2、分清数字和字符串" tabindex="-1"><a class="header-anchor" href="#_2-2、分清数字和字符串" aria-hidden="true">#</a> 2.2、分清数字和字符串</h4><p>数字<code>11</code>和字符串<code>&#39;11&#39;</code>在语义上是不同的，前者表达一个数量，后者是一个文本</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">typeof</span> <span class="token number">11</span><span class="token punctuation">;</span> <span class="token comment">// number</span>
<span class="token keyword">typeof</span> <span class="token string">&quot;11&quot;</span><span class="token punctuation">;</span> <span class="token comment">// string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3、双引号-与-单引号嵌套" tabindex="-1"><a class="header-anchor" href="#_2-3、双引号-与-单引号嵌套" aria-hidden="true">#</a> 2.3、双引号 与 单引号嵌套</h4><p>双引号里面可以嵌套<code>&#39;&#39;</code>单引号，单引号也可以嵌套<code>&quot;&quot;</code>双引号</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> str1 <span class="token operator">=</span> <span class="token string">&quot;我想对你说：&#39;你才是我爱的人&#39;&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token string">&#39;我想对你说：&quot;你才是我爱的人&quot;&#39;</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>但双引号里不能直接嵌套双引号，单引号里也不能直接嵌套单引号，以下是错误写法</p></blockquote><p><img src="https://www.arryblog.com/assets/img/image-20220907170447886.cbe69b6b.png" alt="image-20220907170447886"></p><blockquote><p>单引号或双引号，在匹配的时候，都是以就近原则来进行匹配的。</p></blockquote><h4 id="_2-4、转义字符" tabindex="-1"><a class="header-anchor" href="#_2-4、转义字符" aria-hidden="true">#</a> 2.4、转义字符 \\</h4><p>如果需要在字符串中使用特殊字符，可以用<strong>转义符</strong> <code>\\</code> 转义</p><table><thead><tr><th style="text-align:left;">转义符</th><th style="text-align:left;">解释说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>\\n</code></td><td style="text-align:left;">换行符， <code>n</code> 是 newline 的意思</td></tr><tr><td style="text-align:left;"><code>\\\\</code></td><td style="text-align:left;">反斜杠 <code>\\</code></td></tr><tr><td style="text-align:left;"><code>\\&#39;</code></td><td style="text-align:left;"><code>&#39;</code>单引号</td></tr><tr><td style="text-align:left;"><code>\\&quot;</code></td><td style="text-align:left;"><code>&quot;</code>双引号</td></tr><tr><td style="text-align:left;"><code>\\t</code></td><td style="text-align:left;">tab 缩进</td></tr></tbody></table><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> str1 <span class="token operator">=</span> <span class="token string">&#39;我想对你说：&quot;你才是我爱的人&quot;&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token string">&quot;我想对你说：&#39;你才是我爱的人&#39;&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> str3 <span class="token operator">=</span> <span class="token string">&quot;我想对你说：\\n你才是我爱的人&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> str4 <span class="token operator">=</span> <span class="token string">&quot;我想对你说：\\\\你才是我爱的人&quot;</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-5、字符串的拼接" tabindex="-1"><a class="header-anchor" href="#_2-5、字符串的拼接" aria-hidden="true">#</a> 2.5、字符串的拼接</h4><ul><li><code>+</code> 号，可以用来拼接两个 或 多个字符串</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token string">&quot;我&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;爱&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;你&quot;</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 我爱你</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>字符串与任何类型拼接，得到的都是字符串</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token string">&quot;1&quot;</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">NaN</span> <span class="token operator">+</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">Infinity</span> <span class="token operator">+</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>字符串与变量拼接</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token string">&quot;小丽&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> str <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token string">&quot;对&quot;</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">&quot;表白了！&quot;</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//张三对小丽表白了</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>提示：变量不能添加引号</p></blockquote><h4 id="_2-5、空字符串" tabindex="-1"><a class="header-anchor" href="#_2-5、空字符串" aria-hidden="true">#</a> 2.5、空字符串</h4><p>空字符串，直按书写空的 <code>&#39;&#39;</code>单引号 或 <code>&quot;&quot;</code>双引号 表示空字符串</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 要区分 var str=&#39; &#39; 与 var str=&#39;&#39; 前者是加了一个空字符，后者没有</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>空字符串有什么用 ？</strong></p><ul><li>可以用来转换数据类型</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//string</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>可以<strong>提前预设变量保存值为字符串类型</strong>，如果不设置为<code>&#39;&#39;</code>，有可能会出现错误的结果</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// 生成任意6位数的验证码</span>
  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// parseInt(Math.random() *10 ) 生成 0-9 之间的正数</span>
    result <span class="token operator">=</span> result <span class="token operator">+</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 生成结果为 任意0-9之间的6位数   232948</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> result<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    result <span class="token operator">=</span> result <span class="token operator">+</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-6、length-属性" tabindex="-1"><a class="header-anchor" href="#_2-6、length-属性" aria-hidden="true">#</a> 2.6、length 属性</h4><p>通过 length 属性，可以获取整个字符串的长度</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">&quot;英文的I Love You 是什么意思！&quot;</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  20</span>
  <span class="token keyword">var</span> str1 <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;我就是我，不一样的花朵&quot;</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 11</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-7、总结" tabindex="-1"><a class="header-anchor" href="#_2-7、总结" aria-hidden="true">#</a> 2.7、总结：</h4><table><thead><tr><th style="text-align:left;">内容</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">字符串类型的定义</td><td style="text-align:left;">用<strong>英文</strong>状态下的<code>&quot;&quot;</code>双引号或<code>&#39;&#39;</code>单引号包裹起来值就是字符串类型的值</td></tr><tr><td style="text-align:left;">双引号与单引号的嵌套</td><td style="text-align:left;"><code>&quot; &quot;</code>双引号里面可以嵌套<code>&#39;&#39;</code>单引号，<code>&#39;&#39;</code>单引号也可以嵌套<code>&quot;&quot;</code>双引号 <code>&quot;&quot;</code>双引号里不能直接嵌套<code>&quot;&quot;</code>双引号，<code>&#39;&#39;</code>单引号里也不能直接嵌套<code>&#39;&#39;</code>单引号</td></tr><tr><td style="text-align:left;">转义字符<code>\\</code></td><td style="text-align:left;">如果需要在字符串中使用特殊字符，可以用<strong>转义符</strong><code>\\</code>转义</td></tr><tr><td style="text-align:left;">字符串的拼接</td><td style="text-align:left;"><code>+</code> 号可以用来拼接两个或多个字符串 字符串与<strong>任何类型</strong>拼接，得到的都是字符串 字符串与<strong>变量</strong>拼接</td></tr><tr><td style="text-align:left;">空字符串</td><td style="text-align:left;">空字符串，直按书写空的 <code>&#39;&#39;</code>单引号或<code>&quot;&quot;</code>双引号 <strong>空字符串有什么用</strong> 可以用来转换数据类型 可以<strong>提前预设变量保存值为字符串类型</strong>，如果不设置为&#39;&#39;,有可能会出现错误的结果</td></tr><tr><td style="text-align:left;">length 属性</td><td style="text-align:left;">通过 length 属性，可以获取整个字符串的<strong>长度</strong></td></tr></tbody></table><h3 id="_3、boolean-类型" tabindex="-1"><a class="header-anchor" href="#_3、boolean-类型" aria-hidden="true">#</a> 3、Boolean 类型</h3><p><img src="https://www.arryblog.com/assets/img/boolean.a4d5f096.jpg" alt="boolean"></p><blockquote><p>布尔（George-Boole）是英国 19 世纪数学家及逻辑学家。</p></blockquote><ul><li>布尔值主要是用来做<strong>逻辑判断</strong>，</li><li>布尔类型只有两个值： <code>true</code>(真) 和<code>false</code>（假）</li><li>如果给<code>true</code>和<code>false</code>加上<code>&quot;&quot;</code>双引号或<code>&#39;&#39;</code>单引号，那就变成了字符串了</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// 检测 true 和 false 的数据类型</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// boolean</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// boolean</span>

  <span class="token comment">// 区分，true和false 在布尔值中是不加引号的，加了引号就变成字符串类型的值了</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token string">&quot;false&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string</span>

  <span class="token comment">// 布尔值主要是用来做逻辑判断</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、null-空类型" tabindex="-1"><a class="header-anchor" href="#_4、null-空类型" aria-hidden="true">#</a> 4、null 空类型</h3><ul><li>null 类型只有一个值，就是 null</li><li>null 表示一个空对象指针</li><li>用 typeof 检测 null 的类型，得到的是<code>Object</code></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//object</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：</p><p>虽然 typeof null 得到值为 Object,但是 null 是基本数据类型，这是一个历史遗留问题，如果要深究，那就只能用下面这段话来解释 (以下内容来自：你不知道的 JavaScript 上卷-103 页)</p><ul><li>不同的对象在底层都表示为二进制，在 JavaScript 中二进制前三位都为 0 的话会被判断为 object 类型</li><li>null 的二进制表示是全 0，自然前三位也是 0，所以执行 typeof 时会返回 &quot;object&quot;</li></ul><p>面试中会问到这个点，问这个问题的本质不是考这个点，因为没有意义，而是想通过这个点，看你平时学习是否研究底层，会阅读相关 JS 书籍。</p><h4 id="_4-1-、null-的作用" tabindex="-1"><a class="header-anchor" href="#_4-1-、null-的作用" aria-hidden="true">#</a> 4.1 、null 的作用</h4><ul><li>如果一个变量被声明后，将来是用来保存对象值的，那建议用 null 来初始化，不要使用其他值。</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// obj赋初始值为null ，表示obj示来是用来保存对象变量</span>
  obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;清心&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">34</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当我们需要将对象、数组、事件监听进行销毁时，我们就可以把他们设置为 null，只有把他们设置为 null 时，JS 垃圾回收器才会把他们当成垃圾，进行垃圾回收</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;清心&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">32</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">// 当我们对其赋值为null的时候，obj与堆内存中的空间关系被斩断。</span>
  <span class="token comment">// 由于堆内存中的空间没有人引用，所以这块空间就成了javascript中所谓的垃圾</span>
  obj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：</p><p>什么才称为垃圾，在我们的现实生活中，你用完后不会再用的东西，就可以当成垃圾处理掉。</p><p>在 JS 中也是一样的，如果某些数据被判断为永远不会再被应用，那就会被当成垃圾回收掉。</p><p>关于垃圾回收，目前只需要了解概念，等到后面高级，再与大家详解。</p><h3 id="_5、undefined" tabindex="-1"><a class="header-anchor" href="#_5、undefined" aria-hidden="true">#</a> 5、undefined</h3><ul><li>undefined 类型，只有一个值，就是<code>undefined</code></li><li>当声明一个变量，但是并不给变量赋值时，它的值就是<code>undefined</code></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> a<span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a的值是undefined</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 变量a的类型是 undefined</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：</p><p>我们经常在调试中或报错中会发现有些值打印是 undefined，就说明这个变量定义了，没有赋值，或赋值不成功。</p><h3 id="_6、基本数据类型总结" tabindex="-1"><a class="header-anchor" href="#_6、基本数据类型总结" aria-hidden="true">#</a> 6、基本数据类型总结</h3><p><img src="https://www.arryblog.com/assets/img/image-20220419175556585-16503621588161.eb4bf17f.png" alt="image-20220419175556585"></p><h2 id="三、数据类型转换" tabindex="-1"><a class="header-anchor" href="#三、数据类型转换" aria-hidden="true">#</a> 三、数据类型转换</h2><p>JavaScript 是一种动态类型语言 (dynamically typed language)。</p><p>这意味着你在声明变量时可以不必指定数据类型，而数据类型会在代码执行时会根据需要自动转换。</p><p><strong>JS 中通常会有三种方式的数据类型转换</strong></p><ul><li>其它类型 <code>--&gt;</code> 数值</li><li>其它类型 <code>--&gt;</code> 字符串</li><li>其它类型 <code>--&gt;</code> 布尔值</li></ul><h3 id="_1、其它类型转换为数字型" tabindex="-1"><a class="header-anchor" href="#_1、其它类型转换为数字型" aria-hidden="true">#</a> 1、其它类型转换为数字型</h3><p>将其它数据类型转换为数字型，有以下 4 种方法</p><table><thead><tr><th style="text-align:left;">函数</th><th style="text-align:left;">说明</th><th style="text-align:left;">实例</th></tr></thead><tbody><tr><td style="text-align:left;">Number() 函数 强制转换</td><td style="text-align:left;">将<strong>非数字类型</strong>转换成数字</td><td style="text-align:left;"><code>Number(&#39;&#39;);</code> // 0 <code>Number(&#39; &#39;);</code> // 0</td></tr><tr><td style="text-align:left;">paresInt() 函数</td><td style="text-align:left;">将<strong>字符串</strong>转换为数字</td><td style="text-align:left;"><code>parseInt(&#39;ab123&#39;);</code> // NaN <code>parseInt(&#39;200px&#39;);</code> // 200</td></tr><tr><td style="text-align:left;">parseFloat() 函数</td><td style="text-align:left;">将<strong>字符串</strong>转换为浮点数</td><td style="text-align:left;"><code>parseFloat(&#39;3.14 元&#39;);</code> // 3.14 <code>parseFloat(&#39;圆周率 3.14&#39;);</code> // NaN</td></tr><tr><td style="text-align:left;"><code>（+ - * /）</code> JS 隐式转换</td><td style="text-align:left;">利用算术运算隐式转换为数字型</td><td style="text-align:left;"></td></tr></tbody></table><h4 id="_1-1、number-函数" tabindex="-1"><a class="header-anchor" href="#_1-1、number-函数" aria-hidden="true">#</a> 1.1、Number 函数</h4><p>Number()函数：用来将非数字类型转换成数字。</p><p><strong>字符串转数字</strong></p><ul><li>只有：<code>&#39;&#39;</code>空字符串 、字符串只有前后包含空格、纯数字类字符串、2 进制或 16 进制表示的数字、科学记数表示法能转换成数字，其它都转换成 NaN</li><li>以上规则，只针对基本数据类型而言</li><li><code>Number([])</code> 结果是 0</li><li><code>Number({})</code>结果是 NaN</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;12.3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 12.3</span>
  <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;-12&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -12</span>
  <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;2e3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2000</span>
  <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;0b11&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
  <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;0110&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 110</span>
  <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;0x14&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 20</span>
  <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;ab&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
  <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;2021年&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
  <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
  <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>boolean 转换为数字</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
  <span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>null 和 undefined 转换为数字</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
  <span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2、parseint-函数" tabindex="-1"><a class="header-anchor" href="#_1-2、parseint-函数" aria-hidden="true">#</a> 1.2、parseInt(函数)</h4><p>parseInt()函数，主要是将<strong>字符串类型</strong>转换为<strong>整数数字</strong></p><p><strong>转换规则</strong></p><ul><li>从第一个非空字符开始转换，如果第一个字符不是数值，加号或减号，parseInt 立即返回 NaN</li><li>这就意味着空字符串也会返回 NaN。</li><li>如果第一个非空字符是数值，加号、减号，则继续检测，直到字符串末尾，或碰到非数值字符，就停止。</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
  <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;   -12.4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -12</span>
  <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;-123.45&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -123</span>
  <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;ab123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
  <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;2021年&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2021</span>
  <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
  <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;200px&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 200</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>parseInt() 函数不能识别二进制，八进制，但是他可以识别十六进制</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;0b10&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
  <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;0110&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 110</span>
  <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;0x14&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 20</span>
  <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;0x14年&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 20</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>parseInt() 函数，还有第二个参数，可以指定以什么进制数来进行转换</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;10&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
  <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;10&quot;</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 8</span>
  <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;10&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>
  <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;10&quot;</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 16</span>
  <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;10年&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
  <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;10年&quot;</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 8</span>
  <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;10&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>
  <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;10年&quot;</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 16</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-3、parsefloat-函数" tabindex="-1"><a class="header-anchor" href="#_1-3、parsefloat-函数" aria-hidden="true">#</a> 1.3、parseFloat(函数)</h4><ul><li>他的转换原则 和 parseInt()函数一样，唯一两点区别在于</li><li>parseFloat() 函数，主要是将<strong>字符串类型</strong>转换为<strong>浮点数</strong></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
  <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&quot;3.14&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3.14</span>
  <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&quot;3.2.32&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3.2</span>
  <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&quot;3.14元&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3.14</span>
  <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&quot;圆周率3.14&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>parseFloat( )函数，他不能识别进制数</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&quot;0b10&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
  <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&quot;0110&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 110</span>
  <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&quot;0x14&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-4、js-隐式转换" tabindex="-1"><a class="header-anchor" href="#_1-4、js-隐式转换" aria-hidden="true">#</a> 1.4、JS 隐式转换 (+ - * /)</h4><ul><li>利用算术运算隐式将其它类型转换为数字</li><li>在<strong>单个字符串</strong>前面加上 +号，可以将字符串转成数字,多个字符串，是字符串拼接</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">typeof</span> <span class="token operator">+</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">;</span> <span class="token comment">// number</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>更多内容，等到后面讲表达式和操作符的时候再讲</p></blockquote><h3 id="_2、其它类型转换为字符串" tabindex="-1"><a class="header-anchor" href="#_2、其它类型转换为字符串" aria-hidden="true">#</a> 2、其它类型转换为字符串</h3><p>将其它数据类型转换成字符串类型，有以下 3 种方式</p><table><thead><tr><th style="text-align:left;">方法或函数</th><th style="text-align:left;">说明</th><th style="text-align:left;">实例</th></tr></thead><tbody><tr><td style="text-align:left;">String()函数 强制转换</td><td style="text-align:left;">其它类型转换字符串</td><td style="text-align:left;"><code>String(0b10);</code> // &#39;2&#39; <code>String(NaN);</code> // &#39;NaN&#39;</td></tr><tr><td style="text-align:left;">toString() 方法</td><td style="text-align:left;"><code>数字</code>和<code>boolean</code>类型转换为字符串</td><td style="text-align:left;"><code>0b10.toString();</code> // &#39;2&#39; <code>NaN.toString();</code> // &#39;NaN&#39;</td></tr><tr><td style="text-align:left;">+ &#39;&#39; 空字符串拼接</td><td style="text-align:left;">所有类型与&#39;&#39;空字符串拼接得到的都是字符串类型。</td><td style="text-align:left;"><code>typeof (1 + &quot;&quot;);</code> // &#39;string&#39;</td></tr></tbody></table><p>注：</p><p>以上方法或函数，将任何类型转换为字符串，都会转换成<code>长得相同</code>的字符串，除了<code>科学记数法</code>和<code>非10进制数字</code>会将其转换为 10 进制值的字符串</p><h4 id="_2-1、string-函数" tabindex="-1"><a class="header-anchor" href="#_2-1、string-函数" aria-hidden="true">#</a> 2.1、String()函数</h4><ul><li>数字转换字符串</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token function">String</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;123&#39;</span>
  <span class="token function">String</span><span class="token punctuation">(</span><span class="token number">2.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;2.14&#39;</span>
  <span class="token function">String</span><span class="token punctuation">(</span><span class="token number">2e4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;20000&#39;</span>
  <span class="token function">String</span><span class="token punctuation">(</span><span class="token number">0b10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;2&#39;</span>
  <span class="token function">String</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;NaN&#39;</span>
  <span class="token function">String</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&#39; Infinity&#39;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>布尔值转换为字符串</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token function">String</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;true&#39;</span>
  <span class="token function">String</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;false&#39;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>undefined 和 null 转换为字符串</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;undefined&#39;</span>
  <span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;null&#39;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2、tostring-方法" tabindex="-1"><a class="header-anchor" href="#_2-2、tostring-方法" aria-hidden="true">#</a> 2.2、toString() 方法</h4><ul><li>数字转换为字符串</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;123&#39;</span>
  <span class="token punctuation">(</span><span class="token number">2e4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;20000&#39;</span>
  <span class="token punctuation">(</span><span class="token number">0b10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&#39;2&#39;;</span>
  <span class="token number">NaN</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;NaN&#39;</span>
  <span class="token number">Infinity</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;Infinity&#39;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>boolean 类型转换为字符串</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token boolean">true</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;true&#39;</span>
  <span class="token boolean">false</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;false&#39;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>注意事项：</strong></p><p><code>null</code>和<code>undefined</code>没有 toString()这个方法</p></blockquote><h4 id="_2-3、-空字符串" tabindex="-1"><a class="header-anchor" href="#_2-3、-空字符串" aria-hidden="true">#</a> 2.3、+ &#39;&#39; 空字符串</h4><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token boolean">true</span> <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span> <span class="token comment">// &#39;true&#39;</span>
  <span class="token boolean">false</span> <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span> <span class="token comment">// &#39;false&#39;</span>
  <span class="token number">NaN</span> <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span> <span class="token comment">// &#39;NaN&#39;</span>
  <span class="token number">0</span> <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span> <span class="token comment">// &#39;0&#39;</span>
  <span class="token number">0b10</span> <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span> <span class="token comment">// &#39;2&#39;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、其它类型转换为-boolean-布尔类型" tabindex="-1"><a class="header-anchor" href="#_3、其它类型转换为-boolean-布尔类型" aria-hidden="true">#</a> 3、其它类型转换为 boolean 布尔类型</h3><p>其它数据类型转换成 Boolean 只有一种方法，那就是通过 <code>Boolean()</code> 函数来实现</p><table><thead><tr><th style="text-align:left;">函数</th><th style="text-align:left;">说明</th><th style="text-align:left;">实例</th></tr></thead><tbody><tr><td style="text-align:left;">Boolean() 函数</td><td style="text-align:left;">其它类型转换成布尔类型值</td><td style="text-align:left;"><code>Boolean(&#39;&#39;);</code> // false</td></tr></tbody></table><h4 id="_3-1、boolean-函数" tabindex="-1"><a class="header-anchor" href="#_3-1、boolean-函数" aria-hidden="true">#</a> 3.1、Boolean() 函数</h4><p>转换原则：</p><ul><li>代表<strong>空</strong>，<strong>否定</strong>的值会被转换为<code>false</code>。 如：<code>&#39;&#39;</code>、<code>0</code>、<code>NaN</code>、<code>null</code>、<code>undefined</code></li><li>除了上面列出的 5 个值，其它值字都转换为 true</li></ul><p><strong>字符串转换为布尔类型</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
  <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
  <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&quot;NaN&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
  <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&quot;false&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>数字类型转换为布尔类型值</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
  <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
  <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>null 和 undefined 转换为布尔类型值</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
  <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、-数据类型转换总结" tabindex="-1"><a class="header-anchor" href="#_4、-数据类型转换总结" aria-hidden="true">#</a> 4、 数据类型转换总结</h3><p>其它类型转数字</p><ul><li>其它类型转换成数字，有 4 种方式：</li></ul><blockquote><p>Number() 函数、parseInt() 函数、parseFloat() 函数、JS 隐式转换（<code>+-*/</code>)</p></blockquote><ul><li>Number()函数，可以将所有类型转换成数字，转换原则：</li></ul><blockquote><ul><li><code>&#39;&#39;</code>空字符串</li><li>字符串只有前后包含空格</li><li>纯数字类字符串</li><li>2 进制或 16 进制表示的数字</li><li>科学记数表示法，</li></ul><p>以上 5 中情况能转换成数字，其它都转换成 NaN</p></blockquote><ul><li>parseInt() 函数和 parseFloat() 函数，只能将字符串转换成数字，转换原则：</li></ul><blockquote><ul><li>从第一个非空字符开始转换，如果第一个字符不是数值，加号或减号，parseInt 立即返回 NaN</li><li>如果第一个非空字符是数值，加号、减号，则继续检测，直到字符串末尾，或碰到非数值字符，就停止。</li><li>parseInt() 是将字符串转换成整数，而 parseFloat() 是将字符串转换成小数（浮点数）</li></ul></blockquote><h4 id="_4-2-、其它类型转字符串" tabindex="-1"><a class="header-anchor" href="#_4-2-、其它类型转字符串" aria-hidden="true">#</a> 4.2 、其它类型转字符串</h4><ul><li>将任何类型转换为字符串，都会转换成<code>长得相同</code>的字符串，除了<code>科学记数法</code>和<code>非10进制数字</code>会将其转换为 10 进制值的字符串</li><li>将其它类型转换成字符串有 3 种方式：String() 函数、toString() 方法、+&#39;&#39; 空字符串拼接</li><li><code>null</code> 和<code>undefined</code>没有 toString() 这个方法</li></ul><h4 id="_4-3-、其它类型转布尔值" tabindex="-1"><a class="header-anchor" href="#_4-3-、其它类型转布尔值" aria-hidden="true">#</a> 4.3 、其它类型转布尔值</h4><ul><li>利用 Boolean() 函数来实现其它类型转换成布尔值</li><li>除了这 5 个值<code>&#39;&#39;</code>、<code>0</code>、<code>NaN</code>、<code>null</code>、<code>undefined</code>转换成 Boolean 值是 false，其它值均为 true;</li></ul><h4 id="_4-4-、常见的类型转换" tabindex="-1"><a class="header-anchor" href="#_4-4-、常见的类型转换" aria-hidden="true">#</a> 4.4 、常见的类型转换</h4><table><thead><tr><th style="text-align:left;">原始值</th><th style="text-align:left;">转换为 数字</th><th style="text-align:left;">转换为 字符串</th><th style="text-align:left;">转换为 布尔值</th></tr></thead><tbody><tr><td style="text-align:left;">false</td><td style="text-align:left;">0</td><td style="text-align:left;">&quot;false&quot;</td><td style="text-align:left;">false</td></tr><tr><td style="text-align:left;">true</td><td style="text-align:left;">1</td><td style="text-align:left;">&quot;true&quot;</td><td style="text-align:left;">true</td></tr><tr><td style="text-align:left;">0</td><td style="text-align:left;">0</td><td style="text-align:left;">&quot;0&quot;</td><td style="text-align:left;">false</td></tr><tr><td style="text-align:left;">&quot;0&quot;</td><td style="text-align:left;">0</td><td style="text-align:left;">&quot;0&quot;</td><td style="text-align:left;">true</td></tr><tr><td style="text-align:left;">&#39;&#39;</td><td style="text-align:left;">0</td><td style="text-align:left;">&#39;&#39;</td><td style="text-align:left;">false</td></tr><tr><td style="text-align:left;">&#39; &#39;</td><td style="text-align:left;">0</td><td style="text-align:left;">&#39; &#39;</td><td style="text-align:left;">true</td></tr><tr><td style="text-align:left;">&quot;30&quot;</td><td style="text-align:left;">30</td><td style="text-align:left;">&quot;30&quot;</td><td style="text-align:left;">true</td></tr><tr><td style="text-align:left;">null</td><td style="text-align:left;">0</td><td style="text-align:left;">&quot;null&quot;</td><td style="text-align:left;">false</td></tr><tr><td style="text-align:left;">undefined</td><td style="text-align:left;">NaN</td><td style="text-align:left;">&quot;undefined&quot;</td><td style="text-align:left;">false</td></tr><tr><td style="text-align:left;">NaN</td><td style="text-align:left;">NaN</td><td style="text-align:left;">&quot;NaN&quot;</td><td style="text-align:left;">false</td></tr><tr><td style="text-align:left;">Infinity</td><td style="text-align:left;">Infinity</td><td style="text-align:left;">&quot;Infinity&quot;</td><td style="text-align:left;">true</td></tr></tbody></table><h2 id="四、本章重难点" tabindex="-1"><a class="header-anchor" href="#四、本章重难点" aria-hidden="true">#</a> 四、本章重难点</h2><p>总结本章重难点知识，理清思路，把握重难点。并能轻松回答以下问题，说明自己就真正的掌握了。</p><p>用于故而知新，快速复习。</p><h3 id="_1、重点内容" tabindex="-1"><a class="header-anchor" href="#_1、重点内容" aria-hidden="true">#</a> 1、重点内容</h3><p>基本数据类型</p><ul><li>JavaScript 中有哪些基本数据类型值 ？</li><li>它们的 typeof 检测结果是什么 ？</li></ul><table><thead><tr><th style="text-align:left;">7 种</th><th style="text-align:left;">类型名</th><th style="text-align:left;">typeof 检测结果</th><th style="text-align:left;">事例</th></tr></thead><tbody><tr><td style="text-align:left;">基本类型值</td><td style="text-align:left;">Number 数字类型</td><td style="text-align:left;">number</td><td style="text-align:left;">6</td></tr><tr><td style="text-align:left;">基本类型值</td><td style="text-align:left;">String 字符串类型</td><td style="text-align:left;">string</td><td style="text-align:left;"><code>arry老师</code></td></tr><tr><td style="text-align:left;">基本类型值</td><td style="text-align:left;">Boolean 布尔类型</td><td style="text-align:left;">boolean</td><td style="text-align:left;">true/false</td></tr><tr><td style="text-align:left;">基本类型值</td><td style="text-align:left;">undefined 类型</td><td style="text-align:left;">undefined</td><td style="text-align:left;">undefined</td></tr><tr><td style="text-align:left;">基本类型值</td><td style="text-align:left;"><code>null 类型</code></td><td style="text-align:left;"><code>object</code></td><td style="text-align:left;">null</td></tr><tr><td style="text-align:left;">基本类型值</td><td style="text-align:left;">Symbol 类型</td><td style="text-align:left;">symbol</td><td style="text-align:left;"><strong>var</strong> a = Symbol(&quot;唯一性&quot;);</td></tr><tr><td style="text-align:left;">基本类型值</td><td style="text-align:left;">BigInt 任意精度的整数</td><td style="text-align:left;">bigint</td><td style="text-align:left;">var a=BigInt(10);</td></tr></tbody></table><h4 id="字符串与变量拼接-如何处理" tabindex="-1"><a class="header-anchor" href="#字符串与变量拼接-如何处理" aria-hidden="true">#</a> 字符串与变量拼接，如何处理？</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;大家好，我今年&quot;</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">&quot;岁了&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="说出-nan、null、undefined-三个值的特殊点" tabindex="-1"><a class="header-anchor" href="#说出-nan、null、undefined-三个值的特殊点" aria-hidden="true">#</a> 说出 NaN、null、undefined 三个值的特殊点 ？</h4><ul><li>NaN <ul><li>NaN 不是一个数字</li><li>typeof 检测 NaN，得到的是 number，也就是 NaN 是数字类型</li><li>一些数字运算产生不了的结果会得到 NaN，但不会报错。如：&#39;我&#39; - &#39;你&#39; 得到 NaN</li></ul></li><li>undefined <ul><li>当声明一个变量，但没有被赋值时，其默认值是 undefined</li><li>undefined 的数据类型就是 undefined</li><li>undefined 类型只有一个值，就是 undefined</li><li>undefined 转换成数字为 NaN,转换成字符串是<code>&#39;undefined&#39;</code>、转换成 boolean 类型为 false</li><li>undefined 没有 toString() 这个方法，转字符串只能调用 String() 函数转</li></ul></li><li>null <ul><li>null 类型只有一个值，就是 null</li><li>null 表示一个空对象指针</li><li>用 typeof 检测值为 object</li><li>它通常在编程的时候用于销毁一些数据，如：销毁数组、对象、事件监听等</li></ul></li></ul><h4 id="isnan-的用法" tabindex="-1"><a class="header-anchor" href="#isnan-的用法" aria-hidden="true">#</a> isNaN 的用法 ?</h4><ul><li>这个函数接收一个参数，可以是任意数据类型，然后判断这个参数是否“不是数值”</li><li>特别注意：isNaN 并不是用来判断这个参数是不是<code>NaN</code>这个值</li><li>如果参数是数值，则返回<code>false</code>，否则返回<code>true</code></li></ul><h4 id="各种类型的值相互转换的方法和转换规律" tabindex="-1"><a class="header-anchor" href="#各种类型的值相互转换的方法和转换规律" aria-hidden="true">#</a> 各种类型的值相互转换的方法和转换规律</h4><p>答案：</p><p>参考上面的 <code>4、数据类型转换总结</code></p><h3 id="_2、难点内容" tabindex="-1"><a class="header-anchor" href="#_2、难点内容" aria-hidden="true">#</a> 2、难点内容</h3><blockquote><p>猜猜以下表达式的结果</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;2.3&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;3.5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&quot;false&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">0</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">2</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="custom-block details" style="display:block;position:relative;border-radius:2px;margin:1.6em 0px;padding:1.6em;background-color:rgb(238, 238, 238);color:rgb(44, 62, 80);font-family:-apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Fira Sans&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size:16px;font-style:normal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spacing:normal;orphans:2;text-align:start;text-indent:0px;text-transform:none;widows:2;word-spacing:0px;-webkit-text-stroke-width:0px;white-space:normal;text-decoration-thickness:initial;text-decoration-style:initial;text-decoration-color:initial;"><summary style="outline:none;cursor:pointer;color:rgb(62, 175, 124);">自己先分析，再点击查看正确答案</summary><p style="line-height:1.7;"></p><p style="line-height:1.7;margin-bottom:0px;padding-bottom:0px;"><br><br><br></p></details><h2 id="五、测试题" tabindex="-1"><a class="header-anchor" href="#五、测试题" aria-hidden="true">#</a> 五、测试题</h2><p>自我测试：在不看答案的前提下，看看自己是否真正掌握了本节所学内容。</p><h3 id="_1、关于-infinity-说法错误的是" tabindex="-1"><a class="header-anchor" href="#_1、关于-infinity-说法错误的是" aria-hidden="true">#</a> 1、关于 Infinity，说法错误的是 ？</h3><blockquote><p>选择两项</p></blockquote><ul><li>A、Infinity 是无穷小</li><li>B、非零数字除以 0 时，结果是 Infinity 或-Infinity</li><li>C、Infinity 不是一个数字类型</li><li>D、使用 typeof 检测 Infinity 的类型是 number</li></ul><details class="custom-block details" style="display:block;position:relative;border-radius:2px;margin:1.6em 0px;padding:1.6em;background-color:rgb(238, 238, 238);color:rgb(44, 62, 80);font-family:-apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Fira Sans&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size:16px;font-style:normal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spacing:normal;orphans:2;text-align:start;text-indent:0px;text-transform:none;widows:2;word-spacing:0px;-webkit-text-stroke-width:0px;white-space:normal;text-decoration-thickness:initial;text-decoration-style:initial;text-decoration-color:initial;"><summary style="outline:none;cursor:pointer;color:rgb(62, 175, 124);">自己先分析，再点击查看正确答案</summary><p style="line-height:1.7;margin-bottom:0px;padding-bottom:0px;"></p></details><h3 id="_2、关于描述有误的是哪项" tabindex="-1"><a class="header-anchor" href="#_2、关于描述有误的是哪项" aria-hidden="true">#</a> 2、关于描述有误的是哪项 ？</h3><blockquote><p>选择一项</p></blockquote><ul><li>A、NaN 是非数值</li><li>B、isNaN(NaN) 结果是 true</li><li>C、NaN 与 NaN 本身是相等的</li><li>D、NaN 与任何值都不相等</li></ul><details class="custom-block details" style="display:block;position:relative;border-radius:2px;margin:1.6em 0px;padding:1.6em;background-color:rgb(238, 238, 238);color:rgb(44, 62, 80);font-family:-apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Fira Sans&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size:16px;font-style:normal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spacing:normal;orphans:2;text-align:start;text-indent:0px;text-transform:none;widows:2;word-spacing:0px;-webkit-text-stroke-width:0px;white-space:normal;text-decoration-thickness:initial;text-decoration-style:initial;text-decoration-color:initial;"><summary style="outline:none;cursor:pointer;color:rgb(62, 175, 124);">自己先分析，再点击查看正确答案</summary><p style="line-height:1.7;margin-bottom:0px;padding-bottom:0px;"></p></details><h3 id="_3、以下代码输出的结果是" tabindex="-1"><a class="header-anchor" href="#_3、以下代码输出的结果是" aria-hidden="true">#</a> 3、以下代码输出的结果是 ？</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> a<span class="token punctuation">;</span>
  a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="custom-block details" style="display:block;position:relative;border-radius:2px;margin:1.6em 0px;padding:1.6em;background-color:rgb(238, 238, 238);color:rgb(44, 62, 80);font-family:-apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Fira Sans&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size:16px;font-style:normal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spacing:normal;orphans:2;text-align:start;text-indent:0px;text-transform:none;widows:2;word-spacing:0px;-webkit-text-stroke-width:0px;white-space:normal;text-decoration-thickness:initial;text-decoration-style:initial;text-decoration-color:initial;"><summary style="outline:none;cursor:pointer;color:rgb(62, 175, 124);">自己先分析，再点击查看正确答案</summary><p style="line-height:1.7;margin-bottom:0px;padding-bottom:0px;"></p></details><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&quot;请输入你的年龄&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 用户输入 18</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> msg <span class="token operator">=</span> <span class="token string">&quot;清心老师&quot;</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">&quot;岁了&quot;</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="custom-block details" style="display:block;position:relative;border-radius:2px;margin:1.6em 0px;padding:1.6em;background-color:rgb(238, 238, 238);color:rgb(44, 62, 80);font-family:-apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Fira Sans&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size:16px;font-style:normal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spacing:normal;orphans:2;text-align:start;text-indent:0px;text-transform:none;widows:2;word-spacing:0px;-webkit-text-stroke-width:0px;white-space:normal;text-decoration-thickness:initial;text-decoration-style:initial;text-decoration-color:initial;"><summary style="outline:none;cursor:pointer;color:rgb(62, 175, 124);">自己先分析，再点击查看正确答案</summary><p style="line-height:1.7;margin-bottom:0px;padding-bottom:0px;"></p></details><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="custom-block details" style="display:block;position:relative;border-radius:2px;margin:1.6em 0px;padding:1.6em;background-color:rgb(238, 238, 238);color:rgb(44, 62, 80);font-family:-apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Fira Sans&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size:16px;font-style:normal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spacing:normal;orphans:2;text-align:start;text-indent:0px;text-transform:none;widows:2;word-spacing:0px;-webkit-text-stroke-width:0px;white-space:normal;text-decoration-thickness:initial;text-decoration-style:initial;text-decoration-color:initial;"><summary style="outline:none;cursor:pointer;color:rgb(62, 175, 124);">自己先分析，再点击查看正确答案</summary><p style="line-height:1.7;margin-bottom:0px;padding-bottom:0px;"></p></details><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">+</span> <span class="token boolean">true</span> <span class="token operator">+</span> <span class="token string">&quot;false&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="custom-block details" style="display:block;position:relative;border-radius:2px;margin:1.6em 0px;padding:1.6em;background-color:rgb(238, 238, 238);color:rgb(44, 62, 80);font-family:-apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Fira Sans&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size:16px;font-style:normal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spacing:normal;orphans:2;text-align:start;text-indent:0px;text-transform:none;widows:2;word-spacing:0px;-webkit-text-stroke-width:0px;white-space:normal;text-decoration-thickness:initial;text-decoration-style:initial;text-decoration-color:initial;"><summary style="outline:none;cursor:pointer;color:rgb(62, 175, 124);">自己先分析，再点击查看正确答案</summary><p style="line-height:1.7;margin-bottom:0px;padding-bottom:0px;"></p></details><h2 id="六、综合案例" tabindex="-1"><a class="header-anchor" href="#六、综合案例" aria-hidden="true">#</a> 六、综合案例</h2><p>简单计算器</p><p>需求分析：</p><ul><li>当用户在浏览器打开页面时，弹出一输入框，要求用户输入数字，用户确认后，再弹出一输入框，再输入一个数字，确认后，最后弹出两次输入的数字之和。</li></ul><p>代码实现思路：</p><ul><li>使用 <code>prompt()</code> 函数弹出输入框，让用户输入两个数字</li><li>对用户输入两个数字进行加法运算，而由于用户输入的内容是字符串类型，所以必须先转为数字类型，才能做加法运算</li><li>最后用 alert() 显示结果</li><li>程序虽小，却体现了普遍计算机程序的执行步骤：用户输入-&gt;计算机处理 -&gt; 显示结果</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 用户输入两个数字</span>
<span class="token comment">// var a = prompt(&#39;请输入第一个数字&#39;);</span>
<span class="token comment">// var b = prompt(&#39;请输入第二个数字&#39;);</span>

<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&quot;请输入第一个数字&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&quot;请输入第二个数字&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 计算两个数字的和</span>
<span class="token keyword">var</span> sum <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>

<span class="token comment">// 弹出结果</span>
<span class="token comment">// alert(sum);</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;数字 &quot;</span> <span class="token operator">+</span> a <span class="token operator">+</span> <span class="token string">&quot; 加上数字 &quot;</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">&quot; 的和是：&quot;</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/image-20211215194823635.b092456d.png" alt="image-20211215194823635"></p><h2 id="七、作业" tabindex="-1"><a class="header-anchor" href="#七、作业" aria-hidden="true">#</a> 七、作业</h2><ul><li>1、把课程中上面提到的重点和难点，要全部掌握</li><li>2、每个知识点中，涉及的代码，都要手动敲一遍</li><li>3、案课的综合案例，要自己动手敲一遍，并做到完全理解</li></ul><h2 id="八、扩展知识" tabindex="-1"><a class="header-anchor" href="#八、扩展知识" aria-hidden="true">#</a> 八、扩展知识</h2><p>结合当前所学知识，拓展底层原理相关概念，逐步深入。</p><h3 id="_1、javascript-为何称为弱类型的动态脚本语言" tabindex="-1"><a class="header-anchor" href="#_1、javascript-为何称为弱类型的动态脚本语言" aria-hidden="true">#</a> 1、Javascript 为何称为弱类型的动态脚本语言</h3><p>在前面我们一直说，Javascript 是一种运行在客户端的脚本语言（Script 是脚本的意思）。</p><p>本质上 Javascript 是一种弱类型的动态脚本语言。接下来我们分别来解释下，何为<strong>弱类型</strong>，何为<strong>动态</strong>，何为<strong>脚本语言</strong>。</p><p><img src="https://www.arryblog.com/assets/img/image-20220917003701976.d4dd4556.png" alt="根据编程语言类型进行语言分布"></p><p>根据语言类型进行语言分布</p><h3 id="_2、何为动态语言和静态语言" tabindex="-1"><a class="header-anchor" href="#_2、何为动态语言和静态语言" aria-hidden="true">#</a> 2、何为动态语言和静态语言</h3><ul><li>在声明变量时，不需要确定变量类型的语言，称为动态语言。比如：<code>Javascript，Python、Ruby、PHP</code>等</li><li>在声明变量时，需要就需要确定变量类型的语言，称为静态语言。比如 <code>Java、C、C++ 、C#</code> 等</li></ul><blockquote><p>我们来看下面两段代码，一段是 JS 代码，一段是 Java 代码</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// js代码</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> a<span class="token punctuation">;</span> <span class="token comment">// number</span>
a <span class="token operator">=</span> <span class="token string">&quot;艾编程&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> a<span class="token punctuation">;</span> <span class="token comment">// string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>JS 在声明变量声明时，并不需要确定变量的类型，其类型是在代码执行的过程中,由变量对应值的类型来动态决定的。所以 JS 在执行过程中，需要检查数据的类型。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Java中变量定义</span>
<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> b <span class="token operator">=</span> <span class="token number">1.68</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> c <span class="token operator">=</span> <span class="token string">&quot;艾编程&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Java 在声明变量时，就需要确定好变量的类型。</p></blockquote><h3 id="_3、何为弱类型语言-和-强类型语言" tabindex="-1"><a class="header-anchor" href="#_3、何为弱类型语言-和-强类型语言" aria-hidden="true">#</a> 3、何为弱类型语言 和 强类型语言</h3><ul><li><p>支持隐式类型转换的语言，称为 <strong>弱类型语言</strong></p><blockquote><p>弱类型语言：C、C++、Javascript、PHP、VB、Perl</p></blockquote></li><li><p>不支持隐式类型转换的语言，称为 <strong>强类型语言</strong></p><blockquote><p>强类型语言：C# 、Java 、Ruby、Python</p></blockquote></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">&quot;4&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：</p><ul><li>变量<code>a</code>是字符串，<code>b</code>是数字，<code>a-b=&#39;4&#39;-1</code>，在这个过程中会自动把字符串<code>&#39;4&#39;</code>转换成数字<code>4</code>，然后再做运算。</li><li>这种在运算过程中会悄悄把数据类型转换的操作，叫<strong>隐式类型转换</strong>。</li></ul><p>在下一个章节中</p><p>我们就会讲到<strong>隐式类型转换</strong>和<strong>强制类型转换</strong>，如果暂时不理解，也没关系，明天那节课学完，回过头来就能懂了。</p><h3 id="_4、何为脚本语言" tabindex="-1"><a class="header-anchor" href="#_4、何为脚本语言" aria-hidden="true">#</a> 4、何为脚本语言</h3><ul><li>所谓的<strong>脚本语言</strong>：是指不需要提前编译，而是在运行的过程中边编译，边执行。</li><li>而 JS 本质上就是在运行过程中边编译，边执行的，JS 是由 JS 解释器（JS 引擎）来逐行进行解释并执行</li><li>所以 JS 也称为解释型语言。</li></ul><h3 id="_5、编译型语言-和-解释性语言" tabindex="-1"><a class="header-anchor" href="#_5、编译型语言-和-解释性语言" aria-hidden="true">#</a> 5、编译型语言 和 解释性语言</h3><p>编译器和解释器</p><p>之所以存在编译器和解释器，是因为机器不能直接理解我们所写的代码，所以在执行程序之前，需要将我们所写的代码“翻译”成机器能读懂的机器语言。</p><p>按语言的执行流程，可以把语言划分为编译型语言和解释型语言。</p><p><strong>编译型语言</strong></p><p>在程序执行之前，需要经过编译器的编译过程，并且编译之后会直接保留机器能读懂的二进制文件，这样每次运行程序时，都可以直接运行该二进制文件，而不需要再次重新编译了。比如 C/C++、GO 等都是编译型语言。</p><p><strong>解释型语言</strong></p><p>而由解释型语言编写的程序，在每次运行时都需要通过解释器对程序进行动态解释和执行。比如 Python、JavaScript 等都属于解释型语言。</p><p>注：</p><p>大部分后端语言，都是编译型语言，也就是要先编译，再执行。而 JS 是解释型语言，一边编译一边执行。</p><p>我们来举个例子，区分下何为编译型语言，何为解释型语言。</p><p><strong>比如：现在你有一个英文稿子要翻译</strong></p><ul><li>如果是编译型，那就是找个翻译人员，把这个稿子先全部翻译完成，然后再拿着翻译稿来学习。</li><li>如果是解释型语言，就是找个翻译站你旁边，读一句英语，给你翻译一句。</li></ul><p>所以编译型是一开始慢，后面快，而解释是刚开始快，但过程中是慢的。</p><h3 id="_6、什么是-javascript-解释器" tabindex="-1"><a class="header-anchor" href="#_6、什么是-javascript-解释器" aria-hidden="true">#</a> 6、什么是 JavaScript 解释器 ？</h3><p>要理解什么是解释器，就需要我们了解浏览器的两大组成部分：<strong>渲染引擎</strong> 和 <strong>JavaScript 引擎</strong></p><ul><li><strong>渲染引擎</strong>：用来解析 HTML 与 CSS，俗称内核，比如 chrome 浏览器的 blink，老板本的 webkit</li><li><strong>JS 引擎</strong>： 也称为 JS 解释器，用来读取网页中的 JavaScript 代码，对其处理后运行。比如 chrome 浏览器的 V8 引擎。</li></ul><blockquote><p>浏览器本身并不会执行 JS 代码，而是通过内置 JavaScript 引擎（解释器）来编译和执行 Js 代码。JS 引擎执行代码时逐行解释每一句源码（转换为机器语言），然后由计算机去执行。</p></blockquote><p>如果你理解了何为动态语言，何为弱类型语言，何为脚本语言，你就明白为什么 JS 称为<strong>弱类型的动态脚本语言</strong>，因为 JS 同时具备这三种特性。</p>`,273);function k(g,m){const t=p("ExternalLinkIcon");return o(),l("div",null,[u,n("blockquote",null,[n("p",null,[s("不同进制在线转换工具："),n("a",r,[s("https://tool.lu/hexconvert/(opens new window)"),c(t)])])]),d])}const b=e(i,[["render",k],["__file","JavaScript shujuleixingheleixingzhuanhuan.html.vue"]]);export{b as default};
