import{_ as p,r as o,o as i,c as l,b as s,d as n,e,a as t}from"./app-48690364.js";const c={},r=t(`<p><strong>代码压缩</strong> 是指在不改变代码功能的前提下，从声明式（HTML、CSS）或命令式（JavaScript）语言中删除所有不必要的字符（备注、变量名压缩、逻辑语句合并等），减少代码体积的过程，这在 Web 场景中能够有效减少浏览器从服务器获取代码资源所需要消耗的传输量，降低网络通讯耗时，提升页面启动速度，是一种非常基础且性价比特别高的应用性能优化方案。</p><p>在 Webpack 生态下，我们可以借助各种插件轻松实现应用代码压缩，本文将从代码压缩的基本原理开始讲起，之后介绍若干适用于 JavaScript、CSS、HTML 的代码压缩工具。</p><h2 id="代码压缩原理" tabindex="-1"><a class="header-anchor" href="#代码压缩原理" aria-hidden="true">#</a> 代码压缩原理</h2><p>“代码压缩”最关键的问题是：如何用“<strong>更精简</strong>”的代码表达“<strong>同一套</strong>”程序逻辑？这并不是什么黑魔法，底层逻辑简单的甚至有点粗暴，拆开来看：</p><p>“<strong>更精简</strong>”意味着可以适当 —— 甚至完全牺牲可读性、语义、优雅度而力求用最少字符数的方式书写代码。比如说 <code>const name = &#39;tecvan&#39;;</code>，这个看起来非常简单的赋值语句就有不少可以精简的字符：</p><ol><li>变量名 <code>name</code> 语义很明确，大多数“人”看到就基本明白是干什么用的，但这对计算机并没有什么意义，我们完全可以将 <code>name</code> 修改为 <code>a</code> —— 从 4 个字符精简为 1 个字符，但仍保持改动前后逻辑、功能效果完全一致；</li><li>赋值操作符 <code>=</code> 前后都有空格，这种格式对阅读代码的“人”很友好，视觉效果非常舒适、整齐，但对计算机而言同样毫无意义，我们可以将这前后两个空格删掉 —— 精简了两个字符；</li><li>虽然 <code>const</code> 与 <code>let</code> 关键词的功能不同，但特定情况下我们同样能牺牲一部分功能性，用 <code>let</code> 替换 <code>const</code>，从 5 个字符精简为 1 个字符。</li></ol><p>经过上面三个步骤之后，代码从 <code>const name = &#39;tecvan&#39;;</code> —— 22 个字符，精简为 <code>let a=&#39;tecvan&#39;;</code> —— 18 个字符，往大了说是节省了 <strong>18%</strong> 的代码体积。其它语言的代码压缩规则也基本都是按照上面这种套路实现的。</p><p>其次，“<strong>同一套</strong>”意味着修改前后必须保持一致的代码逻辑、执行流程、功能效果等，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码中，<code>a/b</code> 都是字面量常量，那么整段代码完全可以精简为 <code>const c = 3</code> ，省略掉 <code>a/b</code> 变量的声明语句，前后还能保持功能完全一致。</p><p>为了应对这两个挑战，很自然的我们可以先将字符串形态的代码转换为结构化、容易分析处理的 AST（抽象语法树）形态，之后在 AST 上应用上面的规则做各种语法、语义、逻辑推理与简化替换，最后按精简过的 AST 生成结果代码。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aa9c68ef6c6e47918bd6bde4a529513e~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>`,12),u={href:"https://github.com/terser/terser",target:"_blank",rel:"noopener noreferrer"},d={href:"https://esbuild.github.io/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://cssnano.co/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/babel/minify",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/terser/html-minifier-terser",target:"_blank",rel:"noopener noreferrer"},b=s("h2",{id:"使用-terserwebpackplugin-压缩-js",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#使用-terserwebpackplugin-压缩-js","aria-hidden":"true"},"#"),n(" 使用 TerserWebpackPlugin 压缩 JS")],-1),g={href:"https://github.com/terser/terser",target:"_blank",rel:"noopener noreferrer"},h={href:"https://npmtrends.com/babel-minify-vs-terser-vs-uglify-js",target:"_blank",rel:"noopener noreferrer"},_={href:"https://en.wikipedia.org/wiki/Dead-code_elimination",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/terser/terser#compress-options",target:"_blank",rel:"noopener noreferrer"},y={href:"https://github.com/mishoo/UglifyJS",target:"_blank",rel:"noopener noreferrer"},w=t(`<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ca0c4c88962c4f0aba8ff2e188eccbf6~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><blockquote><p>数据来源：https://github.com/babel/minify</p></blockquote><p>Webpack5.0 后默认使用 Terser 作为 JavaScript 代码压缩器，简单用法只需通过 <code>optimization.minimize</code> 配置项开启压缩功能即可：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>
  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">minimize</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>提示：使用 <code>mode = &#39;production&#39;</code> 启动生产模式构建时，默认也会开启 Terser 压缩。</p></blockquote>`,5),x={href:"https://github.com/terser/terser#compress-options",target:"_blank",rel:"noopener noreferrer"},q=t("<ul><li><code>dead_code</code>：是否删除不可触达的代码 —— 也就是所谓的死代码；</li><li><code>booleans_as_integers</code>：是否将 Boolean 值字面量转换为 0、1；</li><li><code>join_vars</code>：是否合并连续的变量声明，如 <code>var a = 1; var b = 2;</code> 合并为 <code>var a=1,b=2;</code>；</li><li>等等。</li></ul>",1),z={href:"https://github.com/webpack-contrib/terser-webpack-plugin",target:"_blank",rel:"noopener noreferrer"},j=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> TerserPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;terser-webpack-plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">minimize</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">minimizer</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token keyword">new</span> <span class="token class-name">TerserPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">terserOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">compress</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">reduce_vars</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            <span class="token literal-property property">pure_funcs</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;console.log&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token comment">// ...</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),T=s("p",null,[n("提示：示例中的 "),s("code",null,"minimize"),n(" 用于控制是否开启压缩，只有 "),s("code",null,"minimize = true'"),n(" 时才会调用 "),s("code",null,"minimizer"),n(" 声明的压缩器数组（没错，这是数组形式）执行压缩操作。")],-1),S={href:"https://www.npmjs.com/package/uglifyjs-webpack-plugin",target:"_blank",rel:"noopener noreferrer"},M=s("code",null,"minimizer",-1),C={href:"https://github.com/webpack-contrib/terser-webpack-plugin",target:"_blank",rel:"noopener noreferrer"},P={href:"https://www.npmjs.com/package/terser-webpack-plugin#options",target:"_blank",rel:"noopener noreferrer"},H=s("code",null,"test",-1),W={href:"https://webpack.js.org/configuration/module/#ruletest",target:"_blank",rel:"noopener noreferrer"},L=s("code",null,"include",-1),E={href:"https://webpack.js.org/configuration/module/#ruleinclude",target:"_blank",rel:"noopener noreferrer"},D=s("code",null,"exclude",-1),B=s("code",null,"include",-1),J={href:"https://webpack.js.org/configuration/module/#ruleexclude",target:"_blank",rel:"noopener noreferrer"},O=t("<li><code>parallel</code>：是否启动并行压缩，默认值为 <code>true</code>，此时会按 <code>os.cpus().length - 1</code> 启动若干进程并发执行；</li><li><code>minify</code>：用于配置压缩器，支持传入自定义压缩函数，也支持 <code>swc/esbuild/uglifyjs</code> 等值，下面我们再展开讲解；</li><li><code>terserOptions</code>：传入 <code>minify</code> —— “压缩器”函数的配置参数；</li><li><code>extractComments</code>：是否将代码中的备注抽取为单独文件，可配合特殊备注如 <code>@license</code> 使用。</li>",4),V=t(`<p>这些配置项总结下来有两个值得关注的逻辑：</p><ol><li>可以通过 <code>test/include/exclude</code> 过滤插件的执行范围，这个功能配合 <code>minimizer</code> 的数组特性，可以实现针对不同产物执行不同的压缩策略，例如：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> TerserPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;terser-webpack-plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&quot;./src/foo.js&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token string">&quot;./src/bar.js&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;[name].js&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">minimize</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">minimizer</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token keyword">new</span> <span class="token class-name">TerserPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">foo\\.js$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">extractComments</span><span class="token operator">:</span> <span class="token string">&quot;all&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token keyword">new</span> <span class="token class-name">TerserPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">bar\\.js</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">extractComments</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),A={href:"https://github.com/Tecvan-fe/webpack-book-samples/blob/main/minify-terser/package.json",target:"_blank",rel:"noopener noreferrer"},N=s("p",null,[n("示例中，针对 "),s("code",null,"foo.js"),n(" 产物文件会执行 "),s("code",null,"exctractComments"),n(" 逻辑，将备注信息抽取为单独文件；而针对 "),s("code",null,"bar.js"),n("，由于 "),s("code",null,"extractComments = false"),n("，不单独抽取备注内容。")],-1),U={start:"2"},R={href:"https://github.com/webpack-contrib/terser-webpack-plugin",target:"_blank",rel:"noopener noreferrer"},I=s("code",null,"minify",-1),G=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">minimize</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">minimizer</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token keyword">new</span> <span class="token class-name">TerserPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">minify</span><span class="token operator">:</span> TerserPlugin<span class="token punctuation">.</span>swcMinify<span class="token punctuation">,</span>
        <span class="token comment">// \`terserOptions\` 将被传递到 \`swc\` (\`@swc/core\`) 工具</span>
        <span class="token comment">// 具体配置参数可参考：https://swc.rs/docs/config-js-minify</span>
        <span class="token literal-property property">terserOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>提示：TerserPlugin 内置如下压缩器：</p><ul><li><code>TerserPlugin.terserMinify</code>：依赖于 <code>terser</code> 库；</li><li><code>TerserPlugin.uglifyJsMinify</code>：依赖于 <code>uglify-js</code>，需要手动安装 <code>yarn add -D uglify-js</code>；</li><li><code>TerserPlugin.swcMinify</code>：依赖于 <code>@swc/core</code>，需要手动安装 <code>yarn add -D</code> <code>@swc/core</code>；</li><li><code>TerserPlugin.esbuildMinify</code>：依赖于 <code>esbuild</code>，需要手动安装 <code>yarn add -D esbuild</code>。</li></ul><p>另外，<code>terserOptions</code> 配置也不仅仅专供 <code>terser</code> 使用，而是会透传给具体的 <code>minifier</code>，因此使用不同压缩器时支持的配置选项也会不同。</p></blockquote><p>不同压缩器功能、性能差异较大，据我了解，ESBuild 与 SWC 这两个基于 Go 与 Rust 编写的压缩器性能更佳，且效果已经基本趋于稳定，虽然功能还比不上 Terser，但某些构建性能敏感场景下不失为一种不错的选择。</p><h2 id="使用-cssminimizerwebpackplugin-压缩-css" tabindex="-1"><a class="header-anchor" href="#使用-cssminimizerwebpackplugin-压缩-css" aria-hidden="true">#</a> 使用 CssMinimizerWebpackPlugin 压缩 CSS</h2><p>CSS 是一种灵活多变得略显复杂的声明式语言，同样的样式效果可以被表达成非常多样的代码语句，例如一个非常典型的案例：<code>margin: 10px</code>，可以被写成：</p><ul><li><code>margin: 10px 10px;</code></li><li><code>margin-left: 10px; margin-right: 10px;...</code></li></ul><p>这些不同的表述方式最终实现的样式效果相同，那理所当然的可以用最精简的方式压缩代码。扩展开来：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">h1::before,
h1:before</span> <span class="token punctuation">{</span>
  <span class="token comment">/* 下面各种备注都可以删除 */</span>
  <span class="token comment">/* margin 值可简写 */</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 10px 20px 10px 20px<span class="token punctuation">;</span> 
  <span class="token comment">/* 颜色值也可以简写 */</span>
  <span class="token property">color</span><span class="token punctuation">:</span> #ff0000<span class="token punctuation">;</span> 
  <span class="token comment">/* 删除重复属性 */</span>
  <span class="token property">font-weight</span><span class="token punctuation">:</span> 400<span class="token punctuation">;</span>
  <span class="token property">font-weight</span><span class="token punctuation">:</span> 400<span class="token punctuation">;</span> 
  <span class="token comment">/* position 字面量值可简化为百分比 */</span>
  <span class="token property">background-position</span><span class="token punctuation">:</span> bottom right<span class="token punctuation">;</span>
  <span class="token comment">/* 渐变参数可精简 */</span>
  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>
    to bottom<span class="token punctuation">,</span>
    #ffe500 0%<span class="token punctuation">,</span>
    #ffe500 50%<span class="token punctuation">,</span>
    #121 50%<span class="token punctuation">,</span>
    #121 100%
  <span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token comment">/* 初始值也可精简 */</span>
  <span class="token property">min-width</span><span class="token punctuation">:</span> initial<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),$={href:"https://cssnano.co/",target:"_blank",rel:"noopener noreferrer"},F=t(`<div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">h1:before</span> <span class="token punctuation">{</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 10px 20px<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
  <span class="token property">font-weight</span><span class="token punctuation">:</span> 400<span class="token punctuation">;</span>
  <span class="token property">background-position</span><span class="token punctuation">:</span> 100% 100%<span class="token punctuation">;</span>
  <span class="token property">quotes</span><span class="token punctuation">:</span> <span class="token string">&quot;«&quot;</span> <span class="token string">&quot;»&quot;</span><span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>180deg<span class="token punctuation">,</span> #ffe500<span class="token punctuation">,</span> #ffe500 50%<span class="token punctuation">,</span> #121 0<span class="token punctuation">,</span> #121<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">min-width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从原来的 422 个字符精简为 212 个字符，接近 50%，我们日常编写的 CSS 语句也跟上述示例类似，通常都会有不少可以优化压缩的地方。</p>`,2),Y={href:"https://webpack.js.org/plugins/css-minimizer-webpack-plugin/",target:"_blank",rel:"noopener noreferrer"},K=t(`<ol><li>安装依赖：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> <span class="token parameter variable">-D</span> css-minimizer-webpack-plugin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>修改 Webpack 配置：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> CssMinimizerPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;css-minimizer-webpack-plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;mini-css-extract-plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token comment">// 注意，这里用的是 \`MiniCssExtractPlugin.loader\` 而不是 \`style-loader\`</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">&quot;css-loader&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">minimize</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">minimizer</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token comment">// Webpack5 之后，约定使用 \`&#39;...&#39;\` 字面量保留默认 \`minimizer\` 配置</span>
      <span class="token string">&quot;...&quot;</span><span class="token punctuation">,</span>
      <span class="token keyword">new</span> <span class="token class-name">CssMinimizerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 需要使用 \`mini-css-extract-plugin\` 将 CSS 代码抽取为单独文件</span>
  <span class="token comment">// 才能命中 \`css-minimizer-webpack-plugin\` 默认的 \`test\` 规则</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的配置逻辑，一是使用 <code>mini-css-extract-plugin</code> 将 CSS 代码抽取为单独的 CSS 产物文件，这样才能命中 <code>css-minimizer-webpack-plugin</code> 默认的 <code>test</code> 逻辑；二是使用 <code>css-minimizer-webpack-plugin</code> 压缩 CSS 代码。效果：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc053101d4e545d39c7be284488b6aa6~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>`,6),Q={href:"https://github.com/Tecvan-fe/webpack-book-samples/blob/main/minify-css/webpack.config.js",target:"_blank",rel:"noopener noreferrer"},X=s("p",null,[n("与 "),s("code",null,"terser-webpack-plugin"),n(" 类似，"),s("code",null,"css-minimizer-webpack-plugin"),n(" 也支持 "),s("code",null,"test、include、exclude、minify、minimizerOptions"),n(" 配置，其中 "),s("code",null,"minify"),n(" 支持：")],-1),Z=s("code",null,"CssMinimizerPlugin.cssnanoMinify",-1),nn={href:"https://cssnano.co/",target:"_blank",rel:"noopener noreferrer"},sn=s("code",null,"CssMinimizerPlugin.cssoMinify",-1),an={href:"https://github.com/css/csso",target:"_blank",rel:"noopener noreferrer"},en=s("code",null,"yarn add -D csso",-1),tn=s("code",null,"CssMinimizerPlugin.cleanCssMinify",-1),pn={href:"https://github.com/clean-css/clean-css",target:"_blank",rel:"noopener noreferrer"},on=s("code",null,"yarn add -D clean-css",-1),ln=s("code",null,"CssMinimizerPlugin.esbuildMinify",-1),cn={href:"https://esbuild.github.io/",target:"_blank",rel:"noopener noreferrer"},rn=s("code",null,"yarn add -D esbuild",-1),un=s("code",null,"CssMinimizerPlugin.parcelCssMinify",-1),dn={href:"https://github.com/parcel-bundler/parcel-css",target:"_blank",rel:"noopener noreferrer"},kn=s("code",null,"yarn add -D",-1),mn=s("code",null,"@parcel/css",-1),vn=s("code",null,"minimizerOptions",-1),bn=s("code",null,"minify",-1),gn={href:"https://webpack.js.org/plugins/css-minimizer-webpack-plugin/#minimizeroptions",target:"_blank",rel:"noopener noreferrer"},hn=t('<p>其中 <code>parcel-css</code> 与 ESBuild 压缩性能相对较佳：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d6b3e1450c9b4a6e8090374d9c77c707~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>但两者功能与兼容性稍弱，多数情况下推荐使用 <code>cssnano</code>。</p><h2 id="使用-htmlminifierterser-压缩-html" tabindex="-1"><a class="header-anchor" href="#使用-htmlminifierterser-压缩-html" aria-hidden="true">#</a> 使用 HtmlMinifierTerser 压缩 HTML</h2><p>现代 Web 应用大多会选择使用 React、Vue 等 MVVM 框架，这衍生出来的一个副作用是原生 HTML 的开发需求越来越少，HTML 代码占比越来越低，所以大多数现代 Web 项目中其实并不需要考虑为 HTML 配置代码压缩工作流。不过凡事都有例外，某些场景如 SSG 或官网一类偏静态的应用中就存在大量可被优化的 HTML 代码，为此社区也提供了一些相关的工程化工具，例如 <code>html-minifier-terser</code>。</p>',5),_n={href:"https://github.com/terser/html-minifier-terser",target:"_blank",rel:"noopener noreferrer"},fn={href:"https://github.com/terser/html-minifier-terser#options-quick-reference",target:"_blank",rel:"noopener noreferrer"},yn=t(`<ul><li><code>collapseWhitespace</code>：删除节点间的空字符串，如：</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 原始代码： --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>    foo <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 经过压缩的代码： --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>foo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>removeComments</code>：删除备注，如：</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 原始代码： --&gt;</span>
<span class="token comment">&lt;!-- some comment --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>blah<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 经过压缩的代码： --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>blah<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),wn=s("code",null,"collapseBooleanAttributes",-1),xn={href:"https://www.w3.org/TR/html4/intro/sgmltut.html#h-3.3.4.2",target:"_blank",rel:"noopener noreferrer"},qn=t(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;!-- 原始代码： --&gt;
&lt;input value=&quot;foo&quot; readonly=&quot;readonly&quot;&gt;

&lt;!-- 经过压缩的代码： --&gt;
&lt;input value=&quot;foo&quot; readonly&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>等等。</li></ul>`,2),zn={href:"https://webpack.js.org/plugins/html-minimizer-webpack-plugin/",target:"_blank",rel:"noopener noreferrer"},jn=s("code",null,"html-minifier-terser",-1),Tn=t(`<ol><li>安装依赖：</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yarn add -D html-minimizer-webpack-plugin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>修改 Webpack 配置，如：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;html-webpack-plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> HtmlMinimizerPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;html-minimizer-webpack-plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">minimize</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">minimizer</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token comment">// Webpack5 之后，约定使用 \`&#39;...&#39;\` 字面量保留默认 \`minimizer\` 配置</span>
      <span class="token string">&quot;...&quot;</span><span class="token punctuation">,</span>
      <span class="token keyword">new</span> <span class="token class-name">HtmlMinimizerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">minimizerOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token comment">// 折叠 Boolean 型属性</span>
          <span class="token literal-property property">collapseBooleanAttributes</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
          <span class="token comment">// 使用精简 \`doctype\` 定义</span>
          <span class="token literal-property property">useShortDoctype</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
          <span class="token comment">// ...</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// 简单起见，这里我们使用 \`html-webpack-plugin\` 自动生成 HTML 演示文件</span>
    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">templateContent</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
    &lt;html&gt;
      &lt;head&gt;
        &lt;meta charset=&quot;UTF-8&quot; /&gt;
        &lt;title&gt;webpack App&lt;/title&gt;
      &lt;/head&gt;
      &lt;body&gt;
        &lt;input readonly=&quot;readonly&quot;/&gt;
        &lt;!-- comments --&gt;
        &lt;script src=&quot;index_bundle.js&quot;&gt;&lt;/script&gt;
      &lt;/body&gt;
    &lt;/html&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),Sn={href:"https://github.com/Tecvan-fe/webpack-book-samples/blob/main/minify-html/webpack.config.js",target:"_blank",rel:"noopener noreferrer"},Mn=t('<p>这段配置的关键逻辑，一是通过 <code>html-webpack-plugin</code> 生成 HTML 文件，这里为了演示方便特意在 HTML 模板 <code>templateContent</code> 中插入一些可以被压缩的代码；二是通过 <code>html-minimizer-plugin</code> 压缩 HTML 代码，效果：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/025bcab658134b6995ea76211a7607db~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>上图中左边是正常构建结果，右图是经过 <code>html-minimizer-plugin</code> 压缩后的构建结果，可以看到如 <code>doctype</code> 标签被删掉若干不重要的声明，文档中的备注也被删除，等等。</p>',3),Cn=s("code",null,"terser-webpack-plugin",-1),Pn={href:"https://webpack.js.org/plugins/html-minimizer-webpack-plugin/",target:"_blank",rel:"noopener noreferrer"},Hn=s("code",null,"include、test、minimizerOptions",-1),Wn={href:"https://github.com/terser/html-minifier-terser",target:"_blank",rel:"noopener noreferrer"},Ln=s("code",null,"removeComments",-1),En=s("code",null,"useShortDoctype",-1),Dn=s("code",null,"<doctype>",-1),Bn={href:"https://github.com/terser/html-minifier-terser#options-quick-reference",target:"_blank",rel:"noopener noreferrer"},Jn=t('<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>综上，代码压缩的重点就在于“保持功能性”的前提下尽可能“删除”不必要的字符，原理虽不复杂但必须对语言特性有比较深的理解才能实现，所幸社区已经提供了各种各样的压缩工具，我们只需要简单配置就能轻松接入。</p><p>在 Webpack 中需要使用 <code>optimization.minimizer</code> 数组接入代码压缩插件，比较常用的插件有：</p><ul><li><code>terser-webpack-plugin</code>：用于压缩 ES6 代码的插件；</li><li><code>css-minimizer-webpack-plugin</code>：用于压缩 CSS 代码的插件；</li><li><code>html-minifier-terser</code>：用于压缩 HTML 代码的插件。</li></ul><p>这些插件用法非常相似，都支持 <code>include/test/exclude</code> 配置项，用于控制压缩功能的应用范围；也都支持 <code>minify</code> 配置项，用于切换压缩器，借助这个配置我们可以使用性能更佳的工具，如 ESBuild 执行压缩。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题" aria-hidden="true">#</a> 思考题</h2><p>代码压缩与代码混淆是什么关系？分别用于解决什么问题？压缩能代码混淆效果吗？</p>',7);function On(Vn,An){const a=o("ExternalLinkIcon");return i(),l("div",null,[r,s("p",null,[n("社区曾经出现过非常非常多 JavaScript、HTML、CSS 代码压缩工具，基本上都是按照上面这种套路实现的，包括："),s("a",u,[n("Terser"),e(a)]),n("、"),s("a",d,[n("ESBuild"),e(a)]),n("、"),s("a",k,[n("CSS-Nano"),e(a)]),n("、"),s("a",m,[n("babel-minify"),e(a)]),n("、"),s("a",v,[n("htmlMinifierTerser"),e(a)]),n(" 等，幸运的是，我们可以在 Webpack 中轻松接入这些工具，实现代码压缩。")]),b,s("p",null,[s("a",g,[n("Terser"),e(a)]),n(" 是当下 "),s("a",h,[n("最为流行"),e(a)]),n(" 的 ES6 代码压缩工具之一，支持 "),s("a",_,[n("Dead-Code Eliminate"),e(a)]),n("、删除注释、删除空格、代码合并、变量名简化等等"),s("a",f,[n("一系列"),e(a)]),n("代码压缩功能。Terser 的前身是大名鼎鼎的 "),s("a",y,[n("UglifyJS"),e(a)]),n("，它在 UglifyJS 基础上增加了 ES6 语法支持，并重构代码解析、压缩算法，使得执行效率与压缩率都有较大提升：")]),w,s("p",null,[n("Terser 支持许多压缩 "),s("a",x,[n("配置"),e(a)]),n("：")]),q,s("p",null,[n("多数情况下使用默认 Terser 配置即可，必要时也可以手动创建 "),s("a",z,[n("terser-webpack-plugin"),e(a)]),n(" 实例并传入压缩配置实现更精细的压缩功能，例如：")]),j,s("blockquote",null,[T,s("p",null,[n("另外，Webpack4 默认使用 "),s("a",S,[n("uglifyjs-webpack-plugin"),e(a)]),n(" 压缩代码，也可以通过 "),M,n(" 数组替换为 Terser 插件。")])]),s("p",null,[s("a",C,[n("terser-webpack-plugin"),e(a)]),n(" 是一个颇为复杂的 Webpack 插件，提供下述 "),s("a",P,[n("配置项"),e(a)]),n("：")]),s("ul",null,[s("li",null,[H,n("：只有命中该配置的产物路径才会执行压缩，功能与 "),s("a",W,[n("module.rules.test"),e(a)]),n(" 相似；")]),s("li",null,[L,n("：在该范围内的产物才会执行压缩，功能与 "),s("a",E,[n("module.rules.include"),e(a)]),n(" 相似；")]),s("li",null,[D,n("：与 "),B,n(" 相反，不在该范围内的产物才会执行压缩，功能与 "),s("a",J,[n("module.rules.exclude"),e(a)]),n(" 相似；")]),O]),V,s("blockquote",null,[s("p",null,[n("提示：示例代码已上传到 "),s("a",A,[n("小册仓库"),e(a)]),n("。")])]),N,s("ol",U,[s("li",null,[s("a",R,[n("terser-webpack-plugin"),e(a)]),n(" 插件并不只是 Terser 的简单包装，它更像是一个代码压缩功能骨架，底层还支持使用 SWC、UglifyJS、ESBuild 作为压缩器，使用时只需要通过 "),I,n(" 参数切换即可，例如：")])]),G,s("p",null,[n("上述代码就有不少地方可以精简优化，使用 "),s("a",$,[n("cssnano"),e(a)]),n(" 压缩后大致上可简化为：")]),F,s("p",null,[n("Webpack 社区中有不少实现 CSS 代码压缩的插件，例如："),s("a",Y,[n("css-minimizer-webpack-plugin"),e(a)]),n("，用法：")]),K,s("blockquote",null,[s("p",null,[n("提示：示例代码已上传到 "),s("a",Q,[n("小册仓库"),e(a)]),n("。")])]),X,s("ul",null,[s("li",null,[Z,n("：默认值，使用 "),s("a",nn,[n("cssnano"),e(a)]),n(" 压缩代码，不需要额外安装依赖；")]),s("li",null,[sn,n("：使用 "),s("a",an,[n("csso"),e(a)]),n(" 压缩代码，需要手动安装依赖 "),en,n("；")]),s("li",null,[tn,n("：使用 "),s("a",pn,[n("clean-css"),e(a)]),n(" 压缩代码，需要手动安装依赖 "),on,n("；")]),s("li",null,[ln,n("：使用 "),s("a",cn,[n("ESBuild"),e(a)]),n(" 压缩代码，需要手动安装依赖 "),rn,n("；")]),s("li",null,[un,n("：使用 "),s("a",dn,[n("parcel-css"),e(a)]),n(" 压缩代码，需要手动安装依赖 "),kn,n(),mn,n("。")])]),s("blockquote",null,[s("p",null,[n("提示：同样的，"),vn,n(" 也是直接透传给具体 "),bn,n("，具体配置选项可参考 "),s("a",gn,[n("官方文档"),e(a)]),n("。")])]),hn,s("p",null,[s("a",_n,[n("html-minifier-terser"),e(a)]),n(" 是一个基于 JavaScript 实现的、高度可配置的 HTML 压缩器，支持一系列 "),s("a",fn,[n("压缩特性"),e(a)]),n(" 如：")]),yn,s("ul",null,[s("li",null,[wn,n("：删除 HTML 的 "),s("a",xn,[n("Boolean 属性值"),e(a)]),n("，如：")])]),qn,s("p",null,[n("我们可以借助 "),s("a",zn,[n("html-minimizer-webpack-plugin"),e(a)]),n(" 插件接入 "),jn,n(" 压缩器，步骤：")]),Tn,s("blockquote",null,[s("p",null,[n("提示：示例代码已上传到 "),s("a",Sn,[n("小册仓库"),e(a)]),n("。")])]),Mn,s("p",null,[n("与 "),Cn,n(" 类似，"),s("a",Pn,[n("html-minimizer-webpack-plugin"),e(a)]),n(" 也支持 "),Hn,n(" 等等一系列配置，此处不再赘述。")]),s("p",null,[n("注意，"),s("a",Wn,[n("html-minifier-terser"),e(a)]),n(" 提供的默认配置有点过于保守，例如 "),Ln,n(" —— 用于移除代码备注的配置，或者 "),En,n(" 用于简化 "),Dn,n(" 标签的配置，默认竟然都是 false，这放在当下浏览器功能已经非常强劲，兼容性问题已经被大大抹平的背景下，有点大可不必了。因此，建议你使用时先到 "),s("a",Bn,[n("官网"),e(a)]),n(" 仔细了解各项配置，尽可能开启更多压缩功能。")]),Jn])}const Un=p(c,[["render",On],["__file","di17zhang—buzhiTerser：jiemidaimayasuodemenmendaodao.html.vue"]]);export{Un as default};
