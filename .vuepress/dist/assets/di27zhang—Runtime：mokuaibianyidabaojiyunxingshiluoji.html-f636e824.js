import{_ as p,r as o,o as c,c as l,b as n,d as s,e,a as t}from"./app-48690364.js";const i={},u=t('<p>回顾最近几节内容，Webpack 运行过程中首先会根据 <code>Module</code> 之间的引用关系构建 <code>ModuleGraph</code> 对象；接下来按照若干内置规则将 <code>Module</code> 组织进不同 <code>Chunk</code> 对象中，形成 <code>ChunkGraph</code> 关系图。</p><p>接着，构建流程将来到最后一个重要步骤：生成产物代码，这个过程会将所有 <code>Module</code> 内容一一转换为适当的产物代码形态，并以 <code>Chunk</code> 为单位合并 <code>Module</code> 产物代码，之后根据 <code>Module</code> 中出现的特性依赖，补充相应运行时代码，最终构建出我们日常所见的 Webpack Bundle 代码文件。</p><p>本文将深入分析这个过程的源码，详细剖析模块转译、运行时依赖分析、产物合并的具体实现逻辑。</p><h2 id="什么是模块转译" tabindex="-1"><a class="header-anchor" href="#什么是模块转译" aria-hidden="true">#</a> 什么是模块转译？</h2><p>众所周知，Webpack 的打包功能并不是将原始文件代码“复制-粘贴”到产物文件那么简单，为了确保代码能在不同环境 —— 多种版本的浏览器、Node、Electron 等正常运行，构建时需要对模块源码适当做一些转换操作，这一点在大多数构建产物的内容中都有所体现，例如：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3276ff5d31014f7d913f07b6bc61e4ab~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>示例包含 <code>index.js</code>、<code>name.js</code> 两个 JS 代码模块，经过 Webpack 构建后生成如图右侧所示的产物文件，文件自上而下包含三块内容：</p><ul><li><code>name.js</code> 模块对应的、函数形态的转译代码；</li><li>Webpack 按需注入的运行时代码；</li><li><code>index.js</code> 模块对应的 IIFE（立即执行函数） 转译代码。</li></ul><p>其中，<code>name.js</code>、<code>index.js</code> 对应的产物代码，与源码相比，虽然语义与功能都基本相同，但表现形式发生了较大变化，例如 <code>index.js</code> 编译前后的内容：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/72e8b113bab844e9acf2e5d682339590~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><ul><li>整个模块被包裹进 IIFE（立即执行函数）中；</li><li>添加 <code>__webpack_require__.r(__webpack_exports__);</code> 语句，用于适配 ESM 规范；</li><li>源码中的 <code>import</code> 语句被转译为 <code>__webpack_require__</code> 函数调用；</li><li>源码 <code>console</code> 语句所使用的 <code>name</code> 变量被转译为 <code>_name__WEBPACK_IMPORTED_MODULE_0__.default</code> ；</li><li>添加若干注释。</li></ul><p>编译前后代码功能逻辑相同，但替换掉这些 ES 高级特性之后，却能让应用平稳运行在低版本浏览器中，那么，这种代码转换功能具体是怎么实现的呢？</p><h2 id="模块转译主流程" tabindex="-1"><a class="header-anchor" href="#模块转译主流程" aria-hidden="true">#</a> 模块转译主流程</h2>',13),d={href:"https://juejin.cn/book/7115598540721618944/section/7119035921680302115",target:"_blank",rel:"noopener noreferrer"},r=n("code",null,"compilation.seal",-1),k=n("code",null,"buildChunkGraph",-1),m=n("ul",null,[n("li",null,"需要输出那些 Chunk；"),n("li",null,"每个 Chunk 包含那些 Module，以及每个 Module 经过 Loader 翻译后的代码内容；"),n("li",null,"Chunk 与 Chunk 之间的父子依赖关系。")],-1),v=n("code",null,"seal",-1),b={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/Compilation.js#L3160-L3162",target:"_blank",rel:"noopener noreferrer"},_=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Compilation</span> <span class="token punctuation">{</span>
  <span class="token function">seal</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 初始化 ChunkGraph、ChunkGroup 对象</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> <span class="token punctuation">{</span> dependencies<span class="token punctuation">,</span> includeDependencies<span class="token punctuation">,</span> options <span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>entries<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span> dependOn<span class="token punctuation">,</span> runtime <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span> <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>entries<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 构建 ChunkGroup</span>
    <span class="token function">buildChunkGraph</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> chunkGraphInit<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 执行诸多优化钩子</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">.</span><span class="token function">optimize</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ...</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>optimizeTree<span class="token punctuation">.</span><span class="token function">callAsync</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>chunks<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>modules<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// ...</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>optimizeChunkModules<span class="token punctuation">.</span><span class="token function">callAsync</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>chunks<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>modules<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token comment">// ...</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">.</span><span class="token function">beforeCodeGeneration</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">// 开始生成最终产物代码</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">codeGeneration</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>codeGeneration</code> 方法负责生成最终的资产代码，主要流程：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6a5888bf286248adaf7b627310aebbd9~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>有三个关键步骤。</p>`,4),h=n("strong",null,"单模块转译",-1),g=n("code",null,"compilation.modules",-1),y={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/Compilation.js#L3326-L3327",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"module",-1),w={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/NormalModule.js#L1172-L1173",target:"_blank",rel:"noopener noreferrer"},D={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/NormalModule.js#L1204-L1205",target:"_blank",rel:"noopener noreferrer"},j=n("code",null,"JavascriptGenerator",-1),C={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/javascript/JavascriptGenerator.js#L89-L90",target:"_blank",rel:"noopener noreferrer"},M={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/javascript/JavascriptGenerator.js#L111-L112",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"module",-1),q=n("code",null,"dependencies",-1),E=n("code",null,"presentationalDependencies",-1),T={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/javascript/JavascriptGenerator.js#L206-L207",target:"_blank",rel:"noopener noreferrer"},I=n("code",null,"dependeny",-1),S=n("code",null,"template.apply",-1),L=n("code",null,"source",-1),F={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/dependencies/ConstDependency.js#L100-L101",target:"_blank",rel:"noopener noreferrer"},G=n("code",null,"initFragments",-1),H={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/dependencies/HarmonyExportSpecifierDependency.js#L97-L99",target:"_blank",rel:"noopener noreferrer"},W=n("code",null,"runtimeRequirements",-1),A={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/dependencies/HarmonyImportDependency.js#L105-L106",target:"_blank",rel:"noopener noreferrer"},R=t("<li><strong>收集运行时依赖</strong>：计算模块运行时，首先调用 <code>compilation.processRuntimeRequirements</code> 方法，将上一步生成的 <code>runtimeRequirements</code> 数组一一转换为 <code>RuntimeModule</code> 对象，并挂载到 <code>ChunkGroup</code> 中。</li><li><strong>模块合并</strong>：调用 <code>compilation.createChunkAssets</code> 方法，以 Chunk 为单位，将相应的所有 <code>module</code> 及 <code>runtimeModule</code> 按规则塞进「<strong>产物框架</strong>」 中，最终合并输出成完整的 Bundle 文件。</li>",2),P=t(`<p>这些就是 Webpack 最终消费 ModuleGraph 与 ChunkGraph，生成最终产物代码的关键过程，总结而言，就是先遍历所有模块依赖对象，收集模块编译结果与运行时依赖，之后将这些内容合并在一起输出为 Bundle 文件。</p><p>下面我们逐一展开，了解每个步骤的细节。</p><h2 id="单模块转译" tabindex="-1"><a class="header-anchor" href="#单模块转译" aria-hidden="true">#</a> 单模块转译</h2><p>「<strong>模块转译</strong>」 操作从 <code>module.codeGeneration</code> 调用开始，对应到上述流程图的：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f6d0eb4a736b493b86fc8c6945f8534a~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>这个过程首先调用 <code>JavascriptGenerator.generate</code> 函数，遍历模块的 <code>dependencies</code> 数组，依次调用依赖对象对应的 <code>Template</code> 子类 <code>apply</code> 方法更新模块内容，说起来有点绕，我将重要步骤抽取为如下伪代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">JavascriptGenerator</span> <span class="token punctuation">{</span>
    <span class="token function">generate</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> generateContext</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 先取出 module 的原始代码内容</span>
        <span class="token keyword">const</span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReplaceSource</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span><span class="token function">originalSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> <span class="token punctuation">{</span> dependencies<span class="token punctuation">,</span> presentationalDependencies <span class="token punctuation">}</span> <span class="token operator">=</span> module<span class="token punctuation">;</span>
        <span class="token keyword">const</span> initFragments <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> dependency <span class="token keyword">of</span> <span class="token punctuation">[</span><span class="token operator">...</span>dependencies<span class="token punctuation">,</span> <span class="token operator">...</span>presentationalDependencies<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 找到 dependency 对应的 template</span>
            <span class="token keyword">const</span> template <span class="token operator">=</span> generateContext<span class="token punctuation">.</span>dependencyTemplates<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>dependency<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 调用 template.apply，传入 source、initFragments</span>
            <span class="token comment">// 在 apply 函数可以直接修改 source 内容，或者更改 initFragments 数组，影响后续转译逻辑</span>
            <span class="token function">template</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>dependency<span class="token punctuation">,</span> source<span class="token punctuation">,</span> <span class="token punctuation">{</span>initFragments<span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 遍历完毕后，调用 InitFragment.addToSource 合并 source 与 initFragments</span>
        <span class="token keyword">return</span> InitFragment<span class="token punctuation">.</span><span class="token function">addToSource</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> initFragments<span class="token punctuation">,</span> generateContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Dependency 子类</span>
<span class="token keyword">class</span> <span class="token class-name">xxxDependency</span> <span class="token keyword">extends</span> <span class="token class-name">Dependency</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// Dependency 子类对应的 Template 定义</span>
<span class="token keyword">const</span> xxxDependency<span class="token punctuation">.</span>Template <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">xxxDependencyTemplate</span> <span class="token keyword">extends</span> <span class="token class-name">Template</span> <span class="token punctuation">{</span>
    <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">dep<span class="token punctuation">,</span> source<span class="token punctuation">,</span> <span class="token punctuation">{</span>initFragments<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1. 直接操作 source，更改模块代码</span>
        source<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>dep<span class="token punctuation">.</span>range<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dep<span class="token punctuation">.</span>range<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;some thing&#39;</span><span class="token punctuation">)</span>
        <span class="token comment">// 2. 通过添加 InitFragment 实例，补充代码</span>
        initFragments<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">xxxInitFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上述伪代码可以看出，<code>JavascriptGenerator.generate</code> 函数的逻辑相对比较固化：</p><ol><li>初始化 <code>source</code>、<code>initFragments</code> 等变量；</li><li>遍历 <code>module</code> 对象的依赖数组，找到每个 <code>dependency</code> 对应的 <code>template</code> 对象，调用 <code>template.apply</code> 函数修改模块内容；</li><li>调用 <code>InitFragment.addToSource</code> 方法，合并 <code>source</code> 与 <code>initFragments</code> 数组，生成最终结果。</li></ol><p>这里的重点是 <code>JavascriptGenerator.generate</code> 函数并不操作 <code>module</code> 源码，它仅仅提供一个执行框架，真正处理模块内容转译的逻辑都在 <code>xxxDependencyTemplate</code> 对象的 <code>apply</code> 函数实现，如上例伪代码中 24-28 行。</p>`,10),J=n("code",null,"Dependency",-1),B=n("code",null,"Template",-1),O={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/dependencies/ConstDependency.js#L83-L84",target:"_blank",rel:"noopener noreferrer"},N=n("code",null,"ConstDependencyTemplate",-1),K=n("code",null,"NullDependency",-1),U=n("code",null,"NullDependencyTemplate",-1),z=t('<p>Webpack 从「构建」(make) 阶段开始，就会通过 <code>Dependency</code> 子类记录不同情况下模块之间的依赖关系；到「封装」(seal) 阶段再通过 <code>Template</code> 子类修改 <code>module</code> 代码，最终 <code>Module</code>、<code>Template</code>、 <code>JavascriptGenerator</code>、<code>Dependency</code> 四个关键类形成如下交互关系：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/683c91eefab04caf8875b859a7f7910c~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p><code>Template</code> 对象会通过三种方法影响产物代码：</p><ul><li>直接操作 <code>source</code> 对象，修改模块代码，该对象最初的内容等于模块的源码，经过多个 <code>Template.apply</code> 函数流转后逐渐被替换成新的代码形式；</li><li>操作 <code>initFragments</code> 数组，在模块源码之外插入补充代码片段；</li><li>将运行时依赖记录到 <code>runtimeRequirements</code> 数组。</li></ul><p>其中第 1、2 种操作所产生的副作用，最终都会被传入 <code>InitFragment.addToSource</code> 函数，合并成最终结果。</p><blockquote><p><strong>通过 <code>source</code> 修改模块代码：</strong></p></blockquote>',6),V=n("code",null,"source",-1),$={href:"https://github.com/webpack/webpack-sources",target:"_blank",rel:"noopener noreferrer"},Y=n("ul",null,[n("li",null,"字符串合并、替换、插入等；"),n("li",null,"模块代码缓存、sourcemap 映射、hash 计算等。")],-1),Q={href:"https://github.com/webpack/webpack-sources",target:"_blank",rel:"noopener noreferrer"},X=n("code",null,"Template.apply",-1),Z={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/javascript/JavascriptGenerator.js#L95-L96",target:"_blank",rel:"noopener noreferrer"},nn=n("code",null,"Source",-1),sn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReplaceSource</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span><span class="token function">originalSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),an=n("code",null,"Dependency",-1),en=n("code",null,"source",-1),tn={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/dependencies/HarmonyImportSpecifierDependency.js",target:"_blank",rel:"noopener noreferrer"},pn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>HarmonyImportSpecifierDependency<span class="token punctuation">.</span>Template <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">HarmonyImportSpecifierDependencyTemplate</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span>
  HarmonyImportDependency<span class="token punctuation">.</span>Template
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">dependency<span class="token punctuation">,</span> source<span class="token punctuation">,</span> templateContext</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> dep <span class="token operator">=</span> <span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span>HarmonyImportSpecifierDependency<span class="token punctuation">}</span></span> */</span> <span class="token punctuation">(</span>dependency<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">const</span> ids <span class="token operator">=</span> dep<span class="token punctuation">.</span><span class="token function">getIds</span><span class="token punctuation">(</span>moduleGraph<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> exportExpr <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_getCodeForIds</span><span class="token punctuation">(</span>dep<span class="token punctuation">,</span> source<span class="token punctuation">,</span> templateContext<span class="token punctuation">,</span> ids<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> range <span class="token operator">=</span> dep<span class="token punctuation">.</span>range<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>dep<span class="token punctuation">.</span>shorthand<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      source<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>range<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>exportExpr<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      source<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>range<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> range<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> exportExpr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>举个例子，对于下面这段简单代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> bar <span class="token keyword">from</span> <span class="token string">&quot;./bar&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>会产生 <code>HarmonyImportSpecifierDependency</code> 与 <code>ConstDependency</code> 两个依赖对象，之后：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> bar <span class="token keyword">from</span> <span class="token string">&quot;./bar&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 首先，HarmonyImportSpecifierDependency 替换导入变量名：</span>
<span class="token keyword">import</span> bar <span class="token keyword">from</span> <span class="token string">&quot;./bar&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_bar__WEBPACK_IMPORTED_MODULE_1__<span class="token punctuation">[</span><span class="token string">&quot;default&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 之后，ConstDependency 删除模块导入语句：</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_bar__WEBPACK_IMPORTED_MODULE_1__<span class="token punctuation">[</span><span class="token string">&quot;default&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出，这部分逻辑的效果与 Babel 类似，会直接修改模块源码，实现语言层面的向下兼容。但这还不够，还需要将这段代码包裹进 Webpack 的模块框架中，这部分工作将由 <code>initFragments</code> 数组完成。</p><blockquote><p><strong><code>initFragments</code> 数组的作用：</strong></p></blockquote>`,7),on=n("code",null,"source",-1),cn=n("code",null,"Template.apply",-1),ln=n("code",null,"initFragments",-1),un=n("code",null,"initFragments",-1),dn={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/InitFragment.js",target:"_blank",rel:"noopener noreferrer"},rn=n("code",null,"getContent",-1),kn=n("code",null,"getEndContent",-1),mn=n("code",null,"HarmonyImportDependencyTemplate",-1),vn={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/dependencies/HarmonyImportDependency.js#L310-L311",target:"_blank",rel:"noopener noreferrer"},bn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>HarmonyImportDependency<span class="token punctuation">.</span>Template <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">HarmonyImportDependencyTemplate</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span>
  ModuleDependency<span class="token punctuation">.</span>Template
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">dependency<span class="token punctuation">,</span> source<span class="token punctuation">,</span> templateContext</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    templateContext<span class="token punctuation">.</span>initFragments<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>
        <span class="token keyword">new</span> <span class="token class-name">ConditionalInitFragment</span><span class="token punctuation">(</span>
          importStatement<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> importStatement<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          InitFragment<span class="token punctuation">.</span><span class="token constant">STAGE_HARMONY_IMPORTS</span><span class="token punctuation">,</span>
          dep<span class="token punctuation">.</span>sourceOrder<span class="token punctuation">,</span>
          key<span class="token punctuation">,</span>
          runtimeCondition
        <span class="token punctuation">)</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//...</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是根据模块需求，不断增加新的代码片段 <code>initFragments</code>，所有 <code>Dependency</code> 执行完毕后，接着就需要调用 <code>InitFragment.addToSource</code> 函数将两者合并为模块产物。<code>addToSource</code> 的核心代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">InitFragment</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token function">addToSource</span><span class="token punctuation">(</span><span class="token parameter">source<span class="token punctuation">,</span> initFragments<span class="token punctuation">,</span> generateContext</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 先排好顺序</span>
    <span class="token keyword">const</span> sortedFragments <span class="token operator">=</span> initFragments
      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>extractFragmentIndex<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>sortFragmentWithIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ...</span>

    <span class="token keyword">const</span> concatSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcatSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> endContents <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> fragment <span class="token keyword">of</span> sortedFragments<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 合并 fragment.getContent 取出的片段内容</span>
      concatSource<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>fragment<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span>generateContext<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> endContent <span class="token operator">=</span> fragment<span class="token punctuation">.</span><span class="token function">getEndContent</span><span class="token punctuation">(</span>generateContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>endContent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        endContents<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>endContent<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 合并 source</span>
    concatSource<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 合并 fragment.getEndContent 取出的片段内容</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> content <span class="token keyword">of</span> endContents<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      concatSource<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> concatSource<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，<code>addToSource</code> 函数的逻辑：</p><ul><li>遍历 <code>initFragments</code> 数组，按顺序合并 <code>fragment.getContent()</code> 的产物；</li><li>合并 <code>source</code> 对象；</li><li>遍历 <code>initFragments</code> 数组，按顺序合并 <code>fragment.getEndContent()</code> 的产物。</li></ul><p>所以，模块代码合并操作主要就是用 <code>initFragments</code> 数组一层一层包裹住模块代码 <code>source</code>，而两者都在 <code>Template.apply</code> 层面维护。还是上面那个简单例子，经过这段 <code>Template</code> 处理后，最终转化为：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> bar <span class="token keyword">from</span> <span class="token string">&quot;./bar&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 首先，HarmonyImportSpecifierDependency 替换导入变量名：</span>
<span class="token keyword">import</span> bar <span class="token keyword">from</span> <span class="token string">&quot;./bar&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_bar__WEBPACK_IMPORTED_MODULE_1__<span class="token punctuation">[</span><span class="token string">&quot;default&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 之后，ConstDependency 删除模块导入语句：</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_bar__WEBPACK_IMPORTED_MODULE_1__<span class="token punctuation">[</span><span class="token string">&quot;default&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 经过 ConditionalInitFragment 处理：</span>
<span class="token comment">/* harmony import */</span> <span class="token keyword">var</span> _bar__WEBPACK_IMPORTED_MODULE_1__ <span class="token operator">=</span> <span class="token function">__webpack_require__</span><span class="token punctuation">(</span><span class="token comment">/*! ./bar */</span> <span class="token string">&quot;./src/bar.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_bar__WEBPACK_IMPORTED_MODULE_1__<span class="token punctuation">[</span><span class="token string">&quot;default&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单总结一下，Webpack 生成 ModuleGraph 与 ChunkGraph 后，会立即开始遍历所有 <code>Dependency</code> 对象，依次调用对象的静态方法 <code>template.apply</code> 修改 <code>module</code> 代码，最后再将所有变更后的 <code>source</code> 与模块脚手架 <code>initFragments</code> 合并为最终产物，完成从单个模块的源码形态到产物形态的转变。</p><blockquote><p><strong>自定义 <code>Template.apply</code> 示例：</strong></p></blockquote><p>「<strong>模块转译</strong>」 步骤流程比较长，整体逻辑很复杂，为了加深理解，接下来我们尝试开发一个简单的 Banner 插件：实现在每个模块前自动插入一段字符串。实现上，插件主要涉及 <code>Dependency</code>、<code>Template</code>、<code>hooks</code> 对象，代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> Dependency<span class="token punctuation">,</span> Template <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;webpack&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">DemoDependency</span> <span class="token keyword">extends</span> <span class="token class-name">Dependency</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

DemoDependency<span class="token punctuation">.</span>Template <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">DemoDependencyTemplate</span> <span class="token keyword">extends</span> <span class="token class-name">Template</span> <span class="token punctuation">{</span>
  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">dependency<span class="token punctuation">,</span> source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> today <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleDateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    source<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/* Author: Tecvan */
/* Date: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>today<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> */
</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">DemoPlugin</span> <span class="token punctuation">{</span>
  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>thisCompilation<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">&quot;DemoPlugin&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">compilation</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 调用 dependencyTemplates ，注册 Dependency 到 Template 的映射</span>
      compilation<span class="token punctuation">.</span>dependencyTemplates<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>
        DemoDependency<span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token class-name">DemoDependency<span class="token punctuation">.</span>Template</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
      compilation<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>succeedModule<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">&quot;DemoPlugin&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">module</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 模块构建完毕后，插入 DemoDependency 对象</span>
        module<span class="token punctuation">.</span><span class="token function">addDependency</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DemoDependency</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例插件的关键步骤：</p><ul><li>编写 <code>DemoDependency</code> 与 <code>DemoDependencyTemplate</code> 类，其中 <code>DemoDependency</code> 仅做示例用，没有实际功能；<code>DemoDependencyTemplate</code> 则在其 <code>apply</code> 中调用 <code>source.insert</code> 插入字符串，如示例代码第 10-14 行；</li><li>使用 <code>compilation.dependencyTemplates</code> 注册 <code>DemoDependency</code> 与 <code>DemoDependencyTemplate</code> 的映射关系；</li><li>使用 <code>thisCompilation</code> 钩子取得 <code>compilation</code> 对象；</li><li>使用 <code>succeedModule</code> 钩子订阅 <code>module</code> 构建完毕事件，并调用 <code>module.addDependency</code> 方法添加 <code>DemoDependency</code> 依赖。</li></ul><p>完成上述操作后，<code>module</code> 对象的产物在生成过程就会调用到 <code>DemoDependencyTemplate.apply</code> 函数，插入我们定义好的字符串，效果如：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e9bb7223e90c4054bb50f95c74191dd8~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>感兴趣的同学也可以直接阅读 Webpack 仓库的如下文件，学习更多用例：</p>`,16),_n={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/dependencies/ConstDependency.js#L92-L93",target:"_blank",rel:"noopener noreferrer"},hn=n("code",null,"source",-1),gn={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/dependencies/HarmonyExportSpecifierDependency.js#L86-L87",target:"_blank",rel:"noopener noreferrer"},yn=n("code",null,"initFragments",-1),fn={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/dependencies/HarmonyImportDependency.js#L253-L254",target:"_blank",rel:"noopener noreferrer"},wn=n("code",null,"source",-1),Dn=n("code",null,"initFragments",-1),jn=t(`<h2 id="收集运行时模块" tabindex="-1"><a class="header-anchor" href="#收集运行时模块" aria-hidden="true">#</a> 收集运行时模块</h2><p>为了正常、正确运行业务项目，Webpack 需要将开发者编写的业务代码以及支撑、调配这些业务代码的 <strong>运行时</strong> 一并打包到产物（bundle）中，以建筑作类比的话，业务代码相当于砖瓦水泥，是看得见摸得着能直接感知的逻辑；运行时相当于掩埋在砖瓦之下的钢筋地基，通常不需要关注，但决定了整座建筑的功能、质量。</p><p>大多数 Webpack 特性都需要特定钢筋地基才能跑起来，包括：异步加载、HMR、WASM、Module Federation 等。即使没有用到这些特性，仅仅是最简单的模块导入导出，也都需要生成若干模拟 CMD 模块化方案运行时代码，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// a.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token string">&#39;a module&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// index.js</span>
<span class="token keyword">import</span> name <span class="token keyword">from</span> <span class="token string">&#39;./a&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打包结果：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/df188ee10e674b068e4bd4ea654aa923~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>可以看出，整个 Bundle 被包裹在一个立即执行函数中，函数内部从上到下依次定义：</p><ul><li><code>__webpack_modules__</code> 对象，包含了除入口外的所有模块，如示例中的 <code>a.js</code> 模块；</li><li><code>__webpack_module_cache__</code> 对象，用于存储被引用过的模块；</li><li><code>__webpack_require__</code> 函数，实现模块引用(require) 逻辑；</li><li><code>__webpack_require__.d</code> ，工具函数，实现将模块导出的内容附加的模块对象上；</li><li><code>__webpack_require__.o</code> ，工具函数，判断对象属性用；</li><li><code>__webpack_require__.r</code> ，工具函数，在 ESM 模式下声明 ESM 模块标识；</li><li>最后的 IIFE，对应 entry 模块即上述示例的 <code>index.js</code> ，用于启动整个应用。</li></ul><p>这几个 <code>__webpack_</code> 开头奇奇怪怪的函数可以统称为 Webpack 运行时代码，作用如前面所说的，是搭起整个业务项目的骨架，就上述简单示例所罗列出来的几个函数、对象而言，它们协作构建起一个简单的模块化体系，从而实现 ES Module 规范所声明的模块化特性。</p><p>上述函数、对象构成了 Webpack 运行时最基本的能力 —— 模块化，假如代码中用到更多 Webpack 特性，则会相应地注入更多运行时模块代码，例如：</p><ul><li>使用异步加载时，注入 <code>__webpack_require__.e</code>、<code>__webpack_require__.f</code> 等模块；</li><li>使用 HMR 时，注入 <code>__webpack_require__.hmrF</code>、<code>webpack/runtime/hot</code> 等模块。</li></ul><p>那么，Webpack 是如何收集运行时依赖，并将之合并到最终产物中的呢？</p><blockquote><p><strong>收集运行时依赖：</strong></p></blockquote><p>早在「构建」阶段，Webpack 就已经开始在持续收集运行时依赖，例如，在一个非常简单的模块导入语句中：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> bar <span class="token keyword">from</span> <span class="token string">&#39;./bar&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Webpack 在处理上述代码 AST 时，会相应生成多个依赖对象，比较重要的有：</p>`,16),Cn=n("li",null,[n("code",null,"HarmonyImportSideEffectDependency"),s("：主要的 Dependency 对象，Webpack 会为该对象创建相应的 "),n("code",null,"NormalModule"),s(" 实例，从而递归处理新模块代码；")],-1),Mn={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/dependencies/HarmonyCompatibilityDependency.js#L72-L73",target:"_blank",rel:"noopener noreferrer"},xn={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/dependencies/HarmonyCompatibilityDependency.js#L72-L73",target:"_blank",rel:"noopener noreferrer"},qn=t('<p>本质上，这是一个基于静态代码分析的方式收集依赖的过程。当所有模块处理完毕，收集到所有运行时依赖，进入 <code>codeGeneration</code> 函数后，Webpack 会进一步将这些依赖对象挂载到 Chunk 中：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/098592e677784728ba6c4947235b0460~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>这个过程集中 <code>compilation.processRuntimeRequirements</code> 函数，函数中包含三次循环：</p><ul><li>第一次循环遍历所有 module，收集所有 module 的 runtime 依赖；</li><li>第二次循环遍历所有 chunk，将 chunk 下所有 module 的 runtime 统一收录到 chunk 中；</li><li>第三次循环遍历所有 runtime chunk，收集其对应的子 chunk 下所有 runtime 依赖，之后遍历所有依赖并发布 <code>runtimeRequirementInTree</code> 钩子，（主要是） <code>RuntimePlugin</code> 插件订阅该钩子并根据依赖类型创建对应的 <code>RuntimeModule</code> 子类实例。</li></ul>',4),En={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/Compilation.js#L3392-L3393",target:"_blank",rel:"noopener noreferrer"},Tn=n("p",null,[s("在上述「模块转译主流程」中，我们聊到 "),n("code",null,"Template.apply"),s(" 函数可能修改模块的 "),n("code",null,"runtimeRequirements"),s(" 数组，最终形成如下结构：")],-1),In=n("p",null,[n("img",{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4ced49e0b3764a4aaf168db7bae8c1cb~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"})],-1),Sn=n("code",null,"__webpack_require__",-1),Ln=n("code",null,"compilation.processRuntimeRequirements",-1),Fn=n("code",null,"runtimeRequirements",-1),Gn={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/Compilation.js#L3447-L3448",target:"_blank",rel:"noopener noreferrer"},Hn=n("code",null,"ChunkGraph",-1),Wn={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/Compilation.js#L3463-L3464",target:"_blank",rel:"noopener noreferrer"},An=n("p",null,"第一次循环针对 module 收集依赖，第二次循环则遍历 chunk 数组，收集将其对应所有 module 的 runtime 依赖，例如：",-1),Rn=n("p",null,[n("img",{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f1d02df6676942acac39290096af3d4c~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"})],-1),Pn=n("p",null,[s("示例图中，"),n("code",null,"module a"),s(" 包含两个运行时依赖；"),n("code",null,"module b"),s(" 包含一个运行时依赖，则经过第二次循环整合后，对应的 "),n("code",null,"chunk"),s(" 会包含两个模块所包含的三个运行时依赖。")],-1),Jn={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/Compilation.js#L3483-L3484",target:"_blank",rel:"noopener noreferrer"},Bn=t(`<p>源码中，第三次循环的代码最少但逻辑最复杂，大致上执行三个操作：</p><ul><li>遍历所有 runtime chunk，收集其所有子 chunk 的 runtime 依赖；</li><li>为该 runtime chunk 下的所有依赖发布 <code>runtimeRequirementInTree</code> 钩子；</li><li><code>RuntimePlugin</code> 监听钩子，并根据 runtime 依赖的标识信息创建对应的 <code>RuntimeModule</code> 子类对象，并将对象加入到 <code>ModuleDepedencyGraph</code> /<code>ChunkGraph</code> 体系中管理。</li></ul><p>至此，runtime 依赖完成了从 module 内容解析，到收集，到创建依赖对应的 <code>Module</code> 子类，再将 <code>Module</code> 加入到 <code>ModuleDepedencyGraph</code> /<code>ChunkGraph</code> 体系的全流程，业务代码及运行时代码对应的模块依赖关系图完全 ready，可以准备进入下一阶段 —— 合并最终产物。</p><h2 id="合并最终产物" tabindex="-1"><a class="header-anchor" href="#合并最终产物" aria-hidden="true">#</a> 合并最终产物</h2><p>讲完单个模块转译以及运行时模块收集过程后，我们终于来到最后一步：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/67a464acdc17450487c13f649c7d9b4f~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>流程图中，<code>compilation.codeGeneration</code> 函数执行完毕 —— 也就是模块转译阶段完成后，模块的转译结果会一一保存到 <code>compilation.codeGenerationResults</code> 对象中，之后会启动一个新的执行流程 —— <strong>模块合并打包</strong>。</p><p><strong>模块合并打包</strong>过程会将 chunk 对应的 module 及 runtimeModule 按规则塞进<strong>模板框架</strong>中，最终合并输出成完整的 bundle 文件，例如上例中：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/37ce17c38d524705b0f4dfbb7f408782~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>示例右边 bundle 文件中，红框框出来的部分为用户代码文件及运行时模块生成的产物，其余部分撑起了一个 IIFE 形式的运行框架，即为<strong>模板框架</strong>，也就是：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// webpackBootstrap</span>
    <span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> __webpack_modules__ <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token string-property property">&quot;module-a&quot;</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">__unused_webpack_module<span class="token punctuation">,</span> __webpack_exports__<span class="token punctuation">,</span> __webpack_require__</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// ! module 代码，</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string-property property">&quot;module-b&quot;</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">__unused_webpack_module<span class="token punctuation">,</span> __webpack_exports__<span class="token punctuation">,</span> __webpack_require__</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// ! module 代码，</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// The module cache</span>
    <span class="token keyword">var</span> __webpack_module_cache__ <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// The require function</span>
    <span class="token keyword">function</span> <span class="token function">__webpack_require__</span><span class="token punctuation">(</span><span class="token parameter">moduleId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ! webpack CMD 实现</span>
    <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/************************************************************************/</span>
    <span class="token comment">// ! 各种 runtime</span>
    <span class="token doc-comment comment">/************************************************************************/</span>
    <span class="token keyword">var</span> __webpack_exports__ <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.</span>
    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// ! entry 模块</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>捋一下这里的逻辑，运行框架包含如下关键部分：</p><ul><li>最外层是一个 IIFE 包裹；</li><li>一个记录了除 <code>entry</code> 外的其它模块代码的 <code>__webpack_modules__</code> 对象，对象的 key 为模块标志符；值为模块转译后的代码；</li><li>一个极度简化的 CMD 实现： <code>__webpack_require__</code> 函数；</li><li>最后，一个包裹了 <code>entry</code> 代码的 IIFE 函数。</li></ul><p><strong>模块转译</strong> 是将 <code>module</code> 转译为可以在宿主环境如浏览器上运行的代码形式；<strong>收集运行时模块</strong> 负责决定整个 Bundle 需要的骨架代码；而 <strong>模块合并</strong> 操作则串联这些 <code>modules</code> ，使之整体符合开发预期，能够正常运行整个应用逻辑。接下来，我们揭晓这部分代码的生成原理。</p><p><strong>模块合并主流程：</strong></p><p>在 <code>compilation.codeGeneration</code> 执行完毕，即所有用户代码模块做完转译，运行时模块都收集完毕作后，<code>seal</code> 函数调用 <code>compilation.createChunkAssets</code> 函数，触发 <code>renderManifest</code> 钩子，<code>JavascriptModulesPlugin</code> 插件监听到这个钩子消息后开始组装 bundle，伪代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Webpack 5</span>
<span class="token comment">// lib/Compilation.js</span>
<span class="token keyword">class</span> <span class="token class-name">Compilation</span> <span class="token punctuation">{</span>
  <span class="token function">seal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 先把所有模块的代码都转译，准备好</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>codeGenerationResults <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">codeGeneration</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>modules<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 1. 调用 createChunkAssets</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createChunkAssets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">createChunkAssets</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 遍历 chunks ，为每个 chunk 执行 render 操作</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> chunk <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>chunks<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 2. 触发 renderManifest 钩子</span>
      <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">.</span><span class="token function">renderManifest</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        chunk<span class="token punctuation">,</span>
        <span class="token literal-property property">codeGenerationResults</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>codeGenerationResults<span class="token punctuation">,</span>
        <span class="token operator">...</span>others<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 提交组装结果</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emitAsset</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">...</span>others<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// lib/javascript/JavascriptModulesPlugin.js</span>
<span class="token keyword">class</span> <span class="token class-name">JavascriptModulesPlugin</span> <span class="token punctuation">{</span>
  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>compilation<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">&quot;JavascriptModulesPlugin&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">compilation</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      compilation<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>renderManifest<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">&quot;JavascriptModulesPlugin&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">result<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token comment">// JavascriptModulesPlugin 插件中通过 renderManifest 钩子返回组装函数 render</span>
          <span class="token keyword">const</span> <span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
            <span class="token comment">// render 内部根据 chunk 内容，选择使用模板 \`renderMain\` 或 \`renderChunk\`</span>
            <span class="token comment">// 3. 监听钩子，返回打包函数</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderMain</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>

          result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> render <span class="token comment">/* arguments */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">return</span> result<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">renderMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/*  */</span><span class="token punctuation">}</span>

  <span class="token function">renderChunk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/*  */</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的核心逻辑是，<code>compilation</code> 以 <code>renderManifest</code> 钩子方式对外发布 bundle 打包需求； <code>JavascriptModulesPlugin</code> 监听这个钩子，按照 chunk 的内容特性，调用不同的打包函数。</p><blockquote><p>💡提示：上述仅针对 Webpack5 有效，在 Webpack4 中，打包逻辑集中在 <code>MainTemplate</code> 完成。</p></blockquote><p><code>JavascriptModulesPlugin</code> 内置的打包函数有：</p><ul><li><code>renderMain</code>：打包主 chunk 时使用；</li><li><code>renderChunk</code>：打包子 chunk ，如异步模块 chunk 时使用。</li></ul><p>两个打包函数实现的逻辑接近，都是按顺序拼接各个模块，下面简单介绍下 <code>renderMain</code> 的实现。</p><p><strong><code>JavascriptModulesPlugin.renderMain</code> 函数：</strong></p><p><code>renderMain</code> 函数涉及比较多场景判断，原始代码很长很绕，我摘了几个重点步骤：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">JavascriptModulesPlugin</span> <span class="token punctuation">{</span>
  <span class="token function">renderMain</span><span class="token punctuation">(</span><span class="token parameter">renderContext<span class="token punctuation">,</span> hooks<span class="token punctuation">,</span> compilation</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> chunk<span class="token punctuation">,</span> chunkGraph<span class="token punctuation">,</span> runtimeTemplate <span class="token punctuation">}</span> <span class="token operator">=</span> renderContext<span class="token punctuation">;</span>

    <span class="token keyword">const</span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcatSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
    <span class="token comment">// 1. 先计算出 bundle CMD 核心代码，包含：</span>
    <span class="token comment">//      - &quot;var __webpack_module_cache__ = {};&quot; 语句</span>
    <span class="token comment">//      - &quot;__webpack_require__&quot; 函数</span>
    <span class="token keyword">const</span> bootstrap <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderBootstrap</span><span class="token punctuation">(</span>renderContext<span class="token punctuation">,</span> hooks<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 2. 计算出当前 chunk 下，除 entry 外其它模块的代码</span>
    <span class="token keyword">const</span> chunkModules <span class="token operator">=</span> Template<span class="token punctuation">.</span><span class="token function">renderChunkModules</span><span class="token punctuation">(</span>
      renderContext<span class="token punctuation">,</span>
      inlinedModules
        <span class="token operator">?</span> allModules<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">m</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>inlinedModules<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token operator">:</span> allModules<span class="token punctuation">,</span>
      <span class="token punctuation">(</span><span class="token parameter">module</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderModule</span><span class="token punctuation">(</span>
          module<span class="token punctuation">,</span>
          renderContext<span class="token punctuation">,</span>
          hooks<span class="token punctuation">,</span>
          allStrict <span class="token operator">?</span> <span class="token string">&quot;strict&quot;</span> <span class="token operator">:</span> <span class="token boolean">true</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
      prefix
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 3. 计算出运行时模块代码</span>
    <span class="token keyword">const</span> runtimeModules <span class="token operator">=</span>
      renderContext<span class="token punctuation">.</span>chunkGraph<span class="token punctuation">.</span><span class="token function">getChunkRuntimeModulesInOrder</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 4. 重点来了，开始拼接 bundle</span>
    <span class="token comment">// 4.1 首先，合并核心 CMD 实现，即上述 bootstrap 代码</span>
    <span class="token keyword">const</span> beforeStartup <span class="token operator">=</span> Template<span class="token punctuation">.</span><span class="token function">asString</span><span class="token punctuation">(</span>bootstrap<span class="token punctuation">.</span>beforeStartup<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
    source<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>
      <span class="token keyword">new</span> <span class="token class-name">PrefixSource</span><span class="token punctuation">(</span>
        prefix<span class="token punctuation">,</span>
        useSourceMap
          <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">OriginalSource</span><span class="token punctuation">(</span>beforeStartup<span class="token punctuation">,</span> <span class="token string">&quot;webpack/before-startup&quot;</span><span class="token punctuation">)</span>
          <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">RawSource</span><span class="token punctuation">(</span>beforeStartup<span class="token punctuation">)</span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 4.2 合并 runtime 模块代码</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>runtimeModules<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> module <span class="token keyword">of</span> runtimeModules<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        compilation<span class="token punctuation">.</span>codeGeneratedModules<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 4.3 合并除 entry 外其它模块代码</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> m <span class="token keyword">of</span> chunkModules<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> renderedModule <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderModule</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> renderContext<span class="token punctuation">,</span> hooks<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      source<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>renderedModule<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 4.4 合并 entry 模块代码</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>
      hasEntryModules <span class="token operator">&amp;&amp;</span>
      runtimeRequirements<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>RuntimeGlobals<span class="token punctuation">.</span>returnExportsFromRuntime<span class="token punctuation">)</span>
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
      source<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>prefix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">return __webpack_exports__;\\n</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> source<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>核心逻辑为：</p><ul><li>先计算出 bundle CMD 代码，即 <code>__webpack_require__</code> 函数；</li><li>计算出当前 chunk 下，除 entry 外其它模块代码 <code>chunkModules</code>；</li><li>计算出运行时模块代码；</li><li>开始执行合并操作，子步骤有： <ul><li>合并 CMD 代码；</li><li>合并 runtime 模块代码；</li><li>遍历 <code>chunkModules</code> 变量，合并除 entry 外其它模块代码；</li><li>合并 entry 模块代码。</li></ul></li><li>返回结果。</li></ul><p>总结：先计算出不同组成部分的产物形态，之后按顺序拼接打包，输出合并后的版本。</p><p>至此，Webpack 完成 bundle 的转译、打包流程，后续调用 <code>compilation.emitAsset</code>，将产物内容输出到 <code>output</code> 指定的路径即可，Webpack 单次编译打包过程就结束了。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>`,30),On={href:"https://juejin.cn/book/7115598540721618944/section/7119035873802813475",target:"_blank",rel:"noopener noreferrer"},Nn=t('<ul><li>Webpack 构建过程可以简单划分为 Init、Make、Seal 三个阶段；</li><li>Init 阶段负责初始化 Webpack 内部若干插件与状态，逻辑比较简单；</li><li>Make 阶段解决资源读入问题，这个阶段会从 Entry —— 入口模块开始，递归读入、解析所有模块内容，并根据模块之间的依赖关系构建 ModuleGraph —— 模块关系图对象；</li><li>Seal 阶段更复杂： <ul><li>一方面，根据 ModuleGraph 构建 ChunkGraph；</li><li>另一方面，开始遍历 ChunkGraph，转译每一个模块代码；</li><li>最后，将所有模块与模块运行时依赖合并为最终输出的 Bundle —— 资产文件。</li></ul></li></ul><p>这些内容都是介绍 Webpack 实现原理的文章，可能并不能马上解决你在业务中正在面临的现实问题，但放到更长的时间维度，这些内容所呈现的知识、思维、思辨过程可能能够长远地给到你：</p><ul><li>分析、理解复杂开源代码的能力；</li><li>理解 Webpack 架构及实现细节，下次遇到问题的时候能根据表象迅速定位到根源；</li><li>理解 Webpack 为 hooks、loader 提供的上下文，能够更通畅地理解其它开源组件，甚至能够自如地实现自己的组件。</li></ul><p>所以，希望你能沿着这个思路，反复、仔细阅读这些章节，深入理解底层实现原理，成为真正意义上的 Webpack 专家。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题" aria-hidden="true">#</a> 思考题</h2><p>Dependency、Module 之间是什么关系？为什么需要设计 Dependency 这个看似可有可无的结构？</p>',6);function Kn(Un,zn){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("在上一章《"),n("a",d,[s("Chunk：三种产物的打包逻辑"),e(a)]),s("》中，我们已经介绍了 "),r,s(" 函数内会调用 "),k,s(" 生成 Chunk 依赖关系图，之后 Webpack 就可以分析出：")]),m,n("p",null,[s("在此之后 "),v,s(" 函数会开始触发一堆优化钩子，借助插件对 ChunkGraph 做诸如合并、拆分、删除无效 Chunk 等优化操作，并在最后调用 "),n("a",b,[s("compilation.codeGeneration"),e(a)]),s(" 方法：")]),_,n("ul",null,[n("li",null,[h,s("：这一步主要用于计算模块实际输出代码，遍历 "),g,s(" 数组，"),n("a",y,[s("调用"),e(a)]),s(),f,s(" 对象的 "),n("a",w,[s("codeGeneration"),e(a)]),s(" 方法，执行模块转译计算： "),n("ul",null,[n("li",null,[n("a",D,[s("调用"),e(a)]),s(),j,s(" 的 "),n("a",C,[s("generate"),e(a)]),s(" 方法；")]),n("li",null,[n("a",M,[s("遍历"),e(a)]),s(),x,s(" 对象的 "),q,s(" 与 "),E,s(" 数组；")]),n("li",null,[n("a",T,[s("执行"),e(a)]),s(" 每个数组项 "),I,s(" 对象对应的 "),S,s(" 方法，方法中视情况可能产生三种副作用： "),n("ul",null,[n("li",null,[s("直接修改模块 "),L,s(" 数据，如 "),n("a",F,[s("ConstDependency.Template"),e(a)]),s("；")]),n("li",null,[s("将结果记录到 "),G,s(" 数组如 "),n("a",H,[s("HarmonyExportSpecifierDependency"),e(a)]),s("；")]),n("li",null,[s("将运行时依赖记录到 "),W,s(" 数组如 "),n("a",A,[s("HarmonyImportDependency"),e(a)]),s("。")])])])])]),R]),P,n("p",null,[s("每个 "),J,s(" 子类都会挂载一个 "),B,s(" 子类，且通常这两个类都会写在同一个文件中，例如 "),n("a",O,[s("ConstDependency"),e(a)]),s(" 与 "),N,s("；"),K,s(" 与 "),U,s("。")]),z,n("p",null,[s("先来看看 "),V,s(" 操作，"),n("a",$,[s("webpack-sources"),e(a)]),s(" 是 Webpack 中用于编辑字符串的一套工具类库，它提供了一系列代码编辑方法，包括：")]),Y,n("p",null,[s("Webpack 内部以及社区的很多插件、loader 都会使用 "),n("a",Q,[s("webpack-sources"),e(a)]),s(" 库编辑代码内容，包括上文介绍的 "),X,s(" 体系。逻辑上，在启动模块代码生成流程时，Webpack 会先用模块原始内容"),n("a",Z,[s("初始化"),e(a)]),s(),nn,s(" 对象，即：")]),sn,n("p",null,[s("之后，不同 "),an,s(" 子类按序、按需更改 "),en,s(" 内容，例如 "),n("a",tn,[s("HarmonyImportSpecifierDependency"),e(a)]),s(" 中：")]),pn,n("p",null,[s("上面我们聊到，除直接操作 "),on,s(" 外，"),cn,s(" 中还可能通过 "),ln,s(" 数组达成修改模块产物的效果。"),un,s(" 数组项为 "),n("a",dn,[s("InitFragment"),e(a)]),s(" 子类实例，它们带有两个关键函数："),rn,s("、"),kn,s("，分别用于获取代码片段的头尾部分。")]),n("p",null,[s("例如 "),mn,s(" 的 "),n("a",vn,[s("apply"),e(a)]),s(" 函数中：")]),bn,n("ul",null,[n("li",null,[n("a",_n,[s("ConstDependency"),e(a)]),s("：一个简单示例，可学习 "),hn,s(" 的更多操作方法；")]),n("li",null,[n("a",gn,[s("HarmonyExportSpecifierDependency"),e(a)]),s("：一个较简单的示例，可学习 "),yn,s(" 数组的更多用法；")]),n("li",null,[n("a",fn,[s("HarmonyImportDependency"),e(a)]),s("：一个较复杂但使用率极高的示例，可综合学习 "),wn,s("、"),Dn,s(" 数组的用法。")])]),jn,n("ul",null,[Cn,n("li",null,[n("a",Mn,[s("HarmonyCompatibilityDependency"),e(a)]),s("：运行时模块依赖，对应的 "),n("a",xn,[s("Template.apply"),e(a)]),s(" 函数会在生成代码时记录相应运行时需求。")])]),qn,n("p",null,[n("strong",null,[n("a",En,[s("第一次循环：收集模块依赖"),e(a)]),s("：")])]),Tn,In,n("p",null,[s("这个过程相当于将模块的 Runtime Dependency 都转化为 "),Sn,s(" 等枚举值，并调用 "),Ln,s(" 进入第一重循环，将上述 "),Fn,s(" 数组 "),n("a",Gn,[s("挂载"),e(a)]),s(" 到 "),Hn,s(" 对象中。")]),n("p",null,[n("strong",null,[n("a",Wn,[s("第二次循环：整合 chunk 依赖"),e(a)]),s("：")])]),An,Rn,Pn,n("p",null,[n("strong",null,[n("a",Jn,[s("第三次循环：依赖标识转 RuntimeModule 对象"),e(a)]),s("：")])]),Bn,n("p",null,[s("从《"),n("a",On,[s("Init、Make、Seal：真正读懂 Webpack 核心流程"),e(a)]),s("》开始，我们花了四节篇幅，终于讲完了 Webpack 构建主流程中方方面面的原理，划重点：")]),Nn])}const $n=p(i,[["render",Kn],["__file","di27zhang—Runtime：mokuaibianyidabaojiyunxingshiluoji.html.vue"]]);export{$n as default};
