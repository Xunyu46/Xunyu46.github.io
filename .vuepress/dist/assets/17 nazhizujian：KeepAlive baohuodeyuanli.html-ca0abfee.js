import{_ as p,r as t,o,c,b as s,d as n,e as i,a}from"./app-48690364.js";const l={},u=a(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p><code>Vue</code> 内置了 <code>KeepAlive</code> 组件，帮助我们实现缓存多个组件实例切换时，完成对卸载组件实例的缓存，从而使得组件实例在来会切换时不会被重复创建，又是一个空间换时间的典型例子。在介绍源码之前，我们先来了解一下 <code>KeppAlive</code> 使用的基础示例：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>KeepAlive</span><span class="token punctuation">&gt;</span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>activeComponent<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> 
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>KeepAlive</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当动态组件在随着 <code>activeComponent</code> 变化时，如果没有 <code>KeepAlive</code> 做缓存，那么组件在来回切换时就会进行重复的实例化，这里就是通过 <code>KeepAlive</code> 实现了对不活跃组件的缓存。</p><p>这里需要思考几个问题：</p><ol><li>组件是如何被缓存的，以及是如何被重新激活的？</li><li>既然缓存可以提高组件渲染的性能，那么是不是缓存的越多越好呢？</li><li>如果不是越多越好，那么如何合理的丢弃多余的缓存呢？</li></ol><p>接下来我们通过对源码的分析，一步步找到答案。先找到定义 <code>KeppAlive</code> 组件的地方，然后看一下其大致内容：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> KeepAliveImpl <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 组件名称</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">KeepAlive</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token comment">// 区别于其他组件的标记</span>
  <span class="token literal-property property">__isKeepAlive</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token comment">// 组件的 props 定义</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">include</span><span class="token operator">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">,</span> RegExp<span class="token punctuation">,</span> Array<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">,</span> RegExp<span class="token punctuation">,</span> Array<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">max</span><span class="token operator">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">,</span> Number<span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> <span class="token punctuation">{</span>slots<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token comment">// setup 返回一个函数</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，<code>KeepAlive</code> 组件中，通过 <code>__isKeepAlive</code> 属性来完成对这个内置组件的特殊标记，这样外部可以通过 <code>isKeepAlive</code> 函数来做区分：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">isKeepAlive</span> <span class="token operator">=</span> <span class="token parameter">vnode</span> <span class="token operator">=&gt;</span> vnode<span class="token punctuation">.</span>type<span class="token punctuation">.</span>__isKeepAlive
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>紧接着定义了 <code>KeepAlive</code> 的一些 <code>props</code>：</p><ol><li><code>include</code> 表示包含哪些组件可被缓存</li><li><code>exclude</code> 表示排除那些组件</li><li><code>max</code> 则表示最大的缓存数</li></ol><p>后面我们将可以详细的看到这些 <code>props</code> 是如何被发挥作用的。</p><p>最后实现了一个 <code>setup</code> 函数，该函数返回了一个函数，我们前面提到 <code>setup</code> 返回函数的话，那么这个函数将会被当做节点 <code>render</code> 函数。了解了 <code>KeepAlive</code> 的整体骨架后，我们先来看看这个 <code>render</code> 函数具体做了哪些事情。</p><h2 id="keepalive-的-render-函数" tabindex="-1"><a class="header-anchor" href="#keepalive-的-render-函数" aria-hidden="true">#</a> KeepAlive 的 render 函数</h2><p>先来看看 <code>render</code> 函数的源码实现：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> KeepAliveImpl <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> <span class="token punctuation">{</span> slot <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 记录需要被缓存的 key</span>
      pendingCacheKey <span class="token operator">=</span> <span class="token keyword">null</span>
      <span class="token comment">// ...</span>
      <span class="token comment">// 获取子节点</span>
      <span class="token keyword">const</span> children <span class="token operator">=</span> slots<span class="token punctuation">.</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">const</span> rawVNode <span class="token operator">=</span> children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>children<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 子节点数量大于 1 个，不会进行缓存，直接返回</span>
        current <span class="token operator">=</span> <span class="token keyword">null</span>
        <span class="token keyword">return</span> children
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>
        <span class="token operator">!</span><span class="token function">isVNode</span><span class="token punctuation">(</span>rawVNode<span class="token punctuation">)</span> <span class="token operator">||</span>
        <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>rawVNode<span class="token punctuation">.</span>shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">STATEFUL_COMPONENT</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
          <span class="token operator">!</span><span class="token punctuation">(</span>rawVNode<span class="token punctuation">.</span>shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">SUSPENSE</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        current <span class="token operator">=</span> <span class="token keyword">null</span>
        <span class="token keyword">return</span> rawVNode
      <span class="token punctuation">}</span>
      <span class="token comment">// suspense 特殊处理，正常节点就是返回节点 vnode</span>
      <span class="token keyword">let</span> vnode <span class="token operator">=</span> <span class="token function">getInnerChild</span><span class="token punctuation">(</span>rawVNode<span class="token punctuation">)</span>
      <span class="token keyword">const</span> comp <span class="token operator">=</span> vnode<span class="token punctuation">.</span>type
    
      <span class="token comment">// 获取 Component.name 值</span>
      <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">getComponentName</span><span class="token punctuation">(</span><span class="token function">isAsyncWrapper</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span> <span class="token operator">?</span> vnode<span class="token punctuation">.</span>type<span class="token punctuation">.</span>__asyncResolved <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">:</span> comp<span class="token punctuation">)</span>
      <span class="token comment">// 获取 props 中的属性</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> include<span class="token punctuation">,</span> exclude<span class="token punctuation">,</span> max <span class="token punctuation">}</span> <span class="token operator">=</span> props
      <span class="token comment">// 如果组件 name 不在 include 中或者存在于 exclude 中，则直接返回</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>
        <span class="token punctuation">(</span>include <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span>name <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">matches</span><span class="token punctuation">(</span>include<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span>
        <span class="token punctuation">(</span>exclude <span class="token operator">&amp;&amp;</span> name <span class="token operator">&amp;&amp;</span> <span class="token function">matches</span><span class="token punctuation">(</span>exclude<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        current <span class="token operator">=</span> vnode
        <span class="token keyword">return</span> rawVNode
      <span class="token punctuation">}</span>
      
      <span class="token comment">// 缓存相关，定义缓存 key</span>
      <span class="token keyword">const</span> key <span class="token operator">=</span> vnode<span class="token punctuation">.</span>key <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> comp <span class="token operator">:</span> vnode<span class="token punctuation">.</span>key
      <span class="token comment">// 从缓存中取值</span>
      <span class="token keyword">const</span> cachedVNode <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
    
      <span class="token comment">// clone vnode，因为需要重用</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        vnode <span class="token operator">=</span> <span class="token function">cloneVNode</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>rawVNode<span class="token punctuation">.</span>shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">SUSPENSE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          rawVNode<span class="token punctuation">.</span>ssContent <span class="token operator">=</span> vnode
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// 给 pendingCacheKey 赋值，将在 beforeMount/beforeUpdate 中被使用</span>
      pendingCacheKey <span class="token operator">=</span> key
      <span class="token comment">// 如果存在缓存的 vnode 元素</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>cachedVNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 复制挂载状态</span>
        <span class="token comment">// 复制 DOM</span>
        vnode<span class="token punctuation">.</span>el <span class="token operator">=</span> cachedVNode<span class="token punctuation">.</span>el
        <span class="token comment">// 复制 component</span>
        vnode<span class="token punctuation">.</span>component <span class="token operator">=</span> cachedVNode<span class="token punctuation">.</span>component
        
        <span class="token comment">// 增加 shapeFlag 类型 COMPONENT_KEPT_ALIVE</span>
        vnode<span class="token punctuation">.</span>shapeFlag <span class="token operator">|=</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">COMPONENT_KEPT_ALIVE</span>
        <span class="token comment">// 把缓存的 key 移动到到队首</span>
        keys<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
        keys<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果缓存不存在，则添加缓存</span>
        keys<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
        <span class="token comment">// 如果超出了最大的限制，则移除最早被缓存的值</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>max <span class="token operator">&amp;&amp;</span> keys<span class="token punctuation">.</span>size <span class="token operator">&gt;</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>max <span class="token keyword">as</span> string<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">pruneCacheEntry</span><span class="token punctuation">(</span>keys<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// 增加 shapeFlag 类型 COMPONENT_SHOULD_KEEP_ALIVE，避免被卸载</span>
      vnode<span class="token punctuation">.</span>shapeFlag <span class="token operator">|=</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">COMPONENT_SHOULD_KEEP_ALIVE</span>
    
      current <span class="token operator">=</span> vnode
      <span class="token comment">// 返回 vnode 节点</span>
      <span class="token keyword">return</span> <span class="token function">isSuspense</span><span class="token punctuation">(</span>rawVNode<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token operator">?</span> rawVNode <span class="token operator">:</span> vnode
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到返回的这个 <code>render</code> 函数执行的结果就是返回被 <code>KeepAlive</code> 包裹的子节点的 <code>vnode</code> 只不过在返回子节点的过程中做了很多处理而已，如果子节点数量大于一个，那么将不会被 <code>keepAlive</code>，直接返回子节点的 <code>vnode</code>，如果组件 <code>name</code> 不在用户定义的 <code>include</code> 中或者存在于 <code>exclude</code> 中，也会直接返回子节点的 <code>vnode</code>。</p><h3 id="缓存设计" tabindex="-1"><a class="header-anchor" href="#缓存设计" aria-hidden="true">#</a> 缓存设计</h3><p>接着来看后续的缓存步骤，首先定义了一个 <code>pendingCacheKey</code> 变量，用来作为 <code>cache</code> 的缓存 <code>key</code>。对于初始化的 <code>KeepAlive</code> 组件的时候，此时还没有缓存，那么只会讲 <code>key</code> 添加到 <code>keys</code> 这样一个 <code>Set</code> 的数据结构中，在组件 <code>onMounted</code> 和 <code>onUpdated</code> 钩子中进行缓存组件的 <code>vnode</code> 收集，因为这个时候收集到的 <code>vnode</code> 节点是稳定不会变的缓存。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">cacheSubtree</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>pendingCacheKey <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 以 pendingCacheKey 作为key 进行缓存收集</span>
    cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>pendingCacheKey<span class="token punctuation">,</span> <span class="token function">getInnerChild</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>subTree<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">onMounted</span><span class="token punctuation">(</span>cacheSubtree<span class="token punctuation">)</span>
<span class="token function">onUpdated</span><span class="token punctuation">(</span>cacheSubtree<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21),d=s("code",null,"props",-1),r=s("code",null,"max",-1),k={href:"https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_recently_used_(LRU)",target:"_blank",rel:"noopener noreferrer"},v=s("code",null,"key",-1),m=a(`<p>最后，当缓存的节点被重新激活时，则会将缓存中的节点的 <code>el</code> 属性赋值给新的 <code>vnode</code> 节点，从而减少了再进行 <code>patch</code> 生成 <code>DOM</code> 的过程，这里也说明了 <code>KeepAlive</code> 核心目的就是缓存 <code>DOM</code> 元素。</p><h2 id="激活态设计" tabindex="-1"><a class="header-anchor" href="#激活态设计" aria-hidden="true">#</a> 激活态设计</h2><p>上述源码中，当组件被添加到 <code>KeepAlive</code> 缓存池中时，也会为 <code>vnode</code> 节点的 <code>shapeFlag</code> 添加两额外的两个属性，分别是 <code>COMPONENT_KEPT_ALIVE</code> 和 <code>COMPONENT_SHOULD_KEEP_ALIVE</code>。我们先说 <code>COMPONENT_KEPT_ALIVE</code> 这个属性，当一个节点被标记为 <code>COMPONENT_KEPT_ALIVE</code> 时，会在 <code>processComponent</code> 时进行特殊处理：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">processComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n1 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 处理 KeepAlive 组件</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n2<span class="token punctuation">.</span>shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">COMPONENT_KEPT_ALIVE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 执行 activate 钩子</span>
      <span class="token punctuation">;</span><span class="token punctuation">(</span>parentComponent<span class="token operator">!</span><span class="token punctuation">.</span>ctx <span class="token keyword">as</span> KeepAliveContext<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">activate</span><span class="token punctuation">(</span>
        n2<span class="token punctuation">,</span>
        container<span class="token punctuation">,</span>
        anchor<span class="token punctuation">,</span>
        isSVG<span class="token punctuation">,</span>
        optimized
      <span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">mountComponent</span><span class="token punctuation">(</span>
        n2<span class="token punctuation">,</span>
        container<span class="token punctuation">,</span>
        anchor<span class="token punctuation">,</span>
        parentComponent<span class="token punctuation">,</span>
        parentSuspense<span class="token punctuation">,</span>
        isSVG<span class="token punctuation">,</span>
        optimized
      <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 更新组件</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，在 <code>processComponent</code> 阶段如果是 <code>keepAlive</code> 的组件，在挂载过程中，不会执行执行 <code>mountComponent</code> 的逻辑，因为已经缓存好了，所以只需要再次调用 <code>activate</code> 激活就好了。接下来看看这个激活函数做了哪些事儿：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> KeepAliveImpl <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> <span class="token punctuation">{</span> slot <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    sharedContext<span class="token punctuation">.</span><span class="token function-variable function">activate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">,</span> isSVG<span class="token punctuation">,</span> optimized</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 获取组件实例</span>
      <span class="token keyword">const</span> instance <span class="token operator">=</span> vnode<span class="token punctuation">.</span>component<span class="token operator">!</span>
      <span class="token comment">// 将缓存的组件挂载到容器中</span>
      <span class="token function">move</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">,</span> MoveType<span class="token punctuation">.</span><span class="token constant">ENTER</span><span class="token punctuation">,</span> parentSuspense<span class="token punctuation">)</span>
      <span class="token comment">// 如果 props 有变动，还是需要对 props 进行 patch</span>
      <span class="token function">patch</span><span class="token punctuation">(</span>
        instance<span class="token punctuation">.</span>vnode<span class="token punctuation">,</span>
        vnode<span class="token punctuation">,</span>
        container<span class="token punctuation">,</span>
        anchor<span class="token punctuation">,</span>
        instance<span class="token punctuation">,</span>
        parentSuspense<span class="token punctuation">,</span>
        isSVG<span class="token punctuation">,</span>
        vnode<span class="token punctuation">.</span>slotScopeIds<span class="token punctuation">,</span>
        optimized
      <span class="token punctuation">)</span>
      <span class="token comment">// 执行组件的钩子函数</span>
      <span class="token function">queuePostRenderEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        instance<span class="token punctuation">.</span>isDeactivated <span class="token operator">=</span> <span class="token boolean">false</span>
        <span class="token comment">// 执行 onActivated 钩子</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">invokeArrayFns</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>a<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 执行 onVnodeMounted 钩子</span>
        <span class="token keyword">const</span> vnodeHook <span class="token operator">=</span> vnode<span class="token punctuation">.</span>props <span class="token operator">&amp;&amp;</span> vnode<span class="token punctuation">.</span>props<span class="token punctuation">.</span>onVnodeMounted
        <span class="token keyword">if</span> <span class="token punctuation">(</span>vnodeHook<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">invokeVNodeHook</span><span class="token punctuation">(</span>vnodeHook<span class="token punctuation">,</span> instance<span class="token punctuation">.</span>parent<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> parentSuspense<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以直观的看到 <code>activate</code> 激活函数，核心就是通过 <code>move</code> 方法，将缓存中的 <code>vnode</code> 节点直接挂载到容器中，同时为了防止 <code>props</code> 变化导致组件变化，也会执行 <code>patch</code> 方法来更新组件，注意此时的 <code>patch</code> 函数的调用是会传入新老子节点的，所以只会进行 <code>diff</code> 而不会进行重新创建。</p><p>当这一切都执行完成后，最后再通过 <code>queuePostRenderEffect</code> 函数，将用户定义的 <code>onActivated</code> 钩子放到状态更新流程后执行。</p><h2 id="卸载态设计" tabindex="-1"><a class="header-anchor" href="#卸载态设计" aria-hidden="true">#</a> 卸载态设计</h2><p>接下来我们再看另一个标记态：<code>COMPONENT_SHOULD_KEEP_ALIVE</code>，我们看一下组件的卸载函数 <code>unmount</code> 的设计：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">unmount</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> parentComponent<span class="token punctuation">,</span> parentSuspense<span class="token punctuation">,</span> doRemove <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> shapeFlag  <span class="token punctuation">}</span> <span class="token operator">=</span> vnode
  <span class="token keyword">if</span> <span class="token punctuation">(</span>shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">COMPONENT_SHOULD_KEEP_ALIVE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">;</span><span class="token punctuation">(</span>parentComponent<span class="token operator">!</span><span class="token punctuation">.</span>ctx <span class="token keyword">as</span> KeepAliveContext<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">deactivate</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，如果 <code>shapeFlag</code> 上存在 <code>COMPONENT_SHOULD_KEEP_ALIVE</code> 属性的话，那么将会执行 <code>ctx.deactivate</code> 方法，我们再来看一下 <code>deactivate</code> 函数的定义：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> KeepAliveImpl <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> <span class="token punctuation">{</span> slot <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建一个隐藏容器</span>
    <span class="token keyword">const</span> storageContainer <span class="token operator">=</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>

    sharedContext<span class="token punctuation">.</span><span class="token function-variable function">deactivate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">vnode</span><span class="token operator">:</span> VNode</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 获取组件实例</span>
      <span class="token keyword">const</span> instance <span class="token operator">=</span> vnode<span class="token punctuation">.</span>component<span class="token operator">!</span>
      <span class="token comment">// 将组件移动到隐藏容器中</span>
      <span class="token function">move</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> storageContainer<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> MoveType<span class="token punctuation">.</span><span class="token constant">LEAVE</span><span class="token punctuation">,</span> parentSuspense<span class="token punctuation">)</span>
      <span class="token comment">// 执行组件的钩子函数</span>
      <span class="token function">queuePostRenderEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 执行组件的 onDeactivated 钩子</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>da<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">invokeArrayFns</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>da<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 执行 onVnodeUnmounted</span>
        <span class="token keyword">const</span> vnodeHook <span class="token operator">=</span> vnode<span class="token punctuation">.</span>props <span class="token operator">&amp;&amp;</span> vnode<span class="token punctuation">.</span>props<span class="token punctuation">.</span>onVnodeUnmounted
        <span class="token keyword">if</span> <span class="token punctuation">(</span>vnodeHook<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">invokeVNodeHook</span><span class="token punctuation">(</span>vnodeHook<span class="token punctuation">,</span> instance<span class="token punctuation">.</span>parent<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        instance<span class="token punctuation">.</span>isDeactivated <span class="token operator">=</span> <span class="token boolean">true</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> parentSuspense<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>卸载态函数 <code>deactivate</code> 核心工作就是将页面中的 <code>DOM</code> 移动到一个隐藏不可见的容器 <code>storageContainer</code> 当中，这样页面中的元素就被移除了。当这一切都执行完成后，最后再通过 <code>queuePostRenderEffect</code> 函数，将用户定义的 <code>onDeactivated</code> 钩子放到状态更新流程后执行。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>现在我们尝试着再回答文中开篇提到的三个问题：</p><ol><li>组件是通过类似于 <code>LRU</code> 的缓存机制来缓存的，并为缓存的组件 <code>vnode</code> 的 <code>shapeFlag</code> 属性打上 <code>COMPONENT_KEPT_ALIVE</code> 属性，当组件在 <code>processComponent</code> 挂载时，如果存在 <code>COMPONENT_KEPT_ALIVE</code> 属性，则会执行激活函数，激活函数内执行具体的缓存节点挂载逻辑。</li><li>缓存不是越多越好，因为所有的缓存节点都会被存在 <code>cache</code> 中，如果过多，则会增加内存负担。</li><li>丢弃的方式就是在缓存重新被激活时，之前缓存的 <code>key</code> 会被重新添加到队首，标记为最近的一次缓存，如果缓存的实例数量即将超过指定的那个最大数量，则最久没有被访问的缓存实例将被丢弃。</li></ol>`,17);function b(h,y){const e=t("ExternalLinkIcon");return o(),c("div",null,[u,s("p",null,[n("另外，注意到 "),d,n(" 中还有一个 "),r,n(" 变量用来标记最大的缓存数量，这个缓存策略就是类似于 "),s("a",k,[n("LRU 缓存"),i(e)]),n(" 的方式实现的。在缓存重新被激活时，之前缓存的 "),v,n(" 会被重新添加到队首，标记为最近的一次缓存，如果缓存的实例数量即将超过指定的那个最大数量，则最久没有被访问的缓存实例将被销毁，以便为新的实例腾出空间。")]),m])}const f=p(l,[["render",b],["__file","17 nazhizujian：KeepAlive baohuodeyuanli.html.vue"]]);export{f as default};
