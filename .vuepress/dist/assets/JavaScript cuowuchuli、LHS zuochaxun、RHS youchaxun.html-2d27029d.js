import{_ as n,o as s,c as a,a as e}from"./app-e6acbbcc.js";const t={},p=e(`<h1 id="javascript-错误处理、lhs-左查询、rhs-右查询" tabindex="-1"><a class="header-anchor" href="#javascript-错误处理、lhs-左查询、rhs-右查询" aria-hidden="true">#</a> JavaScript 错误处理、LHS 左查询、RHS 右查询</h1><p>错误处理在编程中的重要性毋庸置疑，所有现代桌面浏览器都会通过控制台暴露错误。</p><p>作为开发人员，了解这些错误，并正确的处理他们是非常必要的。</p><p>接下来我们会从以下三个方面来展开讲解</p><ul><li>常见的错误类型</li><li><code>try...catch</code> 错误捕获与处理</li><li><code>finally</code> 子句</li><li><code>throw</code> 抛出自定义错误</li></ul><h2 id="一、常见错误类型" tabindex="-1"><a class="header-anchor" href="#一、常见错误类型" aria-hidden="true">#</a> 一、常见错误类型</h2><p>代码执行过程中会发生各种类型的错误，每种类型的错误都对应一个<strong>错误对象</strong>，常见的错误类型有以上 8 种</p><ul><li>SyntaxError 语法错误</li><li>ReferenceError 引用错误</li><li>TypeError 类型错误</li><li>RangeError 范围错误</li><li>URIError URI 错误</li><li>EvalError eval 错误</li><li>InternalError 内部错误（非标准）</li><li>Error 错误对象，用于自定义错误</li></ul><blockquote><p>接下来，我们就一个一个简单介绍下</p></blockquote><h3 id="_1、syntaxerror-语法错误" tabindex="-1"><a class="header-anchor" href="#_1、syntaxerror-语法错误" aria-hidden="true">#</a> 1、SyntaxError 语法错误</h3><p>JavaScript 引擎发现了不符合语法规范的代码，会出现此错误</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 变量名不规范</span>
<span class="token keyword">var</span> <span class="token keyword">this</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> 2a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>

<span class="token comment">// if 少了 }</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/image-20221025184448555.4b98b667.png" alt="image-20221025184448555"></p><h3 id="_2、referenceerror-引用错误" tabindex="-1"><a class="header-anchor" href="#_2、referenceerror-引用错误" aria-hidden="true">#</a> 2、ReferenceError 引用错误</h3><p>会在找不到对象时发生，比如常见的访问不存在的变量时，就会报<strong>引用错误</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a变量不存在</span>
<span class="token keyword">var</span> num <span class="token operator">=</span> c<span class="token punctuation">;</span> <span class="token comment">// c变是不存在</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/image-20221025184933070.90bdfc0e.png" alt="image-20221025184933070"></p><h3 id="_3、typeerror-类型错误" tabindex="-1"><a class="header-anchor" href="#_3、typeerror-类型错误" aria-hidden="true">#</a> 3、TypeError 类型错误</h3><ul><li>当变量不是预期类型时，就会引发这种类型错误。</li><li>比如常见引发这一错误的行为：把一个基本数据类型当函数调用。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span> <span class="token keyword">in</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true不是一个对象</span>

<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">arr</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// arr 不是一个函数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/image-20221025185530556.709d2839.png" alt="image-20221025185530556"></p><h3 id="_4、rangeerror-范围错误" tabindex="-1"><a class="header-anchor" href="#_4、rangeerror-范围错误" aria-hidden="true">#</a> 4、RangeError 范围错误</h3><p>当数字超出允许的值范围时，将会抛出此类型的错误</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 数组长度</span>

<span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">1.233</span><span class="token punctuation">;</span>
num<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 参数在0-100之间</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/image-20221025194106345.c694c986.png" alt="image-20221025194106345"></p><h3 id="_5、urierror-uri-错误" tabindex="-1"><a class="header-anchor" href="#_5、urierror-uri-错误" aria-hidden="true">#</a> 5、URIError URI 错误</h3><p>在了解 URIError 错误之前，我们先来了解下什么是 URI、URL、URN</p><ul><li>URI（Uniform Resource Identifier）：统一资源标识符 ，用来唯一标识资源，是一种语义上的抽象概念</li><li>URL（Uniform Resource Locator）：统一资源定位符，用来定位唯一的资源， 必须提供足够的定位信息</li><li>URN（Uniform Resource Name）：统一资源名称，定义了资源的身份（命名）</li></ul><p><strong>他们三者的关系如下图</strong></p><p><img src="https://www.arryblog.com/assets/img/image-20221025201015940.2dcdc6cd.png" alt="image-20221025201015940"></p><p>如果用一个人来做比喻的话</p><ul><li>URN 相当人的身份证号，唯 一标识。</li><li>URL 相当于找到这个人的方式，如住址: x 省 xx 市 xx 区 ... xx 单元 xx 室的身份证号为 xxx 的人</li><li>URI 相当身份证，上面有身份证号，也有地址。</li></ul><p><strong>如果用一个网址来表示的话</strong></p><ul><li>URL: <code>https://www.arryblog.com/guide/html5/html-html5-course.htm</code></li><li>URN:<code>guide/html5/html-html5-course.htm</code></li><li>URI: 可以是上面的 ULR，也可以是 URN</li></ul><h3 id="_6、urierror-错误" tabindex="-1"><a class="header-anchor" href="#_6、urierror-错误" aria-hidden="true">#</a> 6、URIError 错误</h3><ul><li>URL 错误只会在<code>encodeURI()</code> 和 <code>decodeURI()</code> 传入了格式错误的 URI 时发生。但我们很难看到这种错误，因为前面两个函数非常稳键。</li><li><code>encodeURI()</code> 对传入的 URI 进行编码</li><li><code>decodeURI()</code> 对传入的 URI 进行解码</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">&quot;https://www.arryblog.com/html/文档笔记.html&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> enurl <span class="token operator">=</span> <span class="token function">encodeURI</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> deurl <span class="token operator">=</span> <span class="token function">decodeURI</span><span class="token punctuation">(</span>enurl<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>enurl<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>deurl<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/image-20221025203328098.615b3899.png" alt="image-20221025203328098"></p><h3 id="_7、evalerror-eval-错误" tabindex="-1"><a class="header-anchor" href="#_7、evalerror-eval-错误" aria-hidden="true">#</a> 7、EvalError eval 错误</h3><p>在使用<code>eval()</code> 函数时发生异常时抛出错误。因为<code>eval</code>被禁用，所以了解就好。</p><h3 id="_8、internalerror-非标准-内部错误" tabindex="-1"><a class="header-anchor" href="#_8、internalerror-非标准-内部错误" aria-hidden="true">#</a> 8、InternalError（非标准）内部错误</h3><p>该错误在 JS 引擎内部发生发生异常时会抛出。如果真发生了这种错误，很可能代码哪里弄错了或者有危险了。</p><h3 id="_9、error-自定义错误" tabindex="-1"><a class="header-anchor" href="#_9、error-自定义错误" aria-hidden="true">#</a> 9、Error 自定义错误</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;自定义错误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/image-20221025204448640.dc5b0f56.png" alt="image-20221025204448640"></p><h3 id="_10、try-catch-语句" tabindex="-1"><a class="header-anchor" href="#_10、try-catch-语句" aria-hidden="true">#</a> 10、try ... catch 语句</h3><p><code>try...catch</code> 语句用来处理 JS 中的异常</p><blockquote><p>其语法如下</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token comment">// 可能会出错的代码</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 出错时要做什么</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果<code>try</code>块中的代码发生错误，则会立即退出执行，并跳到<code>catch</code>块中，<code>catch</code>块此时会接收到一个对象，这个对象包含发生错误的相关信息。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token comment">// 可能出错的代码</span>
  <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 出错时要做的事</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/image-20221025210450182.2d9ecf16.png" alt="image-20221025210450182"></p><p><code>try</code>捕获到错误后,不会再执行<code>try</code>错误后的代码，同时将错误交给<code>catch</code>来处理，然后再执行后面的代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token comment">// 可能出错的代码</span>
  <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不执行</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 出错时要做的事</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 执行</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;try后面代码&quot;</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 执行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/image-20221025210852010.e4653d2b.png" alt="image-20221025210852010"></p><h3 id="_11、finally-子句" tabindex="-1"><a class="header-anchor" href="#_11、finally-子句" aria-hidden="true">#</a> 11、finally 子句</h3><ul><li><code>finally</code>子句是<code>try...catch</code>语句中的一部分，为可选的</li><li>不管<code>try</code>中代码是否发生错误，最终都会执行<code>finally</code>子句中的代码</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token comment">// 可能会出错的代码</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 出错时要做什么</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
  <span class="token comment">//永远都会执行的代码</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token comment">// 可能出错的代码</span>
  <span class="token comment">// a();</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 出错时要做的事</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;不管try中代码是否报错，我都会执行&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/image-20221025211437695.cd292c47.png" alt="image-20221025211437695"></p><p><code>try</code>和<code>catch</code>中的<code>return</code> 语句也无法阻止 <code>finally</code> 代码块的执行</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">// 可能出错的代码</span>
    <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 出错时要做的事</span>
    <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/image-20221025211905573.a500dd8f.png" alt="image-20221025211905573"></p><h3 id="_12、throw-抛出自定义错误" tabindex="-1"><a class="header-anchor" href="#_12、throw-抛出自定义错误" aria-hidden="true">#</a> 12、throw 抛出自定义错误</h3><p><code>throw</code> 操作符，用于抛出自定义错误。<code>throw</code> 操作符后面必须有一个值，值可以是任意类型。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">throw</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">throw</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">throw</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不会被执行</span>

<span class="token comment">// 使用 throw操作符时，代码立即停止执行，除非用try...catch捕获了抛出的错误</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>throw</code> 与 <code>try...catch</code> 结合</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token number">123</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 正常执行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以自定义一个错误类型的消息，浏览器会像处理自己生成的错误一样来处理这个自定义错误</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token comment">// throw new Error(&quot;自定义Error错误&quot;);</span>
  <span class="token comment">// throw new TypeError(&quot;自定义TypeError错误&quot;);</span>
  <span class="token comment">// throw new SyntaxError(&quot;自定义SyntaxError错误&quot;);</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RangeError</span><span class="token punctuation">(</span><span class="token string">&quot;自定义RangeError错误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 正常执行</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&quot;arr参数，必须是一个数组&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 上面抛出错误，这里不会执行</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/image-20221025214614144.786c0fc4.png" alt="image-20221025214614144"></p><h2 id="二、lhs-和-rhs-查询" tabindex="-1"><a class="header-anchor" href="#二、lhs-和-rhs-查询" aria-hidden="true">#</a> 二、LHS 和 RHS 查询</h2><p><code>LHS</code>字面理解是 <code>Left Hand Sid</code> 即左手边，<code>RHS</code>字面理解是 <code>Right Hand Side</code> 即右手边。</p><blockquote><p>那谁的左边和右边呢？</p></blockquote><h3 id="_1、lhs-和-rhs-片面的理解" tabindex="-1"><a class="header-anchor" href="#_1、lhs-和-rhs-片面的理解" aria-hidden="true">#</a> 1、LHS 和 RHS 片面的理解</h3><p>一般<strong>简单片面</strong>的理解为 <strong>赋值操作符的左边和右边</strong></p><ul><li>当<strong>变量</strong>出现在赋值操作符的左侧时进行<strong>LHS 查询</strong>，出现在右侧时进行<strong>RHS 查询</strong></li><li>LHS 查询是试图找到变量的容器本身，然后对其赋值</li><li>RHS 查询是试图找到变量的中对应的值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a<span class="token punctuation">;</span>
<span class="token keyword">var</span> b<span class="token punctuation">;</span>

a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
b <span class="token operator">=</span> a<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>对以上代码进行解读</p></blockquote><p>① 编译阶段</p><p>会在当前作用域中声明 2 个变量 a 和 b</p><p><strong>② 执行阶段</strong></p><ul><li><code>a = 1</code>，这里的 a 会进行 LHS 查询，查询是否存在变量 a，并不关心 a 的值是什么。如果变量 a 存在，就给他赋值为 1</li><li><code>b = a</code>，首先会对 a 进行 RHS 查询，查询是否存在变量 a，存在，并把对应的值 1 拿到</li><li>然后再对 b 进行 LHS 查询，查询是否存在变量 b，存在，并把对应的值 1 赋值给到变量 b</li></ul><h3 id="_2、lhs-和-rhs-更准确的理解" tabindex="-1"><a class="header-anchor" href="#_2、lhs-和-rhs-更准确的理解" aria-hidden="true">#</a> 2、LHS 和 RHS 更准确的理解</h3><p>通过上面分析，我们知道</p><ul><li><strong>LHS 查询</strong>只关心是否存在这个变量，并不关心变量对应的值是什么</li><li><strong>RHS 查询</strong>除了关心变量是否存在之外，还关心变量中对应的值，因为最终就是为了找到变量对应值。</li></ul><blockquote><p>所以，更准确的说</p><ul><li>LHS 查询可以理解为<strong>赋值操作的目标是谁 ？</strong> 即我要把值赋值给谁</li><li>RHS 查询可以理解为 <strong>赋值操作的源头是谁？</strong> 我要用什么来内容完成赋值</li></ul></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>
  <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>以上代码在执行过程中，经历了几次 LHS 查询和 RHS 查询</p></blockquote><p>我们先来分析下</p><p>整个代码从编译到执行的整个过程</p><blockquote><p><strong>① 全局代码运行时</strong></p></blockquote><p><strong>编译阶段</strong></p><p>声明函数 fn，fn 是 window 对象身上的属性，即<code>window.fn=function(){......}</code></p><p><strong>执行阶段</strong></p><p><code>fn(2)</code>在调用前，会对 fn 进行 <strong>RHS 查询</strong>，查询是否存在 fn，并拿到 fn 的值，然后开始执行</p><blockquote><p><strong>② fn 函数调用时</strong></p></blockquote><p><strong>编译阶段：</strong></p><ul><li>在当前作用域中声明 2 个变量 c 和 b，同时<code>c = 2</code></li><li>这个过程 c 也会进行 <strong>LHS 查询</strong>，找到是否存在变量 c，然后存在将值 2 赋值给到他</li></ul><p><strong>执行阶段：</strong></p><ul><li><p>当执行到<code>console.log(c)</code> ，会对 c 进行 <strong>RHS 查询</strong>，取得 c 的值为 2，还会对 console 进行 <strong>RHS 查询</strong></p></li><li><p>当执行到 <code>console.log(b)</code>，会对 b 进行 <strong>RHS 查询</strong>，取得 c 的值为 undefined，对 console 进行 RHS 查询</p></li><li><p>当执行到<code>console.log(a)</code>，会对 c 进行 <strong>RHS 查询</strong>，发现找不到变量 a，然后报出 <strong>引用错误</strong>，....</p></li><li><p>当执行到</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>a = 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>，会对 a 进行</p><p>LHS 查询</p><p>，发现找不到变量 a</p><ul><li>在非严格模式下，此时会全局作用域中创建一个同名的变量，然后将 1 赋值给 a</li><li>在严格模式下，会报 <strong>引用错误</strong>，找不到变量 a</li></ul></li><li><p>当执行到</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>b = a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>首先对 a 进行 <strong>RHS 查询</strong>，找到变量 a，并取得 a 的值 1</li><li>然后对 b 进行 <strong>LHS 查询</strong>，找到变量 b，把对应的值 1 赋值给 b</li></ul></li><li><p>当执行到<code>b()</code>时，会对 b 进行 RHS 查询，找到了，但 b 的值不是一个函数，你对 b 执行函数调用，会抛出类型错误（TypeError）</p></li></ul><h3 id="_3、总结-lhs-和-rhs" tabindex="-1"><a class="header-anchor" href="#_3、总结-lhs-和-rhs" aria-hidden="true">#</a> 3、总结：LHS 和 RHS</h3><p><strong>LHS 查询</strong></p><ul><li>只关心有没有要查找的变量，并不关心变量的值是多少</li><li>如果找到这个变量，就将对应值赋值给他。</li><li>如果找不到，在严格模式下，会报引用错误，非严格模式下，会在全局作用域中创建一个同名的变量</li><li>LHS 查询可以理解为 <strong>赋值操作的目标是谁 ？</strong> 即我要把值赋值给谁</li></ul><p><strong>RHS 查询</strong></p><ul><li>他不仅关心有没有要查找的变量，还关心变量的值是多少，最终是要取到变量的值。</li><li>如果找不到变量，则会报引用错误，如果找到，则把对应的值拿到</li><li>如果对找到的变量，做不合理的操作，会抛出类型错误（TypeError）</li><li>RHS 查询可以理解为 <strong>赋值操作的源头是谁 ？</strong> 我要用什么来内容完成赋值</li></ul><blockquote><p>JS 引擎在查找某个变量时，会先判断是要 LHS 查询还是 RHS 查询，然后再根据对应规则去查询变量，做相应处理</p></blockquote><h2 id="三、总结重难点" tabindex="-1"><a class="header-anchor" href="#三、总结重难点" aria-hidden="true">#</a> 三、总结重难点</h2><p>总结上一章节和本章重难点知识，理清思路，把握重难点。并能轻松回答以下问题，说明自己就真正的掌握了。</p><p>用于故而知新，快速复习。</p><h3 id="_1、重点" tabindex="-1"><a class="header-anchor" href="#_1、重点" aria-hidden="true">#</a> 1、重点</h3><ul><li>什么是执行上下文、执行上下文的分类 ？</li></ul><blockquote><p>执行上下文分类：全局执行上下文，函数执行上下文，eval 执行上下文</p></blockquote><ul><li>什么是执行上下文栈（调用栈）？</li><li>什么是栈溢出 ？什么情况下会出现栈溢出</li><li>什么是变量对象（VO)、活动对象及创建过程 ？ <ul><li>第一步创建一个<code>AO = { }</code></li><li>第二步处理 arguments，把 arguments 当对 AO 对象身上的属性</li><li>第三步处理形参和对应实参 <code>AO = {a: 2}</code></li><li>第四步处理 函数内部的函数声明 <code>AO = {fn: function(){ }}</code></li><li>第四步处理 函数内部的 变量声明 <code>AO = {b: undefined}</code></li></ul></li><li>说说变量查找的整个过程 ？</li><li>掌握<code>try...catch</code>的用法</li></ul><h3 id="_2、难点" tabindex="-1"><a class="header-anchor" href="#_2、难点" aria-hidden="true">#</a> 2、难点</h3><ul><li>什么是闭包 ？</li><li>什么情况下会形成闭包 ？</li><li>闭包主要是解决什么问题 ？</li><li>闭包的实际应用</li><li>什么是垃圾回收 ？</li><li>垃圾回收的两种策略 ？如何手动标记垃圾</li><li>什么是内存泄露，什么是内存溢出 ？</li><li>闭包会造成内存泄露吗 ？</li><li>IIFE 的的作用</li></ul>`,115),o=[p];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","JavaScript cuowuchuli、LHS zuochaxun、RHS youchaxun.html.vue"]]);export{r as default};
