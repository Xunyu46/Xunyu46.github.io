const l=JSON.parse('{"key":"v-6ee3f59d","path":"/blogs/web/javascript/JavaScript mianxiangduixiang，yuanxingheyuanxinglian.html","title":"JavaScript 面向对象，原型和原型链","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"一、对象的基本概念","slug":"一、对象的基本概念","link":"#一、对象的基本概念","children":[{"level":3,"title":"1、现实生活角度-理解对象","slug":"_1、现实生活角度-理解对象","link":"#_1、现实生活角度-理解对象","children":[]},{"level":3,"title":"2、JavaScript 语言角度-理解对象","slug":"_2、javascript-语言角度-理解对象","link":"#_2、javascript-语言角度-理解对象","children":[]},{"level":3,"title":"3、为什么需要对象","slug":"_3、为什么需要对象","link":"#_3、为什么需要对象","children":[]}]},{"level":2,"title":"二、对象的创建","slug":"二、对象的创建","link":"#二、对象的创建","children":[{"level":3,"title":"1、字面量方式创建对象","slug":"_1、字面量方式创建对象","link":"#_1、字面量方式创建对象","children":[]},{"level":3,"title":"2、对象中属性名规范","slug":"_2、对象中属性名规范","link":"#_2、对象中属性名规范","children":[]},{"level":3,"title":"3、创建一个对象","slug":"_3、创建一个对象","link":"#_3、创建一个对象","children":[]}]},{"level":2,"title":"三、对象属性的操作","slug":"三、对象属性的操作","link":"#三、对象属性的操作","children":[{"level":3,"title":"1、访问对象中的属性","slug":"_1、访问对象中的属性","link":"#_1、访问对象中的属性","children":[]},{"level":3,"title":"2、添加或修改对象属性值","slug":"_2、添加或修改对象属性值","link":"#_2、添加或修改对象属性值","children":[]},{"level":3,"title":"3、删除对象属性","slug":"_3、删除对象属性","link":"#_3、删除对象属性","children":[]}]},{"level":2,"title":"四、对象方法的操作","slug":"四、对象方法的操作","link":"#四、对象方法的操作","children":[{"level":3,"title":"1、方法的调用","slug":"_1、方法的调用","link":"#_1、方法的调用","children":[]},{"level":3,"title":"2、方法和函数的关系","slug":"_2、方法和函数的关系","link":"#_2、方法和函数的关系","children":[]}]},{"level":2,"title":"五、对象的遍历","slug":"五、对象的遍历","link":"#五、对象的遍历","children":[]},{"level":2,"title":"六、对象的深克隆与浅克隆","slug":"六、对象的深克隆与浅克隆","link":"#六、对象的深克隆与浅克隆","children":[{"level":3,"title":"1、对象是引用类型","slug":"_1、对象是引用类型","link":"#_1、对象是引用类型","children":[]},{"level":3,"title":"2、对象的浅克隆","slug":"_2、对象的浅克隆","link":"#_2、对象的浅克隆","children":[]},{"level":3,"title":"3、对象的深克隆","slug":"_3、对象的深克隆","link":"#_3、对象的深克隆","children":[]}]},{"level":2,"title":"七、this 关键字","slug":"七、this-关键字","link":"#七、this-关键字","children":[{"level":3,"title":"1、this 是什么","slug":"_1、this-是什么","link":"#_1、this-是什么","children":[]},{"level":3,"title":"2、函数作为普通函数直接调用","slug":"_2、函数作为普通函数直接调用","link":"#_2、函数作为普通函数直接调用","children":[]},{"level":3,"title":"2.1、IIFE 立即执行函数","slug":"_2-1、iife-立即执行函数","link":"#_2-1、iife-立即执行函数","children":[]},{"level":3,"title":"3、函数作为对象的方法被调用","slug":"_3、函数作为对象的方法被调用","link":"#_3、函数作为对象的方法被调用","children":[]},{"level":3,"title":"3.1、数组[下标]()","slug":"_3-1、数组-下标","link":"#_3-1、数组-下标","children":[]},{"level":3,"title":"3.2、测试题","slug":"_3-2、测试题","link":"#_3-2、测试题","children":[]},{"level":3,"title":"4、call 与 apply 更改 this 指向","slug":"_4、call-与-apply-更改-this-指向","link":"#_4、call-与-apply-更改-this-指向","children":[]},{"level":3,"title":"4.1、call 和 apply 的注意事项","slug":"_4-1、call-和-apply-的注意事项","link":"#_4-1、call-和-apply-的注意事项","children":[]},{"level":3,"title":"5、bind 函数","slug":"_5、bind-函数","link":"#_5、bind-函数","children":[]},{"level":3,"title":"5.1、bind 用法一： 改变 this 指向","slug":"_5-1、bind-用法一-改变-this-指向","link":"#_5-1、bind-用法一-改变-this-指向","children":[]},{"level":3,"title":"5.2、bind 用法二：创建一个拥有预设参数列表","slug":"_5-2、bind-用法二-创建一个拥有预设参数列表","link":"#_5-2、bind-用法二-创建一个拥有预设参数列表","children":[]},{"level":3,"title":"5.3、案例：比较两个数的大小","slug":"_5-3、案例-比较两个数的大小","link":"#_5-3、案例-比较两个数的大小","children":[]},{"level":3,"title":"5.4、bind 返回的新函数，作为构造函数使用","slug":"_5-4、bind-返回的新函数-作为构造函数使用","link":"#_5-4、bind-返回的新函数-作为构造函数使用","children":[]},{"level":3,"title":"5.5、bind 注意事项","slug":"_5-5、bind-注意事项","link":"#_5-5、bind-注意事项","children":[]},{"level":3,"title":"5.6、总结","slug":"_5-6、总结","link":"#_5-6、总结","children":[]},{"level":3,"title":"6、call、apply、bind 的区别和使用场景","slug":"_6、call、apply、bind-的区别和使用场景","link":"#_6、call、apply、bind-的区别和使用场景","children":[]},{"level":3,"title":"7、this 指向总结","slug":"_7、this-指向总结","link":"#_7、this-指向总结","children":[]}]},{"level":2,"title":"八、构造函数与类","slug":"八、构造函数与类","link":"#八、构造函数与类","children":[{"level":3,"title":"1、工厂方法 - 批量创建对象","slug":"_1、工厂方法-批量创建对象","link":"#_1、工厂方法-批量创建对象","children":[]},{"level":3,"title":"2、构造函数 - 创建对象","slug":"_2、构造函数-创建对象","link":"#_2、构造函数-创建对象","children":[]},{"level":3,"title":"3、new 调用函数四步曲","slug":"_3、new-调用函数四步曲","link":"#_3、new-调用函数四步曲","children":[]},{"level":3,"title":"4、构造函数中的 this 指向","slug":"_4、构造函数中的-this-指向","link":"#_4、构造函数中的-this-指向","children":[]},{"level":3,"title":"5、构造函数注意事项","slug":"_5、构造函数注意事项","link":"#_5、构造函数注意事项","children":[]},{"level":3,"title":"6、构造函数的问题","slug":"_6、构造函数的问题","link":"#_6、构造函数的问题","children":[]}]},{"level":2,"title":"九、类和实例（对象）","slug":"九、类和实例-对象","link":"#九、类和实例-对象","children":[{"level":3,"title":"1、现实生活角度理解类和实例","slug":"_1、现实生活角度理解类和实例","link":"#_1、现实生活角度理解类和实例","children":[]},{"level":3,"title":"2、JS 角度来理解类和实例","slug":"_2、js-角度来理解类和实例","link":"#_2、js-角度来理解类和实例","children":[]},{"level":3,"title":"3、创建一个球类和球对象","slug":"_3、创建一个球类和球对象","link":"#_3、创建一个球类和球对象","children":[]}]},{"level":2,"title":"十、Object() 构造函数","slug":"十、object-构造函数","link":"#十、object-构造函数","children":[]},{"level":2,"title":"十一、原型（prototype）和原型链","slug":"十一、原型-prototype-和原型链","link":"#十一、原型-prototype-和原型链","children":[{"level":3,"title":"1、什么是原型（prototype）","slug":"_1、什么是原型-prototype","link":"#_1、什么是原型-prototype","children":[]},{"level":3,"title":"2、构造函数的 prototype 属性","slug":"_2、构造函数的-prototype-属性","link":"#_2、构造函数的-prototype-属性","children":[]},{"level":3,"title":"3、什么是原型链查找","slug":"_3、什么是原型链查找","link":"#_3、什么是原型链查找","children":[]},{"level":3,"title":"4、原型链的遮蔽效应","slug":"_4、原型链的遮蔽效应","link":"#_4、原型链的遮蔽效应","children":[]},{"level":3,"title":"5、hasOwnProperty","slug":"_5、hasownproperty","link":"#_5、hasownproperty","children":[]},{"level":3,"title":"6、in","slug":"_6、in","link":"#_6、in","children":[]},{"level":3,"title":"7、在 prototype 添加方法","slug":"_7、在-prototype-添加方法","link":"#_7、在-prototype-添加方法","children":[]},{"level":3,"title":"8、原型链的终点","slug":"_8、原型链的终点","link":"#_8、原型链的终点","children":[]},{"level":3,"title":"9、数组的原型链","slug":"_9、数组的原型链","link":"#_9、数组的原型链","children":[]},{"level":3,"title":"10、函数的原型链","slug":"_10、函数的原型链","link":"#_10、函数的原型链","children":[]},{"level":3,"title":"11、instanceof","slug":"_11、instanceof","link":"#_11、instanceof","children":[]},{"level":3,"title":"12、类数组转换数组","slug":"_12、类数组转换数组","link":"#_12、类数组转换数组","children":[]},{"level":3,"title":"13、手写 JS 的 slice 方法","slug":"_13、手写-js-的-slice-方法","link":"#_13、手写-js-的-slice-方法","children":[]},{"level":3,"title":"14、手写数组的 concat 方法","slug":"_14、手写数组的-concat-方法","link":"#_14、手写数组的-concat-方法","children":[]},{"level":3,"title":"15、Object.prototype.toString()方法","slug":"_15、object-prototype-tostring-方法","link":"#_15、object-prototype-tostring-方法","children":[]},{"level":3,"title":"16、经典应用：toString() 来获取每个对象的类型","slug":"_16、经典应用-tostring-来获取每个对象的类型","link":"#_16、经典应用-tostring-来获取每个对象的类型","children":[]}]},{"level":2,"title":"十二、本章节经典面试题","slug":"十二、本章节经典面试题","link":"#十二、本章节经典面试题","children":[{"level":3,"title":"1、手写一个 getType 方法，可以判断出任意的数据类型（经典面试题）","slug":"_1、手写一个-gettype-方法-可以判断出任意的数据类型-经典面试题","link":"#_1、手写一个-gettype-方法-可以判断出任意的数据类型-经典面试题","children":[]},{"level":3,"title":"2、判断数据类型有那些方法，分别有什么区别 ？","slug":"_2、判断数据类型有那些方法-分别有什么区别","link":"#_2、判断数据类型有那些方法-分别有什么区别","children":[]},{"level":3,"title":"2.1、typeof","slug":"_2-1、typeof","link":"#_2-1、typeof","children":[]},{"level":3,"title":"2.2、Array.isArray","slug":"_2-2、array-isarray","link":"#_2-2、array-isarray","children":[]},{"level":3,"title":"2.3、in","slug":"_2-3、in","link":"#_2-3、in","children":[]},{"level":3,"title":"2.4、hasOwnProperty","slug":"_2-4、hasownproperty","link":"#_2-4、hasownproperty","children":[]},{"level":3,"title":"2.5、instanceof","slug":"_2-5、instanceof","link":"#_2-5、instanceof","children":[]},{"level":3,"title":"2.6、constructor","slug":"_2-6、constructor","link":"#_2-6、constructor","children":[]},{"level":3,"title":"3、ES6 版本-手写 call 方法（经典面试题）","slug":"_3、es6-版本-手写-call-方法-经典面试题","link":"#_3、es6-版本-手写-call-方法-经典面试题","children":[]},{"level":3,"title":"4、ES5 版本-手写 Call 方法（经典面试题）","slug":"_4、es5-版本-手写-call-方法-经典面试题","link":"#_4、es5-版本-手写-call-方法-经典面试题","children":[]},{"level":3,"title":"4.1、如何创建出一个 context 对象身上没有的属性","slug":"_4-1、如何创建出一个-context-对象身上没有的属性","link":"#_4-1、如何创建出一个-context-对象身上没有的属性","children":[]},{"level":3,"title":"4.2、Function 构造函数","slug":"_4-2、function-构造函数","link":"#_4-2、function-构造函数","children":[]},{"level":3,"title":"4.3、Function 构造函数：实现动态传递参数","slug":"_4-3、function-构造函数-实现动态传递参数","link":"#_4-3、function-构造函数-实现动态传递参数","children":[]},{"level":3,"title":"4.4、Function 构造函数：实现动态传递参数 - 优化版","slug":"_4-4、function-构造函数-实现动态传递参数-优化版","link":"#_4-4、function-构造函数-实现动态传递参数-优化版","children":[]},{"level":3,"title":"4.5、解决 call 方法内部动态传参问题","slug":"_4-5、解决-call-方法内部动态传参问题","link":"#_4-5、解决-call-方法内部动态传参问题","children":[]},{"level":3,"title":"5、手写 apply 方法（经典面试题）","slug":"_5、手写-apply-方法-经典面试题","link":"#_5、手写-apply-方法-经典面试题","children":[]},{"level":3,"title":"6、手写 bind 方法","slug":"_6、手写-bind-方法","link":"#_6、手写-bind-方法","children":[]},{"level":3,"title":"6.1、考虑 bind 返回的新函数作为构造函数的情况","slug":"_6-1、考虑-bind-返回的新函数作为构造函数的情况","link":"#_6-1、考虑-bind-返回的新函数作为构造函数的情况","children":[]},{"level":3,"title":"6.2、考虑调用 bind 的对象不是一个函数","slug":"_6-2、考虑调用-bind-的对象不是一个函数","link":"#_6-2、考虑调用-bind-的对象不是一个函数","children":[]},{"level":3,"title":"6.3、完整代码","slug":"_6-3、完整代码","link":"#_6-3、完整代码","children":[]},{"level":3,"title":"7、说说你对原型链的理解 ？（腾讯、货拉拉、字节、招银、阿里、小米）","slug":"_7、说说你对原型链的理解-腾讯、货拉拉、字节、招银、阿里、小米","link":"#_7、说说你对原型链的理解-腾讯、货拉拉、字节、招银、阿里、小米","children":[]},{"level":3,"title":"8、原型链的终点是什么 ？（货拉拉）","slug":"_8、原型链的终点是什么-货拉拉","link":"#_8、原型链的终点是什么-货拉拉","children":[]},{"level":3,"title":"9、[] 的原型链是什么 ？（腾讯）","slug":"_9、-的原型链是什么-腾讯","link":"#_9、-的原型链是什么-腾讯","children":[]}]},{"level":2,"title":"十三、重难点总结","slug":"十三、重难点总结","link":"#十三、重难点总结","children":[{"level":3,"title":"1、重点","slug":"_1、重点","link":"#_1、重点","children":[]},{"level":3,"title":"2、难点","slug":"_2、难点","link":"#_2、难点","children":[]}]}],"git":{"createdTime":1705051907000,"updatedTime":1705051907000,"contributors":[{"name":"xunyu","email":"2548126293@qq.com","commits":1}]},"filePathRelative":"blogs/web/javascript/JavaScript 面向对象，原型和原型链.md"}');export{l as data};
