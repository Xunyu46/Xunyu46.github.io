import{_ as t,r as p,o as c,c as o,b as s,d as n,e as i,a}from"./app-48690364.js";const l={},u=a(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>上一小节我们说到了 <code>Reactive</code> 会在 <code>proxy getter</code> 的时候收集 <code>effect</code> 依赖，在 <code>proxy setter</code> 的时候触发 <code>effect</code> 的执行。那么 <code>effect</code> 副作用函数到底是个什么？以及是如何被收集起来的呢？</p><h2 id="effect" tabindex="-1"><a class="header-anchor" href="#effect" aria-hidden="true">#</a> effect</h2><p>找到源码中关于 <code>effect</code> 部分的定义：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">effect</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 如果 fn 已经是一个 effect 函数了，则指向原始函数</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>fn<span class="token punctuation">.</span>effect<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    fn <span class="token operator">=</span> fn<span class="token punctuation">.</span>effect<span class="token punctuation">.</span>fn
  <span class="token punctuation">}</span>
  <span class="token comment">// 构造 _effect 实例</span>
  <span class="token keyword">const</span> _effect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReactiveEffect</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>
  
  <span class="token comment">// options 初始化</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">extend</span><span class="token punctuation">(</span>_effect<span class="token punctuation">,</span> options<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>scope<span class="token punctuation">)</span> <span class="token function">recordEffectScope</span><span class="token punctuation">(</span>_effect<span class="token punctuation">,</span> options<span class="token punctuation">.</span>scope<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  
  <span class="token comment">// 如有 options 或者 不是懒加载，执行 _effect.run()</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>options <span class="token operator">||</span> <span class="token operator">!</span>options<span class="token punctuation">.</span>lazy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    _effect<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  
  <span class="token comment">// 返回 _effect.run</span>
  <span class="token keyword">const</span> runner <span class="token operator">=</span> _effect<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>_effect<span class="token punctuation">)</span>
  runner<span class="token punctuation">.</span>effect <span class="token operator">=</span> _effect
  <span class="token keyword">return</span> runner
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个 <code>effect</code> 函数内部核心是通过 <code>ReactiveEffect</code> 类创建了一个 <code>_effect</code> 实例，从代码来看，<code>_effect</code> 上包含了一个 <code>run</code> 函数。默认 <code>effect</code> 是没有传入 <code>options</code> 参数的，所以这里直接执行了 <code>_effect.run()</code>。我们知道，<code>fn</code> 函数是在 <code>effect</code> 函数中的一个入参，比如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据上一小节，我们知道因为这里我们访问了 <code>state.a</code> 所以收集了副作用函数，但是需要知道的是这里的 <code>effect</code> 传入的是一个 <code>fn</code>，所以要想访问 <code>state.a</code> 那这个 <code>fn</code> 必须要执行才可以。那是在哪里执行的呢？接下来看一下 <code>ReactiveEffect</code> 的实现：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 用于记录位于响应上下文中的effect嵌套层次数</span>
<span class="token keyword">let</span> effectTrackDepth <span class="token operator">=</span> <span class="token number">0</span>
<span class="token comment">// 二进制位，每一位用于标识当前effect嵌套层级的依赖收集的启用状态</span>
<span class="token keyword">export</span> left trackOpBit <span class="token operator">=</span> <span class="token number">1</span>
<span class="token comment">// 表示最大标记的位数</span>
<span class="token keyword">const</span> maxMarkerBits <span class="token operator">=</span> <span class="token number">30</span>

<span class="token comment">// 当前活跃的 effect</span>
<span class="token keyword">let</span> activeEffect<span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ReactiveEffect</span> <span class="token punctuation">{</span>
  <span class="token comment">// 用于标识副作用函数是否位于响应式上下文中被执行</span>
  active <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token comment">// 副作用函数持有它所在的所有依赖集合的引用，用于从这些依赖集合删除自身</span>
  deps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token comment">// 指针为，用于嵌套 effect 执行后动态切换 activeEffect</span>
  parent <span class="token operator">=</span> <span class="token keyword">undefined</span>
  <span class="token comment">// ...</span>
  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 若当前 ReactiveEffect 对象脱离响应式上下文</span>
    <span class="token comment">// 那么其对应的副作用函数被执行时不会再收集依赖</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>active<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 缓存是否需要收集依赖</span>
    <span class="token keyword">let</span> lastShouldTrack <span class="token operator">=</span> shouldTrack
    
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token comment">// 保存上一个 activeEffect 到当前的 parent 上</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> activeEffect
      <span class="token comment">// activeEffect 指向当前的 effect</span>
      activeEffect <span class="token operator">=</span> <span class="token keyword">this</span>
      <span class="token comment">// shouldTrack 置成 true</span>
      shouldTrack <span class="token operator">=</span> <span class="token boolean">true</span>
      <span class="token comment">// 左移操作符 &lt;&lt; 将第一个操作数向左移动指定位数</span>
      <span class="token comment">// 左边超出的位数将会被清除，右边将会补零。</span>
      <span class="token comment">// trackOpBit 是基于 1 左移 effectTrackDepth 位</span>
      trackOpBit <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">++</span>effectTrackDepth
      
      <span class="token comment">// 如果未超过最大嵌套层数，则执行 initDepMarkers</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>effectTrackDepth <span class="token operator">&lt;=</span> maxMarkerBits<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">initDepMarkers</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">cleanupEffect</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// 这里执行了 fn</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>effectTrackDepth <span class="token operator">&lt;=</span> maxMarkerBits<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 用于对曾经跟踪过，但本次副作用函数执行时没有跟踪的依赖采取删除操作。</span>
        <span class="token comment">// 新跟踪的 和 本轮跟踪过的都会被保留</span>
        <span class="token function">finalizeDepMarkers</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      
      <span class="token comment">// &lt;&lt; --effectTrackDepth 右移动 effectTrackDepth 位</span>
      trackOpBit <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">--</span>effectTrackDepth
      
      <span class="token comment">// 返回上个 activeEffect</span>
      activeEffect <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>parent
      <span class="token comment">// 返回上个 shouldTrack</span>
      shouldTrack <span class="token operator">=</span> lastShouldTrack
      <span class="token comment">// 情况本次的 parent 指向</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> <span class="token keyword">undefined</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大致看一眼，我们可以看到在 <code>ReactiveEffect</code> 中是执行了 <code>this.fn()</code> 的，这也就解释了 <code>effect</code> 中的回调函数 <code>fn</code> 是在这里被调用的。接下来详细研究一下这个 <code>ReactiveEffect</code>。</p><p>但这段代码看起来不是很长，但涉及了好几个概念，我们来一个个看。</p><h3 id="_1-parent-的作用" tabindex="-1"><a class="header-anchor" href="#_1-parent-的作用" aria-hidden="true">#</a> 1. parent 的作用</h3><p>为什么 <code>ReactiveEffect</code> 要设计一个 <code>parent</code> 这样一个看似没啥用的变量指针来存储上一次的 <code>activeEffect</code> 呢？如果改成下面这样不是更简单吗？</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>active<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 初始化</span>
  shouldTrack <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  activeEffect <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token comment">// 重置</span>
  shouldTrack <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实对于下面这样的代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>

state<span class="token punctuation">.</span>a<span class="token operator">++</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>effect</code> 函数内调用 <code>ReactiveEffect</code> 实例的 <code>run</code> 函数。<code>run</code> 函数执行的时候，把 <code>activeEffect</code> 指向 <code>this</code>。然后执行 <code>effect</code> 传入的 <code>fn</code> 函数，函数在执行的时候访问了 <code>state.a</code> 触发了 <code>getter</code> 钩子。回顾一下上一节的内容，<code>getter</code> 的时候有触发添加 <code>activeEffect</code> 的功能：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// 把 activeEffect 添加到 dep 中
dep.add(activeEffect!)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>而 <code>activeEffect</code> 正是这里的 <code>this</code>。当执行 <code>state.a++</code> 时，访问了<code>state.a</code> 的 <code>setter</code>。上一节也说了，<code>setter</code> 的执行会调用 <code>effect.run</code> 函数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// triggerEffects</span>
effect<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>所以又会执行 <code>fn</code>。</p><p>到这里看似很完美，那么我们再来看另外一个例子🌰：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ef1</span>
<span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// ef2</span>
  <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">b: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>state<span class="token punctuation">.</span>b<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">a: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>state<span class="token punctuation">.</span>a<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

state<span class="token punctuation">.</span>a <span class="token operator">++</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>按照上面的逻辑，在第一次 <code>effect</code> 执行的时候，<code>activeEffect = ef1</code> 然后再执行内部的 <code>effect</code>， 此时 <code>activeEffect = ef2</code> 然后 <code>ef2</code> 执行完成回到 <code>ef1</code> 函数体内，此时再访问 <code>state.a</code> 触发对 <code>a</code> 的依赖收集，但收集到的却是 <code>ef2</code>。那么最终打印的是：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span>
<span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span>
<span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>很明显不符合我们的要求，我们期望的是输出：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span>
<span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span>
<span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span>
<span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时候 <code>parent</code> 就排上用场了，当为 <code>effect</code> 加上 <code>parent</code> 属性后，我们再来捋一下整体的流程。</p><ol><li>执行 <code>ef1</code> 的时候，<code>activeEffect</code> 指向 <code>ef1</code>，此时 <code>parent</code> 是 <code>undefined</code>。</li><li>执行 <code>ef1 fn</code> 遇到了 <code>ef2</code>，调用 <code>ef2</code> 此时 <code>ef2</code> 的 <code>parent</code> 指向 <code>ef1</code>， <code>activeEffect</code> 指向 <code>ef2</code>。然后执行 <code>ef2 的 fn</code>。</li><li><code>ef2 的 fn</code> 执行的时候，访问了 <code>state.b</code> 依赖收集 <code>ef2</code>。执行完成后，<code>activeEffect = this.parent</code> 又把 <code>activeEffect</code> 指向了 <code>ef1</code>。</li><li>返回 <code>ef1</code> 的 <code>fn</code> 体继续执行，此时访问 <code>state.a</code> 依赖收集 <code>activeEffect</code> 为 <code>ef1</code>。</li><li>触发 <code>state.a</code> 的 <code>setter</code>，调用 <code>a</code> 的副作用 <code>ef1</code>，依次打印……</li></ol><p>到这里相信各位小伙伴已经清楚了 <code>parent</code> 的作用了，那就是<strong>通过 <code>parent</code> 这个标记，来回切换 <code>activeEffect</code> 的指向，从而完成对嵌套 <code>effect</code> 的正确的依赖收集</strong>。</p><h3 id="_2-依赖清理" tabindex="-1"><a class="header-anchor" href="#_2-依赖清理" aria-hidden="true">#</a> 2. 依赖清理</h3><p>在说依赖清理之前，再来看一个有意思的例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span>show<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">a: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>state<span class="token punctuation">.</span>a<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

state<span class="token punctuation">.</span>a <span class="token operator">++</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  state<span class="token punctuation">.</span>show <span class="token operator">=</span> <span class="token boolean">false</span>
  state<span class="token punctuation">.</span>a <span class="token operator">++</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的例子中，我们在 <code>effect</code> 中完成了对 <code>show</code> 和 <code>a</code> 的依赖收集，然后 <code>1s</code> 后，我们改变了 <code>show</code> 的状态为 <code>false</code>。此时 <code>effect</code> 内的函数中的 <code>console.log</code> 将永远不会执行，然后再触发 <code>state.a++</code> 的动作，访问 <code>a</code> 的 <code>getter</code>，如果没有依赖清理，那么按照之前的做法，测试也会触发 <code>effect.fn</code> 的执行，但这个执行其实没意义的，因为 <code>a</code> 已经没有被使用了，是一个永远不会被访问到的变量，造成了性能浪费。所以我们需要删除 <code>a</code> 的副作用函数，让它不要执行。</p><p>接下来一起来看看 <code>Vue</code> 是怎么做的吧！这里涉及到的内容有点多，我们先一个个解释，首先补习一下关于 <code>js</code> 的一些操作符的基础知识。</p><p><strong>1. 左移（&lt;&lt;）</strong></p><p>左移操作符 (<code>&lt;&lt;</code>) 将第一个操作数转换成 2 进制后向左移动指定位数，左边超出的位数将会被清除，右边将会补零。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token comment">// 00000000000000000000000000000001</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>       

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 00000000000000000000000000000010</span>
<span class="token comment">// expected output: 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. 位或操作（|）</strong></p><p>位或操作符（|）， 如果两位之一为 1，则设置每位为 1。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token comment">// 00000000000000000000000000000101</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token comment">// 00000000000000000000000000000011</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">|</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 00000000000000000000000000000111</span>
<span class="token comment">// expected output: 7</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3. 按位与（&amp;）</strong></p><p>按位与运算符 (<code>&amp;</code>) 在两个操作数对应的二进位都为 <code>1</code> 时，该位的结果值才为 <code>1</code>，否则为 <code>0</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token comment">// 00000000000000000000000000000101</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token comment">// 00000000000000000000000000000011</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 00000000000000000000000000000001</span>
<span class="token comment">// expected output: 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4. 按位非（~）</strong></p><p>按位非运算符（~），反转操作数的位。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>     <span class="token comment">// 00000000000000000000000000000101</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token comment">// 11111111111111111111111111111101</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">~</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 11111111111111111111111111111010</span>
<span class="token comment">// expected output: -6</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">~</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 00000000000000000000000000000010</span>
<span class="token comment">// expected output: 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了这些基础的知识点后，再来认识几个变量。</p><p><strong>1. effectTrackDepth</strong></p><p>用于记录位于响应上下文中的 <code>effect</code> 嵌套层次数，默认值为 <code>0</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// effectTrackDepth = 0</span>
<span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// effectTrackDepth = 1</span>
  <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. trackOpBit</strong></p><p>二进制位，每一位用于标识当前 <code>effect</code> 嵌套层级的依赖收集的启用状态。默认值为 <code>1</code>，即 <code>00000000000000000000000000000001</code>。</p><p><strong>3. maxMarkerBits</strong></p><p>表示最大的 <code>effect</code> 嵌套的层次数，最大值为 <code>30</code>。</p><p>好了，搞懂了这些操作符之后，我们来看看 <code>Vue</code> 的依赖清理是如何实现的，先来看不超过 <code>maxMarkerBits</code> 层级数的嵌套 <code>effect</code> 的依赖收集的过程，还以上面那个 <code>demo</code> 作为示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span>show<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">a: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>state<span class="token punctuation">.</span>a<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

state<span class="token punctuation">.</span>a <span class="token operator">++</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  state<span class="token punctuation">.</span>show <span class="token operator">=</span> <span class="token boolean">false</span>
  state<span class="token punctuation">.</span>a <span class="token operator">++</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Step 1</strong>：<code>run</code> 函数执行的时候，<code>trackOpBit = 1 &lt;&lt; ++effectTrackDepth</code> 这个语句执行完成后，得到 <code>effectTrackDepth = 1</code>；<code>trackOpBit.toString(2) = 00000000000000000000000000000010</code>。</p><p><strong>Step 2</strong>：因为 <code>effectTrackDepth &lt; maxMarkerBits</code> ，所以执行 <code>initDepMarkers</code> 函数，因为这里的 <code>deps</code> 在初始化的时候还是个空数组，所以此函数未执行。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">initDepMarkers</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> deps <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>deps<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> deps<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      deps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">|=</span> trackOpBit <span class="token comment">// set was tracked</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Step 3</strong>：执行 <code>this.fn</code> 函数，先访问 <code>state.show</code>，触发了 <code>trackEffects</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">trackEffects</span><span class="token punctuation">(</span><span class="token parameter">dep</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> shouldTrack <span class="token operator">=</span> <span class="token boolean">false</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>effectTrackDepth <span class="token operator">&lt;=</span> maxMarkerBits<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果本轮副作用函数执行过程中已经访问并收集过，则不用再收集该依赖</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">newTracked</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 设置 dep.n</span>
      dep<span class="token punctuation">.</span>n <span class="token operator">|=</span> trackOpBit
      shouldTrack <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">wasTracked</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// Full cleanup mode.</span>
    shouldTrack <span class="token operator">=</span> <span class="token operator">!</span>dep<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>activeEffect<span class="token operator">!</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>shouldTrack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    dep<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>activeEffect<span class="token operator">!</span><span class="token punctuation">)</span>
    activeEffect<span class="token operator">!</span><span class="token punctuation">.</span>deps<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里需要额外了解 2 个函数：<code>wasTracked</code>（已经被收集过，缩写是 <code>w</code>） 和 <code>newTracked</code>（新收集的依赖，缩写是 <code>n</code>）。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">wasTracked</span> <span class="token operator">=</span> <span class="token parameter">dep</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>dep<span class="token punctuation">.</span>w <span class="token operator">&amp;</span> trackOpBit<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">newTracked</span> <span class="token operator">=</span> <span class="token parameter">dep</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>dep<span class="token punctuation">.</span>n <span class="token operator">&amp;</span> trackOpBit<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进入 <code>trackEffects</code> 时，因为此时还没有为 <code>dep.n</code> 进行或运算赋值，所以 <code>state.show</code> 的 <code>newTracked = false</code>，<code>wasTracked = false</code>。</p><p>所以计算得到 <code>shouldTrack = true</code>，最后将 <code>activeEffect</code> 收集进入 <code>dep</code> 中，同时执行了 <code>activeEffect.deps.push(dep)</code> 将 <code>dep</code> 存入了 <code>activeEffect</code> 的 <code>deps</code> 中。然后访问 <code>state.a</code> 重复上述操作。上述步骤执行完成后的 <code>activeEffect.deps</code> 如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span>
  <span class="token punctuation">{</span><span class="token string-property property">&quot;w&quot;</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string-property property">&quot;n&quot;</span><span class="token operator">:</span> <span class="token number">00000000000000000000000000000010</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>effect<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span><span class="token string-property property">&quot;w&quot;</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string-property property">&quot;n&quot;</span><span class="token operator">:</span> <span class="token number">00000000000000000000000000000010</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>effect<span class="token punctuation">]</span><span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Step 4</strong>：最后执行 <code>finalizeDepMarkers</code> 函数，根据第 3 步，此时 <code>effect</code> 中的 <code>deps</code> 包含了 2 个 <code>dep</code>，分别是 <code>state.show</code> 和 <code>state.a</code>。 <code>finalizeDepMarkers</code> 函数内部执行了 <code>wasTracked</code>（已经被收集过，缩写是 <code>w</code>） 和 <code>newTracked</code>（新收集的依赖，缩写是 <code>n</code>） 函数，因为 <code>dep.w = 0</code> 所以 <code>wasTracked = false</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">finalizeDepMarkers</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">effect</span><span class="token operator">:</span> ReactiveEffect</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> deps <span class="token punctuation">}</span> <span class="token operator">=</span> effect
  <span class="token keyword">if</span> <span class="token punctuation">(</span>deps<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> ptr <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> deps<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> dep <span class="token operator">=</span> deps<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">wasTracked</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">newTracked</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dep<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 缩小依赖集合的大小</span>
        deps<span class="token punctuation">[</span>ptr<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> dep
      <span class="token punctuation">}</span>
      <span class="token comment">// clear bits</span>
      dep<span class="token punctuation">.</span>w <span class="token operator">&amp;=</span> <span class="token operator">~</span>trackOpBit
      dep<span class="token punctuation">.</span>n <span class="token operator">&amp;=</span> <span class="token operator">~</span>trackOpBit
    <span class="token punctuation">}</span>
    deps<span class="token punctuation">.</span>length <span class="token operator">=</span> ptr
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为 <code>wasTracked = false</code>，因此 <code>finalizeDepMarkers</code> 处理后仍然将副作用函数保留在这两个属性对应的依赖集合中，同时把 <code>dep.w</code> 和 <code>dep.n</code> 重置回 0。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string-property property">&quot;w&quot;</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;n&quot;</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>effect<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string-property property">&quot;w&quot;</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;n&quot;</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>effect<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Step 5</strong>：当执行 <code>state.show = false</code> 的时候，触发 <code>effect.run</code> 的执行，此时执行 <code>initDepMarkers</code> 时，因为已经存在了 <code>dep</code>，所以先访问 <code>state.show</code>。</p><p>当执行到 <code>trackEffects</code> 时，此时的 <code>newTracked = false</code>，执行逻辑和之前一致。只不过因为 <code>state.show = false</code>，所以没有触发 <code>state.a</code> 的这一部分逻辑的处理，最后得到的结果为：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;w&quot;</span><span class="token operator">:</span> <span class="token number">00000000000000000000000000000010</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;n&quot;</span><span class="token operator">:</span> <span class="token number">00000000000000000000000000000010</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>effect<span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;w&quot;</span><span class="token operator">:</span> <span class="token number">00000000000000000000000000000010</span><span class="token punctuation">,</span> 
    <span class="token string-property property">&quot;n&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>effect<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Step 6</strong>：最后执行 <code>finalizeDepMarkers</code> 时，如下。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">wasTracked</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">newTracked</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  dep<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为这里的 <code>state.a</code> 的 <code>wasTracked = true</code> 且 <code>newTracked</code> 为 <code>false</code>，所以执行了 <code>dep.delete(effect)</code> 将 <code>effect</code> 从 <code>dep</code> 中踢掉。</p><p><strong>Step 7</strong>：<code>1s</code> 后执行 <code>state.a++</code> 的操作，由于 <code>state.a</code> 中没有 <code>effect</code> 了，所以不会执行副作用函数。</p><p><strong>总结</strong>： <code>Vue</code> 在组件的 <code>effect</code> 执行之前，会根据 <code>dep</code> 的收集标记位 <code>w</code> 和 <code>n</code> 来进行清理依赖，删除之前 <code>state.a</code> 收集的 <code>effect</code> 依赖。这样当我们修改 <code>state.a</code> 时，由于已经没有依赖了，就不会触发 <code>effect</code> 重新执行。</p><p>另外，为了更容易帮助小伙伴们理解上述的流程，我也精心制作了一个动画演示上述流程和过程：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3cae5ea3287044dbabe2e2b400eb40c6~tplv-k3u1fbpfcp-watermark.image?" alt="依赖清理过程.gif"></p>`,81),d=s("code",null,"effectTrackDepth",-1),r=s("code",null,"30",-1),k=s("code",null,"cleanup",-1),v=s("code",null,"cleanup",-1),m=s("code",null,"dep",-1),f=s("code",null,"Vue 3.2",-1),b={href:"https://github.com/vuejs/core/pull/4017",target:"_blank",rel:"noopener noreferrer"},g=a('<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>到这里，我们基本上讲完了 <code>Vue 3</code> 的响应式原理基础，如果有小伙伴了解 <code>Vue 2</code> 的响应式原理，应该清楚 <code>Vue2</code> 的响应式原理可以理解成如下一幅图：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d27092e7846c4a47909cbba07b852799~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>在 <code>Vue 2</code> 中，<code>Watcher</code> 就是依赖，有专门针对组件渲染的 <code>render watcher</code>。</p><ol><li>依赖收集：组件在 <code>render</code> 的时候会访问模板中的数据，触发 <code>getter</code> 把 <code>watcher</code> 作为依赖收集。</li><li>触发渲染：当修改数据时，会触发 <code>setter</code>，通知 <code>watcher</code> 更新，进而触发了组件的重新渲染。</li></ol><p>相应地，在 <code>Vue 3</code> 中的响应式流程如下：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e9dd98a0d60447b3bcde4df4facb00af~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>可以看到，<code>Vue 3</code> 相对于 <code>Vue 2</code> 的响应式差别不大，主要就是劫持数据的方式改成用 <code>Proxy</code> 实现，以及收集的依赖由 <code>watcher</code> 实例变成了组件副作用函数 <code>effect</code>。另外，值得一提的是 <code>Vue 3</code> 在响应式设计上又多考虑了层级嵌套的依赖收集问题和不必要的依赖清理问题。</p>',8);function y(h,w){const e=p("ExternalLinkIcon");return c(),o("div",null,[u,s("blockquote",null,[s("p",null,[n("注意，当 "),d,n(" 大于 "),r,n(" 时，会调用 "),k,n(" 来清理依赖，其实 "),v,n(" 的原理就是依赖收集前全部删除所有的 "),m,n("，依赖收集时再一个个加进来，这个性能其实是比较差的，所以 "),f,n(" 改成了通过二进制标记位的方式来选择性删除和添加，提升了性能。关于这部分更多的细节，可以参考"),s("a",b,[n("这个PR"),i(e)]),n("。")])]),g])}const x=t(l,[["render",y],["__file","7 xiangyingshiyuanli：fuzuoyonghanshutanmi.html.vue"]]);export{x as default};
