const l=JSON.parse('{"key":"v-1922b7bd","path":"/blogs/interview/javascript/","title":"面试万字总结（JS 篇）","lang":"en-US","frontmatter":{"title":"面试万字总结（JS 篇）","date":"2023-10-24T00:00:00.000Z","sidebar":"auto","categories":["面试"],"tags":["JS"],"publish":true},"headers":[{"level":2,"title":"1.1 Js 有哪些数据类型","slug":"_1-1-js-有哪些数据类型","link":"#_1-1-js-有哪些数据类型","children":[]},{"level":2,"title":"1.2 说说你对堆区和栈区的理解","slug":"_1-2-说说你对堆区和栈区的理解","link":"#_1-2-说说你对堆区和栈区的理解","children":[]},{"level":2,"title":"1.3 数据类型检测的方式有哪些","slug":"_1-3-数据类型检测的方式有哪些","link":"#_1-3-数据类型检测的方式有哪些","children":[]},{"level":2,"title":"1.4 判断数组的方式有哪些","slug":"_1-4-判断数组的方式有哪些","link":"#_1-4-判断数组的方式有哪些","children":[]},{"level":2,"title":"1.5 null 和 undefined 区别","slug":"_1-5-null-和-undefined-区别","link":"#_1-5-null-和-undefined-区别","children":[]},{"level":2,"title":"1.6 typeof null 的结果是什么，为什么？","slug":"_1-6-typeof-null-的结果是什么-为什么","link":"#_1-6-typeof-null-的结果是什么-为什么","children":[]},{"level":2,"title":"1.7 为什么 0.1+0.2 ! == 0.3，如何让其相等 (精度丢失)","slug":"_1-7-为什么-0-1-0-2-0-3-如何让其相等-精度丢失","link":"#_1-7-为什么-0-1-0-2-0-3-如何让其相等-精度丢失","children":[]},{"level":2,"title":"1.8 如何获取安全的 undefined 值？","slug":"_1-8-如何获取安全的-undefined-值","link":"#_1-8-如何获取安全的-undefined-值","children":[]},{"level":2,"title":"1.9 typeof NaN 的结果是什么？","slug":"_1-9-typeof-nan-的结果是什么","link":"#_1-9-typeof-nan-的结果是什么","children":[]},{"level":2,"title":"1.10 isNaN 和 Number.isNaN 函数的区别？","slug":"_1-10-isnan-和-number-isnan-函数的区别","link":"#_1-10-isnan-和-number-isnan-函数的区别","children":[]},{"level":2,"title":"1.11 == 操作符的强制类型转换规则是什么？","slug":"_1-11-操作符的强制类型转换规则是什么","link":"#_1-11-操作符的强制类型转换规则是什么","children":[]},{"level":2,"title":"1.12 其他值类型转成字符串的转换规则？","slug":"_1-12-其他值类型转成字符串的转换规则","link":"#_1-12-其他值类型转成字符串的转换规则","children":[]},{"level":2,"title":"1.13. 其他值类型转成数字的转换规则？","slug":"_1-13-其他值类型转成数字的转换规则","link":"#_1-13-其他值类型转成数字的转换规则","children":[]},{"level":2,"title":"1.14 其他值类型转成布尔类型的转换规则？","slug":"_1-14-其他值类型转成布尔类型的转换规则","link":"#_1-14-其他值类型转成布尔类型的转换规则","children":[]},{"level":2,"title":"1.15. || 和 && 操作符的返回值？","slug":"_1-15-和-操作符的返回值","link":"#_1-15-和-操作符的返回值","children":[]},{"level":2,"title":"1.16. Object.is() 与比较操作符 “===”、“==” 的区别？","slug":"_1-16-object-is-与比较操作符-、-的区别","link":"#_1-16-object-is-与比较操作符-、-的区别","children":[]},{"level":2,"title":"1.17. 什么是 JavaScript 中的包装类型？","slug":"_1-17-什么是-javascript-中的包装类型","link":"#_1-17-什么是-javascript-中的包装类型","children":[]},{"level":2,"title":"1.18 Js 中隐式转换规则","slug":"_1-18-js-中隐式转换规则","link":"#_1-18-js-中隐式转换规则","children":[]},{"level":2,"title":"1.19 说说你对 this 的理解","slug":"_1-19-说说你对-this-的理解","link":"#_1-19-说说你对-this-的理解","children":[]},{"level":2,"title":"1.20 如何判断 this 的指向","slug":"_1-20-如何判断-this-的指向","link":"#_1-20-如何判断-this-的指向","children":[]},{"level":2,"title":"1.21 Map 和 Object 的区别","slug":"_1-21-map-和-object-的区别","link":"#_1-21-map-和-object-的区别","children":[]},{"level":2,"title":"1.22 说说你对 JSON 的理解","slug":"_1-22-说说你对-json-的理解","link":"#_1-22-说说你对-json-的理解","children":[]},{"level":2,"title":"1.221 String 和 JSON.stringify 的区别","slug":"_1-221-string-和-json-stringify-的区别","link":"#_1-221-string-和-json-stringify-的区别","children":[]},{"level":2,"title":"1.23 什么是伪数组(类数组)","slug":"_1-23-什么是伪数组-类数组","link":"#_1-23-什么是伪数组-类数组","children":[]},{"level":2,"title":"1.24 类数组转换成数组的方法有哪些","slug":"_1-24-类数组转换成数组的方法有哪些","link":"#_1-24-类数组转换成数组的方法有哪些","children":[]},{"level":2,"title":"1.25 Unicode、UTF-8、UTF-16、UTF-32 的区别？","slug":"_1-25-unicode、utf-8、utf-16、utf-32-的区别","link":"#_1-25-unicode、utf-8、utf-16、utf-32-的区别","children":[]},{"level":2,"title":"1.26 常见的位运算符有哪些？其计算规则是什么？","slug":"_1-26-常见的位运算符有哪些-其计算规则是什么","link":"#_1-26-常见的位运算符有哪些-其计算规则是什么","children":[]},{"level":2,"title":"1.27 为什么函数的 arguments 参数是类数组而不是数组？如何遍历类数组?","slug":"_1-27-为什么函数的-arguments-参数是类数组而不是数组-如何遍历类数组","link":"#_1-27-为什么函数的-arguments-参数是类数组而不是数组-如何遍历类数组","children":[]},{"level":2,"title":"1.28 escape、encodeURI、encodeURIComponent 的区别","slug":"_1-28-escape、encodeuri、encodeuricomponent-的区别","link":"#_1-28-escape、encodeuri、encodeuricomponent-的区别","children":[]},{"level":2,"title":"1.29 什么是尾调用，使用尾调用有什么好处？","slug":"_1-29-什么是尾调用-使用尾调用有什么好处","link":"#_1-29-什么是尾调用-使用尾调用有什么好处","children":[]},{"level":2,"title":"1.30 use strict 是什么? 它有什么用？","slug":"_1-30-use-strict-是什么-它有什么用","link":"#_1-30-use-strict-是什么-它有什么用","children":[]},{"level":2,"title":"1.31 如何判断一个对象是否属于某个类？","slug":"_1-31-如何判断一个对象是否属于某个类","link":"#_1-31-如何判断一个对象是否属于某个类","children":[]},{"level":2,"title":"1.32 强类型语言和弱类型语言的区别","slug":"_1-32-强类型语言和弱类型语言的区别","link":"#_1-32-强类型语言和弱类型语言的区别","children":[]},{"level":2,"title":"1.33 解释性语言和编译型语言的区别","slug":"_1-33-解释性语言和编译型语言的区别","link":"#_1-33-解释性语言和编译型语言的区别","children":[]},{"level":2,"title":"1.34 for...in 和 for...of 的区别","slug":"_1-34-for-in-和-for-of-的区别","link":"#_1-34-for-in-和-for-of-的区别","children":[]},{"level":2,"title":"1.35 ajax、axios、fetch 的区别","slug":"_1-35-ajax、axios、fetch-的区别","link":"#_1-35-ajax、axios、fetch-的区别","children":[]},{"level":2,"title":"1.36 数组的遍历方法有哪些","slug":"_1-36-数组的遍历方法有哪些","link":"#_1-36-数组的遍历方法有哪些","children":[]},{"level":2,"title":"1.37 forEach 和 map 方法有什么区别","slug":"_1-37-foreach-和-map-方法有什么区别","link":"#_1-37-foreach-和-map-方法有什么区别","children":[]},{"level":2,"title":"1.38 说说你对浅拷贝和深拷贝的理解","slug":"_1-38-说说你对浅拷贝和深拷贝的理解","link":"#_1-38-说说你对浅拷贝和深拷贝的理解","children":[]},{"level":2,"title":"1.39 JSON.stringify 深拷贝的缺点","slug":"_1-39-json-stringify-深拷贝的缺点","link":"#_1-39-json-stringify-深拷贝的缺点","children":[]},{"level":2,"title":"1.40 知道 lodash 吗？它有哪些常见的 API ？","slug":"_1-40-知道-lodash-吗-它有哪些常见的-api","link":"#_1-40-知道-lodash-吗-它有哪些常见的-api","children":[]},{"level":2,"title":"1.41 LHS 和 RHS 查询","slug":"_1-41-lhs-和-rhs-查询","link":"#_1-41-lhs-和-rhs-查询","children":[]},{"level":2,"title":"1.42 includes 比 indexOf 好在哪？","slug":"_1-42-includes-比-indexof-好在哪","link":"#_1-42-includes-比-indexof-好在哪","children":[]},{"level":2,"title":"1.43 AMD 和 CMD 的区别？","slug":"_1-43-amd-和-cmd-的区别","link":"#_1-43-amd-和-cmd-的区别","children":[]},{"level":2,"title":"1.44 (a == 1 && a == 2 && a == 3) 有可能是 true 吗？","slug":"_1-44-a-1-a-2-a-3-有可能是-true-吗","link":"#_1-44-a-1-a-2-a-3-有可能是-true-吗","children":[]},{"level":2,"title":"1.45 JS 中的 MUL 函数","slug":"_1-45-js-中的-mul-函数","link":"#_1-45-js-中的-mul-函数","children":[]},{"level":2,"title":"1.46 深度遍历广度遍历的区别？","slug":"_1-46-深度遍历广度遍历的区别","link":"#_1-46-深度遍历广度遍历的区别","children":[]},{"level":2,"title":"1.47 JS 中的设计模式有哪些？","slug":"_1-47-js-中的设计模式有哪些","link":"#_1-47-js-中的设计模式有哪些","children":[]},{"level":2,"title":"1.48 forEach 如何跳出循环？","slug":"_1-48-foreach-如何跳出循环","link":"#_1-48-foreach-如何跳出循环","children":[]},{"level":2,"title":"1.49 JS 中如何将页面重定向到另一个页面？","slug":"_1-49-js-中如何将页面重定向到另一个页面","link":"#_1-49-js-中如何将页面重定向到另一个页面","children":[]},{"level":2,"title":"1.50 移动端如何实现上拉加载，下拉刷新？","slug":"_1-50-移动端如何实现上拉加载-下拉刷新","link":"#_1-50-移动端如何实现上拉加载-下拉刷新","children":[]},{"level":2,"title":"1.51 JS 中的数组和函数在内存中是如何存储的？","slug":"_1-51-js-中的数组和函数在内存中是如何存储的","link":"#_1-51-js-中的数组和函数在内存中是如何存储的","children":[]},{"level":2,"title":"2.2 闭包的作用","slug":"_2-2-闭包的作用","link":"#_2-2-闭包的作用","children":[]},{"level":2,"title":"2.3 闭包在项目中的引用场景，以及带来的问题","slug":"_2-3-闭包在项目中的引用场景-以及带来的问题","link":"#_2-3-闭包在项目中的引用场景-以及带来的问题","children":[]},{"level":2,"title":"2.4 闭包的使用场景","slug":"_2-4-闭包的使用场景","link":"#_2-4-闭包的使用场景","children":[]},{"level":2,"title":"2.5 闭包的执行过程","slug":"_2-5-闭包的执行过程","link":"#_2-5-闭包的执行过程","children":[]},{"level":2,"title":"2.6 执行上下文的类型","slug":"_2-6-执行上下文的类型","link":"#_2-6-执行上下文的类型","children":[]},{"level":2,"title":"2.7 执行上下文栈是什么","slug":"_2-7-执行上下文栈是什么","link":"#_2-7-执行上下文栈是什么","children":[]},{"level":2,"title":"2.8 执行上下文的三个阶段","slug":"_2-8-执行上下文的三个阶段","link":"#_2-8-执行上下文的三个阶段","children":[]},{"level":2,"title":"2.9 谈谈你对作用域的理解","slug":"_2-9-谈谈你对作用域的理解","link":"#_2-9-谈谈你对作用域的理解","children":[]},{"level":2,"title":"2.10 什么是作用域链","slug":"_2-10-什么是作用域链","link":"#_2-10-什么是作用域链","children":[]},{"level":2,"title":"2.11 作用域链的作用","slug":"_2-11-作用域链的作用","link":"#_2-11-作用域链的作用","children":[]},{"level":2,"title":"2.12 作用域的常见应用场景","slug":"_2-12-作用域的常见应用场景","link":"#_2-12-作用域的常见应用场景","children":[]},{"level":2,"title":"2.13 说说 Js 中的预解析？","slug":"_2-13-说说-js-中的预解析","link":"#_2-13-说说-js-中的预解析","children":[]},{"level":2,"title":"2.14 变量提升与函数提升的区别？","slug":"_2-14-变量提升与函数提升的区别","link":"#_2-14-变量提升与函数提升的区别","children":[]},{"level":2,"title":"2.14 如何延长作用域链？","slug":"_2-14-如何延长作用域链","link":"#_2-14-如何延长作用域链","children":[]},{"level":2,"title":"2.15 浏览器的垃圾回收机制","slug":"_2-15-浏览器的垃圾回收机制","link":"#_2-15-浏览器的垃圾回收机制","children":[]},{"level":2,"title":"3.1 什么是函数式编程","slug":"_3-1-什么是函数式编程","link":"#_3-1-什么是函数式编程","children":[]},{"level":2,"title":"3.2 函数式编程的优缺点","slug":"_3-2-函数式编程的优缺点","link":"#_3-2-函数式编程的优缺点","children":[]},{"level":2,"title":"3.3 什么是纯函数，它有什么优点","slug":"_3-3-什么是纯函数-它有什么优点","link":"#_3-3-什么是纯函数-它有什么优点","children":[]},{"level":2,"title":"3.4 什么是组合函数 (compose)","slug":"_3-4-什么是组合函数-compose","link":"#_3-4-什么是组合函数-compose","children":[]},{"level":2,"title":"3.5 什么是惰性函数","slug":"_3-5-什么是惰性函数","link":"#_3-5-什么是惰性函数","children":[]},{"level":2,"title":"3.6 什么是高阶函数","slug":"_3-6-什么是高阶函数","link":"#_3-6-什么是高阶函数","children":[]},{"level":2,"title":"3.7 说说你对函数柯里化的理解","slug":"_3-7-说说你对函数柯里化的理解","link":"#_3-7-说说你对函数柯里化的理解","children":[]},{"level":2,"title":"3.8 什么是箭头函数，有什么特征","slug":"_3-8-什么是箭头函数-有什么特征","link":"#_3-8-什么是箭头函数-有什么特征","children":[]},{"level":2,"title":"3.9 说说你对递归函数的理解","slug":"_3-9-说说你对递归函数的理解","link":"#_3-9-说说你对递归函数的理解","children":[]},{"level":2,"title":"3.10 什么是尾递归","slug":"_3-10-什么是尾递归","link":"#_3-10-什么是尾递归","children":[]},{"level":2,"title":"3.11 函数传参，传递复杂数据类型和简单数据类型有什么区别","slug":"_3-11-函数传参-传递复杂数据类型和简单数据类型有什么区别","link":"#_3-11-函数传参-传递复杂数据类型和简单数据类型有什么区别","children":[]},{"level":2,"title":"3.12 函数声明与函数表达式的区别","slug":"_3-12-函数声明与函数表达式的区别","link":"#_3-12-函数声明与函数表达式的区别","children":[]},{"level":2,"title":"3.13 什么是函数缓存，如何实现？","slug":"_3-13-什么是函数缓存-如何实现","link":"#_3-13-什么是函数缓存-如何实现","children":[]},{"level":2,"title":"3.14 call、apply、bind 三者的异同","slug":"_3-14-call、apply、bind-三者的异同","link":"#_3-14-call、apply、bind-三者的异同","children":[]},{"level":2,"title":"4.1 说说面向对象的特性与特点","slug":"_4-1-说说面向对象的特性与特点","link":"#_4-1-说说面向对象的特性与特点","children":[]},{"level":2,"title":"4.2 说说你对工厂模式的理解","slug":"_4-2-说说你对工厂模式的理解","link":"#_4-2-说说你对工厂模式的理解","children":[]},{"level":2,"title":"4.3 创建对象有哪几种方式？","slug":"_4-3-创建对象有哪几种方式","link":"#_4-3-创建对象有哪几种方式","children":[]},{"level":2,"title":"4.4 JS 宿主对象和原生对象的区别","slug":"_4-4-js-宿主对象和原生对象的区别","link":"#_4-4-js-宿主对象和原生对象的区别","children":[]},{"level":2,"title":"4.5 JavaScript 内置的常用对象有哪些？并列举该对象常用的方法？","slug":"_4-5-javascript-内置的常用对象有哪些-并列举该对象常用的方法","link":"#_4-5-javascript-内置的常用对象有哪些-并列举该对象常用的方法","children":[]},{"level":2,"title":"4.6 说一下 hasOwnProperty、instanceof 方法","slug":"_4-6-说一下-hasownproperty、instanceof-方法","link":"#_4-6-说一下-hasownproperty、instanceof-方法","children":[]},{"level":2,"title":"4.7 什么是原型对象，说说对它的理解","slug":"_4-7-什么是原型对象-说说对它的理解","link":"#_4-7-什么是原型对象-说说对它的理解","children":[]},{"level":2,"title":"4.8 什么是原型链","slug":"_4-8-什么是原型链","link":"#_4-8-什么是原型链","children":[]},{"level":2,"title":"4.9 原型链的终点是什么？","slug":"_4-9-原型链的终点是什么","link":"#_4-9-原型链的终点是什么","children":[]},{"level":2,"title":"4.10 Js 实现继承的方法","slug":"_4-10-js-实现继承的方法","link":"#_4-10-js-实现继承的方法","children":[]},{"level":2,"title":"5.1. 异步编程的实现方式?","slug":"_5-1-异步编程的实现方式","link":"#_5-1-异步编程的实现方式","children":[]},{"level":2,"title":"5.2 并发与并行的区别？","slug":"_5-2-并发与并行的区别","link":"#_5-2-并发与并行的区别","children":[]},{"level":2,"title":"5.3 setTimeout、setInterval、requestAnimationFrame 的区别","slug":"_5-3-settimeout、setinterval、requestanimationframe-的区别","link":"#_5-3-settimeout、setinterval、requestanimationframe-的区别","children":[]},{"level":2,"title":"5.4. 什么是回调地狱？回调地狱会带来什么问题？","slug":"_5-4-什么是回调地狱-回调地狱会带来什么问题","link":"#_5-4-什么是回调地狱-回调地狱会带来什么问题","children":[]},{"level":2,"title":"Promise 语法","slug":"promise-语法","link":"#promise-语法","children":[]},{"level":2,"title":"5.5. Promise 是什么","slug":"_5-5-promise-是什么","link":"#_5-5-promise-是什么","children":[]},{"level":2,"title":"5.6 promise 实例有哪些状态，怎么改变状态","slug":"_5-6-promise-实例有哪些状态-怎么改变状态","link":"#_5-6-promise-实例有哪些状态-怎么改变状态","children":[]},{"level":2,"title":"5.7 创建 Promise 实例有哪些方法","slug":"_5-7-创建-promise-实例有哪些方法","link":"#_5-7-创建-promise-实例有哪些方法","children":[]},{"level":2,"title":"5.8 Promise 有哪些实例方法","slug":"_5-8-promise-有哪些实例方法","link":"#_5-8-promise-有哪些实例方法","children":[]},{"level":2,"title":"5.9 Promise 有哪些静态方法","slug":"_5-9-promise-有哪些静态方法","link":"#_5-9-promise-有哪些静态方法","children":[]},{"level":2,"title":"5.10 Promise.all、Promise.race、Promise.any 的区别","slug":"_5-10-promise-all、promise-race、promise-any-的区别","link":"#_5-10-promise-all、promise-race、promise-any-的区别","children":[]},{"level":2,"title":"5.11 一个 promise 指定多个回调函数, 都会调用吗?","slug":"_5-11-一个-promise-指定多个回调函数-都会调用吗","link":"#_5-11-一个-promise-指定多个回调函数-都会调用吗","children":[]},{"level":2,"title":"5.12 改变 promise 状态和指定回调函数谁先谁后?","slug":"_5-12-改变-promise-状态和指定回调函数谁先谁后","link":"#_5-12-改变-promise-状态和指定回调函数谁先谁后","children":[]},{"level":2,"title":"5.15 promise 异常传透是什么?","slug":"_5-15-promise-异常传透是什么","link":"#_5-15-promise-异常传透是什么","children":[]},{"level":2,"title":"5.16 如何中断 promise 链?","slug":"_5-16-如何中断-promise-链","link":"#_5-16-如何中断-promise-链","children":[]},{"level":2,"title":"5.17 promise 有什么缺点","slug":"_5-17-promise-有什么缺点","link":"#_5-17-promise-有什么缺点","children":[]},{"level":2,"title":"async/await 语法","slug":"async-await-语法","link":"#async-await-语法","children":[]},{"level":2,"title":"5.18 async 函数是什么","slug":"_5-18-async-函数是什么","link":"#_5-18-async-函数是什么","children":[]},{"level":2,"title":"5.19 async 函数的实现原理","slug":"_5-19-async-函数的实现原理","link":"#_5-19-async-函数的实现原理","children":[]},{"level":2,"title":"5.20 async 函数的返回值","slug":"_5-20-async-函数的返回值","link":"#_5-20-async-函数的返回值","children":[]},{"level":2,"title":"5.21 await 到底在等待什么?","slug":"_5-21-await-到底在等待什么","link":"#_5-21-await-到底在等待什么","children":[]},{"level":2,"title":"5.22 什么是顶层 await？","slug":"_5-22-什么是顶层-await","link":"#_5-22-什么是顶层-await","children":[]},{"level":2,"title":"5.23 如何用 await 让程序停顿指定的时间(休眠效果)","slug":"_5-23-如何用-await-让程序停顿指定的时间-休眠效果","link":"#_5-23-如何用-await-让程序停顿指定的时间-休眠效果","children":[]},{"level":2,"title":"5.24 await 的使用注意点","slug":"_5-24-await-的使用注意点","link":"#_5-24-await-的使用注意点","children":[]},{"level":2,"title":"5.25 async 语法怎么捕获异常","slug":"_5-25-async-语法怎么捕获异常","link":"#_5-25-async-语法怎么捕获异常","children":[]},{"level":2,"title":"5.26 async/await 对比 Promise 的优势","slug":"_5-26-async-await-对比-promise-的优势","link":"#_5-26-async-await-对比-promise-的优势","children":[]},{"level":2,"title":"事件循环 Event Loop","slug":"事件循环-event-loop","link":"#事件循环-event-loop","children":[]},{"level":2,"title":"5.27 JS 的执行机制(同步任务、异步任务)","slug":"_5-27-js-的执行机制-同步任务、异步任务","link":"#_5-27-js-的执行机制-同步任务、异步任务","children":[]},{"level":2,"title":"5.28 什么是 Event Loop","slug":"_5-28-什么是-event-loop","link":"#_5-28-什么是-event-loop","children":[]},{"level":2,"title":"5.29 宏任务与微任务的概念与区别","slug":"_5-29-宏任务与微任务的概念与区别","link":"#_5-29-宏任务与微任务的概念与区别","children":[]},{"level":2,"title":"5.30 常见的宏任务与微任务分别有哪些","slug":"_5-30-常见的宏任务与微任务分别有哪些","link":"#_5-30-常见的宏任务与微任务分别有哪些","children":[]},{"level":2,"title":"5.31 事件循环 Event Loop 执行机制","slug":"_5-31-事件循环-event-loop-执行机制","link":"#_5-31-事件循环-event-loop-执行机制","children":[]},{"level":2,"title":"5.32 为什么 Js 是单线程？","slug":"_5-32-为什么-js-是单线程","link":"#_5-32-为什么-js-是单线程","children":[]},{"level":2,"title":"5.33 代码题易考点","slug":"_5-33-代码题易考点","link":"#_5-33-代码题易考点","children":[]},{"level":2,"title":"6.1 ES6(ES2015)","slug":"_6-1-es6-es2015","link":"#_6-1-es6-es2015","children":[{"level":3,"title":"1. 说说 let 和 const","slug":"_1-说说-let-和-const","link":"#_1-说说-let-和-const","children":[]},{"level":3,"title":"2. let、const、var 的区别","slug":"_2-let、const、var-的区别","link":"#_2-let、const、var-的区别","children":[]},{"level":3,"title":"3. 解构赋值","slug":"_3-解构赋值","link":"#_3-解构赋值","children":[]},{"level":3,"title":"4. 字符串的新增方法","slug":"_4-字符串的新增方法","link":"#_4-字符串的新增方法","children":[]},{"level":3,"title":"5. 展开运算符","slug":"_5-展开运算符","link":"#_5-展开运算符","children":[]},{"level":3,"title":"6. 数组新增的方法","slug":"_6-数组新增的方法","link":"#_6-数组新增的方法","children":[]},{"level":3,"title":"7. 对象新增方法","slug":"_7-对象新增方法","link":"#_7-对象新增方法","children":[]},{"level":3,"title":"8.class 类","slug":"_8-class-类","link":"#_8-class-类","children":[]},{"level":3,"title":"9. 模块化","slug":"_9-模块化","link":"#_9-模块化","children":[]},{"level":3,"title":"10. Symbol","slug":"_10-symbol","link":"#_10-symbol","children":[]},{"level":3,"title":"11. Iterator","slug":"_11-iterator","link":"#_11-iterator","children":[]},{"level":3,"title":"12. for...of..循环","slug":"_12-for-of-循环","link":"#_12-for-of-循环","children":[]},{"level":3,"title":"13. Generator","slug":"_13-generator","link":"#_13-generator","children":[]},{"level":3,"title":"14. Proxy 和 Reffect","slug":"_14-proxy-和-reffect","link":"#_14-proxy-和-reffect","children":[]},{"level":3,"title":"15. Set、Map、WeakSet、WeakMap","slug":"_15-set、map、weakset、weakmap","link":"#_15-set、map、weakset、weakmap","children":[]}]},{"level":2,"title":"6.2 ES2016","slug":"_6-2-es2016","link":"#_6-2-es2016","children":[{"level":3,"title":"1. 指数运算符","slug":"_1-指数运算符","link":"#_1-指数运算符","children":[]},{"level":3,"title":"2. Array.prototype.includes()方法","slug":"_2-array-prototype-includes-方法","link":"#_2-array-prototype-includes-方法","children":[]}]},{"level":2,"title":"6.3 ES2017","slug":"_6-3-es2017","link":"#_6-3-es2017","children":[{"level":3,"title":"1. 对象新增方法","slug":"_1-对象新增方法","link":"#_1-对象新增方法","children":[]},{"level":3,"title":"2. 字符串新增方法","slug":"_2-字符串新增方法","link":"#_2-字符串新增方法","children":[]}]},{"level":2,"title":"6.4 ES2018","slug":"_6-4-es2018","link":"#_6-4-es2018","children":[{"level":3,"title":"1. 异步迭代","slug":"_1-异步迭代","link":"#_1-异步迭代","children":[]},{"level":3,"title":"2.对象扩展运算符","slug":"_2-对象扩展运算符","link":"#_2-对象扩展运算符","children":[]},{"level":3,"title":"3. Promise.prototype.finally","slug":"_3-promise-prototype-finally","link":"#_3-promise-prototype-finally","children":[]}]},{"level":2,"title":"6.5 ES2019","slug":"_6-5-es2019","link":"#_6-5-es2019","children":[{"level":3,"title":"1. try...catch：语句中的catch允许不使用参数","slug":"_1-try-catch-语句中的catch允许不使用参数","link":"#_1-try-catch-语句中的catch允许不使用参数","children":[]},{"level":3,"title":"2. trimStart、trimLeft、trimEnd、trimRight","slug":"_2-trimstart、trimleft、trimend、trimright","link":"#_2-trimstart、trimleft、trimend、trimright","children":[]},{"level":3,"title":"3. Object.fromEntries","slug":"_3-object-fromentries","link":"#_3-object-fromentries","children":[]}]},{"level":2,"title":"6.6 ES2020","slug":"_6-6-es2020","link":"#_6-6-es2020","children":[{"level":3,"title":"1. 动态导入","slug":"_1-动态导入","link":"#_1-动态导入","children":[]},{"level":3,"title":"2. BigInt 数据类型","slug":"_2-bigint-数据类型","link":"#_2-bigint-数据类型","children":[]},{"level":3,"title":"3. 空值合并运算符 ??","slug":"_3-空值合并运算符","link":"#_3-空值合并运算符","children":[]},{"level":3,"title":"4. 可选链操作符 ?.","slug":"_4-可选链操作符","link":"#_4-可选链操作符","children":[]}]},{"level":2,"title":"6.7 ES2021","slug":"_6-7-es2021","link":"#_6-7-es2021","children":[{"level":3,"title":"1. String.prototype.replaceAll","slug":"_1-string-prototype-replaceall","link":"#_1-string-prototype-replaceall","children":[]},{"level":3,"title":"2. 数值分隔符 _","slug":"_2-数值分隔符","link":"#_2-数值分隔符","children":[]},{"level":3,"title":"3. Promise.any()","slug":"_3-promise-any","link":"#_3-promise-any","children":[]},{"level":3,"title":"4. 逻辑赋值操作符 &&= 、||= 、？？=","slug":"_4-逻辑赋值操作符-、-、","link":"#_4-逻辑赋值操作符-、-、","children":[]}]},{"level":2,"title":"6.8 ES2022","slug":"_6-8-es2022","link":"#_6-8-es2022","children":[{"level":3,"title":"1. class 的扩展","slug":"_1-class-的扩展","link":"#_1-class-的扩展","children":[]},{"level":3,"title":"2. await 在顶层使用","slug":"_2-await-在顶层使用","link":"#_2-await-在顶层使用","children":[]},{"level":3,"title":"3. Object.hasOwn()","slug":"_3-object-hasown","link":"#_3-object-hasown","children":[]},{"level":3,"title":"4. Array.prototype.at()","slug":"_4-array-prototype-at","link":"#_4-array-prototype-at","children":[]}]},{"level":2,"title":"7.1 说一下 DOM 事件流","slug":"_7-1-说一下-dom-事件流","link":"#_7-1-说一下-dom-事件流","children":[]},{"level":2,"title":"7.2 什么是事件冒泡（Event Bubbling）","slug":"_7-2-什么是事件冒泡-event-bubbling","link":"#_7-2-什么是事件冒泡-event-bubbling","children":[]},{"level":2,"title":"7.3 什么是事件捕获（Event Capturing）","slug":"_7-3-什么是事件捕获-event-capturing","link":"#_7-3-什么是事件捕获-event-capturing","children":[]},{"level":2,"title":"7.4 什么是事件委托","slug":"_7-4-什么是事件委托","link":"#_7-4-什么是事件委托","children":[]},{"level":2,"title":"7.5 什么是 DOM","slug":"_7-5-什么是-dom","link":"#_7-5-什么是-dom","children":[]},{"level":2,"title":"7.6 DOM 的常用操作","slug":"_7-6-dom-的常用操作","link":"#_7-6-dom-的常用操作","children":[{"level":3,"title":"(1)创建节点","slug":"_1-创建节点","link":"#_1-创建节点","children":[]},{"level":3,"title":"(2)获取节点","slug":"_2-获取节点","link":"#_2-获取节点","children":[]},{"level":3,"title":"(3)更新节点","slug":"_3-更新节点","link":"#_3-更新节点","children":[]},{"level":3,"title":"(4)添加节点","slug":"_4-添加节点","link":"#_4-添加节点","children":[]},{"level":3,"title":"(5)删除节点","slug":"_5-删除节点","link":"#_5-删除节点","children":[]}]},{"level":2,"title":"7.7 什么是 DOM 树","slug":"_7-7-什么是-dom-树","link":"#_7-7-什么是-dom-树","children":[]},{"level":2,"title":"7.8 什么是 DOM 对象，什么是 document 对象","slug":"_7-8-什么是-dom-对象-什么是-document-对象","link":"#_7-8-什么是-dom-对象-什么是-document-对象","children":[]},{"level":2,"title":"7.9 L0 和 L2 注册事件的区别","slug":"_7-9-l0-和-l2-注册事件的区别","link":"#_7-9-l0-和-l2-注册事件的区别","children":[]},{"level":2,"title":"7.10 怎么解绑事件","slug":"_7-10-怎么解绑事件","link":"#_7-10-怎么解绑事件","children":[]},{"level":2,"title":"7.11 addEventListener 的第三个参数有什么用","slug":"_7-11-addeventlistener-的第三个参数有什么用","link":"#_7-11-addeventlistener-的第三个参数有什么用","children":[]},{"level":2,"title":"7.12 常用 DOM 事件","slug":"_7-12-常用-dom-事件","link":"#_7-12-常用-dom-事件","children":[]},{"level":2,"title":"7.14 DOM 的类型有哪几种？","slug":"_7-14-dom-的类型有哪几种","link":"#_7-14-dom-的类型有哪几种","children":[]},{"level":2,"title":"7.15 DOM 种获取坐标的属性有哪些，它们有什么不同？","slug":"_7-15-dom-种获取坐标的属性有哪些-它们有什么不同","link":"#_7-15-dom-种获取坐标的属性有哪些-它们有什么不同","children":[]},{"level":2,"title":"7.16 DOM 种元素视图尺寸的属性有哪些？","slug":"_7-16-dom-种元素视图尺寸的属性有哪些","link":"#_7-16-dom-种元素视图尺寸的属性有哪些","children":[]},{"level":2,"title":"7.17 如何判断元素是否在可视区域","slug":"_7-17-如何判断元素是否在可视区域","link":"#_7-17-如何判断元素是否在可视区域","children":[]},{"level":2,"title":"7.18 IntersectionObserver","slug":"_7-18-intersectionobserver","link":"#_7-18-intersectionobserver","children":[]},{"level":2,"title":"7.19 如何遍历输出页面中的所有元素","slug":"_7-19-如何遍历输出页面中的所有元素","link":"#_7-19-如何遍历输出页面中的所有元素","children":[]},{"level":2,"title":"7.20 什么是 BOM 对象","slug":"_7-20-什么是-bom-对象","link":"#_7-20-什么是-bom-对象","children":[]},{"level":2,"title":"8.1 简单说说你对观察者模式的理解","slug":"_8-1-简单说说你对观察者模式的理解","link":"#_8-1-简单说说你对观察者模式的理解","children":[]},{"level":2,"title":"8.2 简单说说你对发布订阅模式的理解","slug":"_8-2-简单说说你对发布订阅模式的理解","link":"#_8-2-简单说说你对发布订阅模式的理解","children":[]},{"level":2,"title":"8.3 观察者模式与发布订阅的区别","slug":"_8-3-观察者模式与发布订阅的区别","link":"#_8-3-观察者模式与发布订阅的区别","children":[]},{"level":2,"title":"8.4 说说你对正则表达式的理解","slug":"_8-4-说说你对正则表达式的理解","link":"#_8-4-说说你对正则表达式的理解","children":[]},{"level":2,"title":"8.5 如何判断当前的 Js 代码是否在浏览器环境中运行","slug":"_8-5-如何判断当前的-js-代码是否在浏览器环境中运行","link":"#_8-5-如何判断当前的-js-代码是否在浏览器环境中运行","children":[]}],"git":{"createdTime":1698156404000,"updatedTime":1698156404000,"contributors":[{"name":"xunyu","email":"2548126293@qq.com","commits":1}]},"filePathRelative":"blogs/interview/javascript/README.md"}');export{l as data};
