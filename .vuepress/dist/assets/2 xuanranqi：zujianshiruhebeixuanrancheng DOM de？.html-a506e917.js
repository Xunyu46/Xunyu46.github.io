import{_ as n,o as s,c as a,a as e}from"./app-48690364.js";const p={},t=e(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>相对于传统的 <code>jQuery</code> 一把梭子撸到底的开发模式，组件化可以帮助我们实现 <code>视图</code> 和 <code>逻辑</code> 的复用，并且可以对每个部分进行单独的思考。对于一个大型的 <code>Vue.js</code> 应用，通常是由一个个组件组合而成：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/187720e9a0aa4c93b52f625ca796880e~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>但是我们实际访问的页面，是由 <code>DOM</code> 元素构成的，而组件的 <code>&lt;template&gt;</code> 中的内容只是一个模板字符串而已。那模板字符串是如何被渲染成 <code>DOM</code> 的呢？接下来我们将从组件入手，揭秘 <code>Vue</code> 的组件是如何被渲染成真实的 <code>DOM</code> 的。</p><h2 id="初始化一个-vue-3-应用" tabindex="-1"><a class="header-anchor" href="#初始化一个-vue-3-应用" aria-hidden="true">#</a> 初始化一个 Vue 3 应用</h2><p>在开始本章节之前，我们先来简单初始化一个 <code>Vue 3</code> 的应用：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 安装 vue cli </span>
$ <span class="token function">yarn</span> global <span class="token function">add</span> @vue/cli

<span class="token comment"># 创建 vue3 的基础脚手架 一路回车</span>
$ vue create vue3-demo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，打开项目，可以看到<code>Vue.js</code> 的入口文件 <code>main.js</code> 的内容如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;./App.vue&#39;</span>

<span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里就有一个根组件 <code>App.vue</code>。为了更加简单地介绍 <code>Vue</code> 根组件的渲染过程，我把 <code>App.vue</code> 根组件进行了一个简单的修改：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>helloWorld<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    hello world
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="根组件模板编译" tabindex="-1"><a class="header-anchor" href="#根组件模板编译" aria-hidden="true">#</a> 根组件模板编译</h2><p>我们知道 <code>.vue</code> 类型的文件无法在 <code>Web</code> 端直接加载，我们通常会在 <code>webpack</code> 的编译阶段，通过 <code>vue-loader</code> 编译生成组件相关的 <code>JavaScript</code> 和 <code>CSS</code>，并把 <code>template</code> 部分编译转换成 <code>render</code> 函数添加到组件对象的属性中。</p><p>上述的 <code>App.vue</code> 文件内的模板其实是会被编译工具在编译时转成一个渲染函数，大致如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> openBlock <span class="token keyword">as</span> _openBlock<span class="token punctuation">,</span> createElementBlock <span class="token keyword">as</span> _createElementBlock <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span>

<span class="token keyword">const</span> _hoisted_1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&quot;helloWorld&quot;</span> <span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">_ctx<span class="token punctuation">,</span> _cache<span class="token punctuation">,</span> $props<span class="token punctuation">,</span> $setup<span class="token punctuation">,</span> $data<span class="token punctuation">,</span> $options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_createElementBlock</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> _hoisted_1<span class="token punctuation">,</span> <span class="token string">&quot; hello world &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于 <code>&lt;template&gt;</code> 中的模板字符串是如何被编译成 <code>render</code> 函数的，以及 <code>_hoisted_1</code> 是个什么玩意，我们将在后续章节中详细介绍。</p><p>现在我们只需要知道 <code>&lt;script&gt;</code> 中的对象内容最终会和编译后的模板内容一起，生成一个 <code>App</code> 对象传入 <code>createApp</code> 函数中：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">_ctx<span class="token punctuation">,</span> _cache<span class="token punctuation">,</span> $props<span class="token punctuation">,</span> $setup<span class="token punctuation">,</span> $data<span class="token punctuation">,</span> $options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token comment">// ... </span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="对象组件渲染成真实的-dom" tabindex="-1"><a class="header-anchor" href="#对象组件渲染成真实的-dom" aria-hidden="true">#</a> 对象组件渲染成真实的 DOM</h2><p>接着回到 <code>main.js</code> 的入口文件，整个初始化的过程只剩下如下部分了：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>打开源码，可以看一下 <code>createApp</code> 的过程：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// packages/runtime-dom/src/index.ts</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">createApp</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">ensureRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// ...</span>
  <span class="token keyword">return</span> app<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>猜测一下，<code>ensureRenderer().createApp(...args)</code> 这个链式函数执行完成后肯定返回了 <code>mount</code> 函数，<code>ensureRenderer</code> 就是构造了一个带有 <code>createApp</code> 函数的<strong>渲染器 renderer 对象</strong> ：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// packages/runtime-dom/src/index.ts</span>
<span class="token keyword">function</span> <span class="token function">ensureRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 如果 renderer 有值的话，那么以后都不会初始化了</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    renderer <span class="token operator">||</span>
    <span class="token punctuation">(</span>renderer <span class="token operator">=</span> <span class="token function">createRenderer</span><span class="token punctuation">(</span>rendererOptions<span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// renderOptions 包含以下函数：</span>

<span class="token keyword">const</span> renderOptions <span class="token operator">=</span> <span class="token punctuation">{</span>
  createElement<span class="token punctuation">,</span>
  createText<span class="token punctuation">,</span>
  setText<span class="token punctuation">,</span>
  setElementText<span class="token punctuation">,</span>
  patchProp<span class="token punctuation">,</span>
  insert<span class="token punctuation">,</span>
  remove<span class="token punctuation">,</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>这里返回的</code> <code>renderer</code> 对象，可以认为是一个跨平台的渲染器对象，针对不同的平台，会创建出不同的 <code>renderer</code> 对象，上述是创建浏览器环境的 <code>renderer</code> 对象，对于服务端渲染的场景，则会创建 <code>server render</code> 的 <code>renderer</code>:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// packages/runtime-dom/src/index.ts</span>
<span class="token keyword">let</span> enabledHydration <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token keyword">function</span> <span class="token function">ensureHydrationRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  renderer <span class="token operator">=</span> enabledHydration
    <span class="token operator">?</span> renderer
    <span class="token operator">:</span> <span class="token function">createHydrationRenderer</span><span class="token punctuation">(</span>rendererOptions<span class="token punctuation">)</span>
  enabledHydration <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token keyword">return</span> renderer
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再来看一下 <code>createRenderer</code> 返回的对象：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// packages/runtime-core/src/renderer.ts</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createRenderer</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token comment">// 这里不介绍 hydrate 模式</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    render<span class="token punctuation">,</span>
    hydrate<span class="token punctuation">,</span>
    <span class="token literal-property property">createApp</span><span class="token operator">:</span> <span class="token function">createAppAPI</span><span class="token punctuation">(</span>render<span class="token punctuation">,</span> hydrate<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，<code>renderer</code> 对象上包含了 <code>createApp</code> 和 <code>render</code> 方法。再来看一下 <code>createApp</code> 方法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// packages/runtime-core/src/apiCreateApp.ts</span>
<span class="token keyword">function</span> <span class="token function">createAppAPI</span><span class="token punctuation">(</span><span class="token parameter">render<span class="token punctuation">,</span> hydrate</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// createApp createApp 方法接收的两个参数：根组件的对象和 prop</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token parameter">rootComponent<span class="token punctuation">,</span> rootProps <span class="token operator">=</span> <span class="token keyword">null</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token comment">// ... 省略很多不需要在这里介绍的属性</span>
      <span class="token literal-property property">_component</span><span class="token operator">:</span> rootComponent<span class="token punctuation">,</span>
      <span class="token literal-property property">_props</span><span class="token operator">:</span> rootProps<span class="token punctuation">,</span>
      <span class="token function">mount</span><span class="token punctuation">(</span><span class="token parameter">rootContainer<span class="token punctuation">,</span> isHydrate<span class="token punctuation">,</span> isSVG</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> app
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直到这里，我们才真正拨开了 <code>Vue 3</code> 初始化根组件的核心方法，也就是入口文件 <code>createApp</code> 真正执行的内容就是这里的 <code>createAppAPI</code> 函数中的 <code>createApp</code> 函数，该函数接收了 <code>&lt;App /&gt;</code> 组件作为根组件 <code>rootComponent</code>，返回了一个包含 <code>mount</code> 方法的 <code>app</code> 对象。</p><p>接下来再深入地看一下 <code>mount</code> 的内部实现：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// packages/runtime-core/src/apiCreateApp.ts</span>
<span class="token function">mount</span><span class="token punctuation">(</span><span class="token parameter">rootContainer<span class="token punctuation">,</span> isHydrate<span class="token punctuation">,</span> isSVG</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isMounted<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ... 省略部分不重要的代码</span>
    <span class="token comment">// 1. 创建根组件的 vnode</span>
    <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">createVNode</span><span class="token punctuation">(</span>
      rootComponent<span class="token punctuation">,</span>
      rootProps
    <span class="token punctuation">)</span>
    
    <span class="token comment">// 2. 渲染根组件</span>
    <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> rootContainer<span class="token punctuation">,</span> isSVG<span class="token punctuation">)</span>
    isMounted <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-创建根组件的-vnode" tabindex="-1"><a class="header-anchor" href="#_1-创建根组件的-vnode" aria-hidden="true">#</a> 1. 创建根组件的 vnode</h3><p>什么是 <code>vnode</code> 节点呢？其实它和 <code>Virtual DOM</code> 是一个意思，就是将真实的 <code>DOM</code> 以普通对象形式的数据结构来表达，简化了很多 <code>DOM</code> 中内容。</p><p>熟悉 <code>JS DOM</code> 编程的小伙伴都知道 <code>JS</code> 直接操作 <code>DOM</code> 往往会带来许多性能负担，所以 <code>vnode</code> 提供了对真实 <code>DOM</code> 上的一层虚拟映射，我们只需要操作这个虚拟的数据结构，那些真正费性能的活交给这些框架来操作就好了，框架会帮我们做很多性能优化的事情。这也是 <code>vnode</code> 带来的最大的优势之一。</p><p>其次，因为 <code>vnode</code> 只是一种与平台无关的数据结构而已，所以理论上我们也可以将它渲染到不同平台上从而达到跨平台渲染的目的。这个也是 <code>weex</code>、<code>mpvue</code> 等跨端渲染框架的核心基础。</p><p>上述例子中的 <code>template</code> 中的内容用 <code>vnode</code> 可以表示为：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span> 
    <span class="token string-property property">&#39;class&#39;</span><span class="token operator">:</span> <span class="token string">&#39;helloWorld&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token string">&#39;helloWorld&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说了这么多，那么根节点是如何被创建成一个 <code>vnode</code> 的呢？核心也就在 <code>createVNode</code> 函数中：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// packages/runtime-core/src/vnode.ts</span>
<span class="token keyword">function</span> <span class="token function">createBaseVNode</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token punctuation">{</span>
    type<span class="token punctuation">,</span>
    props<span class="token punctuation">,</span>
    <span class="token literal-property property">key</span><span class="token operator">:</span> props <span class="token operator">&amp;&amp;</span> <span class="token function">normalizeKey</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">,</span>
    children<span class="token punctuation">,</span>
    <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    shapeFlag<span class="token punctuation">,</span>
    patchFlag<span class="token punctuation">,</span>
    dynamicProps<span class="token punctuation">,</span>
    <span class="token literal-property property">dynamicChildren</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token comment">// ... 一些其他属性</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// ...</span>
  <span class="token keyword">return</span> vnode
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">createVNode</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> props <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> children <span class="token operator">=</span> <span class="token keyword">null</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果存在 props 则需要对 props 进行一些处理，这里先省略</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// ...</span>
  <span class="token comment">// 处理 shapeFlag 类型</span>
  <span class="token keyword">const</span> shapeFlag <span class="token operator">=</span> <span class="token function">isString</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span>
    <span class="token operator">?</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">ELEMENT</span>
    <span class="token operator">:</span> __FEATURE_SUSPENSE__ <span class="token operator">&amp;&amp;</span> <span class="token function">isSuspense</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span>
    <span class="token operator">?</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">SUSPENSE</span>
    <span class="token operator">:</span> <span class="token function">isTeleport</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span>
    <span class="token operator">?</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">TELEPORT</span>
    <span class="token operator">:</span> <span class="token function">isObject</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span>
    <span class="token operator">?</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">STATEFUL_COMPONENT</span>
    <span class="token operator">:</span> <span class="token function">isFunction</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span>
    <span class="token operator">?</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">FUNCTIONAL_COMPONENT</span>
    <span class="token operator">:</span> <span class="token number">0</span>
  
  <span class="token comment">// ...</span>
  <span class="token keyword">return</span> <span class="token function">createBaseVNode</span><span class="token punctuation">(</span>
    type<span class="token punctuation">,</span>
    props<span class="token punctuation">,</span>
    children<span class="token punctuation">,</span>
    patchFlag<span class="token punctuation">,</span>
    dynamicProps<span class="token punctuation">,</span>
    shapeFlag<span class="token punctuation">,</span>
    isBlockNode<span class="token punctuation">,</span>
    <span class="token boolean">true</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当进行根组件渲染的时候，<code>createVNode</code> 的第一个入参 <code>type</code> 是我们的 <code>App</code> 对象，也就是一个 <code>Object</code>，所以得到的 <code>shapeFlag</code> 的值是 <code>STATEFUL_COMPONENT</code>，代表的是一个有状态组件对象。（这里顺便提一下，如果传入的是个函数，那么就是一个函数式组件 <code>FUNCTIONAL_COMPONENT</code>，函数式组件和有状态的对象组件都是 <code>Vue</code> 可处理的组件类型，这个会在下面渲染阶段提及。）</p><p>到这里，<code>Vue</code> 完成了对根组件的 <code>Vnode</code> 对象的创建，接下来要做的就是将该组件渲染到页面中。</p><h3 id="_2-vnode-渲染成真实的组件" tabindex="-1"><a class="header-anchor" href="#_2-vnode-渲染成真实的组件" aria-hidden="true">#</a> 2. VNode 渲染成真实的组件</h3><p>回到 <code>mount</code> 函数中，接下来一步就是对 <code>vnode</code> 的渲染工作，核心代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> rootContainer<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>那么这里的 <code>render</code> 函数是什么呢？通过上面的代码我们发现，其实它是在调用 <code>createAppAPI</code> 时传入进来的，而 <code>createAppAPI</code> 则是在创建 <code>renderer</code> 渲染器的时候调用的。那么，接下来看看 <code>render</code> 函数的实现：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// packages/runtime-core/src/renderer.ts</span>
<span class="token keyword">const</span> <span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>vnode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果 vnode 不存在，表示需要卸载组件</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>container<span class="token punctuation">.</span>_vnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">unmount</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span>_vnode<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 否则进入更新流程（初始化创建也是特殊的一种更新）</span>
    <span class="token function">patch</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span>_vnode <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> container<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 缓存 vnode</span>
  container<span class="token punctuation">.</span>_vnode <span class="token operator">=</span> vnode
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>很明显，对于初始化根组件的过程中，传入了一个根组件的 <code>vnode</code> 对象，所以这里会执行 <code>patch</code> 相关的动作。<code>patch</code> 本意是补丁的意思，可以理解成为更新做一些补丁的活儿，其实初始的过程也可以看作是一个全量补丁，一种特殊的更新操作。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// packages/runtime-core/src/renderer.ts</span>
<span class="token keyword">function</span> <span class="token function">patch</span><span class="token punctuation">(</span><span class="token parameter">n1<span class="token punctuation">,</span>n2<span class="token punctuation">,</span>container <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>anchor <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>parentComponent <span class="token operator">=</span> <span class="token keyword">null</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 对于类型不同的新老节点，直接进行卸载</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n1 <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isSameVNodeType</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    anchor <span class="token operator">=</span> <span class="token function">getNextHostNode</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span>
    <span class="token function">unmount</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> parentComponent<span class="token punctuation">,</span> parentSuspense<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    n1 <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 基于 n2 的类型来判断</span>
  <span class="token comment">// 因为 n2 是新的 vnode</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> shapeFlag <span class="token punctuation">}</span> <span class="token operator">=</span> n2<span class="token punctuation">;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token literal-property property">Text</span><span class="token operator">:</span>
       <span class="token comment">// 处理文本节点</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token comment">// 其中还有几个类型比如： static fragment comment</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token comment">// 这里就基于 shapeFlag 来处理</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 处理普通 DOM 元素</span>
        <span class="token function">processElement</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">,</span> parentComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">COMPONENT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 处理 component</span>
        <span class="token function">processComponent</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> container<span class="token punctuation">,</span> parentComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">{</span>
        <span class="token comment">// ... 处理其他元素</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>patch</code> 函数主要接收的参数说明如下：</p><ol><li><code>n1</code> 表示老的 <code>vnode</code> 节点；</li><li><code>n2</code> 表示新的 <code>vnode</code> 节点；</li><li><code>container</code> 表示需要挂载的 <code>dom</code> 容器；</li><li><code>anchor</code> 挂载的参考元素；</li><li><code>parentComponent</code> 父组件。</li></ol><p>这里我们主要关注前 3 个参数，因为是初始化的过程，所以 <code>n1</code> 本次值为空，核心看 <code>n2</code> 的值，<code>n2</code> 有一个 <code>type</code> 和 <code>shapeFlag</code>。当前 <code>n2</code> 的 <code>type</code> 是 <code>App</code> 组件对象，所以逻辑会进入 <code>Switch</code> 的 <code>default</code> 中。再比较 <code>shapeFlag</code> 属性，前面提到 <code>shapeFlag</code> 的值是 <code>STATEFUL_COMPONENT</code>。</p><blockquote><p>这里需要注意的是 <code>ShapeFlags</code> 是一个二进制左移操作符生成的对象，其中<br><code>ShapeFlags.COMPONENT = ShapeFlags.STATEFUL_COMPONENT | ShapeFlags.FUNCTIONAL_COMPONENT</code>， 所以 <code>shapeFlag &amp; ShapeFlags.COMPONENT</code> 这里的值是 <code>true</code>，关于二进制左移操作符对象在 <code>Vue 3</code> 中会大量使用，后面也会详细介绍。</p></blockquote><p>接着也就进入了 <code>processComponent</code> 的逻辑了：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// packages/runtime-core/src/renderer.ts</span>
<span class="token keyword">function</span> <span class="token function">processComponent</span><span class="token punctuation">(</span><span class="token parameter">n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> container<span class="token punctuation">,</span> parentComponent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 如果 n1 没有值的话，那么就是 mount</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>n1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 初始化 component</span>
    <span class="token function">mountComponent</span><span class="token punctuation">(</span>n2<span class="token punctuation">,</span> container<span class="token punctuation">,</span> parentComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">updateComponent</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同理，这里我们只看初始化的逻辑，所以 <code>n1</code> 此时还是个空值，那么就会进入 <code>mountComponent</code> 函数对组件进行初始挂载过程。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// packages/runtime-core/src/renderer.ts</span>
<span class="token keyword">function</span> <span class="token function">mountComponent</span><span class="token punctuation">(</span><span class="token parameter">initialVNode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> parentComponent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 1. 先创建一个 component instance</span>
  <span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token punctuation">(</span>initialVNode<span class="token punctuation">.</span>component <span class="token operator">=</span> <span class="token function">createComponentInstance</span><span class="token punctuation">(</span>
    initialVNode<span class="token punctuation">,</span>
    parentComponent
  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token comment">// 2. 初始化 instance 上的 props, slots, 执行组件的 setup 函数...</span>
  <span class="token function">setupComponent</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 3. 设置并运行带副作用的渲染函数</span>
  <span class="token function">setupRenderEffect</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> initialVNode<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该函数实现过程还是非常清晰的，思考一下，一个组件的初始化要做哪些内容呢？</p><p>其实很容易想到，我们需要一个实例化的组件对象，该对象可以在 <code>Vue</code> 执行的运行时上下文中随时获取到，另外还需要对实例化后的组件中的属性做一些优化、处理、赋值等操作，最后，就是把组件实例的 <code>render</code> 函数执行一遍。</p><p>上面也是 <code>mountComponent</code> 核心做的事情，我们一个个来看。</p><p>第一步是组件实例化，在 <code>Vue 3</code> 中通过 <code>createComponentInstance</code> 的方法创建组件实例，返回的是一个组件实例的对象，大致包含以下属性：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// packages/runtime-core/src/component.ts</span>
<span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 这里是组件对象</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> vnode<span class="token punctuation">.</span>type<span class="token punctuation">,</span> 
  <span class="token comment">// 组件 vnode</span>
  vnode<span class="token punctuation">,</span>
  <span class="token comment">// 新的组件 vnode</span>
  <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> 
  <span class="token comment">// props 相关</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> 
  <span class="token comment">// 指向父组件</span>
  parent<span class="token punctuation">,</span>
  <span class="token comment">// 依赖注入相关</span>
  <span class="token literal-property property">provides</span><span class="token operator">:</span> parent <span class="token operator">?</span> parent<span class="token punctuation">.</span>provides <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 渲染上下文代理</span>
  <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token comment">// 标记是否被挂载</span>
  <span class="token literal-property property">isMounted</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token comment">// attrs 相关</span>
  <span class="token literal-property property">attrs</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> 
  <span class="token comment">// slots 相关</span>
  <span class="token literal-property property">slots</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> 
  <span class="token comment">// context 相关</span>
  <span class="token literal-property property">ctx</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// setup return 的状态数据</span>
  <span class="token literal-property property">setupState</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> 
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述实例属性，相对源码而言，已经省略了很多内容了，这些属性现在看着肯定不知所云，头皮发麻。但相应的属性是 <code>vue</code> 在特定的场景和功能下才会用到的，相信你跟着本小册一起阅读后，回过头来再去看一遍这些属性，就会“顿悟”。</p><p>然后是对实例化后的组件中的属性做一些优化、处理、赋值等操作，这里主要是初始化了 <code>props</code>、<code>slots</code>，并执行组件的 <code>setup</code> 函数，核心的实现和功能我们将在下一节介绍。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// packages/runtime-core/src/component.ts</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">setupComponent</span><span class="token punctuation">(</span><span class="token parameter">instance</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 1. 处理 props</span>
  <span class="token comment">// 取出存在 vnode 里面的 props</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> props<span class="token punctuation">,</span> children <span class="token punctuation">}</span> <span class="token operator">=</span> instance<span class="token punctuation">.</span>vnode<span class="token punctuation">;</span>
  <span class="token function">initProps</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 2. 处理 slots</span>
  <span class="token function">initSlots</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> children<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 3. 调用 setup 并处理 setupResult</span>
  <span class="token function">setupStatefulComponent</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后是把组件实例的 <code>render</code> 函数执行一遍，这里是通过 <code>setupRenderEffect</code> 来执行的。我们再看一下这个函数的实现：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// packages/runtime-core/src/renderer.ts</span>
<span class="token keyword">const</span> <span class="token function-variable function">setupRenderEffect</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">instance<span class="token punctuation">,</span> initialVNode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">,</span> parentSuspense<span class="token punctuation">,</span> isSVG<span class="token punctuation">,</span> optimized</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">componentUpdateFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>instance<span class="token punctuation">.</span>isMounted<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 渲染子树的 vnode</span>
      <span class="token keyword">const</span> subTree <span class="token operator">=</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>subTree <span class="token operator">=</span> <span class="token function">renderComponentRoot</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token comment">// 挂载子树 vnode 到 container 中</span>
      <span class="token function">patch</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> subTree<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> parentSuspense<span class="token punctuation">,</span> isSVG<span class="token punctuation">)</span>
      <span class="token comment">// 把渲染生成的子树根 DOM 节点存储到 el 属性上</span>
      initialVNode<span class="token punctuation">.</span>el <span class="token operator">=</span> subTree<span class="token punctuation">.</span>el
      instance<span class="token punctuation">.</span>isMounted <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 更新相关，后面介绍</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 创建副作用渲染函数</span>
  instance<span class="token punctuation">.</span>update <span class="token operator">=</span> <span class="token function">effect</span><span class="token punctuation">(</span>componentUpdateFn<span class="token punctuation">,</span> prodEffectOptions<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们再看一下 <code>componentUpdateFn</code> 这个函数，核心是调用了 <code>renderComponentRoot</code> 来生成 <code>subTree</code>，然后再把 <code>subTree</code> 挂载到 <code>container</code> 中。其实 <code>renderComponentRoot</code> 的核心工作就是执行 <code>instance.render</code> 方法，该方法前面我们已经说了，组件在编译时会生成组件对象，包含了 <code>render</code> 函数，该函数内部是一系列的渲染函数的执行：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> openBlock<span class="token punctuation">,</span> createElementBlock <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span>

<span class="token keyword">const</span> _hoisted_1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&quot;helloWorld&quot;</span> <span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">createElementBlock</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> _hoisted_1<span class="token punctuation">,</span> <span class="token string">&quot; hello world &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么只需要看一下 <code>createElementBlock</code> 函数的实现：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// packages/runtime-core/src/vnode.ts</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">createElementBlock</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">setupBlock</span><span class="token punctuation">(</span>
    <span class="token function">createBaseVNode</span><span class="token punctuation">(</span>
      type<span class="token punctuation">,</span>
      props<span class="token punctuation">,</span>
      children<span class="token punctuation">,</span>
      patchFlag<span class="token punctuation">,</span>
      dynamicProps<span class="token punctuation">,</span>
      shapeFlag<span class="token punctuation">,</span>
      <span class="token boolean">true</span> <span class="token comment">/* isBlock */</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到本质还是调用了 <code>createBaseVNode</code> 创新 <code>vnode</code>。所以，我们可以推导出 <code>subtree</code> 就是调用 <code>render</code> 函数而生产的 <code>vnode</code> 节点。这里需要注意的一点是，因为 <code>subtree</code> 调用的 <code>createBaseVNode</code> 创建时，传入的 <code>type = div</code> 在这里是个 <code>string</code>，所以返回的 <code>shapeFlags</code> 的值是 <code>ELEMENT</code>。</p><p>渲染生成子树 <code>vnode</code> 后，接下来就是继续调用 <code>patch</code> 函数把子树 <code>vnode</code> 挂载到 <code>container</code> 中了，前面说过了 <code>patch</code> 的实现，再来简单看一下当传入的 <code>vnode</code> 的 <code>shapeFlags</code> 是个 <code>ELEMENT</code> 时，会调用 <code>processElement</code> 这个函数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">processElement</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">,</span> parentComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们来看一下 <code>processElement</code> 的实现：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// packages/runtime-core/src/renderer.ts</span>
<span class="token keyword">function</span> <span class="token function">processElement</span><span class="token punctuation">(</span><span class="token parameter">n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">,</span> parentComponent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>n1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 挂载元素节点</span>
    <span class="token function">mountElement</span><span class="token punctuation">(</span>n2<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 更新元素节点</span>
    <span class="token function">updateElement</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">,</span> parentComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为在初始化的过程中，<code>n1</code> 是 <code>null</code>，所以这里执行的是 <code>mountElement</code> 进行元素的初始化挂载。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// packages/runtime-core/src/renderer.ts</span>
<span class="token keyword">const</span> <span class="token function-variable function">mountElement</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">,</span> parentComponent<span class="token punctuation">,</span> parentSuspense<span class="token punctuation">,</span> isSVG<span class="token punctuation">,</span> optimized</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> el
  <span class="token keyword">const</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> props<span class="token punctuation">,</span> shapeFlag<span class="token punctuation">,</span> transition<span class="token punctuation">,</span> patchFlag<span class="token punctuation">,</span> dirs <span class="token punctuation">}</span> <span class="token operator">=</span> vnode
  <span class="token comment">// ...</span>
  <span class="token comment">// 根据 vnode 创建 DOM 节点</span>
  el <span class="token operator">=</span> vnode<span class="token punctuation">.</span>el <span class="token operator">=</span> <span class="token function">hostCreateElement</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>type<span class="token punctuation">,</span> isSVG<span class="token punctuation">,</span> props <span class="token operator">&amp;&amp;</span> props<span class="token punctuation">.</span>is<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 处理 props 属性</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isReservedProp</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">hostPatchProp</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> props<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> isSVG<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 文本节点处理</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">TEXT_CHILDREN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">hostSetElementText</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> vnode<span class="token punctuation">.</span>children<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">ARRAY_CHILDREN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果节点是个数据类型，则递归子节点</span>
    <span class="token function">mountChildren</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>children<span class="token punctuation">,</span> el<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 把创建好的 el 元素挂载到容器中</span>
  <span class="token function">hostInsert</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>mountElemet</code> 首先是通过 <code>hostCreateElement</code> 创建了一个 <code>DOM</code> 节点，然后处理一下 <code>props</code> 属性，接着根据 <code>shapeFlag</code> 判断子节点的类型，如果节点是个文本节点，则直接创建文本节点，如果子节点是个数组，比如这种情况：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">createElementBlock</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> _hoisted_1<span class="token punctuation">,</span> <span class="token punctuation">[</span>
  hoisted_2<span class="token punctuation">,</span>
  <span class="token function">createVNode</span><span class="token punctuation">(</span>_component_Hello<span class="token punctuation">)</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于这种子节点是数组的情况时，它的 <code>shapeFlag</code> 将是一个数组类型 <code>ARRAY_CHILDREN</code>。此时会对该 <code>vnode</code> 节点的子节点调用 <code>mountChildren</code> 进行递归的 <code>patch</code> 渲染。</p><p>最后，处理完所有子节点后，通过 <code>hostInsert</code> 方法把缓存在内存中的 <code>DOM el</code> 映射渲染到真实的 <code>DOM Container</code> 当中。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// packages/runtime-dom/src/nodeOps.ts</span>
<span class="token literal-property property">insert</span><span class="token operator">:</span> <span class="token punctuation">(</span>child<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  parent<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> anchor <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>到这里，我们已经完成了从入口文件开始，分析根组件如何挂载渲染到真实 <code>DOM</code> 的流程，再简单通过一张流程图回顾一下上述内容，绿色部分是初始化的过程，也是本小节的内容，灰色部分我们后面章节再做介绍。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/30a91d25745e496cb0ad763763f40896~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>然后我们再引用一下 <code>Vue</code> 官网上的一张渲染流程图：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/05fb0272c6c64b20b77b83012ac99f8c~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>现在再来看这一张图，整体流程就会清晰了很多：在组件初始化挂载阶段，模板被编译成渲染函数的形式，交由渲染器执行，渲染器执行渲染函数得到 <code>APP</code> 组件对象的子树 <code>vnode</code>，子树 <code>vnode</code> 进行递归 <code>patch</code> 后生成不同类型的 <code>DOM</code> 节点，最后把这些 <code>DOM</code> 节点挂载到页面的 <code>container</code> 当中。</p><p>关于具体的编译器和更新以及响应式的部分我们会在后续章节继续介绍。本节主要介绍了挂载过程，后面的小节我们接着介绍一下更新策略。</p>`,92),o=[t];function c(i,l){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","2 xuanranqi：zujianshiruhebeixuanrancheng DOM de？.html.vue"]]);export{d as default};
