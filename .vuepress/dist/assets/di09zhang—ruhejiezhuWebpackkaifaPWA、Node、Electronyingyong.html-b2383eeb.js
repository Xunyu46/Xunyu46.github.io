import{_ as p,r as o,o as c,c as l,b as n,d as s,e,a as t}from"./app-48690364.js";const i={},r={href:"https://en.wikipedia.org/wiki/Ryan_Dahl",target:"_blank",rel:"noopener noreferrer"},u=t('<p>相应地，我们需要更好的构建、模块化以及打包能力来应对不同形态的工程化需求，所幸 Webpack 提供的功能特性，能够充分支撑这些场景。</p><p>前面两个章节我们已经详细介绍了如何使用 Webpack 构建 NPM Library，以及如何基于 Module Federation 搭建微前端架构。本文将继续汇总这些特化场景需求，包括：</p><ul><li>如何使用 Webpack 构建 Progressive Web Apps 应用；</li><li>如何使用 Webpack 构建 Node 应用；</li><li>如何使用 Webpack 构建 Electron 应用。</li></ul><h2 id="构建-pwa-应用" tabindex="-1"><a class="header-anchor" href="#构建-pwa-应用" aria-hidden="true">#</a> 构建 PWA 应用</h2><p>PWA 全称 Progressive Web Apps (渐进式 Web 应用)，原始定义很复杂，可以简单理解为 <strong>一系列将网页如同独立 APP 般安装到本地的技术集合</strong>，借此，我们即可以保留普通网页轻量级、可链接(SEO 友好)、低门槛（只要有浏览器就能访问）等优秀特点，又同时具备独立 APP 离线运行、可安装等优势。</p><p>实现上，PWA 与普通 Web 应用的开发方法大致相同，都是用 CSS、JS、HTML 定义应用的样式、逻辑、结构，两者主要区别在于，PWA 需要用一些新技术实现离线与安装功能：</p>',6),d={href:"https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API",target:"_blank",rel:"noopener noreferrer"},k=n("code",null,"ServiceWorker",-1),v=n("code",null,"ServiceWorker",-1),m=n("p",null,[n("img",{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/46045f1163244ae5ab365e13d8db0a20~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"})],-1),b={href:"https://web.dev/add-manifest/?utm_source=devtools",target:"_blank",rel:"noopener noreferrer"},g=t(`<div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// manifest.json</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;icons&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;src&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/icon_120x120.0ce9b3dd087d6df6e196cacebf79eccf.png&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;sizes&quot;</span><span class="token operator">:</span> <span class="token string">&quot;120x120&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;image/png&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;My Progressive Web App&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;short_name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;MyPWA&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;display&quot;</span><span class="token operator">:</span> <span class="token string">&quot;standalone&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;start_url&quot;</span><span class="token operator">:</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;My awesome Progressive Web App!&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以选择自行开发、维护 <code>ServiceWorker</code> 及 <code>manifest</code> 文件 ，也可以简单点使用 Google 开源的 Workbox 套件自动生成 PWA 应用的壳，首先安装依赖：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> <span class="token parameter variable">-D</span> workbox-webpack-plugin webpack-pwa-manifest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中：</p><ul><li><code>workbox-webpack-plugin</code>：用于自动生成 <code>ServiceWorker</code> 代码的 Webpack 插件；</li><li><code>webpack-pwa-mainifest</code>：根据 Webpack 编译结果，自动生成 PWA Manifest 文件的 Webpack 插件。</li></ul><p>之后，在 <code>webpack.config.js</code> 配置文件中注册插件：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;html-webpack-plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> GenerateSW <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;workbox-webpack-plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> WebpackPwaManifest <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;webpack-pwa-manifest&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;Progressive Web Application&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">// 自动生成 Manifest 文件</span>
    <span class="token keyword">new</span> <span class="token class-name">WebpackPwaManifest</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;My Progressive Web App&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">short_name</span><span class="token operator">:</span> <span class="token string">&quot;MyPWA&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">description</span><span class="token operator">:</span> <span class="token string">&quot;My awesome Progressive Web App!&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">publicPath</span><span class="token operator">:</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">icons</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          <span class="token comment">// 桌面图标，注意这里只支持 PNG、JPG、BMP 格式</span>
          <span class="token literal-property property">src</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&quot;src/assets/logo.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token literal-property property">sizes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">// 自动生成 ServiceWorker 文件</span>
    <span class="token keyword">new</span> <span class="token class-name">GenerateSW</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">clientsClaim</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token literal-property property">skipWaiting</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),h={href:"https://github1s.com/Tecvan-fe/webpack-book-samples/tree/main/8-1_pwa",target:"_blank",rel:"noopener noreferrer"},_=t(`<p>之后，执行编译命令如 <code>npx webpack</code> 就可以生成如下资源：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>├─ 8-1_pwa
│  ├─ src
│  │  ├─ xxx
│  ├─ dist
│  │  ├─ icon_150x150.119e95d3213ab9106b0f95100015a20a.png
│  │  ├─ index.html
│  │  ├─ main.js
│  │  ├─ manifest.22f4938627a3613bde0a011750caf9f4.json
│  │  ├─ service-worker.js
│  │  ├─ workbox-2afe96ff.js
│  └─ webpack.config.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，运行并使用 Chrome 打开页面，打开开发者工具，切换到 <code>Applicatios &gt; Service Workers</code> 面板，可以看到：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5b138e624b01470c8e0e4e8fa66806ab~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>这表明 Service Worker 已经正常安装到浏览器上。此外，地址栏右方还会出现一个下载图标：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/44a00677f9104c30bec98dd3c49edf80~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>点击该图标可将应用下载到本地，并在桌面创建应用图标 —— 效果如同安装独立 App 一样。</p><blockquote><p>提示：PWA 是一种复杂度较高的技术，前文只是介绍了一种 Webpack 构建 PWA 的简单方法，感兴趣的同学可以扩展阅读：</p><ul><li>https://developer.chrome.com/docs/workbox/modules/workbox-webpack-plugin/</li><li>https://developers.google.com/web/fundamentals/primers/service-workers</li></ul></blockquote><h2 id="构建-node-应用" tabindex="-1"><a class="header-anchor" href="#构建-node-应用" aria-hidden="true">#</a> 构建 Node 应用</h2><p>注意，<strong>在开发 Node 程序时使用 Webpack 的必要性并不大</strong>，因为 Node 本身已经有完备的模块化系统，并不需要像 Web 页面那样把所有代码打包成一个（或几个）产物文件！即使是为了兼容低版本 Node 环境，也可以使用更简单的方式解决 —— 例如 Babel，引入 Webpack 反而增加了系统复杂度以及不少技术隐患。</p><p>不过，出于学习目的，我们还是可以了解一下使用 Webpack 构建 Node 程序的方法及注意事项，包括：</p>`,11),f={href:"https://webpack.js.org/configuration/target/",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"target",-1),w=n("code",null,"node",-1),q=n("code",null,"fs/path",-1),W={href:"https://webpack.js.org/configuration/externals/",target:"_blank",rel:"noopener noreferrer"},j=n("code",null,"externals",-1),x=n("code",null,"node_modules",-1),P=n("code",null,"webpack-node-externals",-1),E={href:"https://webpack.js.org/configuration/node/",target:"_blank",rel:"noopener noreferrer"},N=n("code",null,"node",-1),A=n("code",null,"__dirname",-1),S=n("code",null,"__filename",-1),M=t(`<p>一个典型的 Node 构建配置如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> nodeExternals <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;webpack-node-externals&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>WebpackBaseConfig<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token comment">// 1. 设置 target 为 node</span>
  <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&quot;node&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token operator">...</span><span class="token punctuation">,</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// 2. 过滤 node_modules 模块</span>
  <span class="token literal-property property">externals</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">nodeExternals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// 3. 设置 __dirname, __filename 值</span>
  <span class="token literal-property property">node</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">__filename</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token literal-property property">__dirname</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在此基础上，我们可以复用大多数 Loader、Plugin 及 Webpack 基础能力实现各种构建功能。</p><p>不过，需要特别注意，在 Node 代码中请务必慎用动态 <code>require</code> 语句，你很可能会得到预期之外的效果！例如对于下面的示例目录：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>├─ example
│  ├─ src
│  │  ├─ foo.js
│  │  ├─ bar.js
│  │  ├─ unused.js
│  │  └─ main.js
│  ├─ package.json
│  └─ webpack.config.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>main.js</code> 为入口文件，代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> modules <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">r</span> <span class="token operator">=&gt;</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">./</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>r<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.js</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看到在 <code>main.js</code> 中并没有引用 <code>unused.js</code> ，但打包产物中却包含了 <code>src</code> 目录下所有文件：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b9a6e1e4df514535ae1d5e641a905199~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>这是因为 Webpack 遇到示例中的 <code>require</code> 语句时，仅仅依靠词法规则、静态语义、AST 等手段并不能推断出实际依赖情况，只能退而求其次粗暴地将所有可能用到的代码一股脑合并进来，这种处理手段很可能会带来许多意想不到的结果，很可能触发 BUG！</p><p>综上，建议尽量不要使用 Webpack 构建 Node 应用。</p><h2 id="构建-electron-应用" tabindex="-1"><a class="header-anchor" href="#构建-electron-应用" aria-hidden="true">#</a> 构建 Electron 应用</h2><p>Electron 是一种使用 JavaScript、HTML、CSS 等技术构建跨平台桌面应用开发框架，这意味着我们能用我们熟悉的大部分 Web 技术 —— 例如 React、Vue、Webpack 等开发桌面级应用程序。实际上，许多大名鼎鼎的应用如 VSCode、Facebook Messenger、Twitch，以及国内诸多小程序 IDE 都是基于 Electron 实现的。</p><p>与 Web 页面不同，Electron 应用由一个 <strong>主进程</strong> 及若干 <strong>渲染进程</strong> 组成，进程之间以 IPC 方式通讯，其中：</p><ul><li>主进程是一个 Node 程序，能够使用所有 Node 能力及 Electron 提供的 Native API，主要负责应用窗口的创建与销毁、事件注册分发、版本更新等；</li><li>渲染进程本质上是一个 Chromium 实例，负责加载我们编写的页面代码，渲染成 Electron 应用界面。</li></ul><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/487e3db9d38d41728117c7951652bdb1~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><blockquote><p>提示：Chromium 是一个非常简洁的开源浏览器，许多浏览器都基于 Chromium 二次开发而成，例如 Chrome、Microsoft Edge、Opera 等。</p></blockquote><p>Electron 这种多进程机构，要求我们能在同一个项目中同时支持主进程与若干渲染进程的构建，两者打包需求各有侧重。接下来我们将通过一个简单示例，逐步讲解如何使用 Webpack 搭建一套完备的 Electron 应用构建环境，示例文件结构如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>8-3_electron-wp
├─ package.json
├─ webpack.main.config.js       // 主进程构建配置
├─ webpack.renderer.config.js   // 渲染进程构建配置
├─ src
│  ├─ main.js
│  ├─ pages
│  │  ├─ home
│  │     ├─ index.js
│  │  ├─ login
│  │     ├─ index.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19),R={href:"https://github1s.com/Tecvan-fe/webpack-book-samples/tree/main/8-3_electron-wp",target:"_blank",rel:"noopener noreferrer"},T=t(`<p>其中：</p><ul><li><code>src/main.js</code> 为主进程代码；</li><li><code>src/pages/\${page name}/</code> 目录为渲染进程 —— 即桌面应用中每一个独立页面的代码；</li><li>由于主进程、渲染进程的打包差异较大，这里为方便演示，直接写成两个配置文件：<code>webpack.main.config.js</code> 与 <code>webpack.renderer.config.js</code>。</li></ul><h3 id="electron-主进程打包配置" tabindex="-1"><a class="header-anchor" href="#electron-主进程打包配置" aria-hidden="true">#</a> Electron 主进程打包配置</h3><p>主进程负责应用窗口的创建销毁，以及许多跨进程通讯逻辑，可以理解为 Electron 应用的控制中心，简单示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// src/main.js</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> app<span class="token punctuation">,</span> BrowserWindow <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;electron&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 应用启动后</span>
app<span class="token punctuation">.</span><span class="token function">whenReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 创建渲染进程实例</span>
  <span class="token keyword">const</span> win <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">800</span><span class="token punctuation">,</span>
    <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">600</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 使用 BrowserWindow 实例打开页面</span>
  win<span class="token punctuation">.</span><span class="token function">loadFile</span><span class="token punctuation">(</span><span class="token string">&quot;home.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码核心逻辑是在应用启动后 （<code>app.whenReady</code> 钩子），创建 <code>BrowserWindow</code> 实例并打开页面。</p>`,6),H={href:"https://www.electronjs.org/zh/docs/latest/tutorial/examples",target:"_blank",rel:"noopener noreferrer"},L=n("p",null,"Electron 主进程本质上是一个 Node 程序，因此许多适用于 Node 的构建工具、方法也同样适用主进程，例如 Babel、TypeScript、ESLint 等。与普通 Node 工程相比，构建主进程时需要注意：",-1),C={href:"https://webpack.js.org/configuration/target/",target:"_blank",rel:"noopener noreferrer"},B=n("code",null,"target",-1),O=n("code",null,"electron-main",-1),D=n("code",null,"clipboard",-1),V=n("code",null,"ipc",-1),I=n("code",null,"screen",-1),J=n("code",null,"externals",-1),z=n("code",null,"node_modules",-1),F={href:"https://www.npmjs.com/package/webpack-node-externals",target:"_blank",rel:"noopener noreferrer"},G=n("li",null,[s("生产环境建议将 "),n("code",null,"devtools"),s(" 设置为 "),n("code",null,"false"),s("，减少包体积。")],-1),U=t(`<p>对应的配置脚本：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.main.config.js</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> nodeExternals <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;webpack-node-externals&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 主进程需要将 \`target\` 设置为 \`electron-main\`</span>
  <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&quot;electron-main&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">||</span> <span class="token string">&quot;development&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// 开发环境使用 \`source-map\`，保持高保真源码映射，方便调试</span>
  <span class="token literal-property property">devtool</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&quot;production&quot;</span><span class="token operator">?</span> <span class="token boolean">false</span><span class="token operator">:</span> <span class="token string">&quot;source-map&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">main</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;./src/main&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;[name].js&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;./dist&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">externals</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">nodeExternals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，一个非常简单的主进程脚本与构建环境示例就搭建完毕了，执行下述命令即可完成构建工作：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx webpack <span class="token parameter variable">-c</span> webpack.main.config.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>另外，安装 Electron 过程中可能会遇到网络超时问题，这是因为资源域已经被墙了，可以使用阿里云镜像解决：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">ELECTRON_MIRROR</span><span class="token operator">=</span><span class="token string">&quot;https://cdn.npm.taobao.org/dist/electron/&quot;</span> <span class="token function">npm</span> i <span class="token parameter variable">-D</span> electron
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="electron-渲染进程打包配置" tabindex="-1"><a class="header-anchor" href="#electron-渲染进程打包配置" aria-hidden="true">#</a> Electron 渲染进程打包配置</h3><p>Electron 渲染进程本质上就一个运行在 Chromium 浏览器上的网页，开发方法基本等同于我们日常开发的普通 Web 页面，例如我们可以用 React 开发 Electron 渲染进程：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// src/home/index.js</span>
<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">&quot;react-dom&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> root <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>Hello world<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span><span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>

document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),$={href:"https://github1s.com/Tecvan-fe/webpack-book-samples/tree/main/8-3_electron-wp",target:"_blank",rel:"noopener noreferrer"},K=t(`<p>相应的，我们可以复用大部分普通 Web 页面构建的方式方法，主要差异点：</p><ol><li>需要将 Webpack 的 <code>target</code> 配置设置为 <code>electron-renderer</code>；</li><li>Electron 应用通常包含多个渲染进程，因此我们经常需要开启多页面构建配置；</li><li>为实现渲染进程的 HMR 功能，需要对主进程代码稍作改造。</li></ol><p>第一点很简单：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.renderer.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 渲染进程需要将 \`target\` 设置为 \`electron-renderer\`</span>
  <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&quot;electron-renderer&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>提示：Webpack 为 Electron 提供了三种特殊 <code>target</code> 值：<code>electron-main/electron-renderer/electron-preload</code>，分别用于主进程、Renderer 进程、Preload 脚本三种场景。</p></blockquote><p>第二点可以用多 <code>entry</code> 配置实现，如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.renderer.config.js</span>
<span class="token comment">// 入口文件列表</span>
<span class="token keyword">const</span> entries <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">home</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;./src/pages/home&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">login</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;./src/pages/login&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 为每一个入口创建 HTMLWebpackPlugin 实例</span>
<span class="token keyword">const</span> htmlPlugins <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>entries<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token parameter">k</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>k<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">] My Awesome Electron App</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>k<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.html</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">||</span> <span class="token string">&quot;development&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> entries<span class="token punctuation">,</span>
  <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&quot;electron-renderer&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>htmlPlugins<span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第三点，由于 Webpack 的 HMR 功能强依赖于 WebSocket 实现通讯，但 Electron 主进程常用文件协议 <code>file://</code> 打开页面，该协议不支持 WebSocket 接口，为此我们需要改造主进程启动代码，以 HTTP 方式打开页面代码，如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> win <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">//...</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&quot;development&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 开发环境下，加载 http 协议的页面，方便启动 HMR</span>
    win<span class="token punctuation">.</span><span class="token function">loadURL</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost:8080/home&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 生产环境下，依然使用 \`file://\` 协议</span>
    win<span class="token punctuation">.</span><span class="token function">loadFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">getAppPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;home.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),Q={href:"https://en.wikipedia.org/wiki/File_URI_scheme",target:"_blank",rel:"noopener noreferrer"},X={href:"https://github1s.com/Tecvan-fe/webpack-book-samples/blob/main/8-3_electron-wp/src/main.js",target:"_blank",rel:"noopener noreferrer"},Y=n("h2",{id:"总结",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#总结","aria-hidden":"true"},"#"),s(" 总结")],-1),Z=n("p",null,"综上，Webpack 不仅能构建一般的 Web 应用，理论上还适用于一切以 JavaScript 为主要编程语言的场景，包括 PWA、Node 程序、Electron 等，只是不同场景下的具体构建需求略有差异：",-1),nn=n("li",null,[s("PWA：需要使用 "),n("code",null,"workbox-webpack-plugin"),s(" 自动生成 "),n("code",null,"ServiceWorker"),s(" 代码；使用 "),n("code",null,"webpack-pwa-mainifest"),s(" Manifest 文件；")],-1),sn=n("code",null,'target = "node"',-1),an={href:"https://webpack.js.org/configuration/externals/",target:"_blank",rel:"noopener noreferrer"},en=n("code",null,"node_modules",-1),tn={href:"https://webpack.js.org/configuration/node/",target:"_blank",rel:"noopener noreferrer"},pn=n("li",null,"Electron 桌面应用：需要为主进程、渲染进程分别设置不同的构建脚本；同时需要注意开发阶段使用 HMR 的注意事项。",-1),on=n("p",null,"这种强大、普适的构建能力正是 Webpack 的核心优势之一，同类工具无出其右者，虽然不能一招鲜吃天下，但也足够覆盖大多数前端应用场景。站在学习的角度，你可以将主要精力放在 Webpack 基础构建逻辑、配置规则、常用组件上，遇到特殊场景时再灵活查找相应 Loader、Plugin 以及其它生态工具，就可以搭建出适用的工程化环境。",-1),cn=n("h2",{id:"思考题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#思考题","aria-hidden":"true"},"#"),s(" 思考题")],-1),ln=n("p",null,"作为对比，调研一下同类框架：Rollup、Parcel、Gulp 等，能否被用于构建 PWA、Node、Electron、微前端、小程序等应用？",-1);function rn(un,dn){const a=o("ExternalLinkIcon");return c(),l("div",null,[n("p",null,[s("毋庸置疑，对前端开发者而言，当下正是一个日升月恒的美好时代！在久远的过去，Web 页面的开发技术链条非常原始而粗糙，那时候的 JavaScript 更多用来点缀 Web 页面交互而不是用来构建一个完整的应用。直到 2009年5月 "),n("a",r,[s("Ryan Dahl"),e(a)]),s(" 正式发布 NodeJS，JavaScript 终于有机会脱离 Web 浏览器独立运行，随之而来的是，基于 JavaScript 构建应用程序的能力被扩展到越来越多场景，我们得以用相同的语言、技术栈、工具独立开发桌面端、服务端、命令行、微前端、PWA 等应用形态。")]),u,n("ul",null,[n("li",null,[n("a",d,[s("ServiceWorker"),e(a)]),s("： 可以理解为一种介于网页与服务器之间的本地代理，主要实现 PWA 应用的离线运行功能。例如 "),k,s(" 可以将页面静态资源缓存到本地，用户再次运行页面访问这些资源时，"),v,s(" 可拦截这些请求并直接返回缓存副本，即使此时用户处于离线状态也能正常使用页面；")])]),m,n("ul",null,[n("li",null,[n("a",b,[s("manifest"),e(a)]),s(" 文件：描述 PWA 应用信息的 JSON 格式文件，用于实现本地安装功能，通常包含应用名、图标、URL 等内容，例如：")])]),g,n("blockquote",null,[n("p",null,[s("提示：示例代码已上传到 "),n("a",h,[s("小册仓库"),e(a)]),s("。")])]),_,n("ol",null,[n("li",null,[s("需要 Webpack 的 "),n("a",f,[y,e(a)]),s(" 值设置为 "),w,s(" ，这能让 Webpack 忽略 "),q,s(" 等原生 Node 模块；")]),n("li",null,[s("需要使用 "),n("a",W,[j,e(a)]),s(" 属性过滤 "),x,s(" 模块，简单起见，也可以直接使用 "),P,s(" 库；")]),n("li",null,[s("需要使用 "),n("a",E,[N,e(a)]),s(" 属性，正确处理 "),A,s("、"),S,s(" 值。")])]),M,n("blockquote",null,[n("p",null,[s("提示：示例代码已上传到 "),n("a",R,[s("小册仓库"),e(a)]),s("。")])]),T,n("blockquote",null,[n("p",null,[s("提示：建议结合 Electron 官方提供的 "),n("a",H,[s("完整示例"),e(a)]),s(" 一起学习。")])]),L,n("ul",null,[n("li",null,[s("需要将 "),n("a",C,[B,e(a)]),s(" 设置为 "),O,s(" ，Webpack 会自动帮我们过滤掉一些 Electron 组件，如 "),D,s("、"),V,s("、"),I,s(" 等；")]),n("li",null,[s("需要使用 "),J,s(" 属性排除 "),z,s(" 模块，简单起见也可以直接使用 "),n("a",F,[s("webpack-node-externals"),e(a)]),s(" 包；")]),G]),U,n("blockquote",null,[n("p",null,[s("提示：示例代码已上传到 "),n("a",$,[s("小册仓库"),e(a)]),s("。")])]),K,n("blockquote",null,[n("p",null,[s("提示：在生产环境中，出于性能考虑，Electron 主进程通常会以 "),n("a",Q,[s("File URL Scheme"),e(a)]),s(" 方式直接加载本地 HTML 文件，这样我们就不必为了提供 HTML 内容而专门启动一个 HTTP 服务进程。不过，同一份代码，用 File URL Scheme 和用 HTTP 方式打开，浏览器提供的接口差异较大，开发时注意区分测试接口兼容性。")])]),n("p",null,[s("至此，改造完毕，同学们可以 Clone "),n("a",X,[s("示例代码"),e(a)]),s("，本地运行测试效果。")]),Y,Z,n("ul",null,[nn,n("li",null,[s("Node 程序：需要设置 Webpack 配置项 "),sn,s("；需要使用 "),n("a",an,[s("externals"),e(a)]),s(" 属性过滤 "),en,s(" 模块；需要使用 "),n("a",tn,[s("node"),e(a)]),s(" 属性正确处理 Node 全局变量；")]),pn]),on,cn,ln])}const vn=p(i,[["render",rn],["__file","di09zhang—ruhejiezhuWebpackkaifaPWA、Node、Electronyingyong.html.vue"]]);export{vn as default};
