import{_ as p,r as o,o as i,c as l,b as n,e,d as a,a as t}from"./app-48690364.js";const c={},r=t(`<p>上一节我们聊到如何用结构化思维理解 Webpack 核心配置项，按惯例很多教程接下来会开始罗列各个配置项的作用，但这种方式记忆成本比较高，学习效率偏低。为此，接下来几章我会换一种思维模式，场景化介绍 Webpack 处理各种代码资源的工具与方法。</p><p>本章我们先来聊聊 Webpack 场景下处理 JavaScript 的三种常用工具：Babel、TypeScript、ESLint 的历史背景、功能以及接入 Webpack 的步骤，借助这些工具，我们能构建出更健壮、优雅的 JavaScript 应用。</p><h2 id="使用-babel" tabindex="-1"><a class="header-anchor" href="#使用-babel" aria-hidden="true">#</a> 使用 Babel</h2><p>ECMAScript 6.0(简称 ES6) 版本补充了大量提升 JavaScript 开发效率的新特性，包括 <code>class</code> 关键字、块级作用域、ES Module 方案、代理与反射等，使得 JavaScript 可以真正被用于编写复杂的大型应用程序，但直到现在浏览器、Node 等 JavaScript 引擎都或多或少存在兼容性问题。为此，现代 Web 开发流程中通常会引入 Babel 等转译工具。</p><p>Babel 是一个开源 JavaScript 转编译器，它能将高版本 —— 如 ES6 代码等价转译为向后兼容，能直接在旧版 JavaScript 引擎运行的低版本代码，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 使用 Babel 转译前</span>
arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>

<span class="token comment">// 转译后</span>
arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> item <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例中高版本的箭头函数语法经过 Babel 处理后被转译为低版本 <code>function</code> 语法，从而能在不支持箭头函数的 JavaScript 引擎中正确执行。借助 Babel 我们既可以始终使用最新版本 ECMAScript 语法编写 Web 应用，又能确保产物在各种环境下正常运行。</p><blockquote><p>提示：Babel 还提供了一个在线版的 REPL 页面，读者可在 https://babeljs.io/repl 实时体验功能效果。</p></blockquote><p>Webpack 场景下，只需使用 <code>babel-loader</code> 即可接入 Babel 转译功能：</p><ol><li>安装依赖</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i <span class="token parameter variable">-D</span> @babel/core @babel/preset-env babel-loader
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>添加模块处理规则</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">/* ... */</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;babel-loader&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例中，<code>module</code> 属性用于声明模块处理规则，<code>module.rules</code> 子属性则用于定义针对什么类型的文件使用哪些 Loader 处理器，上例可解读为：</p><ul><li><code>test: /\\.js$/</code>：用于声明该规则的过滤条件，只有路径名命中该正则的文件才会应用这条规则，示例中的 <code>/\\.js$/</code> 表示对所有 <code>.js</code> 后缀的文件生效</li><li><code>use</code>：用于声明这条规则的 Loader 处理器序列，所有命中该规则的文件都会被传入 Loader 序列做转译处理</li></ul><ol start="3"><li>执行编译命令</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npx webpack
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接入后，可以使用 <code>.babelrc</code> 文件或 <code>rule.options</code> 属性配置 Babel 功能逻辑，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 预先安装 @babel/preset-env</span>
<span class="token comment">// npm i -D @babel/preset-env</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">/* ... */</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token punctuation">{</span>
            <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;babel-loader&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
              <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;@babel/preset-env&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>特别提一下，示例中的 <code>@babel/preset-env</code> 是一种 Babel 预设规则集 —— Preset，这种设计能按需将一系列复杂、数量庞大的配置、插件、Polyfill 等打包成一个单一的资源包，从而简化 Babel 的应用、学习成本。Preset 是 Babel 的主要应用方式之一，社区已经针对不同应用场景打包了各种 Preset 资源，例如：</p>`,20),d={href:"https://www.npmjs.com/package/babel-preset-react",target:"_blank",rel:"noopener noreferrer"},u=n("code",null,"babel-preset-react",-1),v=n("code",null,"preset-flow",-1),k=n("code",null,"syntax-jsx",-1),b=n("code",null,"transform-react-jsx",-1),m={href:"https://babeljs.io/docs/en/babel-preset-typescript",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"@babel/preset-typescript",-1),h={href:"https://babeljs.io/docs/en/babel-preset-flow/",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"@babel/preset-flow",-1),x={href:"https://flow.org/en/docs/getting-started/",target:"_blank",rel:"noopener noreferrer"},q=t(`<blockquote><p>提示：关于 Babel 的功能、用法、原理还有非常大的学习空间，感兴趣的同学可以前往阅读官方文档：https://babeljs.io/docs/en/ ，这里点到为止，把注意力放回 Webpack + Babel 协作上。</p></blockquote><h2 id="使用-typescript" tabindex="-1"><a class="header-anchor" href="#使用-typescript" aria-hidden="true">#</a> 使用 TypeScript</h2><p>从 1999年 ECMAScript 发布第二个版本到 2015年发布 ES6 之间十余年时间内，JavaScript 语言本身并没有发生太大变化，语言本身许多老旧特性、不合理设计、功能缺失已经很难满足日益复杂的 Web 应用场景。为了解决这一问题，社区陆续推出了一些 JavaScript 超集方言，例如 TypeScript、CoffeeScript、Flow。</p><p>其中，TypeScript 借鉴 C# 语言，在 JavaScript 基础上提供了一系列类型约束特性，例如：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d453fe2d92294004971422a2001204d0~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>示例中，用一个数字类型的变量 <code>num</code> 减去字符串类型的变量 <code>str</code>，这在 TypeScript 的代码编译过程就能提前发现问题，而 JavaScript 环境下则需要到启动运行后才报错。这种类型检查特性虽然一定程度上损失了语言本身的灵活性，但能够让问题在编译阶段提前暴露，确保运行阶段的类型安全性，<strong>特别适合用于构建多人协作的大型 JavaScript 项目</strong>，也因此，时至今日 TypeScript 依然是一项应用广泛的 JavaScript 超集语言。</p><p>Webpack 有很多种接入 TypeScript 的方法，包括 <code>ts-loader</code>、<code>awesome-ts-loader</code>、 <code>babel-loader</code>。通常可使用 <code>ts-loader</code> 构建 TypeScript 代码：</p><ol><li>安装依赖</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i <span class="token parameter variable">-D</span> typescript ts-loader
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>配置 Webpack</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">/* xxx */</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.ts$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token string">&#39;ts-loader&#39;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;.ts&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.js&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用 <code>module.rules</code> 声明对所有符合 <code>/\\.ts$/</code> 正则 —— 即 <code>.ts</code> 结尾的文件应用 <code>ts-loader</code> 加载器</li><li>使用 <code>resolve.extensions</code> 声明自动解析 <code>.ts</code> 后缀文件，这意味着代码如 <code>import &quot;./a.ts&quot;</code> 可以忽略后缀声明，简化为 <code>import &quot;./a&quot;</code> 文件</li></ul><ol start="3"><li>创建 <code>tsconfig.json</code> 配置文件，并补充 TypeScript 配置信息</li></ol><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// tsconfig.json</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;noImplicitAny&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">&quot;moduleResolution&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>执行编译命令</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npx webpack
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,16),f=n("code",null,"babel-loader",-1),w={href:"https://babeljs.io/docs/en/babel-preset-typescript",target:"_blank",rel:"noopener noreferrer"},j=n("code",null,"@babel/preset-typescript",-1),_=n("code",null,"babel-loader",-1),S=t(`<ol><li>安装依赖</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm i -D @babel/preset-typescript
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>配置 Webpack</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 预先安装 @babel/preset-env</span>
<span class="token comment">// npm i -D @babel/preset-env</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">/* ... */</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token punctuation">{</span>
            <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;babel-loader&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
              <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;@babel/preset-typescript&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过，<code>@babel/preset-typescript</code> 只是简单完成代码转换，并未做类似 <code>ts-loader</code> 的类型检查工作，大家需要根据实际场景选择适当工具。</p><h2 id="使用-eslint" tabindex="-1"><a class="header-anchor" href="#使用-eslint" aria-hidden="true">#</a> 使用 ESLint</h2><p>JavaScript 被设计成一种高度灵活的动态、弱类型脚本语言，这使得语言本身的上手成本极低，开发者只需要经过短暂学习就可以开始构建简单应用。但与其它编译语言相比，JavaScript 很难在编译过程发现语法、类型，或其它可能影响稳定性的错误，特别在多人协作的复杂项目下，语言本身的弱约束可能会开发效率与质量产生不小的影响，ESLint 的出现正是为了解决这一问题。</p><p>ESLint 是一种扩展性极佳的 JavaScript 代码风格检查工具，它能够自动识别违反风格规则的代码并予以修复，例如对于下面的示例：</p><table class="ace-table author-6857319138482798593" data-ace-table-col-widths="372;375;"><colgroup><col width="372"><col width="375"></colgroup><tbody><tr><td style="border:1px solid rgb(222, 224, 227);"><div data-zone-id="xr11bc0ku9sh6lh9ry92k08hni8zy1903ikxc1s1pf3os90dwwr48mdhsjd0e4rb6psdnj" data-line-index="0" style="white-space:pre;">源码</div></td><td style="border:1px solid rgb(222, 224, 227);"><div data-zone-id="xr11bc0ku9sh6lh9ry92k08hni8zy1903ikxc1cg2m4jqk5aszatec48gw6f6m1ih1h9fh" data-line-index="0" style="white-space:pre;">ESLint 修复后</div></td></tr><tr><td style="border:1px solid rgb(222, 224, 227);"><div data-zone-id="xr1110s4996ow6ydr89grlfc6yaqbr8m8crxc1s1pf3os90dwwr48mdhsjd0e4rb6psdnj" data-line-index="0" style="white-space:pre;"><pre class="language-JavaScript" data-wrap="false"><code><div data-zone-id="fhox7qq5dz" data-line-index="0" style="white-space:pre;">const foo =&#39;foo&#39;;
</div><div data-zone-id="fhox7qq5dz" data-line-index="1" style="white-space:pre;">let  bar=&#39;bar&#39;;
</div><div data-zone-id="fhox7qq5dz" data-line-index="2" style="white-space:pre;">
</div><div data-zone-id="fhox7qq5dz" data-line-index="3" style="white-space:pre;">console.log(foo,bar)
</div></code></pre></div></td><td style="border:1px solid rgb(222, 224, 227);"><div data-zone-id="xr1110s4996ow6ydr89grlfc6yaqbr8m8crxc1cg2m4jqk5aszatec48gw6f6m1ih1h9fh" data-line-index="0" style="white-space:pre;"><pre class="language-JavaScript" data-wrap="false"><code><div data-zone-id="7hvhhudakt" data-line-index="0" style="white-space:pre;">const foo = &#39;foo&#39;
</div><div data-zone-id="7hvhhudakt" data-line-index="1" style="white-space:pre;">const bar = &#39;bar&#39;
</div><div data-zone-id="7hvhhudakt" data-line-index="2" style="white-space:pre;">
</div><div data-zone-id="7hvhhudakt" data-line-index="3" style="white-space:pre;">console.log(foo, bar)
</div></code></pre></div></td></tr><tr><td colspan="2" style="border:1px solid rgb(222, 224, 227);"><div data-zone-id="xr1nnmgk2u2qvgzu5y1jwgiknwmcv8zcq5qxc1s1pf3os90dwwr48mdhsjd0e4rb6psdnj" data-line-index="0" style="white-space:pre;"><div style="text-align:left;">ESLint 配置：</div></div><div data-zone-id="xr1nnmgk2u2qvgzu5y1jwgiknwmcv8zcq5qxc1s1pf3os90dwwr48mdhsjd0e4rb6psdnj" data-line-index="1" style="white-space:pre;"><pre class="language-JavaScript" data-wrap="false"><code><div data-zone-id="8d0y5twmoj" data-line-index="0" style="white-space:pre;">module.exports = {
</div><div data-zone-id="8d0y5twmoj" data-line-index="1" style="white-space:pre;">    &quot;extends&quot;: &quot;standard&quot;
</div><div data-zone-id="8d0y5twmoj" data-line-index="2" style="white-space:pre;">}
</div></code></pre></div></td></tr><tr><td colspan="2" style="border:1px solid rgb(222, 224, 227);"><div data-zone-id="xr1hob4b3s2cuj33ak6lzgs0mofqelyvgq6xc1s1pf3os90dwwr48mdhsjd0e4rb6psdnj" data-line-index="0" style="white-space:pre;"><div style="text-align:left;">ESLint 报错：</div></div><div data-zone-id="xr1hob4b3s2cuj33ak6lzgs0mofqelyvgq6xc1s1pf3os90dwwr48mdhsjd0e4rb6psdnj" data-line-index="1" style="white-space:pre;"><div style="text-align:left;"><div class="image-uploaded gallery" data-ace-gallery-json="{&quot;items&quot;:[{&quot;uuid&quot;:&quot;fa33b732-b14f-4f58-9e8a-6b28e55769cd&quot;,&quot;height&quot;:&quot;394&quot;,&quot;width&quot;:&quot;1150&quot;,&quot;currHeight&quot;:&quot;394&quot;,&quot;currWidth&quot;:&quot;1150&quot;,&quot;natrualHeight&quot;:&quot;394&quot;,&quot;natrualWidth&quot;:&quot;1150&quot;,&quot;file_token&quot;:&quot;boxcnsdRlNkfO4H8mNhvxlNgGxg&quot;,&quot;src&quot;:&quot;https%3A%2F%2Finternal-api-drive-stream.feishu.cn%2Fspace%2Fapi%2Fbox%2Fstream%2Fdownload%2Fall%2FboxcnsdRlNkfO4H8mNhvxlNgGxg%2F%3Fmount_node_token%3Ddoccnai10fVBMlxVATPV4OndU3d%26mount_point%3Ddoc_image&quot;,&quot;image_type&quot;:&quot;image/png&quot;,&quot;size&quot;:100021,&quot;comments&quot;:[],&quot;pluginName&quot;:&quot;imageUpload&quot;,&quot;scale&quot;:2.918781725888325}]}"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c8f12f682beb4d9288eeb7c3cf107835~tplv-k3u1fbpfcp-zoom-1.image" data-src="https://internal-api-drive-stream.feishu.cn/space/api/box/stream/download/all/boxcnsdRlNkfO4H8mNhvxlNgGxg/?mount_node_token=doccnai10fVBMlxVATPV4OndU3d&amp;mount_point=doc_image" data-suite="eyJmaWxlVG9rZW4iOiJib3hjbnNkUmxOa2ZPNEg4bU5odnhsTmdHeGciLCJvYmpUeXBlIjoiZG9jIiwib2JqVG9rZW4iOiJkb2NjbmFpMTBmVkJNbHhWQVRQVjRPbmRVM2QiLCJvcmlnaW5TcmMiOiJodHRwczovL2ludGVybmFsLWFwaS1kcml2ZS1zdHJlYW0uZmVpc2h1LmNuL3NwYWNlL2FwaS9ib3gvc3RyZWFtL2Rvd25sb2FkL2FsbC9ib3hjbnNkUmxOa2ZPNEg4bU5odnhsTmdHeGcvP21vdW50X25vZGVfdG9rZW49ZG9jY25haTEwZlZCTWx4VkFUUFY0T25kVTNkJm1vdW50X3BvaW50PWRvY19pbWFnZSJ9" data-height="394" data-width="1150"></div></div></div></td></tr></tbody></table><p>这里先忽略 ESLint 配置的具体规则，样例源码存在诸多风格不统一的地方，例如 1、2 行以 <code>;</code> 结尾，而第 3 行没有 <code>;</code>；第一行变量以 <code>const</code> 声明，第二行变量以 <code>let</code> 声明，等等。ESLint 会找出这些风格不一致的地方，并予以告警，甚至自动修复，生成如上表右上角的代码。</p><p>Webpack 下，可以使用 <code>eslint-webpack-plugin</code> 接入 ESLint 工具，步骤：</p><ol><li>安装依赖</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 安装 webpack 依赖</span>
<span class="token function">yarn</span> <span class="token function">add</span> <span class="token parameter variable">-D</span> webpack webpack-cli

<span class="token comment"># 安装 eslint </span>
<span class="token function">yarn</span> <span class="token function">add</span> <span class="token parameter variable">-D</span> eslint eslint-webpack-plugin

<span class="token comment"># 简单起见，这里直接使用 standard 规范</span>
<span class="token function">yarn</span> <span class="token function">add</span> <span class="token parameter variable">-D</span> eslint-config-standard eslint-plugin-promise eslint-plugin-import eslint-plugin-node eslint-plugin-n
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>在项目根目录添加 <code>.eslintrc</code> 配置文件，内容：</li></ol><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// .eslintrc</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;extends&quot;</span><span class="token operator">:</span> <span class="token string">&quot;standard&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>提示：关于 ESLint 配置项的更多信息，可参考：https://eslint.org/docs/user-guide/configuring/</p></blockquote><ol start="3"><li>添加 <code>webpack.config.js</code> 配置文件，补充 <code>eslint-webpack-plugin</code> 配置：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> ESLintPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;eslint-webpack-plugin&#39;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./src/index&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;[name].js&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 添加 eslint-webpack-plugin 插件实例</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">ESLintPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>执行编译命令</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npx webpack
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>配置完毕后，就可以在 Webpack 编译过程实时看到代码风格错误提示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d6910d770c114cd89a1d3e8a1c426e77~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>除常规 JavaScript 代码风格检查外，我们还可以使用适当的 ESLint 插件、配置集实现更丰富的检查、格式化功能，这里推荐几种使用率较高第三方扩展，建议读者跟进学习：</p>`,23),z={href:"https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb",target:"_blank",rel:"noopener noreferrer"},W=n("code",null,"eslint-config-airbnb",-1),F={href:"https://github.com/standard/eslint-config-standard",target:"_blank",rel:"noopener noreferrer"},L=n("code",null,"eslint-config-standard",-1),J={href:"https://standardjs.com/",target:"_blank",rel:"noopener noreferrer"},T={href:"https://eslint.vuejs.org/",target:"_blank",rel:"noopener noreferrer"},E=n("code",null,"eslint-plugin-vue",-1),V={href:"https://www.npmjs.com/package/eslint-plugin-react",target:"_blank",rel:"noopener noreferrer"},B=n("code",null,"eslint-plugin-react",-1),N={href:"https://typescript-eslint.io/docs/development/architecture/packages/",target:"_blank",rel:"noopener noreferrer"},P=n("code",null,"@typescript-eslint/eslint-plugin",-1),Z={href:"https://github.com/SonarSource/eslint-plugin-sonarjs",target:"_blank",rel:"noopener noreferrer"},R=n("code",null,"eslint-plugin-sonarjs",-1),M=n("code",null,"Sonar",-1),U=t(`<h2 id="综合示例" tabindex="-1"><a class="header-anchor" href="#综合示例" aria-hidden="true">#</a> 综合示例</h2><p>最后，我们再串联上述三种工具，构建一套功能完备的 JavaScript 应用开发环境，步骤：</p><ol><li>安装基础依赖：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i <span class="token parameter variable">-D</span> webpack webpack-cli <span class="token punctuation">\\</span>
    <span class="token comment"># babel 依赖</span>
    @babel/core @babel/cli @babel/preset-env babel-loader <span class="token punctuation">\\</span>
    <span class="token comment"># TypeScript 依赖</span>
    typescript @typescript-eslint/parser @typescript-eslint/eslint-plugin <span class="token punctuation">\\</span>
    @babel/preset-typescript <span class="token punctuation">\\</span>
    <span class="token comment"># ESLint 依赖</span>
    eslint eslint-webpack-plugin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>创建 <code>webpack.config.js</code> 配置文件并输入：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> ESLintPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;eslint-webpack-plugin&#39;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.ts&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;[name].js&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.ts$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;babel-loader&#39;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;@babel/preset-typescript&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">ESLintPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;.js&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.ts&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，此处使用 <code>@babel/preset-typescript</code> 插件转译 TypeScript 代码。</p><ol start="3"><li>创建 <code>.eslintrc</code> 文件并输入：</li></ol><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;parser&quot;</span><span class="token operator">:</span> <span class="token string">&quot;@typescript-eslint/parser&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;@typescript-eslint&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;extends&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;plugin:@typescript-eslint/recommended&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后只需执行 <code>npx webpack</code> 命令即可完成编译操作，例如：</p><table class="ace-table author-6857319138482798593" data-ace-table-col-widths="350;382;"><colgroup><col width="350"><col width="382"></colgroup><tbody><tr><td style="border:1px solid rgb(222, 224, 227);"><div data-zone-id="xr1pih12udq15ttvtse7tqrjyjbt9zbafjaxc11y2t11hispf45f9u71h35bhpjlp1ub8i" data-line-index="0" style="white-space:pre;"><code style="font-family:SourceCodeProMac;border:1px solid #dee0e3;background-color:#f5f6f7;border-radius:4px;margin-left:2px;margin-right:2px;">src/index.ts</code> 源码</div></td><td style="border:1px solid rgb(222, 224, 227);"><div data-zone-id="xr1pih12udq15ttvtse7tqrjyjbt9zbafjaxc1ujqpa7fbr9011v3d767350266rqz4q6n" data-line-index="0" style="white-space:pre;">编译结果</div></td></tr><tr><td style="border:1px solid rgb(222, 224, 227);"><div data-zone-id="xr1h38heidb04sih3jas5vgya4rs1q1ceiqxc11y2t11hispf45f9u71h35bhpjlp1ub8i" data-line-index="0" style="white-space:pre;"><pre class="language-JavaScript" data-wrap="false"><code><div data-zone-id="z5dktmzck3" data-line-index="0" style="white-space:pre;">const say = (statements: string) =&gt; {
</div><div data-zone-id="z5dktmzck3" data-line-index="1" style="white-space:pre;">    console.log(statements)
</div><div data-zone-id="z5dktmzck3" data-line-index="2" style="white-space:pre;">};
</div><div data-zone-id="z5dktmzck3" data-line-index="3" style="white-space:pre;">
</div><div data-zone-id="z5dktmzck3" data-line-index="4" style="white-space:pre;">// @ts-ignore
</div><div data-zone-id="z5dktmzck3" data-line-index="5" style="white-space:pre;">say(&quot;Tecvan&quot;);
</div></code></pre></div></td><td style="border:1px solid rgb(222, 224, 227);"><div data-zone-id="xr1h38heidb04sih3jas5vgya4rs1q1ceiqxc1ujqpa7fbr9011v3d767350266rqz4q6n" data-line-index="0" style="white-space:pre;"><pre class="language-JavaScript" data-wrap="false"><code><div data-zone-id="aykylgfgmw" data-line-index="0" style="white-space:pre;">/******/ (() =&gt; { // webpackBootstrap
</div><div data-zone-id="aykylgfgmw" data-line-index="1" style="white-space:pre;">var __webpack_exports__ = {};
</div><div data-zone-id="aykylgfgmw" data-line-index="2" style="white-space:pre;">/*!**********************!*\\
</div><div data-zone-id="aykylgfgmw" data-line-index="3" style="white-space:pre;">  !*** ./src/index.ts ***!
</div><div data-zone-id="aykylgfgmw" data-line-index="4" style="white-space:pre;">  \\**********************/
</div><div data-zone-id="aykylgfgmw" data-line-index="5" style="white-space:pre;">const say = statements =&gt; {
</div><div data-zone-id="aykylgfgmw" data-line-index="6" style="white-space:pre;">  console.log(statements);
</div><div data-zone-id="aykylgfgmw" data-line-index="7" style="white-space:pre;">}; // @ts-ignore
</div><div data-zone-id="aykylgfgmw" data-line-index="8" style="white-space:pre;">
</div><div data-zone-id="aykylgfgmw" data-line-index="9" style="white-space:pre;">
</div><div data-zone-id="aykylgfgmw" data-line-index="10" style="white-space:pre;">say(&quot;Tecvan&quot;);
</div><div data-zone-id="aykylgfgmw" data-line-index="11" style="white-space:pre;">/******/ })()
</div><div data-zone-id="aykylgfgmw" data-line-index="12" style="white-space:pre;">;
</div></code></pre></div></td></tr><tr><td colspan="2" style="border:1px solid rgb(222, 224, 227);"><div data-zone-id="xr1samm0jatowksf5kyeom0muviwe06icqhxc11y2t11hispf45f9u71h35bhpjlp1ub8i" data-line-index="0" style="white-space:pre;"><div style="text-align:left;"><div class="image-uploaded gallery" data-ace-gallery-json="{&quot;items&quot;:[{&quot;uuid&quot;:&quot;b23c3c15-75dc-4903-8e48-7affd7e7b22a&quot;,&quot;height&quot;:&quot;410&quot;,&quot;width&quot;:&quot;1582&quot;,&quot;currHeight&quot;:&quot;410&quot;,&quot;currWidth&quot;:&quot;1582&quot;,&quot;natrualHeight&quot;:&quot;410&quot;,&quot;natrualWidth&quot;:&quot;1582&quot;,&quot;file_token&quot;:&quot;boxcn9PlOTlvVEa1NqT0PLFQVqb&quot;,&quot;src&quot;:&quot;https%3A%2F%2Finternal-api-drive-stream.feishu.cn%2Fspace%2Fapi%2Fbox%2Fstream%2Fdownload%2Fall%2Fboxcn9PlOTlvVEa1NqT0PLFQVqb%2F%3Fmount_node_token%3Ddoccnai10fVBMlxVATPV4OndU3d%26mount_point%3Ddoc_image&quot;,&quot;image_type&quot;:&quot;image/png&quot;,&quot;size&quot;:92366,&quot;comments&quot;:[],&quot;pluginName&quot;:&quot;imageUpload&quot;,&quot;scale&quot;:3.8585365853658535}]}"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dd3bd994134743a9a30200da59b47606~tplv-k3u1fbpfcp-zoom-1.image" data-src="https://internal-api-drive-stream.feishu.cn/space/api/box/stream/download/all/boxcn9PlOTlvVEa1NqT0PLFQVqb/?mount_node_token=doccnai10fVBMlxVATPV4OndU3d&amp;mount_point=doc_image" data-suite="eyJmaWxlVG9rZW4iOiJib3hjbjlQbE9UbHZWRWExTnFUMFBMRlFWcWIiLCJvYmpUeXBlIjoiZG9jIiwib2JqVG9rZW4iOiJkb2NjbmFpMTBmVkJNbHhWQVRQVjRPbmRVM2QiLCJvcmlnaW5TcmMiOiJodHRwczovL2ludGVybmFsLWFwaS1kcml2ZS1zdHJlYW0uZmVpc2h1LmNuL3NwYWNlL2FwaS9ib3gvc3RyZWFtL2Rvd25sb2FkL2FsbC9ib3hjbjlQbE9UbHZWRWExTnFUMFBMRlFWcWIvP21vdW50X25vZGVfdG9rZW49ZG9jY25haTEwZlZCTWx4VkFUUFY0T25kVTNkJm1vdW50X3BvaW50PWRvY19pbWFnZSJ9" data-height="410" data-width="1582"></div></div></div></td></tr></tbody></table><p>至此，我们就搭建了一个支持 Babel + TypeScript + ESLint 的开发环境，读者可在此基础上修改各项工具配置，定制适合自己项目的开发环境。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>本文介绍了 ESLint、TypeScript、Babel 三类工程化工具的历史背景、功能，以及在 Webpack 中接入这些工具的具体步骤。这三种工具各自补齐了 JavaScript 语言某些薄弱环节：</p><ul><li>Babel 提供的语言转译能力，能在确保产物兼容性的同时，让我们大胆使用各种新的 ECMAScript 语言特性；</li><li>TypeScript 提供的类型检查能力，能有效提升应用代码的健壮性；</li><li>ESLint 提供的风格检查能力，能确保多人协作时的代码一致性。</li></ul><p>它们已成为构建现代 JavaScript 应用的基础设施，建议读者遵循文章提及的学习建议，扩展学习各个工具的功能细节。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题" aria-hidden="true">#</a> 思考题</h2><p>ESLint、TypeScript、Babel 三种工具都分别提供了独立 CLI 形态的使用方法，为何还需要被接入到 Webpack 工作流程中？这种做法有什么收益？</p>`,18);function G(O,C){const s=o("ExternalLinkIcon");return i(),l("div",null,[r,n("ul",null,[n("li",null,[n("a",d,[u,e(s)]),a("：包含 React 常用插件的规则集，支持 "),v,a("、"),k,a("、"),b,a(" 等；")]),n("li",null,[n("a",m,[g,e(s)]),a("：用于转译 TypeScript 代码的规则集")]),n("li",null,[n("a",h,[y,e(s)]),a("：用于转译 "),n("a",x,[a("Flow"),e(s)]),a(" 代码的规则集")])]),q,n("p",null,[a("注意，如果项目中已经使用 "),f,a("，你也可以选择使用 "),n("a",w,[j,e(s)]),a(" 规则集，借助 "),_,a(" 完成 JavaScript 与 TypeScript 的转码工作：")]),S,n("ul",null,[n("li",null,[n("a",z,[W,e(s)]),a("：Airbnb 提供的代码风格规则集，算得上 ESLint 生态第一个成名的规则集合")]),n("li",null,[n("a",F,[L,e(s)]),a("："),n("a",J,[a("Standard.js"),e(s)]),a(" 代码风格规则集，史上最便捷的统一代码风格的方式")]),n("li",null,[n("a",T,[E,e(s)]),a("：实现对 Vue SFC 文件的代码风格检查")]),n("li",null,[n("a",V,[B,e(s)]),a("：实现对 React 代码风格检查")]),n("li",null,[n("a",N,[P,e(s)]),a("：实现对 TypeScript 代码风格检查")]),n("li",null,[n("a",Z,[R,e(s)]),a("：基于 "),M,a(" 的代码质量检查工具，提供圈复杂度、代码重复率等检测功能")])]),U])}const D=p(c,[["render",G],["__file","di03zhang—ruhejiezhuBabel_TS_ESLintgoujianxiandaiJSgongchenghuanjing.html.vue"]]);export{D as default};
