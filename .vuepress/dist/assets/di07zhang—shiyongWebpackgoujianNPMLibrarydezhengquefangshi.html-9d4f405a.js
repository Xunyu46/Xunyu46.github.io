import{_ as p,r as o,o as c,c as l,b as n,d as s,e,a as t}from"./app-48690364.js";const i={},u=t(`<p>虽然 Webpack 多数情况下被用于构建 Web 应用，但与 Rollup、Snowpack 等工具类似，Webpack 同样具有完备的构建 NPM 库的能力。与一般场景相比，构建 NPM 库时需要注意：</p><ul><li>正确导出模块内容；</li><li>不要将第三方包打包进产物中，以免与业务方环境发生冲突；</li><li>将 CSS 抽离为独立文件，以方便用户自行决定实际用法；</li><li>始终生成 Sourcemap 文件，方便用户调试。</li></ul><p>本文将从最基础的 NPM 库构建需求开始，逐步叠加上述特性，最终搭建出一套能满足多数应用场景、功能完备的 NPM 库构建环境。</p><h2 id="开发一个-npm-库" tabindex="-1"><a class="header-anchor" href="#开发一个-npm-库" aria-hidden="true">#</a> 开发一个 NPM 库</h2><p>为方便讲解，假定我们正在开发一个全新的 NPM 库，暂且叫它 <code>test-lib</code> 吧，首先需要创建并初始化项目：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> test-lib <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> test-lib
<span class="token function">npm</span> init <span class="token parameter variable">-y</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然有很多构建工具能够满足 NPM 库的开发需求，但现在暂且选择 Webpack，所以需要先装好基础依赖：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> <span class="token parameter variable">-D</span> webpack webpack-cli
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来，可以开始写一些代码了，首先创建代码文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> src
<span class="token function">touch</span> src/index.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>之后，在 <code>test-lib/src/index.js</code> 文件中随便实现一些功能，比如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// test-lib/src/index.js</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，项目搭建完毕，目录如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>├─ test-lib
│  ├─ package.json
│  ├─ src
│  │  ├─ index.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),r={href:"https://github.com/Tecvan-fe/webpack-book-samples/tree/main/6-1_test-lib",target:"_blank",rel:"noopener noreferrer"},d=t(`<h2 id="使用-webpack-构建-npm-库" tabindex="-1"><a class="header-anchor" href="#使用-webpack-构建-npm-库" aria-hidden="true">#</a> 使用 Webpack 构建 NPM 库</h2><p>接下来，我们需要将上例 <code>test-lib</code> 构建为适合分发的产物形态。虽然 NPM 库与普通 Web 应用在形态上有些区别，但大体的编译需求趋同，因此可以复用前面章节介绍过的大多数知识点。例如 <code>test-lib</code> 所需要的基础编译配置如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&quot;development&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&quot;./src/index.js&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;[name].js&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;./dist&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>提示：我们还可以在上例基础上叠加任意 Loader、Plugin，例如： <code>babel-loader</code>、<code>eslint-loader</code>、<code>ts-loader</code> 等。</p></blockquote><p>上述配置会将代码编译成一个 IIFE 函数，但这并不适用于 NPM 库，我们需要修改 <code>output.library</code> 配置，以适当方式导出模块内容：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;[name].js&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;./dist&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token operator">+</span>   library<span class="token operator">:</span> <span class="token punctuation">{</span>
<span class="token operator">+</span>     name<span class="token operator">:</span> <span class="token string">&quot;_&quot;</span><span class="token punctuation">,</span>
<span class="token operator">+</span>     type<span class="token operator">:</span> <span class="token string">&quot;umd&quot;</span><span class="token punctuation">,</span>
<span class="token operator">+</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里用到了两个新配置项：</p>`,7),k={href:"https://webpack.js.org/configuration/output/#outputlibraryname",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"script",-1),m=t(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://examples.com/dist/main.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
        <span class="token comment">// Webpack 会将模块直接挂载到全局对象上</span>
        window<span class="token punctuation">.</span>_<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),b={href:"https://webpack.js.org/configuration/output/#outputlibrarytype",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"commonjs",-1),h=n("code",null,"umd",-1),f=n("code",null,"module",-1),_=n("code",null,"jsonp",-1),q=n("code",null,"umd",-1),y=t(`<blockquote><p>提示：JavaScript 最开始并没有模块化方案，这就导致早期 Web 开发需要将许多代码写进同一文件，极度影响开发效率。后来，随着 Web 应用复杂度逐步增高，社区陆陆续续推出了许多适用于不同场景的模块化规范，包括：CommonJS、UMD、CMD、AMD，以及 ES6 推出的 ES Module 方案，不同方案各有侧重点与适用场景，NPM 库作者需要根据预期的使用场景选择适当方案。</p></blockquote><p>修改前后对应的产物内容如下：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9676ffea7de5445d809662f3355760b2~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>可以看到，修改前(对应上图左半部分)代码会被包装成一个 IIFE ；而使用 <code>output.library</code> 后，代码被包装成 UMD(Universal Module Definition) 模式：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">webpackUniversalModuleDefinition</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> factory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> exports <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> module <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span>
        module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> define <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">&amp;&amp;</span> define<span class="token punctuation">.</span>amd<span class="token punctuation">)</span>
        <span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> exports <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span>
        exports<span class="token punctuation">[</span><span class="token string">&quot;_&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        root<span class="token punctuation">[</span><span class="token string">&quot;_&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种形态会在 NPM 库启动时判断运行环境，自动选择当前适用的模块化方案，此后我们就能在各种场景下使用 <code>test-lib</code> 库，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ES Module</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>add<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;test-lib&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// CommonJS</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span>add<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;test-lib&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// HTML</span>
<span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&quot;https://examples.com/dist/main.js&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
    <span class="token comment">// Webpack 会将模块直接挂载到全局对象上</span>
    window<span class="token punctuation">.</span>_<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="正确使用第三方包" tabindex="-1"><a class="header-anchor" href="#正确使用第三方包" aria-hidden="true">#</a> 正确使用第三方包</h2><p>接下来，假设我们需要在 <code>test-lib</code> 中使用其它 NPM 包，例如 <code>lodash</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// src/index.js</span>
<span class="token keyword">import</span> _ <span class="token keyword">from</span> <span class="token string">&quot;lodash&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> max <span class="token operator">=</span> _<span class="token punctuation">.</span>max<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时执行编译命令 <code>npx webpack</code>，我们会发现产物文件的体积非常大：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/af64ed8d6e4a45a1b0a9909ca487a739~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>这是因为 Webpack 默认会将所有第三方依赖都打包进产物中，这种逻辑能满足 Web 应用资源合并需求，但在开发 NPM 库时则很可能导致代码冗余。以 <code>test-lib</code> 为例，若使用者在业务项目中已经安装并使用了 <code>lodash</code>，那么最终产物必然会包含两份 <code>lodash</code> 代码！</p>`,13),j={href:"https://webpack.js.org/configuration/externals/",target:"_blank",rel:"noopener noreferrer"},x=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token operator">+</span>  externals<span class="token operator">:</span> <span class="token punctuation">{</span>
<span class="token operator">+</span>   lodash<span class="token operator">:</span> <span class="token punctuation">{</span>
<span class="token operator">+</span>     commonjs<span class="token operator">:</span> <span class="token string">&quot;lodash&quot;</span><span class="token punctuation">,</span>
<span class="token operator">+</span>     commonjs2<span class="token operator">:</span> <span class="token string">&quot;lodash&quot;</span><span class="token punctuation">,</span>
<span class="token operator">+</span>     amd<span class="token operator">:</span> <span class="token string">&quot;lodash&quot;</span><span class="token punctuation">,</span>
<span class="token operator">+</span>     root<span class="token operator">:</span> <span class="token string">&quot;_&quot;</span><span class="token punctuation">,</span>
<span class="token operator">+</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token operator">+</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),w={href:"https://webpack.js.org/configuration/externals/",target:"_blank",rel:"noopener noreferrer"},M=n("p",null,[s("例如，我们可以将 React 声明为外部依赖，并在页面中通过 "),n("code",null,"<script>"),s(" 标签方式引入 React 库，之后 Webpack 就可以跳过 React 代码，提升编译性能。")],-1),S=t(`<p>改造后，再次执行 <code>npx webpack</code>，编译结果如下：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d59a2a8dcc5c40f489b3c39dbafcc27c~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>改造后，主要发生了两个变化：</p><ol><li>产物仅包含 <code>test-lib</code> 库代码，体积相比修改前大幅降低；</li><li>UMD 模板通过 <code>require</code>、<code>define</code> 函数中引入 <code>lodash</code> 依赖并传递到 <code>factory</code>。</li></ol><p>至此，Webpack 不再打包 <code>lodash</code> 代码，我们可以顺手将 <code>lodash</code> 声明为 <code>peerDependencies</code>：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;6-1_test-lib&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// ...</span>
+ <span class="token property">&quot;peerDependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
+   <span class="token property">&quot;lodash&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^4.17.21&quot;</span>
+ <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),P={href:"https://www.npmjs.com/package/webpack-node-externals",target:"_blank",rel:"noopener noreferrer"},N=n("code",null,"node_modules",-1),W=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>
<span class="token keyword">const</span> nodeExternals <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack-node-externals&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token operator">+</span>  externals<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">nodeExternals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="抽离-css-代码" tabindex="-1"><a class="header-anchor" href="#抽离-css-代码" aria-hidden="true">#</a> 抽离 CSS 代码</h2><p>假设我们开发的 NPM 库中包含了 CSS 代码 —— 这在组件库中特别常见，我们通常需要使用 <code>mini-css-extract-plugin</code> 插件将样式抽离成单独文件，由用户自行引入。</p><p>这是因为 Webpack 处理 CSS 的方式有很多，例如使用 <code>style-loader</code> 将样式注入页面的 <code>&lt;head&gt;</code> 标签；使用 <code>mini-css-extract-plugin</code> 抽离样式文件。作为 NPM 库开发者，如果我们粗暴地将 CSS 代码打包进产物中，有可能与用户设定的方式冲突。</p><p>为此，需要在前文基础上添加如下配置：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  
  <span class="token comment">// ...</span>
<span class="token operator">+</span> module<span class="token operator">:</span> <span class="token punctuation">{</span>
<span class="token operator">+</span>   rules<span class="token operator">:</span> <span class="token punctuation">[</span>
<span class="token operator">+</span>     <span class="token punctuation">{</span>
<span class="token operator">+</span>       test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
<span class="token operator">+</span>       use<span class="token operator">:</span> <span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">&quot;css-loader&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token operator">+</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token operator">+</span>   <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token operator">+</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token operator">+</span> plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),C={href:"https://juejin.cn/book/7115598540721618944/section/7116186197730263054",target:"_blank",rel:"noopener noreferrer"},E=t(`<h2 id="生成-sourcemap" tabindex="-1"><a class="header-anchor" href="#生成-sourcemap" aria-hidden="true">#</a> 生成 Sourcemap</h2><p>Sourcemap 是一种代码映射协议，它能够将经过压缩、混淆、合并的代码还原回未打包状态，帮助开发者在生产环境中精确定位问题发生的行列位置，所以一个成熟的 NPM 库除了提供兼容性足够好的编译包外，通常还需要提供 Sourcemap 文件。</p><p>接入方法很简单，只需要添加适当的 <code>devtool</code> 配置：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  
  <span class="token comment">// ...</span>
<span class="token operator">+</span> devtool<span class="token operator">:</span> <span class="token string">&#39;source-map&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次执行 <code>npx webpack</code> 就可以看到 <code>.map</code> 后缀的映射文件：</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>├─ test-lib
│  ├─ package.json
│  ├─ webpack.config.js
│  ├─ src
│  │  ├─ index.css
│  │  ├─ index.js
│  ├─ dist
│  │  ├─ main.js
│  │  ├─ main.js.map
│  │  ├─ main.css
│  │  ├─ main.css.map
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此后，业务方只需使用 <code>source-map-loader</code> 就可以将这段 Sourcemap 信息加载到自己的业务系统中，实现框架级别的源码调试能力。关于 Sourcemap 的更多信息，可查阅：</p>`,7),D={href:"https://github.com/Tecvan-fe/webpack-book-samples/tree/main/6-2_use-test-lib",target:"_blank",rel:"noopener noreferrer"},L=t(`<h2 id="其它-npm-配置" tabindex="-1"><a class="header-anchor" href="#其它-npm-配置" aria-hidden="true">#</a> 其它 NPM 配置</h2><p>至此，开发 NPM 库所需的 Webpack 配置就算是介绍完毕了，接下来我们还可以用一些小技巧优化 <code>test-lib</code> 的项目配置，提升开发效率，包括：</p><ul><li>使用 <code>.npmignore</code> 文件忽略不需要发布到 NPM 的文件；</li><li>在 <code>package.json</code> 文件中，使用 <code>prepublishOnly</code> 指令，在发布前自动执行编译命令，例如：</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// package.json</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;test-lib&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// ...</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;prepublishOnly&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack --mode=production&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在 <code>package.json</code> 文件中，使用 <code>main</code> 指定项目入口，同时使用 <code>module</code> 指定 ES Module 模式下的入口，以允许用户直接使用源码版本，例如：</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;6-1_test-lib&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// ...</span>
  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dist/main.js&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;src/index.js&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;prepublishOnly&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack --mode=production&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这部分内容与小册主题无关，这里只做简单介绍，感兴趣的同学可自行搜索相关资料。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>站在 Webpack 角度，构建 Web 应用于构建 NPM 库的差异并不大，开发时注意：</p><ul><li>使用 <code>output.library</code> 配置项，正确导出模块内容；</li><li>使用 <code>externals</code> 配置项，忽略第三方库；</li><li>使用 <code>mini-css-extract-plugin</code> 单独打包 CSS 样式代码；</li><li>使用 <code>devtool</code> 配置项生成 Sourcemap 文件，这里推荐使用 <code>devtool = &#39;source-map&#39;</code>。</li></ul>`,10),I={href:"https://github.com/Tecvan-fe/webpack-book-samples/tree/main/6-1_test-lib",target:"_blank",rel:"noopener noreferrer"},R=n("h2",{id:"思考题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#思考题","aria-hidden":"true"},"#"),s(" 思考题")],-1),T=n("p",null,"有许多工具能被构建 NPM 库，例如 Webpack、Snowpack、Vite、Rollup 等，这些工具各有什么特点？你更倾向于使用哪种工具？",-1);function V(U,z){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("blockquote",null,[n("p",null,[s("提示：本文代码均已上传到 "),n("a",r,[s("小册仓库"),e(a)]),s("。")])]),d,n("ul",null,[n("li",null,[n("a",k,[s("output.library.name"),e(a)]),s("：用于定义模块名称，在浏览器环境下使用 "),v,s(" 加载该库时，可直接使用这个名字调用模块，例如：")])]),m,n("ul",null,[n("li",null,[n("a",b,[s("output.library.type"),e(a)]),s("：用于编译产物的模块化方案，可选值有："),g,s("、"),h,s("、"),f,s("、"),_,s(" 等，通常选用兼容性更强的 "),q,s(" 方案即可。")])]),y,n("p",null,[s("为解决这一问题，我们需要使用 "),n("a",j,[s("externals"),e(a)]),s(" 配置项，将第三方依赖排除在打包系统之外：")]),x,n("blockquote",null,[n("p",null,[s("提示： Webpack 编译过程会跳过 "),n("a",w,[s("externals"),e(a)]),s(" 所声明的库，并假定消费场景已经安装了相关依赖，常用于 NPM 库开发场景；在 Web 应用场景下则常被用于优化性能。")]),M]),S,n("p",null,[s("实践中，多数第三方框架都可以沿用上例方式处理，包括 React、Vue、Angular、Axios、Lodash 等，方便起见，可以直接使用 "),n("a",P,[s("webpack-node-externals"),e(a)]),s(" 排除所有 "),N,s(" 模块，使用方法：")]),W,n("blockquote",null,[n("p",null,[s("提示：关于 CSS 构建的更多规则，可参考《"),n("a",C,[s("如何借助预处理器、PostCSS 等构建现代 CSS 工程环境？"),e(a)]),s("》章节。")])]),E,n("blockquote",null,[n("p",null,[s("提示：示例代码已上传到 "),n("a",D,[s("小册仓库"),e(a)]),s("。")])]),L,n("p",null,[s("遵循上述规则，基本上就能满足开发一个 NPM 库所需的大部分需求。另外，文章代码均已上传到 "),n("a",I,[s("小册仓库"),e(a)]),s("，建议大家 Clone 阅读。")]),R,T])}const A=p(i,[["render",V],["__file","di07zhang—shiyongWebpackgoujianNPMLibrarydezhengquefangshi.html.vue"]]);export{A as default};
