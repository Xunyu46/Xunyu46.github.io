import{_ as e,r as o,o as c,c as l,b as n,d as s,e as p,a as t}from"./app-48690364.js";const i={},u={href:"https://juejin.cn/book/7050063811973218341/section/7065976180020609032",target:"_blank",rel:"noopener noreferrer"},r=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2309dff1019c40a1a1e5d072f3ed0dd3~tplv-k3u1fbpfcp-zoom-1.image",alt:""})],-1),k=n("p",null,"那么，在 Vite 内部，服务端究竟是如何定位到 HMR 边界模块，以及客户端是如何接受更新并加载最新模块内容的呢？",-1),d=n("p",null,"接下来的内容中，我就来和你一起深入 Vite 的底层实现，梳理 HMR 的各个实现要点，让你对 Vite 的 HMR 实现原理有比较深入的认识。",-1),v=n("h3",{id:"创建模块依赖图",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#创建模块依赖图","aria-hidden":"true"},"#"),s(" 创建模块依赖图")],-1),m=n("code",null,"ModuleGraph",-1),b={href:"https://github.com/vitejs/vite/blob/v2.7.0/packages/vite/src/node/server/moduleGraph.ts",target:"_blank",rel:"noopener noreferrer"},g=t(`<p>接下来，我们从以下几个维度看看这个图结构的创建过程。<strong>创建依赖图</strong>主要分为三个步骤:</p><ul><li>初始化依赖图实例</li><li>创建依赖图节点</li><li>绑定各个模块节点的依赖关系</li></ul><p>首先，Vite 在 Dev Server 启动时会初始化 ModuleGraph 的实例:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// pacakges/vite/src/node/server/index.ts</span>
<span class="token keyword">const</span> moduleGraph<span class="token operator">:</span> ModuleGraph <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModuleGraph</span><span class="token punctuation">(</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  container<span class="token punctuation">.</span><span class="token function">resolveId</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们具体查看<code>ModuleGraph</code>这个类的实现。其中定义了若干个 Map，用来记录模块信息:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 由原始请求 url 到模块节点的映射，如 /src/index.tsx</span>
urlToModuleMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> ModuleNode<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 由模块 id 到模块节点的映射，其中 id 与原始请求 url，为经过 resolveId 钩子解析后的结果</span>
idToModuleMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> ModuleNode<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 由文件到模块节点的映射，由于单文件可能包含多个模块，如 .vue 文件，因此 Map 的 value 值为一个集合</span>
fileToModulesMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> Set<span class="token operator">&lt;</span>ModuleNode<span class="token operator">&gt;&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ModuleNode 对象即代表模块节点的具体信息，我们可以来看看它的数据结构:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">ModuleNode</span> <span class="token punctuation">{</span>
  <span class="token comment">// 原始请求 url</span>
  url<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token comment">// 文件绝对路径 + query</span>
  id<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token comment">// 文件绝对路径</span>
  file<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span>
  type<span class="token operator">:</span> <span class="token string">&#39;js&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;css&#39;</span>
  info<span class="token operator">?</span><span class="token operator">:</span> ModuleInfo
  <span class="token comment">// resolveId 钩子返回结果中的元数据</span>
  meta<span class="token operator">?</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span>
  <span class="token comment">// 该模块的引用方</span>
  importers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set<span class="token operator">&lt;</span>ModuleNode<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 该模块所依赖的模块</span>
  importedModules <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set<span class="token operator">&lt;</span>ModuleNode<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 接受更新的模块</span>
  acceptedHmrDeps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set<span class="token operator">&lt;</span>ModuleNode<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 是否为\`接受自身模块\`的更新</span>
  isSelfAccepting <span class="token operator">=</span> <span class="token boolean">false</span>
  <span class="token comment">// 经过 transform 钩子后的编译结果</span>
  transformResult<span class="token operator">:</span> TransformResult <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token comment">// SSR 过程中经过 transform 钩子后的编译结果</span>
  ssrTransformResult<span class="token operator">:</span> TransformResult <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token comment">// SSR 过程中的模块信息</span>
  ssrModule<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token comment">// 上一次热更新的时间戳</span>
  lastHMRTimestamp <span class="token operator">=</span> <span class="token number">0</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span>url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> url
    <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token function">isDirectCSSRequest</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&#39;css&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;js&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ModuleNode 中包含的信息比较多，你需要重点关注的是 <code>importers</code> 和<code>importedModules</code>，这两条信息分别代表了当前模块被哪些模块引用以及它依赖了哪些模块，是构建整个模块依赖图的根基所在。</p><p>那么，Vite 是在什么时候创建 ModuleNode 节点的呢？我们可以到 Vite Dev Server 中的<code>transform</code>中间件一探究竟:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/vite/src/node/server/middlewares/transform.ts</span>
<span class="token comment">// 核心转换逻辑</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">transformRequest</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> server<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  html<span class="token operator">:</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>accept<span class="token operator">?.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;text/html&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，<code>transform</code>中间件的主要逻辑是调用 <code>transformRequest</code>方法，我们来进一步查看这个方法的核心代码实现:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/vite/src/node/server/transformRequest.ts</span>
<span class="token comment">// 从 ModuleGraph 查找模块节点信息</span>
<span class="token keyword">const</span> module <span class="token operator">=</span> <span class="token keyword">await</span> server<span class="token punctuation">.</span>moduleGraph<span class="token punctuation">.</span><span class="token function">getModuleByUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
<span class="token comment">// 如果有则命中缓存</span>
<span class="token keyword">const</span> cached <span class="token operator">=</span>
  module <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ssr <span class="token operator">?</span> module<span class="token punctuation">.</span>ssrTransformResult <span class="token operator">:</span> module<span class="token punctuation">.</span>transformResult<span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>cached<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> cached
<span class="token punctuation">}</span>
<span class="token comment">// 否则调用 PluginContainer 的 resolveId 和 load 方法对进行模块加载</span>
<span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">await</span> pluginContainer<span class="token punctuation">.</span><span class="token function">resolveId</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?.</span>id <span class="token operator">||</span> url
<span class="token keyword">const</span> loadResult <span class="token operator">=</span> <span class="token keyword">await</span> pluginContainer<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token punctuation">{</span> ssr <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 然后通过调用 ensureEntryFromUrl 方法创建 ModuleNode</span>
<span class="token keyword">const</span> mod <span class="token operator">=</span> <span class="token keyword">await</span> moduleGraph<span class="token punctuation">.</span><span class="token function">ensureEntryFromUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们看看 <code>ensureEntryFromUrl</code> 方法如何<strong>创建新的 ModuleNode 节点</strong>:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">async</span> <span class="token function">ensureEntryFromUrl</span><span class="token punctuation">(</span>rawUrl<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>ModuleNode<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 实质是调用各个插件的 resolveId 钩子得到路径信息</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>url<span class="token punctuation">,</span> resolvedId<span class="token punctuation">,</span> meta<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolveUrl</span><span class="token punctuation">(</span>rawUrl<span class="token punctuation">)</span>
  <span class="token keyword">let</span> mod <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>urlToModuleMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mod<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果没有缓存，就创建新的 ModuleNode 对象</span>
    <span class="token comment">// 并记录到 urlToModuleMap、idToModuleMap、fileToModulesMap 这三张表中</span>
    mod <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModuleNode</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>meta<span class="token punctuation">)</span> mod<span class="token punctuation">.</span>meta <span class="token operator">=</span> meta
    <span class="token keyword">this</span><span class="token punctuation">.</span>urlToModuleMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> mod<span class="token punctuation">)</span>
    mod<span class="token punctuation">.</span>id <span class="token operator">=</span> resolvedId
    <span class="token keyword">this</span><span class="token punctuation">.</span>idToModuleMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>resolvedId<span class="token punctuation">,</span> mod<span class="token punctuation">)</span>
    <span class="token keyword">const</span> file <span class="token operator">=</span> <span class="token punctuation">(</span>mod<span class="token punctuation">.</span>file <span class="token operator">=</span> <span class="token function">cleanUrl</span><span class="token punctuation">(</span>resolvedId<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> fileMappedModules <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fileToModulesMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fileMappedModules<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      fileMappedModules <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>fileToModulesMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> fileMappedModules<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    fileMappedModules<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mod<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> mod
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在你应该明白了模块依赖图中各个 ModuleNode 节点是如何创建出来的，那么，各个节点的依赖关系是在什么时候绑定的呢？</p><p>我们不妨把目光集中到<code>vite:import-analysis</code>插件当中，在这个插件的 transform 钩子中，会对模块代码中的 import 语句进行分析，得到如下的一些信息:</p><ul><li><code>importedUrls</code>: 当前模块的依赖模块 url 集合。</li><li><code>acceptedUrls</code>: 当前模块中通过 i<wbr>mport.meta.hot.accept 声明的依赖模块 url 集合。</li><li><code>isSelfAccepting</code>: 分析 i<wbr>mport.meta.hot.accept 的用法，标记是否为<code>接受自身更新</code>的类型。</li></ul><p>接下来会进入核心的<code>模块依赖关系绑定</code>的环节，核心代码如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 引用方模块</span>
<span class="token keyword">const</span> importerModule <span class="token operator">=</span> moduleGraph<span class="token punctuation">.</span><span class="token function">getModuleById</span><span class="token punctuation">(</span>importer<span class="token punctuation">)</span>
<span class="token keyword">await</span> moduleGraph<span class="token punctuation">.</span><span class="token function">updateModuleInfo</span><span class="token punctuation">(</span>
  importerModule<span class="token punctuation">,</span>
  importedUrls<span class="token punctuation">,</span>
  normalizedAcceptedUrls<span class="token punctuation">,</span>
  isSelfAccepting
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，绑定依赖关系的逻辑主要由<code>ModuleGraph</code>对象的<code>updateModuleInfo</code>方法实现，核心代码如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">async</span> <span class="token function">updateModuleInfo</span><span class="token punctuation">(</span>
  mod<span class="token operator">:</span> ModuleNode<span class="token punctuation">,</span>
  importedModules<span class="token operator">:</span> Set<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> ModuleNode<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  acceptedModules<span class="token operator">:</span> Set<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> ModuleNode<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  isSelfAccepting<span class="token operator">:</span> <span class="token builtin">boolean</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  mod<span class="token punctuation">.</span>isSelfAccepting <span class="token operator">=</span> isSelfAccepting
  mod<span class="token punctuation">.</span>importedModules <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 绑定节点依赖关系</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> imported <span class="token keyword">of</span> importedModules<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> dep <span class="token operator">=</span>
      <span class="token keyword">typeof</span> imported <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span>
        <span class="token operator">?</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ensureEntryFromUrl</span><span class="token punctuation">(</span>imported<span class="token punctuation">)</span>
        <span class="token operator">:</span> imported
    dep<span class="token punctuation">.</span>importers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mod<span class="token punctuation">)</span>
    mod<span class="token punctuation">.</span>importedModules<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 更新 acceptHmrDeps 信息</span>
  <span class="token keyword">const</span> deps <span class="token operator">=</span> <span class="token punctuation">(</span>mod<span class="token punctuation">.</span>acceptedHmrDeps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> accepted <span class="token keyword">of</span> acceptedModules<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> dep <span class="token operator">=</span>
      <span class="token keyword">typeof</span> accepted <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span>
        <span class="token operator">?</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ensureEntryFromUrl</span><span class="token punctuation">(</span>accepted<span class="token punctuation">)</span>
        <span class="token operator">:</span> accepted
    deps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，模块间的依赖关系就成功进行绑定了。随着越来越多的模块经过 <code>vite:import-analysis</code>的 transform 钩子处理，所有模块之间的依赖关系会被记录下来，整个依赖图的信息也就被补充完整了。</p><h3 id="服务端收集更新模块" tabindex="-1"><a class="header-anchor" href="#服务端收集更新模块" aria-hidden="true">#</a> 服务端收集更新模块</h3><p>刚才我们分析了模块依赖图的实现，接下来再看看 Vite 服务端如何根据这个图结构收集更新模块。</p><p>首先， Vite 在服务启动时会通过 <code>chokidar</code> 新建文件监听器:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/vite/src/node/server/index.ts</span>
<span class="token keyword">import</span> chokidar <span class="token keyword">from</span> <span class="token string">&#39;chokidar&#39;</span>

<span class="token comment">// 监听根目录下的文件</span>
<span class="token keyword">const</span> watcher <span class="token operator">=</span> chokidar<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 修改文件</span>
watcher<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  file <span class="token operator">=</span> <span class="token function">normalizePath</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>
  moduleGraph<span class="token punctuation">.</span><span class="token function">onFileChange</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>
  <span class="token keyword">await</span> <span class="token function">handleHMRUpdate</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> server<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 新增文件</span>
watcher<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;add&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">handleFileAddUnlink</span><span class="token punctuation">(</span><span class="token function">normalizePath</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">,</span> server<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 删除文件</span>
watcher<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;unlink&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">handleFileAddUnlink</span><span class="token punctuation">(</span><span class="token function">normalizePath</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">,</span> server<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们分别以修改文件、新增文件和删除文件这几个方面来介绍 HMR 在服务端的逻辑。</p><h4 id="_1-修改文件" tabindex="-1"><a class="header-anchor" href="#_1-修改文件" aria-hidden="true">#</a> 1. 修改文件</h4><p>当业务代码中某个文件被修改时，Vite 首先会调用<code>moduleGraph</code>的<code>onFileChange</code>对模块图中的对应节点进行<code>清除缓存</code>的操作:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">ModuleGraph</span> <span class="token punctuation">{</span>
  <span class="token function">onFileChange</span><span class="token punctuation">(</span>file<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> mods <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getModulesByFile</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mods<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> seen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set<span class="token operator">&lt;</span>ModuleNode<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token comment">// 将模块的缓存信息去除</span>
      mods<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mod<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">invalidateModule</span><span class="token punctuation">(</span>mod<span class="token punctuation">,</span> seen<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">invalidateModule</span><span class="token punctuation">(</span>mod<span class="token operator">:</span> ModuleNode<span class="token punctuation">,</span> seen<span class="token operator">:</span> Set<span class="token operator">&lt;</span>ModuleNode<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    mod<span class="token punctuation">.</span>info <span class="token operator">=</span> <span class="token keyword">undefined</span>
    mod<span class="token punctuation">.</span>transformResult <span class="token operator">=</span> <span class="token keyword">null</span>
    mod<span class="token punctuation">.</span>ssrTransformResult <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后正式进入 HMR 收集更新的阶段，主要逻辑在<code>handleHMRUpdate</code>函数中，代码简化后如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// packages/vite/src/node/server/hmr.ts</span>
<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">handleHMRUpdate</span><span class="token punctuation">(</span>
  file<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  server<span class="token operator">:</span> ViteDevServer
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> ws<span class="token punctuation">,</span> config<span class="token punctuation">,</span> moduleGraph <span class="token punctuation">}</span> <span class="token operator">=</span> server
  <span class="token keyword">const</span> shortFile <span class="token operator">=</span> <span class="token function">getShortName</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> config<span class="token punctuation">.</span>root<span class="token punctuation">)</span>

  <span class="token comment">// 1. 配置文件/环境变量声明文件变化，直接重启服务</span>
  <span class="token comment">// 代码省略</span>

  <span class="token comment">// 2. 客户端注入的文件(vite/dist/client/client.mjs)更改</span>
  <span class="token comment">// 给客户端发送 full-reload 信号，使之刷新页面</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>normalizedClientDir<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      type<span class="token operator">:</span> <span class="token string">&#39;full-reload&#39;</span><span class="token punctuation">,</span>
      path<span class="token operator">:</span> <span class="token string">&#39;*&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 3. 普通文件变动</span>
  <span class="token comment">// 获取需要更新的模块</span>
  <span class="token keyword">const</span> mods <span class="token operator">=</span> moduleGraph<span class="token punctuation">.</span><span class="token function">getModulesByFile</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>
  <span class="token keyword">const</span> timestamp <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 初始化 HMR 上下文对象</span>
  <span class="token keyword">const</span> hmrContext<span class="token operator">:</span> HmrContext <span class="token operator">=</span> <span class="token punctuation">{</span>
    file<span class="token punctuation">,</span>
    timestamp<span class="token punctuation">,</span>
    modules<span class="token operator">:</span> mods <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token operator">...</span>mods<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token function-variable function">read</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">readModifiedFile</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">,</span>
    server
  <span class="token punctuation">}</span>
  <span class="token comment">// 依次执行插件的 handleHotUpdate 钩子，拿到插件处理后的 HMR 模块</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> plugin <span class="token keyword">of</span> config<span class="token punctuation">.</span>plugins<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>plugin<span class="token punctuation">.</span>handleHotUpdate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> filteredModules <span class="token operator">=</span> <span class="token keyword">await</span> plugin<span class="token punctuation">.</span><span class="token function">handleHotUpdate</span><span class="token punctuation">(</span>hmrContext<span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>filteredModules<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        hmrContext<span class="token punctuation">.</span>modules <span class="token operator">=</span> filteredModules
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// updateModules——核心处理逻辑</span>
  <span class="token function">updateModules</span><span class="token punctuation">(</span>shortFile<span class="token punctuation">,</span> hmrContext<span class="token punctuation">.</span>modules<span class="token punctuation">,</span> timestamp<span class="token punctuation">,</span> server<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从中可以看到，Vite 对于不同类型的文件，热更新的策略有所不同：</p><ul><li>对于配置文件和环境变量声明文件的改动，Vite 会直接重启服务器。</li><li>对于客户端注入的文件(vite/dist/client/client.mjs)的改动，Vite 会给客户端发送<code>full-reload</code>信号，让客户端刷新页面。</li><li>对于普通文件改动，Vite 首先会获取需要热更新的模块，然后对这些模块依次查找热更新边界，然后将模块更新的信息传给客户端。</li></ul><p>其中，对于普通文件的热更新边界查找的逻辑，主要集中在<code>updateModules</code>函数中，让我们来看看具体的实现:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">updateModules</span><span class="token punctuation">(</span>
  file<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  modules<span class="token operator">:</span> ModuleNode<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  timestamp<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> config<span class="token punctuation">,</span> ws <span class="token punctuation">}</span><span class="token operator">:</span> ViteDevServer
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> updates<span class="token operator">:</span> Update<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">const</span> invalidatedModules <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set<span class="token operator">&lt;</span>ModuleNode<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> needFullReload <span class="token operator">=</span> <span class="token boolean">false</span>
  <span class="token comment">// 遍历需要热更新的模块</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> mod <span class="token keyword">of</span> modules<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">invalidate</span><span class="token punctuation">(</span>mod<span class="token punctuation">,</span> timestamp<span class="token punctuation">,</span> invalidatedModules<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>needFullReload<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">continue</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 初始化热更新边界集合</span>
    <span class="token keyword">const</span> boundaries <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set<span class="token operator">&lt;</span><span class="token punctuation">{</span>
      boundary<span class="token operator">:</span> ModuleNode
      acceptedVia<span class="token operator">:</span> ModuleNode
    <span class="token punctuation">}</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// 调用 propagateUpdate 函数，收集热更新边界</span>
    <span class="token keyword">const</span> hasDeadEnd <span class="token operator">=</span> <span class="token function">propagateUpdate</span><span class="token punctuation">(</span>mod<span class="token punctuation">,</span> boundaries<span class="token punctuation">)</span>
    <span class="token comment">// 返回值为 true 表示需要刷新页面，否则局部热更新即可</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>hasDeadEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      needFullReload <span class="token operator">=</span> <span class="token boolean">true</span>
      <span class="token keyword">continue</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 记录热更新边界信息</span>
    updates<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>
      <span class="token operator">...</span><span class="token punctuation">[</span><span class="token operator">...</span>boundaries<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> boundary<span class="token punctuation">,</span> acceptedVia <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
        type<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>boundary<span class="token punctuation">.</span><span class="token keyword">type</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-update</span><span class="token template-punctuation string">\`</span></span> <span class="token keyword">as</span> Update<span class="token punctuation">[</span><span class="token string">&#39;type&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        timestamp<span class="token punctuation">,</span>
        path<span class="token operator">:</span> boundary<span class="token punctuation">.</span>url<span class="token punctuation">,</span>
        acceptedPath<span class="token operator">:</span> acceptedVia<span class="token punctuation">.</span>url
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 如果被打上 full-reload 标识，则让客户端强制刷新页面</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>needFullReload<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      type<span class="token operator">:</span> <span class="token string">&#39;full-reload&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    config<span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>
      updates
        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> path <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> chalk<span class="token punctuation">.</span><span class="token function">green</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">hmr update </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span> <span class="token operator">+</span> chalk<span class="token punctuation">.</span><span class="token function">dim</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> clear<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> timestamp<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
    <span class="token punctuation">)</span>
    ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      type<span class="token operator">:</span> <span class="token string">&#39;update&#39;</span><span class="token punctuation">,</span>
      updates
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 热更新边界收集</span>
<span class="token keyword">function</span> <span class="token function">propagateUpdate</span><span class="token punctuation">(</span>
  node<span class="token operator">:</span> ModuleNode<span class="token punctuation">,</span>
  boundaries<span class="token operator">:</span> Set<span class="token operator">&lt;</span><span class="token punctuation">{</span>
    boundary<span class="token operator">:</span> ModuleNode
    acceptedVia<span class="token operator">:</span> ModuleNode
  <span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  currentChain<span class="token operator">:</span> ModuleNode<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>node<span class="token punctuation">]</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
   <span class="token comment">// 接受自身模块更新</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>isSelfAccepting<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    boundaries<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      boundary<span class="token operator">:</span> node<span class="token punctuation">,</span>
      acceptedVia<span class="token operator">:</span> node
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 入口模块</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">.</span>importers<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 遍历引用方</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> importer <span class="token keyword">of</span> node<span class="token punctuation">.</span>importers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> subChain <span class="token operator">=</span> currentChain<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>importer<span class="token punctuation">)</span>
    <span class="token comment">// 如果某个引用方模块接受了当前模块的更新</span>
    <span class="token comment">// 那么将这个引用方模块作为热更新的边界</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>importer<span class="token punctuation">.</span>acceptedHmrDeps<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      boundaries<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        boundary<span class="token operator">:</span> importer<span class="token punctuation">,</span>
        acceptedVia<span class="token operator">:</span> node
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token keyword">continue</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentChain<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>importer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 出现循环依赖，需要强制刷新页面</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 递归向更上层的引用方寻找热更新边界</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">propagateUpdate</span><span class="token punctuation">(</span>importer<span class="token punctuation">,</span> boundaries<span class="token punctuation">,</span> subChain<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，当热更新边界的信息收集完成后，服务端会将这些信息推送给客户端，从而完成局部的模块更新。</p><h4 id="_2-新增和删除文件" tabindex="-1"><a class="header-anchor" href="#_2-新增和删除文件" aria-hidden="true">#</a> 2. 新增和删除文件</h4><p>对于新增和删除文件，Vite 也通过<code>chokidar</code>监听了相应的事件:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>watcher<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;add&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">handleFileAddUnlink</span><span class="token punctuation">(</span><span class="token function">normalizePath</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">,</span> server<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

watcher<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;unlink&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">handleFileAddUnlink</span><span class="token punctuation">(</span><span class="token function">normalizePath</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">,</span> server<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们就来浏览一下<code>handleFileAddUnlink</code>的逻辑，代码简化后如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">handleFileAddUnlink</span><span class="token punctuation">(</span>
  file<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  server<span class="token operator">:</span> ViteDevServer<span class="token punctuation">,</span>
  isUnlink <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> modules <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">(</span>server<span class="token punctuation">.</span>moduleGraph<span class="token punctuation">.</span><span class="token function">getModulesByFile</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>modules<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">updateModules</span><span class="token punctuation">(</span>
      <span class="token function">getShortName</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> server<span class="token punctuation">.</span>config<span class="token punctuation">.</span>root<span class="token punctuation">)</span><span class="token punctuation">,</span>
      modules<span class="token punctuation">,</span>
      Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      server
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不难发现，这个函数同样是调用<code>updateModules</code>完成模块热更新边界的查找和更新信息的推送，而<code>updateModules</code>在上文中已经分析过，这里就不再赘述了。</p><h3 id="客户端派发更新" tabindex="-1"><a class="header-anchor" href="#客户端派发更新" aria-hidden="true">#</a> 客户端派发更新</h3><p>好，从前面的内容中，我们知道，服务端会监听文件的改动，然后计算出对应的热更新信息，通过 WebSocket 将更新信息传递给客户端，具体来说，会给客户端发送如下的数据:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  type<span class="token operator">:</span> <span class="token string">&quot;update&quot;</span><span class="token punctuation">,</span>
  update<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token comment">// 更新类型，也可能是 \`css-update\`</span>
      type<span class="token operator">:</span> <span class="token string">&quot;js-update&quot;</span><span class="token punctuation">,</span>
      <span class="token comment">// 更新时间戳</span>
      timestamp<span class="token operator">:</span> <span class="token number">1650702020986</span><span class="token punctuation">,</span>
      <span class="token comment">// 热更模块路径</span>
      path<span class="token operator">:</span> <span class="token string">&quot;/src/main.ts&quot;</span><span class="token punctuation">,</span>
      <span class="token comment">// 接受的子模块路径</span>
      acceptedPath<span class="token operator">:</span> <span class="token string">&quot;/src/render.ts&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token comment">// 或者 full-reload 信号</span>
<span class="token punctuation">{</span>
  type<span class="token operator">:</span> <span class="token string">&quot;full-reload&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么客户端是如何接受这些信息并进行模块更新的呢？</p><p>从上一节我们知道，Vite 在开发阶段会默认在 HTML 中注入一段客户端的脚本，即:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/@vite/client<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在启动任意一个 Vite 项目后，我们可以在浏览器查看具体的脚本内容:</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b10e8bd687e84432b9a076c4a4e59638~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>`,52),f={href:"https://github.com/vitejs/vite/blob/v2.7.0/packages/vite/src/node/server/ws.ts#L21",target:"_blank",rel:"noopener noreferrer"},y=t(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> socketProtocol <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>location<span class="token punctuation">.</span>protocol <span class="token operator">===</span> <span class="token string">&#39;https:&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;wss&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;ws&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> socketHost <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">null</span> <span class="token operator">||</span> location<span class="token punctuation">.</span>hostname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token string">&quot;3000&quot;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>socketProtocol<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>socketHost<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token string">&#39;vite-hmr&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>随后会监听 socket 实例的<code>message</code>事件，接收到服务端传来的更新信息:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>socket<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> data <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来让我们把目光集中在 <code>handleMessage</code> 函数中:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>payload<span class="token operator">:</span> HMRPayload<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>payload<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string">&#39;connected&#39;</span><span class="token operator">:</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[vite] connected.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
      <span class="token comment">// 心跳检测</span>
      <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;ping&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> __HMR_TIMEOUT__<span class="token punctuation">)</span>
      <span class="token keyword">break</span>
    <span class="token keyword">case</span> <span class="token string">&#39;update&#39;</span><span class="token operator">:</span>
      payload<span class="token punctuation">.</span>updates<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>update<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>update<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;js-update&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">queueUpdate</span><span class="token punctuation">(</span><span class="token function">fetchUpdate</span><span class="token punctuation">(</span>update<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token comment">// css-update</span>
          <span class="token comment">// 省略实现</span>
          <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[vite] css hot updated: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token keyword">break</span>
    <span class="token keyword">case</span> <span class="token string">&#39;full-reload&#39;</span><span class="token operator">:</span>
      <span class="token comment">// 刷新页面</span>
      location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// 省略其它消息类型</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，我们重点关注 js 的更新逻辑，即下面这行代码:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>queueUpdate(fetchUpdate(update))
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>到底做了些什么。</p><p>我们先来看看<code>queueUpdate</code>和<code>fetchUpdate</code>这两个函数的实现:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> pending <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token keyword">let</span> queued<span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token comment">// 批量任务处理，不与具体的热更新行为挂钩，主要起任务调度作用</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">queueUpdate</span><span class="token punctuation">(</span>p<span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  queued<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pending<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    pending <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token keyword">await</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    pending <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token keyword">const</span> loading <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>queued<span class="token punctuation">]</span>
    queued <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>loading<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> fn <span class="token operator">&amp;&amp;</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 派发热更新的主要逻辑</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fetchUpdate</span><span class="token punctuation">(</span><span class="token punctuation">{</span> path<span class="token punctuation">,</span> acceptedPath<span class="token punctuation">,</span> timestamp <span class="token punctuation">}</span><span class="token operator">:</span> Update<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 后文会介绍 hotModuleMap 的作用，你暂且不用纠结实现，可以理解为 HMR 边界模块相关的信息</span>
  <span class="token keyword">const</span> mod <span class="token operator">=</span> hotModulesMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
  <span class="token keyword">const</span> moduleMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> isSelfUpdate <span class="token operator">=</span> path <span class="token operator">===</span> acceptedPath

  <span class="token comment">// 1. 整理需要更新的模块集合</span>
  <span class="token keyword">const</span> modulesToUpdate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isSelfUpdate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 接受自身更新</span>
    modulesToUpdate<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 接受子模块更新</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">{</span> deps <span class="token punctuation">}</span> <span class="token keyword">of</span> mod<span class="token punctuation">.</span>callbacks<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      deps<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>acceptedPath <span class="token operator">===</span> dep<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          modulesToUpdate<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 2. 整理需要执行的更新回调函数</span>
  <span class="token comment">// 注： mod.callbacks 为 i<wbr>mport.meta.hot.accept 中绑定的更新回调函数，后文会介绍</span>
  <span class="token keyword">const</span> qualifiedCallbacks <span class="token operator">=</span> mod<span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> deps <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> deps<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> modulesToUpdate<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token comment">// 3. 对将要更新的模块进行失活操作，并通过动态 import 拉取最新的模块信息</span>
  <span class="token keyword">await</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>
    <span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>modulesToUpdate<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>dep<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> disposer <span class="token operator">=</span> disposeMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>disposer<span class="token punctuation">)</span> <span class="token keyword">await</span> <span class="token function">disposer</span><span class="token punctuation">(</span>dataMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">const</span> <span class="token punctuation">[</span>path<span class="token punctuation">,</span> query<span class="token punctuation">]</span> <span class="token operator">=</span> dep<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">?</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> newMod <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span>
          <span class="token comment">/* @vite-ignore */</span>
          base <span class="token operator">+</span>
            path<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span>
            <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">?import&amp;t=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>timestamp<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>query <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&amp;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>query<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
        <span class="token punctuation">)</span>
        moduleMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>dep<span class="token punctuation">,</span> newMod<span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">warnFailedFetch</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> dep<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
  <span class="token comment">// 4. 返回一个函数，用来执行所有的更新回调</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">{</span> deps<span class="token punctuation">,</span> fn <span class="token punctuation">}</span> <span class="token keyword">of</span> qualifiedCallbacks<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">fn</span><span class="token punctuation">(</span>deps<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> moduleMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> loggedPath <span class="token operator">=</span> isSelfUpdate <span class="token operator">?</span> path <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>acceptedPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> via </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[vite] hot updated: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>loggedPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对热更新的边界模块来讲，我们需要在客户端获取这些信息:</p><ul><li>边界模块所接受(accept)的模块</li><li>accept 的模块触发更新后的回调</li></ul><p>我们知道，在 <code>vite:import-analysis</code> 插件中，会给包含热更新逻辑的模块注入一些工具代码，如下图所示:</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/277ba4cc6269481087c08728fdb00fa9~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p><code>createHotContext</code> 同样是客户端脚本中的一个工具函数，我们来看看它主要的实现:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> hotModulesMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> HotModule<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">createHotContext</span> <span class="token operator">=</span> <span class="token punctuation">(</span>ownerPath<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 将当前模块的接收模块信息和更新回调注册到 hotModulesMap</span>
  <span class="token keyword">function</span> <span class="token function">acceptDeps</span><span class="token punctuation">(</span>deps<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> callback<span class="token operator">:</span> HotCallback<span class="token punctuation">[</span><span class="token string">&#39;fn&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> mod<span class="token operator">:</span> HotModule <span class="token operator">=</span> hotModulesMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ownerPath<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">{</span>
      id<span class="token operator">:</span> ownerPath<span class="token punctuation">,</span>
      callbacks<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    mod<span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      deps<span class="token punctuation">,</span>
      fn<span class="token operator">:</span> callback
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    hotModulesMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>ownerPath<span class="token punctuation">,</span> mod<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token comment">// i<wbr>mport.meta.hot.accept</span>
    <span class="token function">accept</span><span class="token punctuation">(</span>deps<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> callback<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> deps <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">||</span> <span class="token operator">!</span>deps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">acceptDeps</span><span class="token punctuation">(</span><span class="token punctuation">[</span>ownerPath<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>mod<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> deps <span class="token operator">&amp;&amp;</span> <span class="token function">deps</span><span class="token punctuation">(</span>mod<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> deps <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">acceptDeps</span><span class="token punctuation">(</span><span class="token punctuation">[</span>deps<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>mod<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> callback <span class="token operator">&amp;&amp;</span> <span class="token function">callback</span><span class="token punctuation">(</span>mod<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>deps<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">acceptDeps</span><span class="token punctuation">(</span>deps<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">invalid hot.accept() usage.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// i<wbr>mport.meta.hot.dispose</span>
    <span class="token comment">// i<wbr>mport.meta.hot.invalidate</span>
    <span class="token comment">// 省略更多方法的实现</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，Vite 给每个热更新边界模块注入的工具代码主要有两个作用:</p><ul><li>注入 i<wbr>mport.meta.hot 对象的实现</li><li>将当前模块 accept 过的模块和更新回调函数记录到 hotModulesMap 表中</li></ul><p>而前面所说的 <code>fetchUpdate</code> 函数则是通过 <code>hotModuleMap</code> 来获取边界模块的相关信息，在 accept 的模块发生变动后，通过动态 import 拉取最新的模块内容，然后返回更新回调，让<code>queueUpdate</code>这个调度函数执行更新回调，从而完成<strong>派发更新</strong>的过程。至此，HMR 的过程就结束了。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>好，本小节的内容就到这里。你需要重点掌握 Vite 中的<strong>模块依赖图实现</strong>、<strong>服务端收集更新模块</strong>和<strong>客户端派发更新</strong>的原理。</p><p>首先，Vite 为了更方便地管理模块之间的关系，创建了模块依赖图的数据结构，在 HMR 过程中，服务端会根据这张图来寻找 HMR 边界模块。</p><p>其次，HMR 更新由客户端和服务端配合完成，两者通过 WebSocket 进行数据传输。在服务端，Vite 通过查找模块依赖图确定热更新的边界，并将局部更新的信息传递给客户端，而客户端接收到热更信息后，会通过动态 import 请求并加载最新模块的内容，并执行派发更新的回调，即 i<wbr>mport.meta.hot.accept 中定义的回调函数，从而完成完整的热更新过程。</p><p>最后，欢迎你在评论区记录本节的学习心得，也恭喜你完成了<strong>源码精读章节</strong>的学习，让我们下一章再见！</p>`,24);function w(h,M){const a=o("ExternalLinkIcon");return c(),l("div",null,[n("p",null,[s("在 "),n("a",u,[s("第 13 小节"),p(a)]),s(" 中，我们学习过 Vite 中 HMR 的 API 使用，同时也介绍了基于 HMR Boundary (HMR 边界)的更新模式，即当一个模块发生变动时，Vite 会自动寻找更新边界，然后更新边界模块，如下图所示:")]),r,k,d,v,n("p",null,[s("为了方便管理各个模块之间的依赖关系，Vite 在 Dev Server 中创建了模块依赖图的数据结构，即"),m,s("类，"),n("a",b,[s("点击查看实现源码"),p(a)]),s("，Vite 中 HMR 边界模块的判定会依靠这个类来实现。")]),g,n("p",null,[s("从中你可以发现，客户端的脚本中创建了 WebSocket 客户端，并与 Vite Dev Server 中的 WebSocket 服务端("),n("a",f,[s("点击查看实现"),p(a)]),s(")建立双向连接:")]),y])}const U=e(i,[["render",w],["__file","di23zhang—regengxin：jiyuESMdehaomiaojiHMRdeshixianjiemi.html.vue"]]);export{U as default};
