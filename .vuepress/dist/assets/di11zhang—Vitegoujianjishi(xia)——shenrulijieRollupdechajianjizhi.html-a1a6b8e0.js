import{_ as t,r as o,o as c,c as l,b as n,d as s,e,a as p}from"./app-48690364.js";const i={},u=p(`<p>上一节我们学会了 Rollup 构建工具的使用，相信你已经对 Rollup 的基础概念和使用有了基本的掌握。同时我们也知道，仅仅使用 Rollup 内置的打包能力很难满足项目日益复杂的构建需求。对于一个真实的项目构建场景来说，我们还需要考虑到<code>模块打包</code>之外的问题，比如<strong>路径别名(alias)</strong> 、<strong>全局变量注入</strong>和<strong>代码压缩</strong>等等。</p><p>可要是把这些场景的处理逻辑与核心的打包逻辑都写到一起，一来打包器本身的代码会变得十分臃肿，二来也会对原有的核心代码产生一定的侵入性，混入很多与核心流程无关的代码，不易于后期的维护。因此 ，Rollup 设计出了一套完整的<strong>插件机制</strong>，将自身的核心逻辑与插件逻辑分离，让你能按需引入插件功能，提高了 Rollup 自身的可扩展性。</p><p>我个人也非常喜欢 Rollup 的插件机制，功能完备又简单易上手，体现了 Rollup 本身小而美的风格。那接下来，我会带你分析 Rollup 的插件机制，熟悉 Rollup 插件的完整构建阶段和工作流程，并且结合案例深入插件开发细节。</p><p>Rollup 的打包过程中，会定义一套完整的构建生命周期，从开始打包到产物输出，中途会经历一些<strong>标志性的阶段</strong>，并且在不同阶段会自动执行对应的插件钩子函数(Hook)。对 Rollup 插件来讲，最重要的部分是钩子函数，一方面它定义了插件的执行逻辑，也就是&quot;做什么&quot;；另一方面也声明了插件的作用阶段，即&quot;什么时候做&quot;，这与 Rollup 本身的构建生命周期息息相关。</p><p>因此，要真正理解插件的作用范围和阶段，首先需要了解 Rollup 整体的构建过程中到底做了些什么。</p><h2 id="rollup-整体构建阶段" tabindex="-1"><a class="header-anchor" href="#rollup-整体构建阶段" aria-hidden="true">#</a> Rollup 整体构建阶段</h2><p>在执行 <code>rollup</code> 命令之后，在 cli 内部的主要逻辑简化如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// Build 阶段</span>
<span class="token keyword">const</span> bundle <span class="token operator">=</span> <span class="token keyword">await</span> rollup<span class="token punctuation">.</span><span class="token function">rollup</span><span class="token punctuation">(</span>inputOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Output 阶段</span>
<span class="token keyword">await</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>outputOptions<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>bundle<span class="token punctuation">.</span>write<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 构建结束</span>
<span class="token keyword">await</span> bundle<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Rollup 内部主要经历了 <code>Build</code> 和 <code>Output</code> 两大阶段：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/67d0f8c753ed4eb29ac513439ac198ad~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>首先，Build 阶段主要负责创建模块依赖图，初始化各个模块的 AST 以及模块之间的依赖关系。下面我们用一个简单的例子来感受一下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/index.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> a <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./module-a&#39;</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// src/module-a.js</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后执行如下的构建脚本:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> rollup <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;rollup&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> bundle <span class="token operator">=</span> <span class="token keyword">await</span> rollup<span class="token punctuation">.</span><span class="token function">rollup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    input<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>util<span class="token punctuation">.</span><span class="token function">inspect</span><span class="token punctuation">(</span>bundle<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到这样的 <code>bundle</code> 对象信息:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  cache<span class="token operator">:</span> <span class="token punctuation">{</span>
    modules<span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        ast<span class="token operator">:</span> &#39;AST 节点信息，具体内容省略&#39;<span class="token punctuation">,</span>
        code<span class="token operator">:</span> &#39;export const a = <span class="token number">1</span>;&#39;<span class="token punctuation">,</span>
        dependencies<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        id<span class="token operator">:</span> &#39;/Users/code/rollup-demo/src/data.js&#39;<span class="token punctuation">,</span>
        <span class="token comment">// 其它属性省略</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        ast<span class="token operator">:</span> &#39;AST 节点信息，具体内容省略&#39;<span class="token punctuation">,</span>
        code<span class="token operator">:</span> <span class="token string">&quot;import { a } from &#39;./data&#39;;\\n\\nconsole.log(a);&quot;</span><span class="token punctuation">,</span>
        dependencies<span class="token operator">:</span> <span class="token punctuation">[</span>
          &#39;/Users/code/rollup-demo/src/data.js&#39;
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        id<span class="token operator">:</span> &#39;/Users/code/rollup-demo/src/index.js&#39;<span class="token punctuation">,</span>
        <span class="token comment">// 其它属性省略</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    plugins<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  closed<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token comment">// 挂载后续阶段会执行的方法</span>
  close<span class="token operator">:</span> <span class="token punctuation">[</span>AsyncFunction<span class="token operator">:</span> close<span class="token punctuation">]</span><span class="token punctuation">,</span>
  generate<span class="token operator">:</span> <span class="token punctuation">[</span>AsyncFunction<span class="token operator">:</span> generate<span class="token punctuation">]</span><span class="token punctuation">,</span>
  write<span class="token operator">:</span> <span class="token punctuation">[</span>AsyncFunction<span class="token operator">:</span> write<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的信息中可以看出，目前经过 Build 阶段的 <code>bundle</code> 对象其实并没有进行模块的打包，这个对象的作用在于存储各个模块的内容及依赖关系，同时暴露<code>generate</code>和<code>write</code>方法，以进入到后续的 <code>Output</code> 阶段（<code>write</code>和<code>generate</code>方法唯一的区别在于前者打包完产物会写入磁盘，而后者不会）。</p><p>所以，真正进行打包的过程会在 <code>Output</code> 阶段进行，即在<code>bundle</code>对象的 <code>generate</code>或者<code>write</code>方法中进行。还是以上面的 demo 为例，我们稍稍改动一下构建逻辑:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> rollup <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;rollup&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> bundle <span class="token operator">=</span> <span class="token keyword">await</span> rollup<span class="token punctuation">.</span><span class="token function">rollup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    input<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> bundle<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    format<span class="token operator">:</span> <span class="token string">&#39;es&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;result:&#39;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行后可以得到如下的输出:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  output<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      exports<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      facadeModuleId<span class="token operator">:</span> &#39;/Users/code/rollup-demo/src/index.js&#39;<span class="token punctuation">,</span>
      isEntry<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      isImplicitEntry<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      type<span class="token operator">:</span> &#39;chunk&#39;<span class="token punctuation">,</span>
      code<span class="token operator">:</span> &#39;const a = <span class="token number">1</span>;\\n\\nconsole.log(a);\\n&#39;<span class="token punctuation">,</span>
      dynamicImports<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      fileName<span class="token operator">:</span> &#39;index.js&#39;<span class="token punctuation">,</span>
      <span class="token comment">// 其余属性省略</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里可以看到所有的输出信息，生成的<code>output</code>数组即为打包完成的结果。当然，如果使用 <code>bundle.write</code> 会根据配置将最后的产物写入到指定的磁盘目录中。</p><p>因此，<strong>对于一次完整的构建过程而言，</strong> <strong>Rollup</strong> <strong>会先进入到 Build 阶段，解析各模块的内容及依赖关系，然后进入</strong><code>Output</code><strong>阶段，完成打包及输出的过程</strong>。对于不同的阶段，Rollup 插件会有不同的插件工作流程，接下来我们就来拆解一下 Rollup 插件在 <code>Build</code> 和 <code>Output</code> 两个阶段的详细工作流程。</p><h2 id="拆解插件工作流" tabindex="-1"><a class="header-anchor" href="#拆解插件工作流" aria-hidden="true">#</a> 拆解插件工作流</h2><h3 id="谈谈插件-hook-类型" tabindex="-1"><a class="header-anchor" href="#谈谈插件-hook-类型" aria-hidden="true">#</a> 谈谈插件 Hook 类型</h3><p>在具体讲述 Rollup 插件工作流之前，我想先给大家介绍一下不同插件 Hook 的类型，这些类型代表了不同插件的执行特点，是我们理解 Rollup 插件工作流的基础，因此有必要跟大家好好拆解一下。</p><p>通过上文的例子，相信你可以直观地理解 Rollup 两大构建阶段（<code>Build</code>和<code>Output</code>）各自的原理。可能你会有疑问，这两个阶段到底跟插件机制有什么关系呢？实际上，插件的各种 Hook 可以根据这两个构建阶段分为两类: <code>Build Hook</code> 与 <code>Output Hook</code>。</p><ul><li><code>Build Hook</code>即在<code>Build</code>阶段执行的钩子函数，在这个阶段主要进行模块代码的转换、AST 解析以及模块依赖的解析，那么这个阶段的 Hook 对于代码的操作粒度一般为<code>模块</code>级别，也就是单文件级别。</li><li><code>Ouput Hook</code>(官方称为<code>Output Generation Hook</code>)，则主要进行代码的打包，对于代码而言，操作粒度一般为 <code>chunk</code>级别(一个 chunk 通常指很多文件打包到一起的产物)。</li></ul><p>除了根据构建阶段可以将 Rollup 插件进行分类，根据不同的 Hook 执行方式也会有不同的分类，主要包括<code>Async</code>、<code>Sync</code>、<code>Parallel</code>、<code>Squential</code>、<code>First</code>这五种。在后文中我们将接触各种各样的插件 Hook，但无论哪个 Hook 都离不开这五种执行方式。</p><p><strong>1. Async &amp; Sync</strong></p><p>首先是<code>Async</code>和<code>Sync</code>钩子函数，两者其实是相对的，分别代表<code>异步</code>和<code>同步</code>的钩子函数，两者最大的区别在于同步钩子里面不能有异步逻辑，而异步钩子可以有。</p><p><strong>2. Parallel</strong></p><p>这里指并行的钩子函数。如果有多个插件实现了这个钩子的逻辑，一旦有钩子函数是异步逻辑，则并发执行钩子函数，不会等待当前钩子完成(底层使用 <code>Promise.all</code>)。</p><p>比如对于<code>Build</code>阶段的<code>buildStart</code>钩子，它的执行时机其实是在构建刚开始的时候，各个插件可以在这个钩子当中做一些状态的初始化操作，但其实插件之间的操作并不是相互依赖的，也就是可以并发执行，从而提升构建性能。反之，对于需要<strong>依赖其他插件处理结果</strong>的情况就不适合用 <code>Parallel</code> 钩子了，比如 <code>transform</code>。</p><p><strong>3. Sequential</strong></p><p><strong>Sequential</strong> 指串行的钩子函数。这种 Hook 往往适用于插件间处理结果相互依赖的情况，前一个插件 Hook 的返回值作为后续插件的入参，这种情况就需要等待前一个插件执行完 Hook，获得其执行结果，然后才能进行下一个插件相应 Hook 的调用，如<code>transform</code>。</p><p><strong>4. First</strong></p><p>如果有多个插件实现了这个 Hook，那么 Hook 将依次运行，直到返回一个非 null 或非 undefined 的值为止。比较典型的 Hook 是 <code>resolveId</code>，一旦有插件的 resolveId 返回了一个路径，将停止执行后续插件的 resolveId 逻辑。</p><p>刚刚我们介绍了 Rollup 当中不同插件 Hook 的类型，实际上不同的类型是可以叠加的，<code>Async</code>/<code>Sync</code> 可以搭配后面三种类型中的任意一种，比如一个 Hook既可以是 <code>Async</code> 也可以是 <code>First</code> 类型，接着我们将来具体分析 Rollup 当中的插件工作流程，里面会涉及到具体的一些 Hook，大家可以具体地感受一下。</p><h3 id="build-阶段工作流" tabindex="-1"><a class="header-anchor" href="#build-阶段工作流" aria-hidden="true">#</a> Build 阶段工作流</h3><p>首先，我们来分析 Build 阶段的插件工作流程。对于 Build 阶段，插件 Hook 的调用流程如下图所示。流程图的最上面声明了不同 Hook 的类型，也就是我们在上面总结的 5 种 Hook 分类，每个方块代表了一个 Hook，边框的颜色可以表示<code>Async</code>和<code>Sync</code> 类型，方块的填充颜色可以表示<code>Parallel</code>、<code>Sequential</code> 和<code>First</code> 类型。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/58ce9fa2b0f14dd1bc50a9c849157e43~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>乍一看是不是感觉这张图非常复杂？没关系，接下来我会和你一步步分析 <code>Build Hooks</code> 的工作流程，你可以对照着图一起看。</p><ol><li><p>首先经历 <code>options</code> 钩子进行配置的转换，得到处理后的配置对象。</p></li><li><p>随之 Rollup 会调用<code>buildStart</code>钩子，正式开始构建流程。</p></li><li><p>Rollup 先进入到 <code>resolveId</code> 钩子中解析文件路径。(从 <code>input</code> 配置指定的入口文件开始)。</p></li><li><p>Rollup 通过调用<code>load</code>钩子加载模块内容。</p></li><li><p>紧接着 Rollup 执行所有的 <code>transform</code> 钩子来对模块内容进行进行自定义的转换，比如 babel 转译。</p></li><li><p>现在 Rollup 拿到最后的模块内容，进行 AST 分析，得到所有的 import 内容，调用 moduleParsed 钩子:</p><ul><li><strong>6.1</strong> 如果是普通的 import，则执行 <code>resolveId</code> 钩子，继续回到步骤<code>3</code>。</li><li><strong>6.2</strong> 如果是动态 import，则执行 <code>resolveDynamicImport</code> 钩子解析路径，如果解析成功，则回到步骤<code>4</code>加载模块，否则回到步骤<code>3</code>通过 <code>resolveId</code> 解析路径。</li></ul></li><li><p>直到所有的 import 都解析完毕，Rollup 执行<code>buildEnd</code>钩子，Build 阶段结束。</p></li></ol><p>当然，在 Rollup 解析路径的时候，即执行<code>resolveId</code>或者<code>resolveDynamicImport</code>的时候，有些路径可能会被标记为<code>external</code>(翻译为<code>排除</code>)，也就是说不参加 Rollup 打包过程，这个时候就不会进行<code>load</code>、<code>transform</code>等等后续的处理了。</p><p>在流程图最上面，不知道大家有没有注意到<code>watchChange</code>和<code>closeWatcher</code>这两个 Hook，这里其实是对应了 rollup 的<code>watch</code>模式。当你使用 <code>rollup --watch</code> 指令或者在配置文件配有<code>watch: true</code>的属性时，代表开启了 Rollup 的<code>watch</code>打包模式，这个时候 Rollup 内部会初始化一个 <code>watcher</code> 对象，当文件内容发生变化时，watcher 对象会自动触发<code>watchChange</code>钩子执行并对项目进行重新构建。在当前<strong>打包过程结束</strong>时，Rollup 会自动清除 watcher 对象调用<code>closeWacher</code>钩子。</p><h3 id="output-阶段工作流" tabindex="-1"><a class="header-anchor" href="#output-阶段工作流" aria-hidden="true">#</a> Output 阶段工作流</h3><p>好，接着我们来看看 Output 阶段的插件到底是如何来进行工作的。这个阶段的 Hook 相比于 Build 阶段稍微多一些，流程上也更加复杂。需要注意的是，其中会涉及的 Hook 函数比较多，可能会给你理解整个流程带来一些困扰，因此我会在 Hook 执行的阶段解释其大致的作用和意义，关于具体的使用大家可以去 Rollup 的官网自行查阅，毕竟这里的主线还是分析插件的执行流程，掺杂太多的使用细节反而不易于理解。下面我结合一张完整的插件流程图和你具体分析一下。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fd1da89135034f3baa25c7349a79bd91~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5dc4935d712d451fb6978fad46dd7b74~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><ol><li><p>执行所有插件的 <code>outputOptions</code> 钩子函数，对 <code>output</code> 配置进行转换。</p></li><li><p>执行 <code>renderStart</code>，并发执行 renderStart 钩子，正式开始打包。</p></li><li><p>并发执行所有插件的<code>banner</code>、<code>footer</code>、<code>intro</code>、<code>outro</code> 钩子(底层用 Promise.all 包裹所有的这四种钩子函数)，这四个钩子功能很简单，就是往打包产物的固定位置(比如头部和尾部)插入一些自定义的内容，比如协议声明内容、项目介绍等等。</p></li><li><p>从入口模块开始扫描，针对动态 import 语句执行 <code>renderDynamicImport</code>钩子，来自定义动态 import 的内容。</p></li><li><p>对每个即将生成的 <code>chunk</code>，执行 <code>augmentChunkHash</code>钩子，来决定是否更改 chunk 的哈希值，在 <code>watch</code> 模式下即可能会多次打包的场景下，这个钩子会比较适用。</p></li><li><p>如果没有遇到 <code>i<wbr>mport.meta</code> 语句，则进入下一步，否则:</p><ul><li><strong>6.1</strong> 对于 <code>i<wbr>mport.meta.url</code> 语句调用 <code>resolveFileUrl</code> 来自定义 url 解析逻辑</li><li><strong>6.2</strong> 对于其他<code>i<wbr>mport.meta</code> 属性，则调用 <code>resolveImportMeta</code> 来进行自定义的解析。</li></ul></li><li><p>接着 Rollup 会生成所有 chunk 的内容，针对每个 chunk 会依次调用插件的<code>renderChunk</code>方法进行自定义操作，也就是说，在这里时候你可以直接操作打包产物了。</p></li><li><p>随后会调用 <code>generateBundle</code> 钩子，这个钩子的入参里面会包含所有的打包产物信息，包括 <code>chunk</code> (打包后的代码)、<code>asset</code>(最终的静态资源文件)。你可以在这里删除一些 chunk 或者 asset，最终这些内容将不会作为产物输出。</p></li><li><p>前面提到了<code>rollup.rollup</code>方法会返回一个<code>bundle</code>对象，这个对象是包含<code>generate</code>和<code>write</code>两个方法，两个方法唯一的区别在于后者会将代码写入到磁盘中，同时会触发<code>writeBundle</code>钩子，传入所有的打包产物信息，包括 chunk 和 asset，和 <code>generateBundle</code>钩子非常相似。不过值得注意的是，这个钩子执行的时候，产物已经输出了，而 generateBundle 执行的时候产物还并没有输出。顺序如下图所示:</p></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/12142ea189be4a8f918cf247f408487e~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><ol start="10"><li>当上述的<code>bundle</code>的<code>close</code>方法被调用时，会触发<code>closeBundle</code>钩子，到这里 Output 阶段正式结束。</li></ol><blockquote><p>注意: 当打包过程中任何阶段出现错误，会触发 renderError 钩子，然后执行closeBundle钩子结束打包。</p></blockquote><p>到这里，我们终于梳理完了 Rollup 当中完整的插件工作流程，从一开始在<strong>构建生命周期</strong>中对两大构建阶段的感性认识，到现在<strong>插件工作流</strong>的具体分析，不禁感叹 Rollup 看似简单，实则内部细节繁杂。希望你能对照流程图好好复习几遍，彻底消化这部分的知识点，不仅仅能加深你对 Rollup 插件机制的理解，并且对 Rollup 本身打包原理的掌握也会更上一层楼。</p><h2 id="常用-hook-实战" tabindex="-1"><a class="header-anchor" href="#常用-hook-实战" aria-hidden="true">#</a> 常用 Hook 实战</h2><p>读到这里你可能会说了：上面讲了那么多 Rollup 插件机制的内容，但真正要去写一个插件，感觉还是很困难啊。</p><p>这里我想要分享两个观点：首先是<strong>二八定律</strong>，也就是 20% 的 API 应对 80% 的场景，这放在 Rollup 当中仍然是适用的。经常使用到的 Hook 也并不多，况且 Rollup 插件的写法也非常简单，至少比 Webpack 插件要容易的多，因此掌握 Rollup 的插件开发难度并不大，这个大家放心。</p><p>其次，<strong>学会模仿</strong>也特别重要。尤其是刚开始什么经验都没有的时候，观察和模仿别人优秀的实现不失为一种高效的学习方法，慢慢地自己也会轻车熟路，成为一个经验丰富的老司机。</p><p>实际上开发 Rollup 插件就是在编写一个个 Hook 函数，你可以理解为一个 Rollup 插件基本就是各种 Hook 函数的组合。因此，接下来我会详细介绍一些常用的 Hook，并以一些官方的插件实现为例，从 Hook 的特性、应用场景、入参和返回值的意义及实现代码示例这几个角度带你掌握各种 Hook 实际的使用，如此一来，开发一个完整的插件对你来说想必也不在话下了。</p><ol><li><strong>路径解析: resolveId</strong></li></ol>`,61),r=n("code",null,"Async + First",-1),d=n("code",null,"异步优先",-1),k={href:"https://github.com/rollup/plugins/blob/master/packages/alias/src/index.ts",target:"_blank",rel:"noopener noreferrer"},v=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// rollup.config.js</span>
<span class="token keyword">import</span> alias <span class="token keyword">from</span> <span class="token string">&#39;@rollup/plugin-alias&#39;</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&#39;src/index.js&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">dir</span><span class="token operator">:</span> <span class="token string">&#39;output&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">&#39;cjs&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">alias</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">entries</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token comment">// 将把 import xxx from &#39;module-a&#39; </span>
        <span class="token comment">// 转换为 import xxx from &#39;./module-a&#39;</span>
        <span class="token punctuation">{</span> <span class="token literal-property property">find</span><span class="token operator">:</span> <span class="token string">&#39;module-a&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">replacement</span><span class="token operator">:</span> <span class="token string">&#39;./module-a.js&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>插件的代码简化后如下:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">alias</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 获取 entries 配置</span>
  <span class="token keyword">const</span> entries <span class="token operator">=</span> <span class="token function">getEntries</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token comment">// 传入三个参数，当前模块路径、引用当前模块的模块路径、其余参数</span>
    <span class="token function">resolveId</span><span class="token punctuation">(</span><span class="token parameter">importee<span class="token punctuation">,</span> importer<span class="token punctuation">,</span> resolveOptions</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 先检查能不能匹配别名规则</span>
      <span class="token keyword">const</span> matchedEntry <span class="token operator">=</span> entries<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">entry</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">matches</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span>find<span class="token punctuation">,</span> importee<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 如果不能匹配替换规则，或者当前模块是入口模块，则不会继续后面的别名替换流程</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>matchedEntry <span class="token operator">||</span> <span class="token operator">!</span>importerId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// return null 后，当前的模块路径会交给下一个插件处理</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// 正式替换路径</span>
      <span class="token keyword">const</span> updatedId <span class="token operator">=</span> <span class="token function">normalizeId</span><span class="token punctuation">(</span>
        importee<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>matchedEntry<span class="token punctuation">.</span>find<span class="token punctuation">,</span> matchedEntry<span class="token punctuation">.</span>replacement<span class="token punctuation">)</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 每个插件执行时都会绑定一个上下文对象作为 this</span>
      <span class="token comment">// 这里的 this.resolve 会执行所有插件(除当前插件外)的 resolveId 钩子</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>
        updatedId<span class="token punctuation">,</span>
        importer<span class="token punctuation">,</span>
        Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">skipSelf</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> resolveOptions<span class="token punctuation">)</span>
      <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolved</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 替换后的路径即 updateId 会经过别的插件进行处理</span>
        <span class="token keyword">let</span> <span class="token literal-property property">finalResult</span><span class="token operator">:</span> PartialResolvedId <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> resolved<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>finalResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 如果其它插件没有处理这个路径，则直接返回 updateId</span>
          finalResult <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> updatedId <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> finalResult<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从这里你可以看到 resolveId 钩子函数的一些常用使用方式，它的入参分别是<code>当前模块路径</code>、<code>引用当前模块的模块路径</code>、<code>解析参数</code>，返回值可以是 null、string 或者一个对象，我们分情况讨论。</p>`,4),m=n("li",null,"返回值为 null 时，会默认交给下一个插件的 resolveId 钩子处理。",-1),b=n("li",null,"返回值为 string 时，则停止后续插件的处理。这里为了让替换后的路径能被其他插件处理，特意调用了 this.resolve 来交给其它插件处理，否则将不会进入到其它插件的处理。",-1),g={href:"https://rollupjs.org/guide/en/#resolveid",target:"_blank",rel:"noopener noreferrer"},y=n("ol",{start:"2"},[n("li",null,[n("strong",null,"load")])],-1),f=n("code",null,"Async + First",-1),h=n("strong",null,"异步优先",-1),w=n("code",null,"resolveId",-1),_={href:"https://github.com/rollup/plugins/blob/master/packages/image/src/index.js",target:"_blank",rel:"noopener noreferrer"},j=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> mimeTypes <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&#39;.jpg&#39;</span><span class="token operator">:</span> <span class="token string">&#39;image/jpeg&#39;</span><span class="token punctuation">,</span>
  <span class="token comment">// 后面图片类型省略</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">image</span><span class="token punctuation">(</span><span class="token parameter">opts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> options <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> defaults<span class="token punctuation">,</span> opts<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;image&#39;</span><span class="token punctuation">,</span>
    <span class="token function">load</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> mime <span class="token operator">=</span> mimeTypes<span class="token punctuation">[</span><span class="token function">extname</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果不是图片类型，返回 null，交给下一个插件处理</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// 加载图片具体内容</span>
      <span class="token keyword">const</span> isSvg <span class="token operator">=</span> mime <span class="token operator">===</span> mimeTypes<span class="token punctuation">[</span><span class="token string">&#39;.svg&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> format <span class="token operator">=</span> isSvg <span class="token operator">?</span> <span class="token string">&#39;utf-8&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;base64&#39;</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> source <span class="token operator">=</span> <span class="token function">readFileSync</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> format<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\r\\n]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gm</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> dataUri <span class="token operator">=</span> <span class="token function">getDataUri</span><span class="token punctuation">(</span><span class="token punctuation">{</span> format<span class="token punctuation">,</span> isSvg<span class="token punctuation">,</span> mime<span class="token punctuation">,</span> source <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> code <span class="token operator">=</span> options<span class="token punctuation">.</span>dom <span class="token operator">?</span> <span class="token function">domTemplate</span><span class="token punctuation">(</span><span class="token punctuation">{</span> dataUri <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">constTemplate</span><span class="token punctuation">(</span><span class="token punctuation">{</span> dataUri <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">return</span> code<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从中可以看到，load 钩子的入参是模块 id，返回值一般是 null、string 或者一个对象：</p>`,2),R=n("li",null,"如果返回值为 null，则交给下一个插件处理；",-1),x={href:"https://rollupjs.org/guide/en/#load",target:"_blank",rel:"noopener noreferrer"},H=p(`<ol start="3"><li><strong>代码转换: transform</strong></li></ol><p><code>transform</code> 钩子也是非常常见的一个钩子函数，为<code>Async + Sequential</code>类型，也就是<code>异步串行</code>钩子，作用是对加载后的模块内容进行自定义的转换。我们以官方的 <code>replace</code> 插件为例，这个插件的使用方式如下:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// rollup.config.js</span>
<span class="token keyword">import</span> replace <span class="token keyword">from</span> <span class="token string">&#39;@rollup/plugin-replace&#39;</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&#39;src/index.js&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">dir</span><span class="token operator">:</span> <span class="token string">&#39;output&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">&#39;cjs&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// 将会把代码中所有的 __TEST__ 替换为 1</span>
    <span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">__TEST__</span><span class="token operator">:</span> <span class="token number">1</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>内部实现也并不复杂，主要通过字符串替换来实现，核心逻辑简化如下:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> MagicString <span class="token keyword">from</span> <span class="token string">&#39;magic-string&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">replace</span><span class="token punctuation">(</span><span class="token parameter">options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;replace&#39;</span><span class="token punctuation">,</span>
    <span class="token function">transform</span><span class="token punctuation">(</span><span class="token parameter">code<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 省略一些边界情况的处理</span>
      <span class="token comment">// 执行代码替换的逻辑，并生成最后的代码和 SourceMap</span>
      <span class="token keyword">return</span> <span class="token function">executeReplacement</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">executeReplacement</span><span class="token punctuation">(</span><span class="token parameter">code<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> magicString <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MagicString</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 通过 magicString.overwrite 方法实现字符串替换</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">codeHasReplacements</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> id<span class="token punctuation">,</span> magicString<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">code</span><span class="token operator">:</span> magicString<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSourceMapEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    result<span class="token punctuation">.</span>map <span class="token operator">=</span> magicString<span class="token punctuation">.</span><span class="token function">generateMap</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">hires</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 返回一个带有 code 和 map 属性的对象</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),S={href:"https://rollupjs.org/guide/en/#transform",target:"_blank",rel:"noopener noreferrer"},I=n("code",null,"模块代码",-1),B=n("code",null,"模块 ID",-1),O=n("code",null,"code",-1),A=n("code",null,"map",-1),T=n("strong",null,"当前插件返回的代码会作为下一个插件 transform 钩子的第一个入参",-1),F=p(`<ol start="4"><li><strong>Chunk 级代码修改: renderChunk</strong></li></ol><p>这里我们继续以 <code>replace</code>插件举例，在这个插件中，也同样实现了 renderChunk 钩子函数:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">replace</span><span class="token punctuation">(</span><span class="token parameter">options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;replace&#39;</span><span class="token punctuation">,</span>
    <span class="token function">transform</span><span class="token punctuation">(</span><span class="token parameter">code<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// transform 代码省略</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">renderChunk</span><span class="token punctuation">(</span><span class="token parameter">code<span class="token punctuation">,</span> chunk</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> id <span class="token operator">=</span> chunk<span class="token punctuation">.</span>fileName<span class="token punctuation">;</span>
      <span class="token comment">// 省略一些边界情况的处理</span>
      <span class="token comment">// 拿到 chunk 的代码及文件名，执行替换逻辑</span>
      <span class="token keyword">return</span> <span class="token function">executeReplacement</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到这里 replace 插件为了替换结果更加准确，在 renderChunk 钩子中又进行了一次替换，因为后续的插件仍然可能在 transform 中进行模块内容转换，进而可能出现符合替换规则的字符串。</p>`,4),q=n("code",null,"chunk 代码内容",-1),E={href:"https://rollupjs.org/guide/en/#generatebundle",target:"_blank",rel:"noopener noreferrer"},P=n("code",null,"transform",-1),z=p(`<ol start="5"><li><strong>产物生成最后一步: generateBundle</strong></li></ol><p>generateBundle 也是<code>异步串行</code>的钩子，你可以在这个钩子里面自定义删除一些无用的 chunk 或者静态资源，或者自己添加一些文件。这里我们以 Rollup 官方的<code>html</code>插件来具体说明，这个插件的作用是通过拿到 Rollup 打包后的资源来生成包含这些资源的 HTML 文件，源码简化后如下所示:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">html</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">opts</span><span class="token operator">:</span> RollupHtmlOptions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token operator">:</span> Plugin <span class="token punctuation">{</span>
  <span class="token comment">// 初始化配置</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;html&#39;</span><span class="token punctuation">,</span>
    <span class="token keyword">async</span> <span class="token function">generateBundle</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">output</span><span class="token operator">:</span> NormalizedOutputOptions<span class="token punctuation">,</span> <span class="token literal-property property">bundle</span><span class="token operator">:</span> OutputBundle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 省略一些边界情况的处理</span>
      <span class="token comment">// 1. 获取打包后的文件</span>
      <span class="token keyword">const</span> files <span class="token operator">=</span> <span class="token function">getFiles</span><span class="token punctuation">(</span>bundle<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 2. 组装 HTML，插入相应 meta、link 和 script 标签</span>
      <span class="token keyword">const</span> source <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">template</span><span class="token punctuation">(</span><span class="token punctuation">{</span> attributes<span class="token punctuation">,</span> bundle<span class="token punctuation">,</span> files<span class="token punctuation">,</span> meta<span class="token punctuation">,</span> publicPath<span class="token punctuation">,</span> title<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 3. 通过上下文对象的 emitFile 方法，输出 html 文件</span>
      <span class="token keyword">const</span> <span class="token literal-property property">htmlFile</span><span class="token operator">:</span> EmittedAsset <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;asset&#39;</span><span class="token punctuation">,</span>
        source<span class="token punctuation">,</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Rollup HTML Asset&#39;</span><span class="token punctuation">,</span>
        fileName
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emitFile</span><span class="token punctuation">(</span>htmlFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),C=n("code",null,"output 配置",-1),M={href:"https://rollupjs.org/guide/en/#generatebundle",target:"_blank",rel:"noopener noreferrer"},V=n("code",null,"emitFile",-1),U=p('<p>好，常用的 Rollup 钩子我们就先介绍到这里，相信这些知识点已经足够你应付大多数的构建场景了。顺便说一句，大家在后面的章节可以了解到，Vite 的插件机制也是基于 Rollup 来实现的，像上面介绍的这些常用钩子在 Vite 当中也随处可见，因此，掌握了这些常用钩子，也相当于给 Vite 插件的学习做下了很好的铺垫。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>好，到这里本篇的内容就结束了。在这篇文章中，我们首先认识到 Rollup 为了追求扩展性和可维护性，引入了插件机制，而后给你介绍了 Rollup 的 <code>Build</code> 和<code>Output</code> 两大构建阶段，接着给你详细地分析了两大构建阶段的插件工作流，最后通过几个实际的官方插件带你熟悉了一些常见的 Hook。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a353a4349c124b108a223f29bf8fc9e8~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>Rollup 的插件开发整体上是非常简洁和灵活的，总结为以下几个方面:</p><ul><li><strong>插件逻辑集中管理</strong>。各个阶段的 Hook 都可以放在一个插件中编写，比如上述两个 Webpack 的 Loader 和 Plugin 功能在 Rollup 只需要用一个插件，分别通过 transform 和 renderChunk 两个 Hook 来实现。</li><li><strong>插件 API 简洁，符合直觉</strong>。Rollup 插件基本上只需要返回一个包含 name 和各种钩子函数的对象即可，也就是声明一个 name 属性，然后写几个钩子函数即可。</li><li><strong>插件间的互相调用</strong>。比如刚刚介绍的<code>alias</code>插件，可以通过插件上下文对象的<code>resolve</code>方法，继续调用其它插件的 <code>resolveId</code>钩子，类似的还有<code>load</code>方法，这就大大增加了插件的灵活性。</li></ul><p>现在，相信你已经从宏观到细节上，已经对 Rollup 插件有了全面的掌握，为接下来的 Vite 学习打下了坚实的基础。如果你还没有完全掌握，不用着急，这部分的内容本身有点难度，希望你能回头复习几遍，相信你一定能彻底拿下这些内容。大家加油吧！</p>',7);function N(L,D){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("resolveId 钩子一般用来解析模块路径，为"),r,s("类型即"),d,s("的钩子。这里我们拿官方的 "),n("a",k,[s("alias 插件"),e(a)]),s(" 来说明，这个插件用法演示如下:")]),v,n("ul",null,[m,b,n("li",null,[s("返回值为一个对象，也会停止后续插件的处理，不过这个对象就可以包含"),n("a",g,[s("更多的信息"),e(a)]),s("了，包括解析后的路径、是否被 enternal、是否需要 tree-shaking 等等，不过大部分情况下返回一个 string 就够用了。")])]),y,n("p",null,[s("load 为"),f,s("类型，即"),h,s("的钩子，和"),w,s("类似。它的作用是通过 resolveId 解析后的路径来加载模块内容。这里，我们以官方的 "),n("a",_,[s("image 插件"),e(a)]),s(" 为例来介绍一下 load 钩子的使用。源码简化后如下所示:")]),j,n("ul",null,[R,n("li",null,[s("如果返回值为 string 或者对象，则终止后续插件的处理，如果是对象可以包含 SourceMap、AST 等"),n("a",x,[s("更详细的信息"),e(a)]),s("。")])]),H,n("p",null,[n("a",S,[s("transform 钩子"),e(a)]),s("的入参分别为"),I,s("、"),B,s("，返回一个包含 "),O,s("(代码内容) 和 "),A,s("(SourceMap 内容) 属性的对象，当然也可以返回 null 来跳过当前插件的 transform 处理。需要注意的是，"),T,s("，实现类似于瀑布流的处理。")]),F,n("p",null,[s("这里我们把关注点放到 renderChunk 函数本身，可以看到有两个入参，分别为 "),q,s("、"),n("a",E,[s("chunk 元信息"),e(a)]),s("，返回值跟 "),P,s(" 钩子类似，既可以返回包含 code 和 map 属性的对象，也可以通过返回 null 来跳过当前钩子的处理。")]),z,n("p",null,[s("相信从插件的具体实现中，你也能感受到这个钩子的强大作用了。入参分别为"),C,s("、"),n("a",M,[s("所有打包产物的元信息对象"),e(a)]),s("，通过操作元信息对象你可以删除一些不需要的 chunk 或者静态资源，也可以通过 插件上下文对象的"),V,s("方法输出自定义文件。")]),U])}const G=t(i,[["render",N],["__file","di11zhang—Vitegoujianjishi(xia)——shenrulijieRollupdechajianjizhi.html.vue"]]);export{G as default};
