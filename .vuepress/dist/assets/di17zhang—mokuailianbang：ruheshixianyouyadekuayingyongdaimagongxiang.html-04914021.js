import{_ as n,o as s,c as a,a as t}from"./app-48690364.js";const p={},e=t(`<p>在 2020 年上半年，Webpack 提出了一项非常激动人心的特性——<code>Module Federation</code>(译为<code>模块联邦</code>)，这个特性一经推出就获得了业界的广泛关注，甚至被称为前端构建领域的<code>Game Changer</code>。实际上，这项技术确实很好地解决了多应用模块复用的问题，相比之前的各种解决方案，它的解决方式更加优雅和灵活。但从另一个角度来说，Module Federation 代表的是一种通用的解决思路，并不局限于某一个特定的构建工具，因此，在 Vite 中我们同样可以实现这个特性，并且社区已经有了比较成熟的解决方案。</p><p>在接下来的文章中，首先我将和你一起深入探讨 <code>Module Federation</code>(简称 <code>MF</code>) 的核心概念，分析它到底解决了什么问题、对于这些问题原来存在哪些解决方案、为什么 <code>MF</code>的方案更优。然后我会用一个具体的项目示例带你进行代码实操，让你学会在 Vite 正确地使用 MF 特性。当然，在最后我也会给大家剖析 Module Federation 内部的实现原理，让你不仅仅停留在会用的地步，而且也能了解其深层的运作机制和实现手段。</p><h2 id="模块共享之痛" tabindex="-1"><a class="header-anchor" href="#模块共享之痛" aria-hidden="true">#</a> 模块共享之痛</h2><p>对于一个互联网产品来说，一般会有不同的细分应用，比如<code>腾讯文档</code>可以分为<code>word</code>、<code>excel</code>、<code>ppt</code>等等品类，<code>抖音 PC 站点</code>可以分为<code>短视频站点</code>、<code>直播站点</code>、<code>搜索站点</code>等子站点，而每个子站又彼此独立，可能由不同的开发团队进行单独的开发和维护，看似没有什么问题，但实际上会经常遇到一些模块共享的问题，也就是说不同应用中总会有一些共享的代码，比如公共组件、公共工具函数、公共第三方依赖等等。对于这些共享的代码，除了通过简单的复制粘贴，还有没有更好的复用手段？</p><h3 id="_1-发布-npm-包" tabindex="-1"><a class="header-anchor" href="#_1-发布-npm-包" aria-hidden="true">#</a> 1. 发布 npm 包</h3><p>发布 npm 包是一种常见的复用模块的做法，我们可以将一些公用的代码封装为一个 npm 包，具体的发布更新流程是这样的:</p><ol><li>公共库 lib1 改动，发布到 npm；</li><li>所有的应用安装新的依赖，并进行联调。 <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5196f352c9124076a9f446cec686fb65~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></li></ol><p>封装 npm 包可以解决模块复用的问题，但它本身又引入了新的问题:</p><ol><li><strong>开发效率问题</strong>。每次改动都需要发版，并所有相关的应用安装新依赖，流程比较复杂。</li><li><strong>项目构建问题</strong>。引入了公共库之后，公共库的代码都需要打包到项目最后的产物后，导致产物体积偏大，构建速度相对较慢。</li></ol><p>因此，这种方案并不能作为最终方案，只是暂时用来解决问题的无奈之举。</p><h3 id="_2-git-submodule" tabindex="-1"><a class="header-anchor" href="#_2-git-submodule" aria-hidden="true">#</a> 2. Git Submodule</h3><p>通过 <code>git submodule</code> 的方式，我们可以将代码封装成一个公共的 Git 仓库，然后复用到不同的应用中，但也需要经历如下的步骤：</p><ol><li>公共库 lib1 改动，提交到 Git 远程仓库；</li><li>所有的应用通过<code>git submodule</code>命令更新子仓库代码，并进行联调。</li></ol><p>你可以看到，整体的流程其实跟发 npm 包相差无几，仍然存在 npm 包方案所存在的各种问题。</p><h3 id="_3-依赖外部化-external-cdn-引入" tabindex="-1"><a class="header-anchor" href="#_3-依赖外部化-external-cdn-引入" aria-hidden="true">#</a> 3. 依赖外部化(external)+ CDN 引入</h3><p>在上一节中我们提到了<code>external</code>的概念，即对于某些第三方依赖我们并不需要让其参与构建，而是使用某一份公用的代码。按照这个思路，我们可以在构建引擎中对某些依赖声明<code>external</code>，然后在 HTML 中加入依赖的 CDN 地址:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>icon<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>image/svg+xml<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/src/favicon.svg<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Vite App<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 从 CDN 上引入第三方依赖的代码 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.jsdelivr.net/npm/react@17.0.2/index.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.jsdelivr.net/npm/react-dom@17.0.2/index.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上面的例子所示，我们可以对<code>react</code>和<code>react-dom</code>使用 CDN 的方式引入，一般使用<code>UMD</code>格式产物，这样不同的项目间就可以通过<code>window.React</code>来使用同一份依赖的代码了，从而达到模块复用的效果。不过在实际的使用场景，这种方案的局限性也很突出:</p><ol><li><strong>兼容性问题</strong>。并不是所有的依赖都有 UMD 格式的产物，因此这种方案不能覆盖所有的第三方 npm 包。</li><li><strong>依赖顺序问题</strong>。我们通常需要考虑间接依赖的问题，如对于 antd 组件库，它本身也依赖了 react 和 moment，那么<code>react</code>和<code>moment</code> 也需要 <code>external</code>，并且在 HTML 中引用这些包，同时也要<strong>严格保证</strong>引用的顺序，比如说<code>moment</code>如果放在了<code>antd</code>后面，代码可能无法运行。而第三方包背后的间接依赖数量一般很庞大，如果逐个处理，对于开发者来说简直就是噩梦。</li><li><strong>产物体积问题</strong>。由于依赖包被声明<code>external</code>之后，应用在引用其 CDN 地址时，会全量引用依赖的代码，这种情况下就没有办法通过 Tree Shaking 来去除无用代码了，会导致应用的性能有所下降。</li></ol><h3 id="_4-monorepo" tabindex="-1"><a class="header-anchor" href="#_4-monorepo" aria-hidden="true">#</a> 4. Monorepo</h3><p>作为一种新的项目管理方式，Monorepo 也可以很好地解决模块复用的问题。在 Monorepo 架构下，多个项目可以放在同一个 Git 仓库中，各个互相依赖的子项目通过软链的方式进行调试，代码复用显得非常方便，如果有依赖的代码变动，那么用到这个依赖的项目当中会立马感知到。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ca9fdeedc8ec45e8bdb977f8b924e16e~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>不得不承认，对于应用间模块复用的问题，Monorepo 是一种非常优秀的解决方案，但与此同时，它也给团队带来了一些挑战:</p><ol><li><p><strong>所有的应用代码必须放到同一个仓库</strong>。如果是旧有项目，并且每个应用使用一个 Git 仓库的情况，那么使用 Monorepo 之后项目架构调整会比较大，也就是说改造成本会相对比较高。</p></li><li><p>Monorepo 本身也存在一些天然的局限性，如项目数量多起来之后依赖安装时间会很久、项目整体构建时间会变长等等，我们也需要去解决这些局限性所带来的的开发效率问题。而这项工作一般需要投入专业的人去解决，如果没有足够的人员投入或者基建的保证，Monorepo 可能并不是一个很好的选择。</p></li><li><p><strong>项目构建问题</strong>。跟 <code>发 npm 包</code>的方案一样，所有的公共代码都需要进入项目的构建流程中，产物体积还是会偏大。</p></li></ol><h2 id="mf-核心概念" tabindex="-1"><a class="header-anchor" href="#mf-核心概念" aria-hidden="true">#</a> MF 核心概念</h2><p>以上说了那么多业界现有的方案，并分析各自的优缺点，那么下面我们就来正式介绍<code>Module Federation</code>，即模块联邦解决方案，看看它到底是如何解决模块复用问题的。</p><p>模块联邦中主要有两种模块: <code>本地模块</code>和<code>远程模块</code>。</p><p>本地模块即为普通模块，是当前构建流程中的一部分，而远程模块不属于当前构建流程，在本地模块的运行时进行导入，同时本地模块和远程模块可以共享某些依赖的代码，如下图所示:</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5a612a1b0f394d3fbf2cf2afe9bb0d70~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>值得强调的是，在模块联邦中，每个模块既可以是<code>本地模块</code>，导入其它的<code>远程模块</code>，又可以作为远程模块，被其他的模块导入。如下面这个例子所示:</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/13c0775cc53e48e4ad34400d63c4033e~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><blockquote><p>如图，其中 A 模块既可以作为本地模块导入 B，又可以作为远程模块被 C 导入。</p></blockquote><p>以上就是模块联邦的主要设计原理，现在我们来好好分析一下这种设计究竟有哪些优势:</p><ol><li><p><strong>实现任意粒度的模块共享</strong>。这里所指的模块粒度可大可小，包括第三方 npm 依赖、业务组件、工具函数，甚至可以是整个前端应用！而整个前端应用能够共享产物，代表着各个应用单独开发、测试、部署，这也是一种<code>微前端</code>的实现。</p></li><li><p><strong>优化构建产物体积</strong>。远程模块可以从本地模块运行时被拉取，而不用参与本地模块的构建，可以加速构建过程，同时也能减小构建产物。</p></li><li><p><strong>运行时按需加载</strong>。远程模块导入的粒度可以很小，如果你只想使用 app1 模块的<code>add</code>函数，只需要在 app1 的构建配置中导出这个函数，然后在本地模块中按照诸如<code>import(&#39;app1/add&#39;)</code>的方式导入即可，这样就很好地实现了模块按需加载。</p></li><li><p><strong>第三方依赖共享</strong>。通过模块联邦中的共享依赖机制，我们可以很方便地实现在模块间公用依赖代码，从而避免以往的<code>external + CDN 引入</code>方案的各种问题。</p></li></ol><p>从以上的分析你可以看到，模块联邦近乎完美地解决了以往模块共享的问题，甚至能够实现应用级别的共享，进而达到<code>微前端</code>的效果。下面，我们就来以具体的例子来学习在 Vite 中如何使用模块联邦的能力。</p><h2 id="mf-应用实战" tabindex="-1"><a class="header-anchor" href="#mf-应用实战" aria-hidden="true">#</a> MF 应用实战</h2><p>社区中已经提供了一个比较成熟的 Vite 模块联邦方案: <code>vite-plugin-federation</code>，这个方案基于 Vite(或者 Rollup) 实现了完整的模块联邦能力。接下来，我们基于它来实现模块联邦应用。</p><p>首先初始化两个 Vue 的脚手架项目<code>host</code>和<code>remote</code>，然后分别安装<code>vite-plugin-federation</code>插件:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>pnpm install <span class="token decorator"><span class="token at operator">@</span><span class="token function">originjs</span></span><span class="token operator">/</span>vite<span class="token operator">-</span>plugin<span class="token operator">-</span>federation <span class="token operator">-</span><span class="token constant">D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在配置文件中分别加入如下的配置:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 远程模块配置</span>
<span class="token comment">// remote/vite.config.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vite&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">&quot;@vitejs/plugin-vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> federation <span class="token keyword">from</span> <span class="token string">&quot;@originjs/vite-plugin-federation&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// https://vitejs.dev/config/</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">// 模块联邦配置</span>
    <span class="token function">federation</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      name<span class="token operator">:</span> <span class="token string">&quot;remote_app&quot;</span><span class="token punctuation">,</span>
      filename<span class="token operator">:</span> <span class="token string">&quot;remoteEntry.js&quot;</span><span class="token punctuation">,</span>
      <span class="token comment">// 导出模块声明</span>
      exposes<span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&quot;./Button&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./src/components/Button.js&quot;</span><span class="token punctuation">,</span>
        <span class="token string-property property">&quot;./App&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./src/App.vue&quot;</span><span class="token punctuation">,</span>
        <span class="token string-property property">&quot;./utils&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./src/utils.ts&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token comment">// 共享依赖声明</span>
      shared<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;vue&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// 打包配置</span>
  build<span class="token operator">:</span> <span class="token punctuation">{</span>
    target<span class="token operator">:</span> <span class="token string">&quot;esnext&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 本地模块配置</span>
<span class="token comment">// host/vite.config.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vite&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">&quot;@vitejs/plugin-vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> federation <span class="token keyword">from</span> <span class="token string">&quot;@originjs/vite-plugin-federation&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">federation</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token comment">// 远程模块声明</span>
      remotes<span class="token operator">:</span> <span class="token punctuation">{</span>
        remote_app<span class="token operator">:</span> <span class="token string">&quot;http://localhost:3001/assets/remoteEntry.js&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token comment">// 共享依赖声明</span>
      shared<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;vue&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  build<span class="token operator">:</span> <span class="token punctuation">{</span>
    target<span class="token operator">:</span> <span class="token string">&quot;esnext&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在如上的配置中，我们完成了远程模块的模块导出及远程模块在本地模块的注册，对于远程模块的具体实现，你可以参考小册的 Github 仓库，这里就不一一赘述了。接下来我们把关注点放在如何使用远程模块上面。</p><p>首先我们需要对远程模块进行打包，在 remote 路径下依赖执行:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 打包产物</span>
pnpm run build
<span class="token comment">// 模拟部署效果，一般会在生产环境将产物上传到 CDN </span>
npx vite preview <span class="token operator">--</span>port<span class="token operator">=</span><span class="token number">3001</span> <span class="token operator">--</span>strictPort
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们在 <code>host</code>项目中使用远程模块:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token operator">&lt;</span>script setup lang<span class="token operator">=</span><span class="token string">&quot;ts&quot;</span><span class="token operator">&gt;</span>
<span class="token keyword">import</span> HelloWorld <span class="token keyword">from</span> <span class="token string">&quot;./components/HelloWorld.vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineAsyncComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 导入远程模块</span>
<span class="token comment">// 1. 组件</span>
<span class="token keyword">import</span> RemoteApp <span class="token keyword">from</span> <span class="token string">&quot;remote_app/App&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 2. 工具函数</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> add <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;remote_app/utils&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 3. 异步组件</span>
<span class="token keyword">const</span> AysncRemoteButton <span class="token operator">=</span> <span class="token function">defineAsyncComponent</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;remote_app/Button&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> data<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>img alt<span class="token operator">=</span><span class="token string">&quot;Vue logo&quot;</span> src<span class="token operator">=</span><span class="token string">&quot;./assets/logo.png&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>HelloWorld <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>RemoteApp <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>AysncRemoteButton <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>应用 <span class="token number">2</span> 工具函数计算结果<span class="token operator">:</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> data <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>
#app <span class="token punctuation">{</span>
  font<span class="token operator">-</span>family<span class="token operator">:</span> Avenir<span class="token punctuation">,</span> Helvetica<span class="token punctuation">,</span> Arial<span class="token punctuation">,</span> sans<span class="token operator">-</span>serif<span class="token punctuation">;</span>
  <span class="token operator">-</span>webkit<span class="token operator">-</span>font<span class="token operator">-</span>smoothing<span class="token operator">:</span> antialiased<span class="token punctuation">;</span>
  <span class="token operator">-</span>moz<span class="token operator">-</span>osx<span class="token operator">-</span>font<span class="token operator">-</span>smoothing<span class="token operator">:</span> grayscale<span class="token punctuation">;</span>
  text<span class="token operator">-</span>align<span class="token operator">:</span> center<span class="token punctuation">;</span>
  color<span class="token operator">:</span> #2c3e50<span class="token punctuation">;</span>
  margin<span class="token operator">-</span>top<span class="token operator">:</span> 60px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动项目后你可以看到如下的结果:</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3f5ca3b5434d4755abe67b0d66025e2d~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>应用 2 的组件和工具函数逻辑已经在应用 1 中生效，也就是说，我们完成了远程模块在本地模块的运行时引入。</p><p>让我们来梳理一下整体的使用流程:</p><ul><li><ol><li>远程模块通过<code>exposes</code> 注册导出的模块，本地模块通过 <code>remotes</code> 注册远程模块地址。</li></ol></li><li><ol start="2"><li>远程模块进行构建，并部署到云端。</li></ol></li><li><ol start="3"><li>本地通过<code>import &#39;远程模块名称/xxx&#39;</code>的方式来引入远程模块，实现运行时加载。</li></ol></li></ul><p>当然，还有几个要点需要给大家补充一下:</p><ol><li>在模块联邦中的配置中，<code>exposes</code> 和<code>remotes</code>参数其实并不冲突，也就是说一个模块既可以作为本地模块，又可以作为远程模块。</li><li>由于 Vite 的插件机制与 Rollup 兼容，<code>vite-plugin-federation</code>方案在 Rollup 中也是完全可以使用的。</li></ol><h2 id="mf-实现原理" tabindex="-1"><a class="header-anchor" href="#mf-实现原理" aria-hidden="true">#</a> MF 实现原理</h2><p>从以上示例中大家可以看到，Module Federation 使用比较简单，对已有项目来说改造成本并不大。那么，这么强大而易用的特性是如何在 Vite 中得以实现的呢？接下来，我们来深入探究一下 MF 背后的实现原理，分析<code>vite-plugin-federation</code>这个插件背后究竟做了些什么。</p><p>总体而言，实现模块联邦有三大主要的要素:</p><ol><li><p><code>Host</code>模块: 即本地模块，用来消费远程模块。</p></li><li><p><code>Remote</code>模块: 即远程模块，用来生产一些模块，并暴露<code>运行时容器</code>供本地模块消费。</p></li><li><p><code>Shared</code>依赖: 即共享依赖，用来在本地模块和远程模块中实现第三方依赖的共享。</p></li></ol><p>首先，我们来看看本地模块是如何消费远程模块的。之前，我们在本地模块中写过这样的引入语句:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> RemoteApp <span class="token keyword">from</span> <span class="token string">&quot;remote_app/App&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们来看看 Vite 将这段代码编译成了什么样子:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 为了方便阅读，以下部分方法的函数名进行了简化</span>
<span class="token comment">// 远程模块表</span>
<span class="token keyword">const</span> remotesMap <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&#39;remote_app&#39;</span><span class="token operator">:</span><span class="token punctuation">{</span>url<span class="token operator">:</span><span class="token string">&#39;http://localhost:3001/assets/remoteEntry.js&#39;</span><span class="token punctuation">,</span>format<span class="token operator">:</span><span class="token string">&#39;esm&#39;</span><span class="token punctuation">,</span>from<span class="token operator">:</span><span class="token string">&#39;vite&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;shared&#39;</span><span class="token operator">:</span><span class="token punctuation">{</span>url<span class="token operator">:</span><span class="token string">&#39;vue&#39;</span><span class="token punctuation">,</span>format<span class="token operator">:</span><span class="token string">&#39;esm&#39;</span><span class="token punctuation">,</span>from<span class="token operator">:</span><span class="token string">&#39;vite&#39;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">ensure</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> remote <span class="token operator">=</span> remoteMap<span class="token punctuation">[</span>remoteId<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">// 做一些初始化逻辑，暂时忽略</span>
  <span class="token comment">// 返回的是运行时容器</span>
<span class="token punctuation">}</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getRemote</span><span class="token punctuation">(</span>remoteName<span class="token punctuation">,</span> componentName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">ensure</span><span class="token punctuation">(</span>remoteName<span class="token punctuation">)</span>
    <span class="token comment">// 从运行时容器里面获取远程模块</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>remote <span class="token operator">=&gt;</span> remote<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>componentName<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>factory <span class="token operator">=&gt;</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// import 语句被编译成了这样</span>
<span class="token comment">// tip: es2020 产物语法已经支持顶层 await</span>
<span class="token keyword">const</span> __remote_appApp <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getRemote</span><span class="token punctuation">(</span><span class="token string">&quot;remote_app&quot;</span> <span class="token punctuation">,</span> <span class="token string">&quot;./App&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了 import 语句被编译之外，在代码中还添加了<code>remoteMap</code>和一些工具函数，它们的目的很简单，就是通过访问远端的<strong>运行时容器</strong>来拉取对应名称的模块。</p><p>而运行时容器其实就是指远程模块打包产物<code>remoteEntry.js</code>的导出对象，我们来看看它的逻辑是怎样的:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// remoteEntry.js</span>
<span class="token keyword">const</span> moduleMap <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&quot;./Button&quot;</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./__federation_expose_Button.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>module <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> module<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;./App&quot;</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">dynamicLoadingCss</span><span class="token punctuation">(</span><span class="token string">&#39;./__federation_expose_App.css&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./__federation_expose_App.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>module <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> module<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;./utils&#39;</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./__federation_expose_Utils.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>module <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> module<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 加载 css</span>
<span class="token keyword">const</span> <span class="token function-variable function">dynamicLoadingCss</span> <span class="token operator">=</span> <span class="token punctuation">(</span>cssFilePath<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> metaUrl <span class="token operator">=</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> metaUrl <span class="token operator">==</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;The remote style takes effect only when the build.target option in the vite.config.ts file is higher than that of &quot;es2020&quot;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> curUrl <span class="token operator">=</span> metaUrl<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> metaUrl<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&#39;remoteEntry.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;link&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  element<span class="token punctuation">.</span>href <span class="token operator">=</span> curUrl <span class="token operator">+</span> cssFilePath<span class="token punctuation">;</span>
  element<span class="token punctuation">.</span>rel <span class="token operator">=</span> <span class="token string">&#39;stylesheet&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 关键方法，暴露模块</span>
<span class="token keyword">const</span> <span class="token function-variable function">get</span> <span class="token operator">=</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> moduleMap<span class="token punctuation">[</span>module<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">init</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 初始化逻辑，用于共享模块，暂时省略</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token punctuation">{</span> dynamicLoadingCss<span class="token punctuation">,</span> get<span class="token punctuation">,</span> init <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从运行时容器的代码中我们可以得出一些关键的信息:</p><ul><li><ol><li><code>moduleMap</code>用来记录导出模块的信息，所有在<code>exposes</code>参数中声明的模块都会打包成单独的文件，然后通过 <code>dynamic import</code> 进行导入。</li></ol></li><li><ol start="2"><li>容器导出了十分关键的<code>get</code>方法，让本地模块能够通过调用这个方法来访问到该远程模块。</li></ol></li></ul><p>至此，我们就梳理清楚了远程模块的<code>运行时容器</code>与本地模块的交互流程，如下图所示</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0091bec4ab12419085316153d7d1a6fb~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>接下来，我们继续分析共享依赖的实现。拿之前的示例项目来说，本地模块设置了<code>shared: [&#39;vue&#39;]</code>参数之后，当它执行远程模块代码的时候，一旦遇到了引入<code>vue</code>的情况，会优先使用本地的 <code>vue</code>，而不是远端模块中的<code>vue</code>。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e800a628da434dff9c57ca9cf172fd97~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>让我们把焦点放到容器初始化的逻辑中，回到本地模块编译后的<code>ensure</code>函数逻辑:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// host</span>

<span class="token comment">// 下面是共享依赖表。每个共享依赖都会单独打包</span>
<span class="token keyword">const</span> shareScope <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&#39;vue&#39;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token string-property property">&#39;3.2.31&#39;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token function-variable function">get</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;./__federation_shared_vue.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> loaded<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">ensure</span><span class="token punctuation">(</span>remoteId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> remote <span class="token operator">=</span> remotesMap<span class="token punctuation">[</span>remoteId<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>remote<span class="token punctuation">.</span>inited<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span>resolve <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>remote<span class="token punctuation">.</span>inited<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          remote<span class="token punctuation">.</span>lib <span class="token operator">=</span> window<span class="token punctuation">[</span>remoteId<span class="token punctuation">]</span><span class="token punctuation">;</span>
          remote<span class="token punctuation">.</span>lib<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>shareScope<span class="token punctuation">)</span><span class="token punctuation">;</span>
          remote<span class="token punctuation">.</span>inited <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span>remote<span class="token punctuation">.</span>lib<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现，<code>ensure</code>函数的主要逻辑是将共享依赖信息传递给远程模块的运行时容器，并进行容器的初始化。接下来我们进入容器初始化的逻辑<code>init</code>中:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token function-variable function">init</span> <span class="token operator">=</span><span class="token punctuation">(</span>shareScope<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  globalThis<span class="token punctuation">.</span>__federation_shared__<span class="token operator">=</span> globalThis<span class="token punctuation">.</span>__federation_shared__<span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">// 下面的逻辑大家不用深究，作用很简单，就是将本地模块的\`共享模块表\`绑定到远程模块的全局 window 对象上</span>
  Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>shareScope<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> versionKey <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> versionValue <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> scope <span class="token operator">=</span> versionValue<span class="token punctuation">.</span>scope <span class="token operator">||</span> <span class="token string">&#39;default&#39;</span><span class="token punctuation">;</span>
    globalThis<span class="token punctuation">.</span>__federation_shared__<span class="token punctuation">[</span>scope<span class="token punctuation">]</span> <span class="token operator">=</span> globalThis<span class="token punctuation">.</span>__federation_shared__<span class="token punctuation">[</span>scope<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> shared<span class="token operator">=</span> globalThis<span class="token punctuation">.</span>__federation_shared__<span class="token punctuation">[</span>scope<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span>shared<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> shared<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">||</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span>versionKey<span class="token punctuation">]</span> <span class="token operator">=</span> versionValue<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当本地模块的<code>共享依赖表</code>能够在远程模块访问时，远程模块内也就能够使用本地模块的依赖(如 <code>vue</code>)了。现在我们来看看远程模块中对于<code>import { h } from &#39;vue&#39;</code>这种引入代码被转换成了什么样子:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// __federation_expose_Button.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>importShared<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./__federation_fn_import.js&#39;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> h <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">importShared</span><span class="token punctuation">(</span><span class="token string">&#39;vue&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不难看到，第三方依赖模块的处理逻辑都集中到了 <code>importShared</code> 函数，让我们来一探究竟:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// __federation_fn_import.js</span>
<span class="token keyword">const</span> moduleMap<span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&#39;vue&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
     <span class="token function-variable function">get</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token function">__federation_import</span><span class="token punctuation">(</span><span class="token string">&#39;./__federation_shared_vue.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
     <span class="token keyword">import</span><span class="token operator">:</span><span class="token boolean">true</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 第三方模块缓存</span>
<span class="token keyword">const</span> moduleCache <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">importShared</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>shareScope <span class="token operator">=</span> <span class="token string">&#39;default&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> moduleCache<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">?</span> 
    <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">r</span><span class="token punctuation">(</span>moduleCache<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> 
    <span class="token function">getProviderSharedModule</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> shareScope<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getProviderSharedModule</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> shareScope<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 从 window 对象中寻找第三方包的包名，如果发现有挂载，则获取本地模块的依赖</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>xxx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">getHostDep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">getConsumerSharedModule</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getConsumerSharedModule</span><span class="token punctuation">(</span>name <span class="token punctuation">,</span> shareScope<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>moduleMap<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token operator">?.</span>import<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> module <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">await</span> moduleMap<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    moduleCache<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> module<span class="token punctuation">;</span>
    <span class="token keyword">return</span> module<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">consumer config import=false,so cant use callback shared module</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于远程模块运行时容器初始化时已经挂载了共享依赖的信息，远程模块内部可以很方便的感知到当前的依赖是不是共享依赖，如果是共享依赖则使用本地模块的依赖代码，否则使用远程模块自身的依赖产物代码。最后我画了一张流程图，你可以参考学习:</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0f8d0e3158264c45bfd25dd205d65fd0~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>本小节的内容到这里就接近尾声了，在本小节中，你需要重点掌握<strong>模块复用的历史解决方案</strong>、<strong>模块联邦方案的优势</strong>、<strong>vite-plugin-federation 插件的使用及原理</strong>。</p><p>首先，我给你介绍了模块复用的问题有哪些历史解决方案，主要包括<code>发布 npm 包</code>、<code>Git Submodule</code>、<code>依赖外部化 + CDN 导入</code>和 <code>Monorepo 架构</code>，也分析了各自的优势与局限性，然后引出 Module Federation(MF) 的概念，并分析了它为什么能近乎完美地解决模块共享问题，主要原因包括<code>实现了任意粒度的模块共享</code>、<code>减少构建产物体积</code>、<code>运行时按需加载</code>以及<code>共享第三方依赖</code>这四个方面。</p><p>接下来，我用一个具体的项目示例来告诉你如何在 Vite 中使用模块联邦的特性，即通过<code>vite-plugin-federation</code>这个插件来完成 MF 的搭建。最后，我也给你详细介绍了 MF 底层的实现原理，从<code>本地模块</code>、<code>远程模块</code>、<code>共享依赖</code>三个视角来给你剖析 MF 的实现机制和核心编译逻辑。</p><p>在此我想给你抛出一个问题，有人说模块联邦的架构是开历史的倒车，远程模块依然需要部署到云端(CDN)，跟很久之前 HTML 中直接使用 <code>CDN 地址</code> 引入依赖的方式如出一辙。请问这个观点有问题吗？问题出在什么地方？欢迎在评论区留下你的看法，也希望本文的内容能对你有所启发，我们下一节再见。</p>`,85),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","di17zhang—mokuailianbang：ruheshixianyouyadekuayingyongdaimagongxiang.html.vue"]]);export{r as default};
