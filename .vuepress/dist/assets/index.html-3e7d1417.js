import{_ as l,r as o,o as c,c as i,a as n,b as s,e as a,d as e}from"./app-9f91937e.js";const u={},r=e('<h1 id="面试万字总结-js-篇" tabindex="-1"><a class="header-anchor" href="#面试万字总结-js-篇" aria-hidden="true">#</a> 面试万字总结（JS 篇）</h1><h1 id="一、js-基础" tabindex="-1"><a class="header-anchor" href="#一、js-基础" aria-hidden="true">#</a> 一、JS 基础</h1><h2 id="_1-1-js-有哪些数据类型" tabindex="-1"><a class="header-anchor" href="#_1-1-js-有哪些数据类型" aria-hidden="true">#</a> 1.1 Js 有哪些数据类型</h2>',3),p=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"JavaScript 共有八种数据类型"),n("p",null,"基本数据类型： Undefined、Null、Boolean、Number、String、Symbol、BigInt。"),n("p",null,"引用数据类型：Object"),n("p",null,"其中 Symbol 和 BigInt 是 ES6 中新增的数据类型："),n("ul",null,[n("li",null,"Symbol 代表创建后独一无二且不可变的数据类型，它主要是为了解决可能出现的全局变量冲突的问题。"),n("li",null,"BigInt 是一种数字类型的数据，它可以表示任意精度格式的整数，使用 BigInt 可以安全地存储和操作大整数，即使这个数已经超出了 Number 能够表示的安全整数范围。")])],-1),d=n("h2",{id:"_1-2-说说你对堆区和栈区的理解",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-2-说说你对堆区和栈区的理解","aria-hidden":"true"},"#"),s(" 1.2 说说你对堆区和栈区的理解")],-1),k=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("strong",null,"在操作系统中，内存被分为栈区和堆区")]),n("ul",null,[n("li",null,"栈区内存由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。"),n("li",null,"堆区内存一般由开发着分配释放，若开发者不释放，程序结束时可能由垃圾回收机制回收。")]),n("p",null,[n("strong",null,"在数据结构中：")]),n("ul",null,[n("li",null,"在数据结构中，栈中数据的存取方式为先进后出。"),n("li",null,"堆是一个优先队列，是按优先级来进行排序的，优先级可以按照大小来规定。")]),n("p",null,[n("strong",null,"数据的储存方式")]),n("ul",null,[n("li",null,"原始数据类型直接存储在栈（stack）中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储；"),n("li",null,"引用数据类型存储在堆（heap）中的对象，占据空间大、大小不固定。如果存储在栈中，将会影响程序运行的性能；引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体。")])],-1),h=n("h2",{id:"_1-3-数据类型检测的方式有哪些",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-3-数据类型检测的方式有哪些","aria-hidden":"true"},"#"),s(" 1.3 数据类型检测的方式有哪些")],-1),m=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[s("然后判断数据类型的方法一般可以通过："),n("strong",null,"typeof"),s("、"),n("strong",null,"instanceof"),s("、"),n("strong",null,"constructor"),s("、"),n("strong",null,"toString"),s("四种常用方法")]),n("table",null,[n("thead",null,[n("tr",null,[n("th",null,"不同类型的优缺点"),n("th",null,"typeof"),n("th",null,"instanceof"),n("th",null,"constructor"),n("th",null,"Object.prototype.toString.call")])]),n("tbody",null,[n("tr",null,[n("td",null,"优点"),n("td",null,"使用简单"),n("td",null,[s("能检测出"),n("code",null,"引用类型")]),n("td",null,"基本能检测所有的类型（除了 null 和 undefined）"),n("td",null,"检测出所有的类型")]),n("tr",null,[n("td",null,"缺点"),n("td",null,"只能检测出除 null 外的基本数据类型和引用数据类型中的 function"),n("td",null,"不能检测出基本类型，且不能跨 iframe"),n("td",null,"constructor 易被修改，也不能跨 iframe"),n("td",null,"IE6 下，undefined 和 null 均为 Object")])])])],-1),w=n("h2",{id:"_1-4-判断数组的方式有哪些",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-4-判断数组的方式有哪些","aria-hidden":"true"},"#"),s(" 1.4 判断数组的方式有哪些")],-1),v=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("ul",null,[n("li",null,"通过 Object.prototype.toString.call()做判断"),n("li",null,"通过原型链做判断"),n("li",null,"通过 ES6 的 Array.isArray()做判断"),n("li",null,"通过 instanceof 做判断"),n("li",null,"通过 Array.prototype.isPrototypeOf")])],-1),g=n("h2",{id:"_1-5-null-和-undefined-区别",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-5-null-和-undefined-区别","aria-hidden":"true"},"#"),s(" 1.5 null 和 undefined 区别")],-1),x=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("ul",null,[n("li",null,"首先 Undefined 和 Null 都是基本数据类型，这两个基本数据类型分别都只有一个值，就是 undefined 和 null。"),n("li",null,[s("undefined 代表的含义是"),n("strong",null,"未定义"),s("，null 代表的含义是"),n("strong",null,"空对象"),s("。一般变量声明了但还没有定义的时候会返回 undefined，null 主要用于赋值给一些可能会返回对象的变量，作为初始化。")]),n("li",null,"undefined 在 JavaScript 中不是一个保留字，这意味着可以使用 undefined 来作为一个变量名，但是这样的做法是非常危险的，它会影响对 undefined 值的判断。我们可以通过一些方法获得安全的 undefined 值，比如说 void 0。"),n("li",null,"当对这两种类型使用 typeof 进行判断时，Null 类型化会返回 “object”，这是一个历史遗留的问题。当使用双等号对两种类型的值进行比较时会返回 true，使用三个等号时会返回 false。")])],-1),b=n("h2",{id:"_1-6-typeof-null-的结果是什么-为什么",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-6-typeof-null-的结果是什么-为什么","aria-hidden":"true"},"#"),s(" 1.6 typeof null 的结果是什么，为什么？")],-1),_=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"typeof null 的结果是 Object。"),n("p",null,[s("在 JavaScript 第一个版本中，所有值都存储在 32 位的单元中，每个单元包含一个小的 "),n("strong",null,"类型标签(1-3 bits)"),s(" 以及当前要存储值的真实数据。类型标签存储在每个单元的低位中，共有五种数据类型：")]),n("div",{class:"language-php line-numbers-mode","data-ext":"php"},[n("pre",{class:"language-php"},[n("code",null,[n("span",{class:"token number"},"000"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword type-declaration"},"object"),s("   "),n("span",{class:"token operator"},"-"),s(` 当前存储的数据指向一个对象。
  `),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword type-declaration"},"int"),s("      "),n("span",{class:"token operator"},"-"),s(" 当前存储的数据是一个 "),n("span",{class:"token number"},"31"),s(` 位的有符号整数。
`),n("span",{class:"token number"},"010"),n("span",{class:"token punctuation"},":"),s(" double   "),n("span",{class:"token operator"},"-"),s(` 当前存储的数据指向一个双精度的浮点数。
`),n("span",{class:"token number"},"100"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword type-declaration"},"string"),s("   "),n("span",{class:"token operator"},"-"),s(` 当前存储的数据指向一个字符串。
`),n("span",{class:"token number"},"110"),n("span",{class:"token punctuation"},":"),s(" boolean  "),n("span",{class:"token operator"},"-"),s(` 当前存储的数据是布尔值。

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])]),n("p",null,"如果最低位是 1，则类型标签标志位的长度只有一位；如果最低位是 0，则类型标签标志位的长度占三位，为存储其他四种数据类型提供了额外两个 bit 的长度。"),n("p",null,"有两种特殊数据类型："),n("ul",null,[n("li",null,"undefined 的值是 (-2)30(一个超出整数范围的数字)；"),n("li",null,"null 的值是机器码 NULL 指针(null 指针的值全是 0)")]),n("p",null,"那也就是说 null 的类型标签也是 000，和 Object 的类型标签一样，所以会被判定为 Object。")],-1),f=n("h2",{id:"_1-7-为什么-0-1-0-2-0-3-如何让其相等-精度丢失",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-7-为什么-0-1-0-2-0-3-如何让其相等-精度丢失","aria-hidden":"true"},"#"),s(" 1.7 为什么 0.1+0.2 ! == 0.3，如何让其相等 (精度丢失)")],-1),y=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"计算机是通过二进制的方式存储数据的，所以计算机计算 0.1+0.2 的时候，实际上是计算的两个数的二进制的和。"),n("p",null,"在 Js 中只有一种数字类型：Number，它的实现遵循 IEEE 754 标准，使用 64 位固定长度来表示，也就是标准的 double 双精度浮点数。在二进制科学表示法中，双精度浮点数的小数部分最多只能保留 52 位，再加上前面的 1，其实就是保留 53 位有效数字，剩余的需要舍去，遵从“0 舍 1 入”的原则。"),n("p",null,[s("根据这个原则，0.1 和 0.2 的二进制数相加，再转化为十进制数就是："),n("code",null,"0.30000000000000004"),s("。所以不相等")]),n("p",null,[s("解决方法就是设置一个误差范围，通常称为“机器精度”。对 JavaScript 来说，这个值通常为 2-52，在 ES6 中，提供了"),n("code",null,"Number.EPSILON"),s("属性，而它的值就是 2-52，只要判断"),n("code",null,"0.1+0.2-0.3"),s("是否小于"),n("code",null,"Number.EPSILON"),s("，如果小于，就可以判断为 0.1+0.2 ===0.3")]),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"numberepsilon"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("arg1"),n("span",{class:"token punctuation"},","),s(" arg2")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"return"),s(" Math"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"abs"),n("span",{class:"token punctuation"},"("),s("arg1 "),n("span",{class:"token operator"},"-"),s(" arg2"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"<"),s(" Number"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"EPSILON"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"numberepsilon"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0.1"),s(),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"0.2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"0.3"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// true"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1),j=n("h2",{id:"_1-8-如何获取安全的-undefined-值",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-8-如何获取安全的-undefined-值","aria-hidden":"true"},"#"),s(" 1.8 如何获取安全的 undefined 值？")],-1),M=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"因为 undefined 是一个标识符，所以可以被当作变量来使用和赋值，但是这样会影响 undefined 的正常判断。表达式 void ___ 没有返回值，因此返回结果是 undefined。void 并不改变表达式的结果，只是让表达式不返回值。因此可以用 void 0 来获得 undefined。")],-1),P=n("h2",{id:"_1-9-typeof-nan-的结果是什么",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-9-typeof-nan-的结果是什么","aria-hidden":"true"},"#"),s(" 1.9 typeof NaN 的结果是什么？")],-1),S=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"NaN 指“不是一个数字”（not a number），NaN 是一个“警戒值”（sentinel value，有特殊用途的常规值），用于指出数字类型中的错误情况，即“执行数学运算没有成功，这是失败后返回的结果”。"),n("div",{class:"language-csharp line-numbers-mode","data-ext":"cs"},[n("pre",{class:"language-csharp"},[n("code",null,[n("span",{class:"token keyword"},"typeof"),s(" NaN"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},'// "number"'),s(`

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])]),n("p",null,"NaN 是一个特殊值，它和自身不相等，是唯一一个非自反的值。所谓的非自反就是说，NaN 与谁都不相等，包括它本身，但在 NaN ！= NaN 下会返回 true")],-1),I=n("h2",{id:"_1-10-isnan-和-number-isnan-函数的区别",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-10-isnan-和-number-isnan-函数的区别","aria-hidden":"true"},"#"),s(" 1.10 isNaN 和 Number.isNaN 函数的区别？")],-1),T=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("ul",null,[n("li",null,"函数 isNaN 接收参数后，会尝试将这个参数转换为数值，任何不能被转换为数值的的值都会返回 true，因此非数字值传入也会返回 true ，会影响 NaN 的判断。"),n("li",null,"函数 Number.isNaN 会首先判断传入参数是否为数字，如果是数字再继续判断是否为 NaN ，不会进行数据类型的转换，这种方法对于 NaN 的判断更为准确。")])],-1),C=n("h2",{id:"_1-11-操作符的强制类型转换规则是什么",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-11-操作符的强制类型转换规则是什么","aria-hidden":"true"},"#"),s(" 1.11 == 操作符的强制类型转换规则是什么？")],-1),B=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[s("对于 "),n("code",null,"=="),s(" 来说，如果对比双方的类型"),n("strong",null,"不一样"),s("，就会进行"),n("strong",null,"类型转换"),s("。假如对比 "),n("code",null,"x"),s(" 和 "),n("code",null,"y"),s(" 是否相同，就会进行如下判断流程：")]),n("ol",null,[n("li",null,[s("首先会判断两者类型是否"),n("strong",null,"相同，"),s(" 相同的话就比较两者的大小；")]),n("li",null,"类型不相同的话，就会进行类型转换；"),n("li",null,[s("会先判断是否在对比 "),n("code",null,"null"),s(" 和 "),n("code",null,"undefined"),s("，是的话就会返回 "),n("code",null,"true")]),n("li",null,[s("判断两者类型是否为 "),n("code",null,"string"),s(" 和 "),n("code",null,"number"),s("，是的话就会将字符串转换为 "),n("code",null,"number")])]),n("div",{class:"language-ini line-numbers-mode","data-ext":"ini"},[n("pre",{class:"language-ini"},[n("code",null,[n("span",{class:"token key attr-name"},"1"),s(),n("span",{class:"token punctuation"},"="),n("span",{class:"token value attr-value"},"= '1'"),s(`
      ↓
`),n("span",{class:"token key attr-name"},"1"),s(),n("span",{class:"token punctuation"},"="),n("span",{class:"token value attr-value"},"=  1"),s(`

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])]),n("ol",null,[n("li",null,[s("判断其中一方是否为 "),n("code",null,"boolean"),s("，是的话就会把 "),n("code",null,"boolean"),s(" 转为 "),n("code",null,"number"),s(" 再进行判断")])]),n("div",{class:"language-ini line-numbers-mode","data-ext":"ini"},[n("pre",{class:"language-ini"},[n("code",null,[n("span",{class:"token key attr-name"},"'1'"),s(),n("span",{class:"token punctuation"},"="),n("span",{class:"token value attr-value"},"= true"),s(`
        ↓
`),n("span",{class:"token key attr-name"},"'1'"),s(),n("span",{class:"token punctuation"},"="),n("span",{class:"token value attr-value"},"=  1"),s(`
        ↓
 `),n("span",{class:"token key attr-name"},"1"),s("  "),n("span",{class:"token punctuation"},"="),n("span",{class:"token value attr-value"},"=  1"),s(`

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])]),n("ol",null,[n("li",null,[s("判断其中一方是否为 "),n("code",null,"object"),s(" 且另一方为 "),n("code",null,"string"),s("、"),n("code",null,"number"),s(" 或者 "),n("code",null,"symbol"),s("，是的话就会把 "),n("code",null,"object"),s(" 转为原始类型再进行判断")])]),n("div",{class:"language-ini line-numbers-mode","data-ext":"ini"},[n("pre",{class:"language-ini"},[n("code",null,[n("span",{class:"token key attr-name"},"'1'"),s(),n("span",{class:"token punctuation"},"="),n("span",{class:"token value attr-value"},"= { name: 'js' }        ↓'1' == '[object Object]'"),s(`

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])]),n("p",null,"其流程图如下："),n("p",null,[n("img",{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/446f656981cc4acb92f92ef6c57c3686~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?",alt:"微信截图_20221004091412.png"})])],-1),N=n("h2",{id:"_1-12-其他值类型转成字符串的转换规则",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-12-其他值类型转成字符串的转换规则","aria-hidden":"true"},"#"),s(" 1.12 其他值类型转成字符串的转换规则？")],-1),O=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("ul",null,[n("li",null,'Null 和 Undefined 类型 ，null 转换为 "null"，undefined 转换为 "undefined"，'),n("li",null,'Boolean 类型，true 转换为 "true"，false 转换为 "false"。'),n("li",null,"Number 类型的值直接转换，不过那些极小和极大的数字会使用指数形式。"),n("li",null,"Symbol 类型的值直接转换，但是只允许显式强制类型转换，使用隐式强制类型转换会产生错误。"),n("li",null,'对普通对象来说，除非自行定义 toString() 方法，否则会调用 toString()（Object.prototype.toString()）来返回内部属性 [[Class]] 的值，如"[object Object]"。如果对象有自己的 toString() 方法，字符串化时就会调用该方法并使用其返回值。')])],-1),E=n("h2",{id:"_1-13-其他值类型转成数字的转换规则",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-13-其他值类型转成数字的转换规则","aria-hidden":"true"},"#"),s(" 1.13. 其他值类型转成数字的转换规则？")],-1),F=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("ul",null,[n("li",null,"Undefined 类型的值转换为 NaN。"),n("li",null,"Null 类型的值转换为 0。"),n("li",null,"Boolean 类型的值，true 转换为 1，false 转换为 0。"),n("li",null,"String 类型的值转换如同使用 Number() 函数进行转换，如果包含非数字值则转换为 NaN，空字符串为 0。"),n("li",null,"Symbol 类型的值不能转换为数字，会报错。"),n("li",null,"对象（包括数组）会首先被转换为相应的基本类型值，如果返回的是非数字的基本类型值，则再遵循以上规则将其强制转换为数字。")]),n("p",null,"为了将值转换为相应的基本类型值， 隐式转换会首先检查该值是否有 valueOf()方法。如果有并且返回基本类型值，就使用该值进行强制类型转换。如果没有就使用 toString() 的返回值（如果存在）来进行强制类型转换。"),n("p",null,"如果 valueOf() 和 toString() 均不返回基本类型值，会产生 TypeError 错误。")],-1),A=n("h2",{id:"_1-14-其他值类型转成布尔类型的转换规则",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-14-其他值类型转成布尔类型的转换规则","aria-hidden":"true"},"#"),s(" 1.14 其他值类型转成布尔类型的转换规则？")],-1),J=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,'以下这些是假值： undefined 、 null 、 false 、 +0、-0 和 NaN 、 ""'),n("p",null,"假值的布尔强制类型转换结果为 false。从逻辑上说，假值列表以外的都应该是真值。")],-1),D=n("h2",{id:"_1-15-和-操作符的返回值",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-15-和-操作符的返回值","aria-hidden":"true"},"#"),s(" 1.15. || 和 && 操作符的返回值？")],-1),R=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"|| 和 && 首先会对第一个操作数执行条件判断，如果其不是布尔值就先强制转换为布尔类型，然后再执行条件判断。"),n("ul",null,[n("li",null,"对于 || 来说，如果条件判断结果为 true 就返回第一个操作数的值，如果为 false 就返回第二个操作数的值。"),n("li",null,"&& 则相反，如果条件判断结果为 true 就返回第二个操作数的值，如果为 false 就返回第一个操作数的值。")]),n("p",null,"|| 和 && 返回它们其中一个操作数的值，而非条件判断的结果")],-1),L=n("h2",{id:"_1-16-object-is-与比较操作符-、-的区别",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-16-object-is-与比较操作符-、-的区别","aria-hidden":"true"},"#"),s(" 1.16. Object.is() 与比较操作符 “"),n("code",null,"==="),s("”、“"),n("code",null,"=="),s("” 的区别？")],-1),H=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("ul",null,[n("li",null,"使用双等号（==）进行相等判断时，如果两边的类型不一致，则会进行强制类型转化后再进行比较。"),n("li",null,"使用三等号（===）进行相等判断时，如果两边的类型不一致时，不会做强制类型准换，直接返回 false。"),n("li",null,"使用 Object.is 来进行相等判断时，一般情况下和三等号的判断相同，它处理了一些特殊的情况，比如 -0 和 +0 不再相等，两个 NaN 是相等的。")])],-1),U=n("h2",{id:"_1-17-什么是-javascript-中的包装类型",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-17-什么是-javascript-中的包装类型","aria-hidden":"true"},"#"),s(" 1.17. 什么是 JavaScript 中的包装类型？")],-1),z=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"在 JavaScript 中，基本类型是没有属性和方法的，但是为了便于操作基本类型的值，在调用基本类型的属性或方法时 JavaScript 会在后台隐式地将基本类型的值转换为对象。如："),n("div",{class:"language-ini line-numbers-mode","data-ext":"ini"},[n("pre",{class:"language-ini"},[n("code",null,[n("span",{class:"token key attr-name"},"const a"),s(),n("span",{class:"token punctuation"},"="),s(),n("span",{class:"token value attr-value"},'"abc";'),s(`
a.length; // 3

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])]),n("p",null,[s("在访问"),n("code",null,"'abc'.length"),s("时，JavaScript 将"),n("code",null,"'abc'"),s("在后台转换成"),n("code",null,"String('abc')"),s("，然后再访问其"),n("code",null,"length"),s("属性。")])],-1),q=n("h2",{id:"_1-18-js-中隐式转换规则",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-18-js-中隐式转换规则","aria-hidden":"true"},"#"),s(" 1.18 Js 中隐式转换规则")],-1),W=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"在 if 语句、逻辑语句、数学运算逻辑、== 等情况下都可能出现隐式类型转换。"),n("p",null,[n("img",{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8249e191d95c46a8b66effb504b3de93~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?",alt:"微信截图_20221004091517.png"})]),n("p",null,[s("坑: 判断时, 尽量不要用 "),n("code",null,"= ="),s(" , 要用 "),n("code",null,"= = ="),s(" ( 两个等号判断, 如果类型不同, 默认会进行隐式类型转换再比较)")])],-1),X=n("h2",{id:"_1-19-说说你对-this-的理解",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-19-说说你对-this-的理解","aria-hidden":"true"},"#"),s(" 1.19 说说你对 this 的理解")],-1),G=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[s("this"),n("code",null,"是一个在运行时才进行绑定的引用"),s("，在不同的情况下它可能会被绑定不同的对象。")])],-1),Y=n("h2",{id:"_1-20-如何判断-this-的指向",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-20-如何判断-this-的指向","aria-hidden":"true"},"#"),s(" 1.20 如何判断 this 的指向")],-1),V=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("ul",null,[n("li",null,[s("第一种是"),n("strong",null,"函数调用模式"),s("，当一个函数不是一个对象的属性时，直接作为函数来调用时，this 指向全局对象。")]),n("li",null,[s("第二种是"),n("strong",null,"方法调用模式"),s("，如果一个函数作为一个对象的方法来调用时，this 指向这个对象。")]),n("li",null,[s("第三种是"),n("strong",null,"构造器调用模式"),s("，如果一个函数用 new 调用时，函数执行前会新创建一个对象，this 指向这个新创建的对象。")]),n("li",null,[s("第四种是 "),n("strong",null,"apply 、 call 和 bind 调用模式"),s("，这三个方法都可以显示的指定调用函数的 this 指向。其中 apply 方法接收两个参数：一个是 this 绑定的对象，一个是参数数组。call 方法接收的参数，第一个是 this 绑定的对象，后面的其余参数是传入函数执行的参数。也就是说，在使用 call() 方法时，传递给函数的参数必须逐个列举出来。bind 方法通过传入一个对象，返回一个 this 绑定了传入对象的新函数。这个函数的 this 指向除了使用 new 时会被改变，其他情况下都不会改变。")])]),n("h4",{id:"this-绑定的优先级",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#this-绑定的优先级","aria-hidden":"true"},"#"),s(),n("strong",null,"this 绑定的优先级")]),n("p",null,"new 绑定优先级 > 显示绑定优先级 > 隐式绑定优先级 > 默认绑定优先级")],-1),K=n("h2",{id:"_1-21-map-和-object-的区别",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-21-map-和-object-的区别","aria-hidden":"true"},"#"),s(" 1.21 Map 和 Object 的区别")],-1),Q=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("table",null,[n("thead",null,[n("tr",null,[n("th"),n("th",null,"Map"),n("th",null,"Object")])]),n("tbody",null,[n("tr",null,[n("td",null,"意外的键"),n("td",null,"Map 默认情况不包含任何键，只包含显式插入的键。"),n("td",null,"Object 有一个原型, 原型链上的键名有可能和自己在对象上的设置的键名产生冲突。")]),n("tr",null,[n("td",null,"键的类型"),n("td",null,"Map 的键可以是任意值，包括函数、对象或任意基本类型。"),n("td",null,"Object 的键必须是 String 或是 Symbol。")]),n("tr",null,[n("td",null,"键的顺序"),n("td",null,"Map 中的 key 是有序的。因此，当迭代的时候， Map 对象以插入的顺序返回键值。"),n("td",null,"Object 的键是无序的")]),n("tr",null,[n("td",null,"Size"),n("td",null,"Map 的键值对个数可以轻易地通过 size 属性获取"),n("td",null,"Object 的键值对个数只能手动计算")]),n("tr",null,[n("td",null,"迭代"),n("td",null,"Map 是 iterable 的，所以可以直接被迭代。"),n("td",null,"迭代 Object 需要以某种方式获取它的键然后才能迭代。")]),n("tr",null,[n("td",null,"性能"),n("td",null,"在频繁增删键值对的场景下表现更好。"),n("td",null,"在频繁添加和删除键值对的场景下未作出优化。")])])])],-1),Z=n("h2",{id:"_1-22-说说你对-json-的理解",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-22-说说你对-json-的理解","aria-hidden":"true"},"#"),s(" 1.22 说说你对 JSON 的理解")],-1),$=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"JSON 是一种基于文本的轻量级的数据交换格式。它可以被任何的编程语言读取和作为数据格式来传递。"),n("p",null,"在项目开发中，使用 JSON 作为前后端数据交换的方式。在前端通过将一个符合 JSON 格式的数据结构序列化为 JSON 字符串，然后将它传递到后端，后端通过 JSON 格式的字符串解析后生成对应的数据结构，以此来实现前后端数据的一个传递。"),n("p",null,"因为 JSON 的语法是基于 js 的，因此很容易将 JSON 和 js 中的对象弄混，但是应该注意的是 JSON 和 js 中的对象不是一回事，JSON 中对象格式更加严格，比如说在 JSON 中属性值不能为函数，不能出现 NaN 这样的属性值等，因此大多数的 js 对象是不符合 JSON 对象的格式的。"),n("p",null,"在 js 中提供了两个函数来实现 js 数据结构和 JSON 格式的转换处理，"),n("ul",null,[n("li",null,[n("strong",null,"JSON.stringify"),s(" 函数，通过传入一个符合 JSON 格式的数据结构，将其转换为一个 JSON 字符串。如果传入的数据结构不符合 JSON 格式，那么在序列化的时候会对这些值进行对应的特殊处理，使其符合规范。在前端向后端发送数据时，可以调用这个函数将数据对象转化为 JSON 格式的字符串。")]),n("li",null,[n("strong",null,"JSON.parse()"),s(" 函数，这个函数用来将 JSON 格式的字符串转换为一个 js 数据结构，如果传入的字符串不是标准的 JSON 格式的字符串的话，将会抛出错误。当从后端接收到 JSON 格式的字符串时，可以通过这个方法来将其解析为一个 js 数据结构，以此来进行数据的访问。")])])],-1),nn=n("h2",{id:"_1-221-string-和-json-stringify-的区别",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-221-string-和-json-stringify-的区别","aria-hidden":"true"},"#"),s(" 1.221 String 和 JSON.stringify 的区别")],-1),sn=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[s("console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"String"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"abc"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// abc"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token constant"},"JSON"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"stringify"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"abc"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},'// "abc"'),s(`

console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"String"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token literal-property property"},"key"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"value"'),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// [object Object]"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token constant"},"JSON"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"stringify"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token literal-property property"},"key"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"value"'),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},'// {"key":"value"}'),s(`

console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"String"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 1,2,3"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token constant"},"JSON"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"stringify"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// [1,2,3]"),s(`

`),n("span",{class:"token keyword"},"const"),s(" obj "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token literal-property property"},"title"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"devpoint"'),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token function"},"toString"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token string"},'"obj"'),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"String"),n("span",{class:"token punctuation"},"("),s("obj"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// obj"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token constant"},"JSON"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"stringify"),n("span",{class:"token punctuation"},"("),s("obj"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},'// {"title":"devpoint"}'),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])]),n("ul",null,[n("li",null,[s("当需要将一个数组和一个普通对象转换为字符串时，经常使用"),n("code",null,"JSON.stringify"),s("。")]),n("li",null,[s("如果需要对象的"),n("code",null,"toString"),s("方法被重写，则需要使用 String()。")]),n("li",null,[s("在其他情况下，使用"),n("code",null,"String()"),s("将变量转换为字符串。")])])],-1),tn=n("h2",{id:"_1-23-什么是伪数组-类数组",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-23-什么是伪数组-类数组","aria-hidden":"true"},"#"),s(" 1.23 什么是伪数组(类数组)")],-1),an=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"一个拥有 length 属性和若干索引属性的对象就可以被称为类数组对象，类数组对象和数组类似，但是不能调用数组的方法。"),n("p",null,"常见的类数组对象有 arguments 和 DOM 方法的返回结果，还有一个函数也可以被看作是类数组对象，因为它含有 length 属性值，代表可接收的参数个数。")],-1),en=n("h2",{id:"_1-24-类数组转换成数组的方法有哪些",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-24-类数组转换成数组的方法有哪些","aria-hidden":"true"},"#"),s(" 1.24 类数组转换成数组的方法有哪些")],-1),ln=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"常见的类数组转换为数组的方法有这样几种："),n("ul",null,[n("li",null,"通过 call 调用数组的 slice 方法来实现转换")]),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token class-name"},"Array"),n("span",{class:"token punctuation"},"."),s("prototype"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"slice"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"call"),n("span",{class:"token punctuation"},"("),s("arrayLike"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])]),n("ul",null,[n("li",null,"通过 call 调用数组的 splice 方法来实现转换")]),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token class-name"},"Array"),n("span",{class:"token punctuation"},"."),s("prototype"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"splice"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"call"),n("span",{class:"token punctuation"},"("),s("arrayLike"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])]),n("ul",null,[n("li",null,"通过 apply 调用数组的 concat 方法来实现转换")]),n("div",{class:"language-ini line-numbers-mode","data-ext":"ini"},[n("pre",{class:"language-ini"},[n("code",null,`Array.prototype.concat.apply([], arrayLike);

`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])]),n("ul",null,[n("li",null,"通过 Array.from 方法来实现转换")]),n("div",{class:"language-csharp line-numbers-mode","data-ext":"cs"},[n("pre",{class:"language-csharp"},[n("code",null,[s("Array"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"from"),n("span",{class:"token punctuation"},"("),s("arrayLike"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1),on=n("h2",{id:"_1-25-unicode、utf-8、utf-16、utf-32-的区别",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-25-unicode、utf-8、utf-16、utf-32-的区别","aria-hidden":"true"},"#"),s(" 1.25 "),n("strong",null,"Unicode、UTF-8、UTF-16、UTF-32 的区别？")],-1),cn=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("ul",null,[n("li",null,[n("code",null,"Unicode"),s(" 是编码字符集（字符集），而"),n("code",null,"UTF-8"),s("、"),n("code",null,"UTF-16"),s("、"),n("code",null,"UTF-32"),s("是字符集编码（编码规则）；")]),n("li",null,[n("code",null,"UTF-16"),s(" 使用变长码元序列的编码方式，相较于定长码元序列的"),n("code",null,"UTF-32"),s("算法更复杂，甚至比同样是变长码元序列的"),n("code",null,"UTF-8"),s("也更为复杂，因为其引入了独特的"),n("strong",null,"代理对"),s("这样的代理机制；")]),n("li",null,[n("code",null,"UTF-8"),s("需要判断每个字节中的开头标志信息，所以如果某个字节在传送过程中出错了，就会导致后面的字节也会解析出错；而"),n("code",null,"UTF-16"),s("不会判断开头标志，即使错也只会错一个字符，所以容错能力教强；")]),n("li",null,[s("如果字符内容全部英文或英文与其他文字混合，但英文占绝大部分，那么用"),n("code",null,"UTF-8"),s("就比"),n("code",null,"UTF-16"),s("节省了很多空间；而如果字符内容全部是中文这样类似的字符或者混合字符中中文占绝大多数，那么"),n("code",null,"UTF-16"),s("就占优势了，可以节省很多空间；")])])],-1),un=n("h2",{id:"_1-26-常见的位运算符有哪些-其计算规则是什么",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-26-常见的位运算符有哪些-其计算规则是什么","aria-hidden":"true"},"#"),s(" 1.26 常见的位运算符有哪些？其计算规则是什么？")],-1),rn=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"现代计算机中数据都是以二进制的形式存储的，即 0、1 两种状态，计算机对二进制数据进行的运算加减乘除等都是叫位运算，即将符号位共同参与运算的运算。"),n("p",null,"常见的位运算有以下几种："),n("table",null,[n("thead",null,[n("tr",null,[n("th",null,"运算符"),n("th",null,"描述"),n("th",null,"运算规则"),n("th")])]),n("tbody",null,[n("tr",null,[n("td",null,[n("code",null,"&")]),n("td",null,"与"),n("td",null,"两个位都为 1 时，结果才为 1"),n("td")]),n("tr",null,[n("td",null,"`"),n("td",null,"或"),n("td",null,"两个位都为 0 时，结果才为 0"),n("td")]),n("tr",null,[n("td",null,[n("code",null,"^")]),n("td",null,"异或"),n("td",null,"两个位相同为 0，相异为 1"),n("td")]),n("tr",null,[n("td",null,[n("code",null,"~")]),n("td",null,"取反"),n("td",null,"0 变 1，1 变 0"),n("td")]),n("tr",null,[n("td",null,[n("code",null,"<<")]),n("td",null,"左移"),n("td",null,"各二进制位全部左移若干位，高位丢弃，低位补 0"),n("td")]),n("tr",null,[n("td",null,[n("code",null,">>")]),n("td",null,"右移"),n("td",null,"各二进制位全部右移若干位，正数左补 0，负数左补 1，右边丢弃"),n("td")])])])],-1),pn=n("h2",{id:"_1-27-为什么函数的-arguments-参数是类数组而不是数组-如何遍历类数组",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-27-为什么函数的-arguments-参数是类数组而不是数组-如何遍历类数组","aria-hidden":"true"},"#"),s(" 1.27 为什么函数的 arguments 参数是类数组而不是数组？如何遍历类数组?")],-1),dn=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("code",null,"arguments"),s("是一个对象，它的属性是从 0 开始依次递增的数字，还有"),n("code",null,"callee"),s("和"),n("code",null,"length"),s("等属性，与数组相似；但是它却没有数组常见的方法属性，如"),n("code",null,"forEach"),s(", "),n("code",null,"reduce"),s("等，所以叫它们类数组。")]),n("p",null,"要遍历类数组，有三个方法："),n("p",null,[s("（1）将数组的方法应用到类数组上，这时候就可以使用"),n("code",null,"call"),s("和"),n("code",null,"apply"),s("方法，如：")]),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"foo"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token class-name"},"Array"),n("span",{class:"token punctuation"},"."),s("prototype"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"forEach"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"call"),n("span",{class:"token punctuation"},"("),s("arguments"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"a"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(" console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("a"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])]),n("p",null,"（2）使用 Array.from 方法将类数组转化成数组：‌"),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"foo"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"const"),s(" arrArgs "),n("span",{class:"token operator"},"="),s(" Array"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"from"),n("span",{class:"token punctuation"},"("),s("arguments"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  arrArgs`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"forEach"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"a"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(" console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("a"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])]),n("p",null,"（3）使用展开运算符将类数组转化成数组"),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"foo"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"const"),s(" arrArgs "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token operator"},"..."),s("arguments"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
  arrArgs`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"forEach"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"a"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(" console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("a"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1),kn=n("h2",{id:"_1-28-escape、encodeuri、encodeuricomponent-的区别",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-28-escape、encodeuri、encodeuricomponent-的区别","aria-hidden":"true"},"#"),s(" 1.28 escape、encodeURI、encodeURIComponent 的区别")],-1),hn=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("ul",null,[n("li",null,"encodeURI 是对整个 URI 进行转义，将 URI 中的非法字符转换为合法字符，所以对于一些在 URI 中有特殊意义的字符不会进行转义。"),n("li",null,"encodeURIComponent 是对 URI 的组成部分进行转义，所以一些特殊字符也会得到转义。"),n("li",null,"escape 和 encodeURI 的作用相同，不过它们对于 unicode 编码为 0xff 之外字符的时候会有区别，escape 是直接在字符的 unicode 编码前加上 %u，而 encodeURI 首先会将字符转换为 UTF-8 的格式，再在每个字节前加上 %。")])],-1),mn=n("h2",{id:"_1-29-什么是尾调用-使用尾调用有什么好处",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-29-什么是尾调用-使用尾调用有什么好处","aria-hidden":"true"},"#"),s(" 1.29 什么是尾调用，使用尾调用有什么好处？")],-1),wn=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"尾调用指的是函数的最后一步调用另一个函数。代码执行是基于执行栈的，所以当在一个函数里调用另一个函数时，会保留当前的执行上下文，然后再新建另外一个执行上下文加入栈中。使用尾调用的话，因为已经是函数的最后一步，所以这时可以不必再保留当前的执行上下文，从而节省了内存，这就是尾调用优化。"),n("p",null,[n("strong",null,"但是 ES6 的尾调用优化只在严格模式下开启，正常模式是无效的。")])],-1),vn=n("h2",{id:"_1-30-use-strict-是什么-它有什么用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-30-use-strict-是什么-它有什么用","aria-hidden":"true"},"#"),s(" 1.30 use strict 是什么? 它有什么用？")],-1),gn=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"use strict 是一种 ECMAscript5 添加的（严格模式）运行模式，这种模式使得 Javascript 在更严格的条件下运行。设立严格模式的目的如下："),n("ul",null,[n("li",null,"消除 Javascript 语法的不合理、不严谨之处，减少怪异行为;"),n("li",null,"消除代码运行的不安全之处，保证代码运行的安全；"),n("li",null,"提高编译器效率，增加运行速度；"),n("li",null,"为未来新版本的 Javascript 做好铺垫。")]),n("p",null,"区别："),n("ul",null,[n("li",null,"禁止使用 with 语句。"),n("li",null,"禁止 this 关键字指向全局对象。"),n("li",null,"对象不能有重名的属性。")])],-1),xn=n("h2",{id:"_1-31-如何判断一个对象是否属于某个类",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-31-如何判断一个对象是否属于某个类","aria-hidden":"true"},"#"),s(" 1.31 如何判断一个对象是否属于某个类？")],-1),bn=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("ul",null,[n("li",null,"第一种方式，使用 instanceof 运算符来判断构造函数的 prototype 属性是否出现在对象的原型链中的任何位置。"),n("li",null,"第二种方式，通过对象的 constructor 属性来判断，对象的 constructor 属性指向该对象的构造函数，但是这种方式不是很安全，因为 constructor 属性可以被改写。"),n("li",null,"第三种方式，如果需要判断的是某个内置的引用类型的话，可以使用 Object.prototype.toString() 方法来打印对象的[[Class]] 属性来进行判断。")])],-1),_n=n("h2",{id:"_1-32-强类型语言和弱类型语言的区别",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-32-强类型语言和弱类型语言的区别","aria-hidden":"true"},"#"),s(" 1.32 强类型语言和弱类型语言的区别")],-1),fn=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("ul",null,[n("li",null,[n("strong",null,"强类型语言"),s("：强类型语言也称为强类型定义语言，是一种总是强制类型定义的语言，要求变量的使用要严格符合定义，所有变量都必须先定义后使用。Java 和 C++等语言都是强制类型定义的，也就是说，一旦一个变量被指定了某个数据类型，如果不经过强制转换，那么它就永远是这个数据类型了。例如你有一个整数，如果不显式地进行转换，你不能将其视为一个字符串。")]),n("li",null,[n("strong",null,"弱类型语言"),s("：弱类型语言也称为弱类型定义语言，与强类型定义相反。JavaScript 语言就属于弱类型语言。简单理解就是一种变量类型可以被忽略的语言。比如 JavaScript 是弱类型定义的，在 JavaScript 中就可以将字符串'12'和整数 3 进行连接得到字符串'123'，在相加的时候会进行强制类型转换。")])]),n("p",null,"两者对比：强类型语言在速度上可能略逊色于弱类型语言，但是强类型语言带来的严谨性可以有效地帮助避免许多错误。")],-1),yn=n("h2",{id:"_1-33-解释性语言和编译型语言的区别",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-33-解释性语言和编译型语言的区别","aria-hidden":"true"},"#"),s(" 1.33 解释性语言和编译型语言的区别")],-1),jn=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"（1）解释型语言 使用专门的解释器对源程序逐行解释成特定平台的机器码并立即执行。是代码在执行时才被解释器一行行动态翻译和执行，而不是在执行之前就完成翻译。解释型语言不需要事先编译，其直接将源代码解释成机器码并立即执行，所以只要某一平台提供了相应的解释器即可运行该程序。其特点总结如下"),n("ul",null,[n("li",null,"解释型语言每次运行都需要将源代码解释称机器码并执行，效率较低；"),n("li",null,"只要平台提供相应的解释器，就可以运行源代码，所以可以方便源程序移植；"),n("li",null,"JavaScript、Python 等属于解释型语言。")]),n("p",null,"（2）编译型语言 使用专门的编译器，针对特定的平台，将高级语言源代码一次性的编译成可被该平台硬件执行的机器码，并包装成该平台所能识别的可执行性程序的格式。在编译型语言写的程序执行之前，需要一个专门的编译过程，把源代码编译成机器语言的文件，如 exe 格式的文件，以后要再运行时，直接使用编译结果即可，如直接运行 exe 文件。因为只需编译一次，以后运行时不需要编译，所以编译型语言执行效率高。其特点总结如下："),n("ul",null,[n("li",null,"一次性的编译成平台相关的机器语言文件，运行时脱离开发环境，运行效率高；"),n("li",null,"与特定平台相关，一般无法移植到其他平台；"),n("li",null,"C、C++等属于编译型语言。")]),n("p",null,[n("strong",null,"两者主要区别在于："),s(" 后者源程序编译后即可在该平台运行，前者是在运行期间才编译。所以后者运行速度快，前者跨平台性好。")])],-1),Mn=n("h2",{id:"_1-34-for-in-和-for-of-的区别",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-34-for-in-和-for-of-的区别","aria-hidden":"true"},"#"),s(" 1.34 for...in 和 for...of 的区别")],-1),Pn=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"for…of 是 ES6 新增的遍历方式，允许遍历一个含有 iterator 接口的数据结构（数组、对象等）并且返回各项的值，和 ES3 中的 for…in 的区别如下"),n("ul",null,[n("li",null,"for…of 遍历获取的是对象的键值，for…in 获取的是对象的键名；"),n("li",null,"for… in 会遍历对象的整个原型链，性能非常差不推荐使用，而 for … of 只遍历当前对象不会遍历原型链；"),n("li",null,"对于数组的遍历，for…in 会返回数组中所有可枚举的属性(包括原型链上可枚举的属性)，for…of 只返回数组的下标对应的属性值；")]),n("p",null,[n("strong",null,"总结："),s(" for...in 循环主要是为了遍历对象而生，不适用于遍历数组；for...of 循环可以用来遍历数组、类数组对象，字符串、Set、Map 以及 Generator 对象。")])],-1),Sn=n("h2",{id:"_1-35-ajax、axios、fetch-的区别",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-35-ajax、axios、fetch-的区别","aria-hidden":"true"},"#"),s(" 1.35 ajax、axios、fetch 的区别")],-1),In=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("strong",null,"（1）AJAX"),s(" Ajax 即“AsynchronousJavascriptAndXML”（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发技术。它是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。传统的网页（不使用 Ajax）如果需要更新内容，必须重载整个网页页面。其缺点如下：")]),n("ul",null,[n("li",null,"本身是针对 MVC 编程，不符合前端 MVVM 的浪潮"),n("li",null,"基于原生 XHR 开发，XHR 本身的架构不清晰"),n("li",null,"不符合关注分离（Separation of Concerns）的原则"),n("li",null,"配置和调用方式非常混乱，而且基于事件的异步模型不友好。")]),n("p",null,[n("strong",null,"（2）Fetch"),s(" fetch 号称是 AJAX 的替代品，是在 ES6 出现的，使用了 ES6 中的 promise 对象。Fetch 是基于 promise 设计的。Fetch 的代码结构比起 ajax 简单多。"),n("strong",null,"fetch 不是 ajax 的进一步封装，而是原生 js，没有使用 XMLHttpRequest 对象"),s("。")]),n("p",null,"fetch 的优点："),n("ul",null,[n("li",null,"语法简洁，更加语义化"),n("li",null,"基于标准 Promise 实现，支持 async/await"),n("li",null,"更加底层，提供的 API 丰富（request, response）"),n("li",null,"脱离了 XHR，是 ES 规范里新的实现方式")]),n("p",null,"fetch 的缺点："),n("ul",null,[n("li",null,"fetch 只对网络请求报错，对 400，500 都当做成功的请求，服务器返回 400，500 错误码时并不会 reject，只有网络错误这些导致请求不能完成时，fetch 才会被 reject。"),n("li",null,"fetch 默认不会带 cookie，需要添加配置项： fetch(url, {credentials: 'include'})"),n("li",null,"fetch 不支持 abort，不支持超时控制，使用 setTimeout 及 Promise.reject 的实现的超时控制并不能阻止请求过程继续在后台运行，造成了流量的浪费"),n("li",null,"fetch 没有办法原生监测请求的进度，而 XHR 可以")]),n("p",null,[n("strong",null,"（3）Axios"),s(" Axios 是一种基于 Promise 封装的 HTTP 客户端，其特点如下：")]),n("ul",null,[n("li",null,"浏览器端发起 XMLHttpRequests 请求"),n("li",null,"node 端发起 http 请求"),n("li",null,"支持 Promise API"),n("li",null,"监听请求和返回"),n("li",null,"对请求和返回进行转化"),n("li",null,"取消请求"),n("li",null,"自动转换 json 数据"),n("li",null,"客户端支持抵御 XSRF 攻击")])],-1),Tn=n("h2",{id:"_1-36-数组的遍历方法有哪些",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-36-数组的遍历方法有哪些","aria-hidden":"true"},"#"),s(" 1.36 数组的遍历方法有哪些")],-1),Cn=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("table",null,[n("thead",null,[n("tr",null,[n("th",null,[n("strong",null,"方法")]),n("th",null,[n("strong",null,"是否改变原数组")]),n("th",null,[n("strong",null,"特点")])])]),n("tbody",null,[n("tr",null,[n("td",null,"forEach()"),n("td",null,"否"),n("td",null,"数组方法，不改变原数组的长度，没有返回值")]),n("tr",null,[n("td",null,"map()"),n("td",null,"否"),n("td",null,"数组方法，不改变原数组的长度，有返回值，可链式调用")]),n("tr",null,[n("td",null,"filter()"),n("td",null,"否"),n("td",null,"数组方法，过滤数组，返回包含符合条件的元素的数组，可链式调用")]),n("tr",null,[n("td",null,"for...of"),n("td",null,"否"),n("td",null,"for...of 遍历具有 Iterator 迭代器的对象的属性，返回的是数组的元素、对象的属性值，不能遍历普通的 obj 对象，将异步循环变成同步循环")]),n("tr",null,[n("td",null,"every() 和 some()"),n("td",null,"否"),n("td",null,"数组方法，some()只要有一个是 true，便返回 true；而 every()只要有一个是 false，便返回 false.")]),n("tr",null,[n("td",null,"find() 和 findIndex()"),n("td",null,"否"),n("td",null,"数组方法，find()返回的是第一个符合条件的值；findIndex()返回的是第一个返回条件的值的索引值")]),n("tr",null,[n("td",null,"reduce() 和 reduceRight()"),n("td",null,"否"),n("td",null,"数组方法，reduce()对数组正序操作；reduceRight()对数组逆序操作")])])])],-1),Bn=n("h2",{id:"_1-37-foreach-和-map-方法有什么区别",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-37-foreach-和-map-方法有什么区别","aria-hidden":"true"},"#"),s(" 1.37 forEach 和 map 方法有什么区别")],-1),Nn=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"这方法都是用来遍历数组的，两者区别如下："),n("ul",null,[n("li",null,"forEach()方法会针对每一个元素执行提供的函数，如果遍历的元素是引用数据类型，则可以改变指针指向的堆内存里的值，该方法没有返回值；"),n("li",null,"map()方法返回一个新数组，新数组中的值为原数组调用函数处理之后的值，如果遍历的元素是引用数据类型，则可以改变指针指向的堆内存里的值")])],-1),On=n("h2",{id:"_1-38-说说你对浅拷贝和深拷贝的理解",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-38-说说你对浅拷贝和深拷贝的理解","aria-hidden":"true"},"#"),s(" 1.38 说说你对浅拷贝和深拷贝的理解")],-1),En=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("strong",null,"浅拷贝")]),n("ul",null,[n("li",null,"浅拷贝，指的是创建新的数据，这个数据有着原始数据属性值的一份精确拷贝"),n("li",null,"如果属性是基本类型，拷贝的就是基本类型的值。如果属性是引用类型，拷贝的就是内存地址"),n("li",null,"即浅拷贝是拷贝一层，深层次的引用类型则共享内存地址")]),n("p",null,"常见的浅拷贝："),n("ul",null,[n("li",null,"Object.assign"),n("li",null,"Object.create"),n("li",null,"slice"),n("li",null,"concat()"),n("li",null,"展开运算符")]),n("p",null,[n("strong",null,"深拷贝")]),n("p",null,"深拷贝开辟一个新的栈，两个对象属完成相同，但是对应两个不同的地址，修改一个对象的属性，不会改变另一个对象的属性"),n("p",null,"常见的深拷贝方式有："),n("ul",null,[n("li",null,"_.cloneDeep()"),n("li",null,"jQuery.extend()"),n("li",null,"JSON.stringify()"),n("li",null,"手写循环递归")])],-1),Fn=n("h2",{id:"_1-39-json-stringify-深拷贝的缺点",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-39-json-stringify-深拷贝的缺点","aria-hidden":"true"},"#"),s(" 1.39 JSON.stringify 深拷贝的缺点")],-1),An=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("ul",null,[n("li",null,"如果 obj 里面有时间对象，则 JSON.stringify 后再 JSON.parse 的结果，时间将只是字符串的形式，而不是对象的形式"),n("li",null,"如果 obj 里面有 RegExp，则打印出来是空对象"),n("li",null,"如果对象中有函数或者 undefined，则会直接被丢掉"),n("li",null,"如果 json 里有对象是由构造函数生成的，则会丢掉对象的 constructon")])],-1),Jn=n("h2",{id:"_1-40-知道-lodash-吗-它有哪些常见的-api",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-40-知道-lodash-吗-它有哪些常见的-api","aria-hidden":"true"},"#"),s(" 1.40 知道 lodash 吗？它有哪些常见的 API ？")],-1),Dn=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"Lodash 是一个一致性、模块化、高性能的 JavaScript 实用工具库。"),n("ul",null,[n("li",null,"_.cloneDeep 深度拷贝"),n("li",null,"_.reject 根据条件去除某个元素。"),n("li",null,[s("_.drop(array, [n=1] ) 作用：将 "),n("code",null,"array"),s(" 中的前 "),n("code",null,"n"),s(" 个元素去掉，然后返回剩余的部分.")])])],-1),Rn=n("h2",{id:"_1-41-lhs-和-rhs-查询",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-41-lhs-和-rhs-查询","aria-hidden":"true"},"#"),s(" 1.41 LHS 和 RHS 查询")],-1),Ln=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("code",null,"LHS (Left-hand Side)"),s(" 和 "),n("code",null,"RHS (Right-hand Side)"),s(" ，是在代码执行阶段 JS 引擎操作变量的两种方式，二者区别就是对变量的查询目的是 "),n("strong",null,"变量赋值"),s(" 还是 "),n("strong",null,"查询"),s(" 。")]),n("p",null,[n("strong",null,"LHS"),s(" 可以理解为变量在赋值操作符"),n("code",null,"(=)"),s("的左侧，例如 "),n("code",null,"a = 1"),s("，当前引擎对变量 "),n("code",null,"a"),s(" 查找的目的是"),n("strong",null,"变量赋值"),s("。这种情况下，引擎不关心变量 "),n("code",null,"a"),s(" 原始值是什么，只管将值 "),n("code",null,"1"),s(" 赋给 "),n("code",null,"a"),s(" 变量。")]),n("p",null,[n("strong",null,"RHS"),s(" 可以理解为变量在赋值操作符"),n("code",null,"(=)"),s("的右侧，例如："),n("code",null,"console.log(a)"),s("，其中引擎对变量"),n("code",null,"a"),s("的查找目的就是 "),n("strong",null,"查询"),s("，它需要找到变量 "),n("code",null,"a"),s(" 对应的实际值是什么，然后才能将它打印出来。")])],-1),Hn=n("h2",{id:"_1-42-includes-比-indexof-好在哪",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-42-includes-比-indexof-好在哪","aria-hidden":"true"},"#"),s(" 1.42 includes 比 indexOf 好在哪？")],-1),Un=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[s("includes 可以检测"),n("code",null,"NaN"),s("，indexOf 不能检测"),n("code",null,"NaN"),s("，includes 内部使用了"),n("code",null,"Number.isNaN"),s("对"),n("code",null,"NaN"),s("进行了匹配")])],-1),zn=n("h2",{id:"_1-43-amd-和-cmd-的区别",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-43-amd-和-cmd-的区别","aria-hidden":"true"},"#"),s(" 1.43 AMD 和 CMD 的区别？")],-1),qn=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("table",null,[n("thead",null,[n("tr",null,[n("th",null,"模块化"),n("th",null,"代表应用"),n("th",null,"特点")])]),n("tbody",null,[n("tr",null,[n("td",null,"AMD"),n("td",null,"require.js"),n("td",null,"1、AMD 的 api 默认一个当多个用 2、依赖前置，异步执行")]),n("tr",null,[n("td",null,"CMD"),n("td",null,"sea.js"),n("td",null,"1、CMD 的 api 严格区分，推崇职责单一 2、依赖就近，按需加载，同步执行")])])])],-1),Wn=n("h2",{id:"_1-44-a-1-a-2-a-3-有可能是-true-吗",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-44-a-1-a-2-a-3-有可能是-true-吗","aria-hidden":"true"},"#"),s(" 1.44 (a == 1 && a == 2 && a == 3) 有可能是 true 吗？")],-1),Xn=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("strong",null,"方案一：重写 toString()或 valueOf()")]),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"let"),s(" a "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token literal-property property"},"i"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token function-variable function"},"toString"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" a"),n("span",{class:"token punctuation"},"."),s("i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("a "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token operator"},"&&"),s(" a "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token number"},"2"),s(),n("span",{class:"token operator"},"&&"),s(" a "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// true"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])]),n("p",null,[n("strong",null,"方案二：数组")]),n("p",null,"数组的 toString 接口默认调用数组的 join 方法，重写 join 方法。定义 a 为数字，每次比较时就会调用 toString()方法，我们把数组的 shift 方法覆盖 toString 即可："),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"let"),s(" a "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
a`),n("span",{class:"token punctuation"},"."),s("toString "),n("span",{class:"token operator"},"="),s(" a"),n("span",{class:"token punctuation"},"."),s("shift"),n("span",{class:"token punctuation"},";"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("a "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token operator"},"&&"),s(" a "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token number"},"2"),s(),n("span",{class:"token operator"},"&&"),s(" a "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// true"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])]),n("p",null,"当然把 toString 改为 valueOf 也是一样效果："),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"let"),s(" a "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
a`),n("span",{class:"token punctuation"},"."),s("valueOf "),n("span",{class:"token operator"},"="),s(" a"),n("span",{class:"token punctuation"},"."),s("shift"),n("span",{class:"token punctuation"},";"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("a "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token operator"},"&&"),s(" a "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token number"},"2"),s(),n("span",{class:"token operator"},"&&"),s(" a "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// true"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])]),n("p",null,[n("strong",null,"方案三：使用 Object.defineProperty()")]),n("p",null,"Object.defineProperty()用于定义对象中的属性，接收三个参数：object 对象、对象中的属性，属性描述符。属性描述符中 get:访问该属性时自动调用。"),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"var"),s(" _a "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
Object`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"defineProperty"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"a"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token function-variable function"},"get"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" _a"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("a "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token operator"},"&&"),s(" a "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token number"},"2"),s(),n("span",{class:"token operator"},"&&"),s(" a "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"//true"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1),Gn=n("h2",{id:"_1-45-js-中的-mul-函数",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-45-js-中的-mul-函数","aria-hidden":"true"},"#"),s(" 1.45 JS 中的 MUL 函数")],-1),Yn=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[s("MUL 表示数的简单乘法。在这种技术中，将一个值作为参数传递给一个函数，而该函数将返回另一个函数，将第二个值传递给该函数，然后重复继续。例如:x"),n("em",null,"y"),s("z 可以表示为")]),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"mul"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"x"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"y"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"z"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(" x "),n("span",{class:"token operator"},"*"),s(" y "),n("span",{class:"token operator"},"*"),s(" z"),n("span",{class:"token punctuation"},";"),s(`

console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"mul"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 6"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1),Vn=n("h2",{id:"_1-46-深度遍历广度遍历的区别",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-46-深度遍历广度遍历的区别","aria-hidden":"true"},"#"),s(" 1.46 深度遍历广度遍历的区别？")],-1),Kn=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"对于算法来说 无非就是时间换空间 空间换时间"),n("ul",null,[n("li",null,"1、深度优先不需要记住所有的节点, 所以占用空间小, 而广度优先需要先记录所有的节点占用空间大"),n("li",null,"2、深度优先有回溯的操作(没有路走了需要回头)所以相对而言时间会长一点"),n("li",null,[s("3、深度优先采用的是"),n("strong",null,"堆栈"),s("的形式, 即先进后出")]),n("li",null,[s("4、广度优先则采用的是"),n("strong",null,"队列"),s("的形式, 即先进先出")])])],-1),Qn=n("h2",{id:"_1-47-js-中的设计模式有哪些",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-47-js-中的设计模式有哪些","aria-hidden":"true"},"#"),s(" 1.47 JS 中的设计模式有哪些？")],-1),Zn=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("h4",{id:"单例模式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#单例模式","aria-hidden":"true"},"#"),s(),n("strong",null,"单例模式")]),n("p",null,"保证一个类仅有一个实例，并提供一个访问它的全局访问点。实现的方法为先判断实例存在与否，如果存在则直接返回，如果不存在就创建了再返回，这就确保了一个类只有一个实例对象。"),n("h4",{id:"策略模式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#策略模式","aria-hidden":"true"},"#"),s(),n("strong",null,"策略模式")]),n("p",null,"定义一系列的算法，把他们一个个封装起来，并且使他们可以相互替换。"),n("h4",{id:"代理模式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#代理模式","aria-hidden":"true"},"#"),s(),n("strong",null,"代理模式")]),n("p",null,"为一个对象提供一个代用品或占位符，以便控制对它的访问。"),n("h4",{id:"中介者模式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#中介者模式","aria-hidden":"true"},"#"),s(),n("strong",null,"中介者模式")]),n("p",null,"通过一个中介者对象，其他所有的相关对象都通过该中介者对象来通信，而不是相互引用，当其中的一个对象发生改变时，只需要通知中介者对象即可。通过中介者模式可以解除对象与对象之间的紧耦合关系。"),n("h4",{id:"装饰者模式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#装饰者模式","aria-hidden":"true"},"#"),s(),n("strong",null,"装饰者模式")]),n("p",null,"在不改变对象自身的基础上，在程序运行期间给对象动态地添加方法。")],-1),$n=n("h2",{id:"_1-48-foreach-如何跳出循环",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-48-foreach-如何跳出循环","aria-hidden":"true"},"#"),s(" 1.48 forEach 如何跳出循环？")],-1),ns=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[s("forEach 是不能通过"),n("code",null,"break"),s("或者"),n("code",null,"return"),s("来实现跳出循环的，为什么呢？实现过 forEach 的同学应该都知道，forEach 的的回调函数形成了一个作用域，在里面使用"),n("code",null,"return"),s("并不会跳出，只会被当做"),n("code",null,"continue")]),n("p",null,[s("可以利用"),n("code",null,"try catch")]),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"getItemById"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("arr"),n("span",{class:"token punctuation"},","),s(" id")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"var"),s(" item "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"try"),s(),n("span",{class:"token punctuation"},"{"),s(`
    arr`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"forEach"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("curItem"),n("span",{class:"token punctuation"},","),s(" i")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("curItem"),n("span",{class:"token punctuation"},"."),s("id "),n("span",{class:"token operator"},"=="),s(" id"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        item `),n("span",{class:"token operator"},"="),s(" curItem"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"throw"),s(),n("span",{class:"token function"},"Error"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
      `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"catch"),s(),n("span",{class:"token punctuation"},"("),s("e"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token keyword"},"return"),s(" item"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1),ss=n("h2",{id:"_1-49-js-中如何将页面重定向到另一个页面",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-49-js-中如何将页面重定向到另一个页面","aria-hidden":"true"},"#"),s(" 1.49 JS 中如何将页面重定向到另一个页面？")],-1),ts=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,'1、使用 location.href：window.location.href ="url"'),n("p",null,'2、使用 location.replace： window.location.replace("url");')],-1),as=n("h2",{id:"_1-50-移动端如何实现上拉加载-下拉刷新",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-50-移动端如何实现上拉加载-下拉刷新","aria-hidden":"true"},"#"),s(" 1.50 移动端如何实现上拉加载，下拉刷新？")],-1),es=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("strong",null,"上拉加载")]),n("p",null,"上拉加载的本质是页面触底，或者快要触底时的动作"),n("p",null,"判断页面触底我们需要先了解一下下面几个属性"),n("ul",null,[n("li",null,[n("code",null,"scrollTop"),s("：滚动视窗的高度距离"),n("code",null,"window"),s("顶部的距离，它会随着往上滚动而不断增加，初始值是 0，它是一个变化的值")]),n("li",null,[n("code",null,"clientHeight"),s(":它是一个定值，表示屏幕可视区域的高度；")]),n("li",null,[n("code",null,"scrollHeight"),s("：页面不能滚动时也是存在的,此时 scrollHeight 等于 clientHeight。scrollHeight 表示"),n("code",null,"body"),s("所有元素的总长度(包括 body 元素自身的 padding)")])]),n("p",null,"综上我们得出一个触底公式："),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[s("scrollTop "),n("span",{class:"token operator"},"+"),s(" clientHeight "),n("span",{class:"token operator"},">="),s(" scrollHeight"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])]),n("p",null,[n("strong",null,"下拉刷新")]),n("p",null,"下拉刷新的本质是页面本身置于顶部时，用户下拉时需要触发的动作"),n("p",null,"关于下拉刷新的原生实现，主要分成三步："),n("ul",null,[n("li",null,[s("监听原生"),n("code",null,"touchstart"),s("事件，记录其初始位置的值，"),n("code",null,"e.touches[0].pageY"),s("；")]),n("li",null,[s("监听原生"),n("code",null,"touchmove"),s("事件，记录并计算当前滑动的位置值与初始位置值的差值，大于"),n("code",null,"0"),s("表示向下拉动，并借助 CSS3 的"),n("code",null,"translateY"),s("属性使元素跟随手势向下滑动对应的差值，同时也应设置一个允许滑动的最大值；")]),n("li",null,[s("监听原生"),n("code",null,"touchend"),s("事件，若此时元素滑动达到最大值，则触发"),n("code",null,"callback"),s("，同时将"),n("code",null,"translateY"),s("重设为"),n("code",null,"0"),s("，元素回到初始位置")])])],-1),ls=n("h2",{id:"_1-51-js-中的数组和函数在内存中是如何存储的",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-51-js-中的数组和函数在内存中是如何存储的","aria-hidden":"true"},"#"),s(" 1.51 JS 中的数组和函数在内存中是如何存储的？")],-1),os=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"JavaScript 中的数组存储大致需要分为两种情况："),n("ul",null,[n("li",null,"同种类型数据的数组分配连续的内存空间"),n("li",null,"存在非同种类型数据的数组使用哈希映射分配内存空间")]),n("blockquote",null,[n("p",null,"温馨提示：可以想象一下连续的内存空间只需要根据索引（指针）直接计算存储位置即可。如果是哈希映射那么首先需要计算索引值，然后如果索引值有冲突的场景下还需要进行二次查找（需要知道哈希的存储方式）。 :::")]),n("h1",{id:"二、闭包与作用域",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#二、闭包与作用域","aria-hidden":"true"},"#"),s(" 二、闭包与作用域")]),n("h2",{id:"_2-1-什么是闭包",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-1-什么是闭包","aria-hidden":"true"},"#"),s(" 2.1 什么是闭包？")]),n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("ul",null,[n("li",null,"✅ 官方说法：闭包就是指有权访问另一个函数作用域中的变量的函数。"),n("li",null,"✅ MDN 说法：闭包是一种特殊的对象。它由两部分构成：函数，以及创建该函数的环境。环境由闭包创建时在作用域中的任何局部变量组成。")]),n("p",null,[n("strong",null,"深度回答")]),n("p",null,"浏览器在加载页面会把代码放在栈内存（ ECStack ）中执行，函数进栈执行会产生一个私有上下文（ EC ），此上下文能保护里面的使用变量（ AO ）不受外界干扰，并且如果当前执行上下文中的某些内容，被上下文以外的内容占用，当前上下文不会出栈释放，这样可以保存里面的变量和变量值，所以我认为闭包是一种保存和保护内部私有变量的机制。")])],-1),cs=n("h2",{id:"_2-2-闭包的作用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-2-闭包的作用","aria-hidden":"true"},"#"),s(" 2.2 闭包的作用")],-1),is=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"闭包有两个常用的用途；"),n("ul",null,[n("li",null,[s("闭包的第一个用途是使我们在函数外部能够访问到函数内部的变量。通过使用闭包，可以通过在外部调用闭包函数，从而在外部访问到函数内部的变量，可以使用这种方法来"),n("strong",null,"创建私有变量"),s("。")]),n("li",null,[s("闭包的另一个用途是使已经运行结束的函数上下文中的"),n("strong",null,"变量对象继续留在内存中"),s("，因为闭包函数保留了这个变量对象的引用，所以这个变量对象不会被回收。")])])],-1),us=n("h2",{id:"_2-3-闭包在项目中的引用场景-以及带来的问题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-3-闭包在项目中的引用场景-以及带来的问题","aria-hidden":"true"},"#"),s(" 2.3 闭包在项目中的引用场景，以及带来的问题")],-1),rs=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"在实际的项目中，会基于闭包把自己编写的模块内容包裹起来，这样编写就可以保护自己的代码是私有的，防止和全局变量或者是其他的代码冲突，这一点是利用保护机制。"),n("p",null,"但是不建议过多的使用闭包，因为使用不被释放的上下文，是占用栈内存空间的，过多的使用会导致导致内存泄漏。"),n("p",null,"解决闭包带来的内存泄漏问题的方法是：使用完闭包函数后手动释放。")],-1),ps=n("h2",{id:"_2-4-闭包的使用场景",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-4-闭包的使用场景","aria-hidden":"true"},"#"),s(" 2.4 闭包的使用场景")],-1),ds=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("ol",null,[n("li",null,[n("code",null,"return"),s(" 回一个函数")]),n("li",null,"函数作为参数"),n("li",null,"IIFE（自执行函数）"),n("li",null,"循环赋值"),n("li",null,"使用回调函数就是在使用闭包"),n("li",null,"节流防抖"),n("li",null,"函数柯里化")])],-1),ks=n("h2",{id:"_2-5-闭包的执行过程",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-5-闭包的执行过程","aria-hidden":"true"},"#"),s(" 2.5 闭包的执行过程")],-1),hs=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("ol",null,[n("li",null,[n("p",null,"形成私有上下文")]),n("li",null,[n("p",null,"进栈执行")]),n("li",null,[n("p",null,"一系列操作"),n("p",null,"(1). 初始化作用域链（两头<当前作用域，上级作用域>）"),n("p",null,"(2). 初始化 this"),n("p",null,"(3). 初始化 arguments"),n("p",null,"(4). 赋值形参"),n("p",null,"(5). 变量提升"),n("p",null,"(6). 代码执行"),n("ul",null,[n("li",null,"遇到变量就先看是否是自己私有的，不是自己私有的按照作用域链上查找，如果不是上级的就继续线上查找，，直到 EC(G)，变量的查找其实就是一个作用域链的拼接过程，拼接查询的链式就是作用域链。")])]),n("li",null,[n("p",null,"正常情况下，代码执行完成之后，私有上下文出栈被回收。但是遇到特殊情况，如果当前私有上下文执行完成之后中的某个东西被执行上下文以外的东西占用，则当前私有上下文就不会出栈释放，也就是形成了不被销毁的上下文，闭包。")])])],-1),ms=n("h2",{id:"_2-6-执行上下文的类型",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-6-执行上下文的类型","aria-hidden":"true"},"#"),s(" 2.6 执行上下文的类型")],-1),ws=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("strong",null,"（1）全局执行上下文")]),n("p",null,"任何不在函数内部的都是全局执行上下文，它首先会创建一个全局的 window 对象，并且设置 this 的值等于这个全局对象，一个程序中只有一个全局执行上下文。"),n("p",null,[n("strong",null,"（2）函数执行上下文")]),n("p",null,"当一个函数被调用时，就会为该函数创建一个新的执行上下文，函数的上下文可以有任意多个。"),n("p",null,[n("strong",null,"（3）"),s(),n("code",null,"eval"),n("strong",null,"函数执行上下文")]),n("p",null,"执行在 eval 函数中的代码会有属于他自己的执行上下文，不过 eval 函数不常使用，不做介绍。")],-1),vs=n("h2",{id:"_2-7-执行上下文栈是什么",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-7-执行上下文栈是什么","aria-hidden":"true"},"#"),s(" 2.7 执行上下文栈是什么")],-1),gs=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("ul",null,[n("li",null,"JavaScript 引擎使用执行上下文栈来管理执行上下文"),n("li",null,"当 JavaScript 执行代码时，首先遇到全局代码，会创建一个全局执行上下文并且压入执行栈中，每当遇到一个函数调用，就会为该函数创建一个新的执行上下文并压入栈顶，引擎会执行位于执行上下文栈顶的函数，当函数执行完成之后，执行上下文从栈中弹出，继续执行下一个上下文。当所有的代码都执行完毕之后，从栈中弹出全局执行上下文。")])],-1),xs=n("h2",{id:"_2-8-执行上下文的三个阶段",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-8-执行上下文的三个阶段","aria-hidden":"true"},"#"),s(" 2.8 执行上下文的三个阶段")],-1),bs=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("strong",null,"创建阶段 → 执行阶段 → 回收阶段")]),n("hr"),n("p",null,[n("strong",null,"创建阶段")]),n("p",null,"（1）this 绑定"),n("ul",null,[n("li",null,"在全局执行上下文中，this 指向全局对象（window 对象）"),n("li",null,"在函数执行上下文中，this 指向取决于函数如何调用。如果它被一个引用对象调用，那么 this 会被设置成那个对象，否则 this 的值被设置为全局对象或者 undefined")]),n("p",null,"（2）创建词法环境组件"),n("ul",null,[n("li",null,[s("词法环境是一种有"),n("strong",null,"标识符——变量映射"),s("的数据结构，标识符是指变量/函数名，变量是对实际对象或原始数据的引用。")]),n("li",null,[s("词法环境的内部有两个组件："),n("strong",null,"加粗样式"),s("：环境记录器:用来储存变量个函数声明的实际位置"),n("strong",null,"外部环境的引用"),s("：可以访问父级作用域")])]),n("p",null,"（3）创建变量环境组件"),n("ul",null,[n("li",null,"变量环境也是一个词法环境，其环境记录器持有变量声明语句在执行上下文中创建的绑定关系。")]),n("p",null,[n("strong",null,"执行阶段")]),n("p",null,"在这阶段，执行变量赋值、代码执行"),n("p",null,[s("如果 "),n("code",null,"Javascript"),s(" 引擎在源代码中声明的实际位置找不到变量的值，那么将为其分配 "),n("code",null,"undefined"),s(" 值")]),n("p",null,[n("strong",null,"回收阶段")]),n("p",null,"执行上下文出栈等待虚拟机回收执行上下文")],-1),_s=n("h2",{id:"_2-9-谈谈你对作用域的理解",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-9-谈谈你对作用域的理解","aria-hidden":"true"},"#"),s(" 2.9 谈谈你对作用域的理解")],-1),fs=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("ul",null,[n("li",null,"作用域可以视为一套规则，这套规则用来管理引擎如何在当前作用域以及嵌套的子作用域根据标识符名称进行变量查找。"),n("li",null,"简单来说作用域就是变量的有效范围。在一定的空间里可以对变量数据进行读写操作，这个空间就是变量的作用域。")]),n("h4",{id:"_1-全局作用域",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-全局作用域","aria-hidden":"true"},"#"),s(" （1）全局作用域")]),n("ul",null,[n("li",null,[n("p",null,"直接写在 script 标签的 JS 代码，都在全局作用域。在全局作用域下声明的变量叫做全局变量（在块级外部定义的变量）。")]),n("li",null,[n("p",null,"全局变量在全局的任何位置下都可以使用；全局作用域中无法访问到局部作用域的中的变量。")]),n("li",null,[n("p",null,"全局作用域在页面打开的时候创建，在页面关闭时销毁。")]),n("li",null,[n("p",null,[n("strong",null,"所有 window 对象的属性拥有全局作用域")]),n("p",null,[n("em",null,"var 和 function 命令声明的全局变量和函数是 window 对象的属性和方法")]),n("p",null,"let 命令、const 命令、class 命令声明的全局变量，不属于 window 对象的属性")])]),n("h4",{id:"_2-函数作用域-局部作用域",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-函数作用域-局部作用域","aria-hidden":"true"},"#"),s(" （2）函数作用域(局部作用域)")]),n("ul",null,[n("li",null,"调用函数时会创建函数作用域，函数执行完毕以后，作用域销毁。每调用一次函数就会创建一个新的函数作用域，他们之间是相互独立的。"),n("li",null,"在函数作用域中可以访问全局变量，在函数的外面无法访问函数内的变量。"),n("li",null,"当在函数作用域操作一个变量时，它会先在自身作用域中寻找，如果有就直接使用，如果没有就向上一作用域中寻找，直到找到全局作用域，如果全局作用域中仍然没有找到，则会报错。")]),n("h4",{id:"_3-块级作用域",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-块级作用域","aria-hidden":"true"},"#"),s(" （3）块级作用域")]),n("ul",null,[n("li",null,"ES6 之前 JavaScript 采用的是函数作用域+词法作用域，ES6 引入了块级作用域。"),n("li",null,[s("任何一对花括号{}中的语句集都属于一个块,"),n("strong",null,"在块中使用 let 和 const 声明的变量"),s("，外部是访问不到的，这种作用域的规则就叫块级作用域。")]),n("li",null,"通过 var 声明的变量或者非严格模式下创建的函数声明没有块级作用域。")]),n("h4",{id:"_4-词法作用域",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-词法作用域","aria-hidden":"true"},"#"),s(" （4）词法作用域")]),n("ul",null,[n("li",null,[s("词法作用域是静态的作用域，无论函数在哪里被调用，也无论它如何被调用，它的词法作用域都只由"),n("strong",null,"函数被声明时所处的位置"),s("决定。")]),n("li",null,"编译的词法分析阶段基本能够知道全部标识符在哪里以及是如何声明的，从而能够预测在执行过中如何对它们进行查找。"),n("li",null,"换句话说，词法作用域就是你在写代码的时候就已经决定了变量的作用域。")])],-1),ys=n("h2",{id:"_2-10-什么是作用域链",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-10-什么是作用域链","aria-hidden":"true"},"#"),s(" 2.10 什么是作用域链")],-1),js=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[s("当在"),n("code",null,"js"),s("中使用一个变量的时候，首先"),n("code",null,"js"),s("引擎会尝试在当前作用域下去寻找该变量，如果没找到，再到它的上层作用域寻找，以此类推直到找到该变量或是已经到了全局作用域，这样的变量作用域访问的链式结构, 被称之为作用域链")]),n("p",null,[n("strong",null,"深度回答")]),n("p",null,"作用域链的本质上是一个指向变量对象的指针列表。变量对象是一个包含了执行环境中所有变量和函数的对象。作用域链的前端始终都是当前执行上下文的变量对象。全局执行上下文的变量对象（也就是全局对象）始终是作用域链的最后一个对象。")],-1),Ms=n("h2",{id:"_2-11-作用域链的作用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-11-作用域链的作用","aria-hidden":"true"},"#"),s(" 2.11 作用域链的作用")],-1),Ps=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[s("作用域链的作用是"),n("strong",null,"保证对执行环境有权访问的所有变量和函数的有序访问，通过作用域链，可以访问到外层环境的变量和函数。")])],-1),Ss=n("h2",{id:"_2-12-作用域的常见应用场景",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-12-作用域的常见应用场景","aria-hidden":"true"},"#"),s(" 2.12 作用域的常见应用场景")],-1),Is=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[s("作用域的一个常见运用场景之一，就是 "),n("strong",null,"模块化"),s("。")]),n("p",null,"由于 javascript 并未原生支持模块化导致了很多令人口吐芬芳的问题，比如全局作用域污染和变量名冲突，代码结构臃肿且复用性不高。在正式的模块化方案出台之前，开发者为了解决这类问题，想到了使用函数作用域来创建模块的方案。")],-1),Ts=n("h2",{id:"_2-13-说说-js-中的预解析",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-13-说说-js-中的预解析","aria-hidden":"true"},"#"),s(" 2.13 说说 Js 中的预解析？")],-1),Cs=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"JS 引擎在运行一份代码的时候，会按照下面的步骤进行工作："),n("p",null,"1.把变量的声明提升到当前作用域的最前面，只会提升声明，不会提升赋值"),n("p",null,"2.把函数的声明提升到当前作用域的最前面，只会提升声明，不会提升调用"),n("p",null,"3.先提升 function，在提升 var")],-1),Bs=n("h2",{id:"_2-14-变量提升与函数提升的区别",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-14-变量提升与函数提升的区别","aria-hidden":"true"},"#"),s(" 2.14 变量提升与函数提升的区别？")],-1),Ns=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("strong",null,"变量提升")]),n("p",null,[s("简单说就是在 JavaScript 代码执行前引擎会先进行预编译，预编译期间会将"),n("code",null,"变量声明与函数声明"),s("提升至其"),n("code",null,"对应作用域的最顶端"),s("，"),n("code",null,"函数内声明的变量"),s("只会提升至"),n("code",null,"该函数作用域最顶层"),s("，"),n("code",null,"当函数内部定义的一个变量与外部相同时"),s("，那么"),n("code",null,"函数体内的这个变量就会被上升到最顶端"),s("。")]),n("p",null,[n("strong",null,"函数提升")]),n("p",null,"函数提升只会提升函数声明式写法，函数表达式的写法不存在函数提升"),n("p",null,"函数提升的优先级大于变量提升的优先级，即函数提升在变量提升之上")],-1),Os=n("h2",{id:"_2-14-如何延长作用域链",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-14-如何延长作用域链","aria-hidden":"true"},"#"),s(" 2.14 如何延长作用域链？")],-1),Es=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"作用域链是可以延长的。"),n("p",null,"延长作用域链： 执行环境的类型只有两种，全局和局部（函数）。但是有些语句可以在作用域链的前端临时增加一个变量对象，该变量对象会在代码执行后被移除。"),n("p",null,"具体来说就是执行这两个语句时，作用域链都会得到加强"),n("ol",null,[n("li",null,"try - catch 语句的 catch 块：会创建一个新的变量对象，包含的是被抛出的错误对 象的声明。"),n("li",null,"with 语句：with 语句会将指定的对象添加到作用域链中。")])],-1),Fs=n("h2",{id:"_2-15-浏览器的垃圾回收机制",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-15-浏览器的垃圾回收机制","aria-hidden":"true"},"#"),s(" 2.15 浏览器的垃圾回收机制")],-1),As=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("h4",{id:"_1-内存的生命周期",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-内存的生命周期","aria-hidden":"true"},"#"),s(" （1）内存的生命周期")]),n("p",null,"JS 环境中分配的内存, 一般有如下生命周期："),n("ol",null,[n("li",null,[n("p",null,"内存分配：当我们声明变量、函数、对象的时候，系统会自动为他们分配内存")]),n("li",null,[n("p",null,"内存使用：即读写内存，也就是使用变量、函数等")]),n("li",null,[n("p",null,"内存回收：使用完毕，由垃圾回收自动回收不再使用的内存"),n("p",null,"全局变量一般不会回收, 一般局部变量的的值, 不用了, 会被自动回收掉")])]),n("h4",{id:"_2-垃圾回收的概念",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-垃圾回收的概念","aria-hidden":"true"},"#"),s(" （2）垃圾回收的概念")]),n("p",null,[n("strong",null,"垃圾回收"),s("：JavaScript 代码运行时，需要分配内存空间来储存变量和值。当变量不在参与运行时，就需要系统收回被占用的内存空间，这就是垃圾回收。")]),n("p",null,[n("strong",null,"回收机制"),s("：")]),n("ul",null,[n("li",null,"Javascript 具有自动垃圾回收机制，会定期对那些不再使用的变量、对象所占用的内存进行释放，原理就是找到不再使用的变量，然后释放掉其占用的内存。"),n("li",null,"JavaScript 中存在两种变量：局部变量和全局变量。全局变量的生命周期会持续要页面卸载；而局部变量声明在函数中，它的生命周期从函数执行开始，直到函数执行结束，在这个过程中，局部变量会在堆或栈中存储它们的值，当函数执行结束后，这些局部变量不再被使用，它们所占有的空间就会被释放。"),n("li",null,"不过，当局部变量被外部函数使用时，其中一种情况就是闭包，在函数执行结束后，函数外部的变量依然指向函数内部的局部变量，此时局部变量依然在被使用，所以不会回收。")]),n("h4",{id:"_3-垃圾回收的方式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-垃圾回收的方式","aria-hidden":"true"},"#"),s(" （3）垃圾回收的方式")]),n("p",null,[n("strong",null,"1.引用计数法")]),n("ul",null,[n("li",null,"这个用的相对较少，IE 采用的引用计数算法。引用计数就是跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型赋值给该变量时，则这个值的引用次数就是 1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数就减 1。当这个引用次数变为 0 时，说明这个变量已经没有价值，因此，在在机回收期下次再运行时，这个变量所占有的内存空间就会被释放出来。"),n("li",null,[s("这种方法会引起"),n("strong",null,"循环引用"),s("的问题：例如："),n("code",null,"obj1"),s("和"),n("code",null,"obj2"),s("通过属性进行相互引用，两个对象的引用次数都是 2。当使用循环计数时，由于函数执行完后，两个对象都离开作用域，函数执行结束，"),n("code",null,"obj1"),s("和"),n("code",null,"obj2"),s("还将会继续存在，因此它们的引用次数永远不会是 0，就会引起循环引用。")])]),n("p",null,[n("strong",null,"2.标记清除法")]),n("p",null,"现代的浏览器已经不再使用引用计数算法了。"),n("p",null,"现代浏览器通用的大多是基于标记清除算法的某些改进算法，总体思想都是一致的。"),n("ul",null,[n("li",null,"标记清除是浏览器常见的垃圾回收方式，当变量进入执行环境时，就标记这个变量“进入环境”，被标记为“进入环境”的变量是不能被回收的，因为他们正在被使用。当变量离开环境时，就会被标记为“离开环境”，被标记为“离开环境”的变量会被内存释放。"),n("li",null,"垃圾收集器在运行的时候会给存储在内存中的所有变量都加上标记。然后，它会去掉环境中的变量以及被环境中的变量引用的标记。而在此之后再被加上标记的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。最后。垃圾收集器完成内存清除工作，销毁那些带标记的值，并回收他们所占用的内存空间。")]),n("h4",{id:"_4-如何减少垃圾回收",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-如何减少垃圾回收","aria-hidden":"true"},"#"),s(" （4）如何减少垃圾回收")]),n("p",null,"虽然浏览器可以进行垃圾自动回收，但是当代码比较复杂时，垃圾回收所带来的代价比较大，所以应该尽量减少垃圾回收。"),n("ul",null,[n("li",null,[n("strong",null,"对数组进行优化："),s(" 在清空一个数组时，最简单的方法就是给其赋值为[ ]，但是与此同时会创建一个新的空对象，可以将数组的长度设置为 0，以此来达到清空数组的目的。")]),n("li",null,[n("strong",null,"对"),n("code",null,"object"),n("strong",null,"进行优化："),s(" 对象尽量复用，对于不再使用的对象，就将其设置为 null，尽快被回收。")]),n("li",null,[n("strong",null,"对函数进行优化："),s(" 在循环中的函数表达式，如果可以复用，尽量放在函数的外面。")])]),n("h4",{id:"_5-内存泄漏是什么",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-内存泄漏是什么","aria-hidden":"true"},"#"),s(" （5）内存泄漏是什么")]),n("p",null,"是指由于疏忽或错误造成程序未能释放已经不再使用的内存"),n("h4",{id:"_6-哪些情况会导致内存泄漏",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_6-哪些情况会导致内存泄漏","aria-hidden":"true"},"#"),s(" （6）哪些情况会导致内存泄漏")]),n("p",null,"以下四种情况会造成内存的泄漏："),n("ul",null,[n("li",null,[n("strong",null,"意外的全局变量："),s(" 由于使用未声明的变量，而意外的创建了一个全局变量，而使这个变量一直留在内存中无法被回收。")]),n("li",null,[n("strong",null,"被遗忘的计时器或回调函数："),s(" 设置了 setInterval 定时器，而忘记取消它，如果循环函数有对外部变量的引用的话，那么这个变量会被一直留在内存中，而无法被回收。")]),n("li",null,[n("strong",null,"脱离 DOM 的引用："),s(" 获取一个 DOM 元素的引用，而后面这个元素被删除，由于一直保留了对这个元素的引用，所以它也无法被回收。")]),n("li",null,[n("strong",null,"闭包："),s(" 不合理的使用闭包，从而导致某些变量一直被留在内存当中。")])])],-1),Js=n("h1",{id:"三、-函数与函数式编程",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#三、-函数与函数式编程","aria-hidden":"true"},"#"),s(" 三、 函数与函数式编程")],-1),Ds=n("h2",{id:"_3-1-什么是函数式编程",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-1-什么是函数式编程","aria-hidden":"true"},"#"),s(" 3.1 什么是函数式编程")],-1),Rs=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,'函数式编程是一种"编程范式"（programming paradigm），一种编写程序的方法论'),n("p",null,"主要的编程范式有三种：命令式编程，声明式编程和函数式编程"),n("p",null,"相比命令式编程，函数式编程更加强调程序执行的结果而非执行的过程，倡导利用若干简单的执行单元让计算结果不断渐进，逐层推导复杂的运算，而非设计一个复杂的执行过程")],-1),Ls=n("h2",{id:"_3-2-函数式编程的优缺点",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-2-函数式编程的优缺点","aria-hidden":"true"},"#"),s(" 3.2 函数式编程的优缺点")],-1),Hs=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("strong",null,"优点")]),n("ul",null,[n("li",null,"更好的管理状态：因为它的宗旨是无状态，或者说更少的状态，能最大化的减少这些未知、优化代码、减少出错情况"),n("li",null,"更简单的复用：固定输入->固定输出，没有其他外部变量影响，并且无副作用。这样代码复用时，完全不需要考虑它的内部实现和外部影响"),n("li",null,"更优雅的组合：往大的说，网页是由各个组件组成的。往小的说，一个函数也可能是由多个小函数组成的。更强的复用性，带来更强大的组合性"),n("li",null,"隐性好处。减少代码量，提高维护性")]),n("p",null,[n("strong",null,"缺点")]),n("ul",null,[n("li",null,"性能：函数式编程相对于指令式编程，性能绝对是一个短板，因为它往往会对一个方法进行过度包装，从而产生上下文切换的性能开销"),n("li",null,"资源占用：在 JS 中为了实现对象状态的不可变，往往会创建新的对象，因此，它对垃圾回收所产生的压力远远超过其他编程方式"),n("li",null,"递归陷阱：在函数式编程中，为了实现迭代，通常会采用递归操作")])],-1),Us=n("h2",{id:"_3-3-什么是纯函数-它有什么优点",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-3-什么是纯函数-它有什么优点","aria-hidden":"true"},"#"),s(" 3.3 什么是纯函数，它有什么优点")],-1),zs=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"纯函数是对给定的输入返还相同输出的函数，并且要求你所有的数据都是不可变的，即纯函数=无状态+数据不可变"),n("p",null,"特性："),n("ul",null,[n("li",null,"函数内部传入指定的值，就会返回确定唯一的值"),n("li",null,"不会造成超出作用域的变化，例如修改全局变量或引用传递的参数")]),n("p",null,"优势："),n("ul",null,[n("li",null,"使用纯函数，我们可以产生可测试的代码"),n("li",null,"不依赖外部环境计算，不会产生副作用，提高函数的复用性"),n("li",null,"可读性更强 ，函数不管是否是纯函数 都会有一个语义化的名称，更便于阅读"),n("li",null,"可以组装成复杂任务的可能性。符合模块化概念及单一职责原则")])],-1),qs=n("h2",{id:"_3-4-什么是组合函数-compose",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-4-什么是组合函数-compose","aria-hidden":"true"},"#"),s(" 3.4 什么是组合函数 (compose)")],-1),Ws=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"在函数式编程中，有一个很重要的概念就是函数组合，实际上就是把处理的函数数据像管道一样连接起来，然后让数据穿过管道连接起来，得到最终的结果。"),n("p",null,"组合函数，其实大致思想就是将 多个函数组合成一个函数，c(b(a(a(1)))) 这种写法简写为 compose(c, b, a, a)(x) 。但是注意这里如果一个函数都没有传入，那就是传入的是什么就返回什么，并且函数的执行顺序是和传入的顺序相反的。"),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"var"),s(),n("span",{class:"token function-variable function"},"compose"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[n("span",{class:"token operator"},"..."),s("funcs")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// funcs(数组)：记录的是所有的函数"),s(`
  `),n("span",{class:"token comment"},"// 这里其实也是利用了柯里化的思想，函数执行，生成一个闭包，预先把一些信息存储，供下级上下文使用"),s(`
  `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"x"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"var"),s(" len "),n("span",{class:"token operator"},"="),s(" funcs"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"// 如果没有函数执行，直接返回结果"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("len "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(" x"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("len "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(" funcs"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"("),s("x"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" funcs"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"reduceRight"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("res"),n("span",{class:"token punctuation"},","),s(" func")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token function"},"func"),n("span",{class:"token punctuation"},"("),s("res"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(" x"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"var"),s(" resFn "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"compose"),n("span",{class:"token punctuation"},"("),s("c"),n("span",{class:"token punctuation"},","),s(" b"),n("span",{class:"token punctuation"},","),s(" a"),n("span",{class:"token punctuation"},","),s(" a"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token function"},"resFn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])]),n("p",null,"组合函数的思想，在很多框架中也被使用，例如：redux，实现效果来说是其实和上面的代码等价。")],-1),Xs=n("h2",{id:"_3-5-什么是惰性函数",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-5-什么是惰性函数","aria-hidden":"true"},"#"),s(" 3.5 什么是惰性函数")],-1),Gs=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"惰性载入表示函数执行的分支只会在函数第一次掉用的时候执行，在第一次调用过程中，该函数会被覆盖为另一个按照合适方式执行的函数，这样任何对原函数的调用就不用再经过执行的分支了"),n("p",null,[n("strong",null,"惰性函数相当于有记忆的功能一样，当它已经判断了一遍的话，第二遍就不会再判断了。")]),n("p",null,"比如现在要求写一个 test 函数，这个函数返回首次调用时的 new Date().getTime()，注意是首次，而且不允许有全局变量的污染"),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token comment"},"//一般会这样实现"),s(`
`),n("span",{class:"token keyword"},"var"),s(" test "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"var"),s(" t "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("t"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token keyword"},"return"),s(" t"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    t `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Date"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getTime"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" t"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token comment"},"// 用惰性函数实现"),s(`
`),n("span",{class:"token keyword"},"var"),s(),n("span",{class:"token function-variable function"},"test"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"var"),s(" t "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Date"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getTime"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token function-variable function"},"test"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" t"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token function"},"test"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"test"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"test"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"test"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1),Ys=n("h2",{id:"_3-6-什么是高阶函数",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-6-什么是高阶函数","aria-hidden":"true"},"#"),s(" 3.6 什么是高阶函数")],-1),Vs=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"高阶函数是指使用其他函数作为参数、或者返回一个函数作为结果的函数。")],-1),Ks=n("h2",{id:"_3-7-说说你对函数柯里化的理解",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-7-说说你对函数柯里化的理解","aria-hidden":"true"},"#"),s(" 3.7 说说你对函数柯里化的理解")],-1),Qs=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"柯里化（Currying）是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数且返回结果的新函数的技术。"),n("p",null,"函数柯里化的好处："),n("p",null,"（1）参数复用：需要输入多个参数，最终只需输入一个，其余通过 arguments 来获取"),n("p",null,"（2）提前确认：避免重复去判断某一条件是否符合，不符合则 return 不再继续执行下面的操作"),n("p",null,"（3）延迟运行：避免重复的去执行程序，等真正需要结果的时候再执行")],-1),Zs=n("h2",{id:"_3-8-什么是箭头函数-有什么特征",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-8-什么是箭头函数-有什么特征","aria-hidden":"true"},"#"),s(" 3.8 什么是箭头函数，有什么特征")],-1),$s=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,'使用 "箭头" ( => ) 来定义函数. 箭头函数相当于匿名函数, 并且简化了函数定义'),n("p",null,[n("strong",null,"箭头函数的特征:")]),n("ul",null,[n("li",null,"箭头函数没有 this, this 指向定义箭头函数所处的外部环境"),n("li",null,"箭头函数的 this 永远不会变，call、apply、bind 也无法改变"),n("li",null,[s("箭头函数只能声明成"),n("strong",null,"匿名函数"),s("，但可以通过表达式的方式让箭头函数具名")]),n("li",null,"箭头函数没有原型 prototype"),n("li",null,"箭头函数不能当做一个构造函数 因为 this 的指向问题"),n("li",null,"箭头函数没有 arguments 在箭头函数内部访问这个变量访问的是外部环境的 arguments, 可以使用 ...代替")])],-1),nt=n("h2",{id:"_3-9-说说你对递归函数的理解",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-9-说说你对递归函数的理解","aria-hidden":"true"},"#"),s(" 3.9 说说你对递归函数的理解")],-1),st=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"如果一个函数在内部调用自身本身，这个函数就是递归函数"),n("p",null,"其核心思想是把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解"),n("p",null,"一般来说，递归需要有边界条件、递归前进阶段和递归返回阶段。当边界条件不满足时，递归前进；当边界条件满足时，递归返回"),n("p",null,[n("strong",null,"优点"),s("：结构清晰、可读性强")]),n("p",null,[n("strong",null,"缺点"),s("：效率低、调用栈可能会溢出，其实每一次函数调用会在内存栈中分配空间，而每个进程的栈的容量是有限的，当调用的层次太多时，就会超出栈的容量，从而导致栈溢出。")])],-1),tt=n("h2",{id:"_3-10-什么是尾递归",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-10-什么是尾递归","aria-hidden":"true"},"#"),s(" 3.10 什么是尾递归")],-1),at=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"尾递归，即在函数尾位置调用自身（或是一个尾调用本身的其他函数等等）。"),n("p",null,"在递归调用的过程当中系统为每一层的返回点、局部量等开辟了栈来存储，递归次数过多容易造成栈溢出"),n("p",null,'这时候，我们就可以使用尾递归，即一个函数中所有递归形式的调用都出现在函数的末尾，对于尾递归来说，由于只存在一个调用记录，所以永远不会发生"栈溢出"错误')],-1),et=n("h2",{id:"_3-11-函数传参-传递复杂数据类型和简单数据类型有什么区别",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-11-函数传参-传递复杂数据类型和简单数据类型有什么区别","aria-hidden":"true"},"#"),s(" 3.11 函数传参，传递复杂数据类型和简单数据类型有什么区别")],-1),lt=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"传递复杂数据类型传递的是引用的地址，修改会改变"),n("p",null,"简单数据类型传递的是具体的值，不会相互影响"),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"let"),s(" a "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"8"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"fn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"a"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  a `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"9"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token function"},"fn"),n("span",{class:"token punctuation"},"("),s("a"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("a"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 8 */"),s(`

`),n("span",{class:"token keyword"},"let"),s(" a "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token literal-property property"},"age"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"8"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"fn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"a"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  a`),n("span",{class:"token punctuation"},"."),s("age "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"9"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token function"},"fn"),n("span",{class:"token punctuation"},"("),s("a"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("a"),n("span",{class:"token punctuation"},"."),s("age"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 9"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1),ot=n("h2",{id:"_3-12-函数声明与函数表达式的区别",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-12-函数声明与函数表达式的区别","aria-hidden":"true"},"#"),s(" 3.12 函数声明与函数表达式的区别")],-1),ct=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("strong",null,"函数声明："),s(" funtion 开头，有函数提升")]),n("p",null,[n("strong",null,"函数表达式"),s(": 不是 funtion 开头，没有函数提升")])],-1),it=n("h2",{id:"_3-13-什么是函数缓存-如何实现",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-13-什么是函数缓存-如何实现","aria-hidden":"true"},"#"),s(" 3.13 什么是函数缓存，如何实现？")],-1),ut=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("strong",null,"概念")]),n("p",null,"函数缓存，就是将函数运算过的结果进行缓存"),n("p",null,"本质上就是用空间（缓存存储）换时间（计算过程）"),n("p",null,"常用于缓存数据计算结果和缓存对象"),n("p",null,[n("strong",null,"如何实现")]),n("p",null,"实现函数缓存主要依靠闭包、柯里化、高阶函数"),n("p",null,[n("strong",null,"应用场景")]),n("ul",null,[n("li",null,"对于昂贵的函数调用，执行复杂计算的函数"),n("li",null,"对于具有有限且高度重复输入范围的函数"),n("li",null,"对于具有重复输入值的递归函数"),n("li",null,"对于纯函数，即每次使用特定输入调用时返回相同输出的函数")])],-1),rt=n("h2",{id:"_3-14-call、apply、bind-三者的异同",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-14-call、apply、bind-三者的异同","aria-hidden":"true"},"#"),s(" 3.14 call、apply、bind 三者的异同")],-1),pt=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("strong",null,"共同点"),s(" :")]),n("ul",null,[n("li",null,"都可以改变 this 指向;"),n("li",null,[s("三者第一个参数都是"),n("code",null,"this"),s("要指向的对象，如果如果没有这个参数或参数为"),n("code",null,"undefined"),s("或"),n("code",null,"null"),s("，则默认指向全局"),n("code",null,"window")])]),n("p",null,[n("strong",null,"不同点"),s(":")]),n("ul",null,[n("li",null,"call 和 apply 会调用函数, 并且改变函数内部 this 指向."),n("li",null,[s("call 和 apply 传递的参数不一样,call 传递参数使用逗号隔开,apply 使用数组传递，且"),n("code",null,"apply"),s("和"),n("code",null,"call"),s("是一次性传入参数，而"),n("code",null,"bind"),s("可以分为多次传入")]),n("li",null,[n("code",null,"bind"),s("是返回绑定 this 之后的函数")])]),n("p",null,[n("strong",null,"应用场景")]),n("ol",null,[n("li",null,"call 经常做继承."),n("li",null,"apply 经常跟数组有关系. 比如借助于数学对象实现数组最大值最小值"),n("li",null,"bind 不调用函数,但是还想改变 this 指向. 比如改变定时器内部的 this 指向")])],-1),dt=n("h1",{id:"四、原型与继承",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#四、原型与继承","aria-hidden":"true"},"#"),s(" 四、原型与继承")],-1),kt=n("h2",{id:"_4-1-说说面向对象的特性与特点",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-1-说说面向对象的特性与特点","aria-hidden":"true"},"#"),s(" 4.1 说说面向对象的特性与特点")],-1),ht=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("ul",null,[n("li",null,"封装性"),n("li",null,"继承性"),n("li",null,"多态性")]),n("p",null,"面向对象编程具有灵活、代码可复用、容易维护和开发的有点、更适合多人合作的大型软件项目")],-1),mt=n("h2",{id:"_4-2-说说你对工厂模式的理解",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-2-说说你对工厂模式的理解","aria-hidden":"true"},"#"),s(" 4.2 说说你对工厂模式的理解")],-1),wt=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"工厂模式是用来创建对象的一种最常用的设计模式，不暴露创建对象的具体逻辑，而是将将逻辑封装在一个函数中，那么这个函数就可以被视为一个工厂"),n("p",null,"其就像工厂一样重复的产生类似的产品，工厂模式只需要我们传入正确的参数，就能生产类似的产品")],-1),vt=n("h2",{id:"_4-3-创建对象有哪几种方式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-3-创建对象有哪几种方式","aria-hidden":"true"},"#"),s(" 4.3 创建对象有哪几种方式？")],-1),gt=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("ol",null,[n("li",null,"字面量的形式直接创建对象"),n("li",null,[s("函数方法 "),n("ol",null,[n("li",null,[n("strong",null,"工厂模式"),s("，工厂模式的主要工作原理是用函数来封装创建对象的细节，从而通过调用函数来达到复用的目的。")]),n("li",null,[n("strong",null,"构造函数模式")]),n("li",null,[n("strong",null,"原型模式")]),n("li",null,[n("strong",null,"构造函数模式+原型模式"),s("，这是创建自定义类型的最常见方式。")]),n("li",null,[n("strong",null,"动态原型模式")]),n("li",null,[n("strong",null,"寄生构造函数模式")])])]),n("li",null,"class 创建")])],-1),xt=n("h2",{id:"_4-4-js-宿主对象和原生对象的区别",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-4-js-宿主对象和原生对象的区别","aria-hidden":"true"},"#"),s(" 4.4 JS 宿主对象和原生对象的区别")],-1),bt=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("div",{class:"language-text line-numbers-mode","data-ext":"text"},[n("pre",{class:"language-text"},[n("code",null,`原生对象
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])]),n("p",null,[s("“"),n("code",null,"独立于宿主环境的 ECMAScript 实现提供的对象"),s("”")]),n("p",null,"包含：Object、Function、Array、String、Boolean、Number、Date、RegExp、Error、EvalError、RangeError、ReferenceError、SyntaxError、TypeError、URIError"),n("div",{class:"language-text line-numbers-mode","data-ext":"text"},[n("pre",{class:"language-text"},[n("code",null,`内置对象
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])]),n("p",null,"开发者不必明确实例化内置对象，它已被内部实例化了"),n("p",null,"同样是“独立于宿主环境”。而 ECMA-262 只定义了两个内置对象，即 Global 和 Math"),n("div",{class:"language-text line-numbers-mode","data-ext":"text"},[n("pre",{class:"language-text"},[n("code",null,`宿主对象
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])]),n("p",null,"BOM 和 DOM 都是宿主对象。因为其对于不同的“宿主”环境所展示的内容不同。其实说白了就是，ECMAScript 官方未定义的对象都属于宿主对象，因为其未定义的对象大多数是自己通过 ECMAScript 程序创建的对象")],-1),_t=n("h2",{id:"_4-5-javascript-内置的常用对象有哪些-并列举该对象常用的方法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-5-javascript-内置的常用对象有哪些-并列举该对象常用的方法","aria-hidden":"true"},"#"),s(" 4.5 JavaScript 内置的常用对象有哪些？并列举该对象常用的方法？")],-1),ft=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("strong",null,"Number 数值对象，数值常用方法")]),n("ul",null,[n("li",null,"Number.toFixed( ) 采用定点计数法格式化数字"),n("li",null,"Number.toString( ) 将—个数字转换成字符串"),n("li",null,"Number.valueOf( ) 返回原始数值")]),n("p",null,[n("strong",null,"String 字符串对象，字符串常用方法")]),n("ul",null,[n("li",null,"Length 获取字符串的长度"),n("li",null,"split()将一个字符串切割数组"),n("li",null,"concat() 连接字符串"),n("li",null,"indexOf()返回一个子字符串在原始字符串中的索引值。如果没有找到，则返回固定值 -1"),n("li",null,"lastIndexOf() 从后向前检索一个字符串"),n("li",null,"slice() 抽取一个子串")]),n("p",null,[n("strong",null,"Boolean 布尔对象，布尔常用方法")]),n("ul",null,[n("li",null,"Boolean.toString() 将布尔值转换成字符串"),n("li",null,"Boolean.valueOf() Boolean 对象的原始值的布尔值")]),n("p",null,[n("strong",null,"Array 数组对象，数组常用方法")]),n("ul",null,[n("li",null,"join() 将一个数组转成字符串。返回一个字符串"),n("li",null,"reverse() 将数组中各元素颠倒顺序"),n("li",null,"delete 运算符只能删除数组元素的值，而所占空间还在，总长度没变(arr.length)"),n("li",null,"shift()删除数组中第一个元素，返回删除的那个值，并将长度减 1"),n("li",null,"pop()删除数组中最后一个元素，返回删除的那个值，并将长度减 1"),n("li",null,"unshift() 往数组前面添加一个或多个数组元素，长度会改变"),n("li",null,"push() 往数组结尾添加一个或多个数组元素，长度会改变"),n("li",null,"concat() 连接数组"),n("li",null,"slice() 切割数组，返回数组的一部分"),n("li",null,"splice()插入、删除或替换数组的元素"),n("li",null,"toLocaleString() 把数组转换成局部字符串"),n("li",null,"toString()将数组转换成一个字符串"),n("li",null,"forEach()遍历所有元素"),n("li",null,"every()判断所有元素是否都符合条件"),n("li",null,"sort()对数组元素进行排序"),n("li",null,"map()对元素重新组装，生成新数组"),n("li",null,"filter()过滤符合条件的元素"),n("li",null,"find() 查找 返回满足提供的测试函数的第一个元素的值。否则返回 undefined。"),n("li",null,"some() 判断是否有一个满足条件 ，返回布尔值"),n("li",null,"fill() 填充数组"),n("li",null,"flat() 数组扁平化")]),n("p",null,[n("strong",null,"Function 函数对象，函数常用方法")]),n("ul",null,[n("li",null,"Function.arguments 传递给函数的参数"),n("li",null,"Function.apply() 将函数作为一个对象的方法调用"),n("li",null,"Function.call() 将函数作为对象的方法调用"),n("li",null,"Function.caller 调用当前函数的函数"),n("li",null,"Function.length 已声明的参数的个数"),n("li",null,"Function.prototype 对象类的原型"),n("li",null,"Function.toString() 把函数转换成字符串")]),n("p",null,[n("strong",null,"Object 基础对象，对象常用方法")]),n("ul",null,[n("li",null,"Object 含有所有 JavaScript 对象的特性的超类"),n("li",null,"Object.constructor 对象的构造函数"),n("li",null,"Object.hasOwnProperty( ) 检查属性是否被继承"),n("li",null,"Object.isPrototypeOf( ) 一个对象是否是另一个对象的原型"),n("li",null,"Object.propertyIsEnumerable( ) 是否可以通过 for/in 循环看到属性"),n("li",null,"Object.toLocaleString( ) 返回对象的本地字符串表示"),n("li",null,"Object.toString( ) 定义一个对象的字符串表示"),n("li",null,"Object.valueOf( ) 指定对象的原始值")]),n("p",null,[n("strong",null,"Date 日期时间对象，日期常用方法")]),n("ul",null,[n("li",null,"Date.getFullYear() 返回 Date 对象的年份字段"),n("li",null,"Date.getMonth() 返回 Date 对象的月份字段"),n("li",null,"Date.getDate() 返回一个月中的某一天"),n("li",null,"Date.getDay() 返回一周中的某一天"),n("li",null,"Date.getHours() 返回 Date 对象的小时字段"),n("li",null,"Date.getMinutes() 返回 Date 对象的分钟字段"),n("li",null,"Date.getSeconds() 返回 Date 对象的秒字段"),n("li",null,"Date.getMilliseconds() 返回 Date 对象的毫秒字段"),n("li",null,"Date.getTime() 返回 Date 对象的毫秒表示")]),n("p",null,[n("strong",null,"Math 数学对象，数学常用方法")]),n("ul",null,[n("li",null,[s("Math 对象是一个"),n("code",null,"静态对象")]),n("li",null,"Math.PI 圆周率"),n("li",null,"Math.abs() 绝对值"),n("li",null,"Math.ceil() 向上取整(整数加 1，小数去掉)"),n("li",null,"Math.floor() 向下取整(直接去掉小数)"),n("li",null,"Math.round() 四舍五入"),n("li",null,"Math.pow(x，y) 求 x 的 y 次方"),n("li",null,"Math.sqrt() 求平方根")]),n("p",null,[n("strong",null,"RegExp 正则表达式对象，正则常用方法")]),n("ul",null,[n("li",null,"RegExp.exec() 检索字符串中指定的值。返回找到的值，并确定其位置。"),n("li",null,"RegExp.test( ) 检索字符串中指定的值。返回 true 或 false。"),n("li",null,"RegExp.toString( ) 把正则表达式转换成字符串"),n("li",null,'RegExp.globa 判断是否设置了 "g" 修饰符'),n("li",null,'RegExp.ignoreCase 判断是否设置了 "i" 修饰符'),n("li",null,"RegExp.lastIndex 用于规定下次匹配的起始位置"),n("li",null,"RegExp.source 返回正则表达式的匹配模式")]),n("p",null,[n("strong",null,"Error 异常对象")]),n("ul",null,[n("li",null,"Error.message 设置或返回一个错误信息(字符串)"),n("li",null,"Error.name 设置或返回一个错误名"),n("li",null,"Error.toString( ) 把 Error 对象转换成字符串")])],-1),yt=n("h2",{id:"_4-6-说一下-hasownproperty、instanceof-方法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-6-说一下-hasownproperty、instanceof-方法","aria-hidden":"true"},"#"),s(" 4.6 说一下 hasOwnProperty、instanceof 方法")],-1),jt=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("strong",null,"hasOwnProperty()"),s(" 方法会返回一个布尔值，指示对象自身属性中是否具有指定的属性（也就是，是否有指定的键）。")]),n("p",null,[n("strong",null,"instanceof"),s(),n("strong",null,"运算符"),s("用于检测构造函数的 "),n("code",null,"prototype"),s(" 属性是否出现在某个实例对象的原型链上。")])],-1),Mt=n("h2",{id:"_4-7-什么是原型对象-说说对它的理解",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-7-什么是原型对象-说说对它的理解","aria-hidden":"true"},"#"),s(" 4.7 什么是原型对象，说说对它的理解")],-1),Pt=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("strong",null,"构造函数的内部的 prototype 属性指向的对象，就是构造函数的原型对象。")]),n("p",null,[s("原型对象包含了可以由该构造函数的所有实例共享的属性和方法。当使用构造函数新建一个实例对象后，在这个对象的内部将包含一个指针("),n("strong",null,"**proto**"),s(")，这个指针指向构造函数的 原型对象，在 ES5 中这个指针被称为对象的原型。")])],-1),St=n("h2",{id:"_4-8-什么是原型链",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-8-什么是原型链","aria-hidden":"true"},"#"),s(" 4.8 什么是原型链")],-1),It=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("strong",null,"原型链是一种查找规则")]),n("p",null,"当访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它就会去它的原型对象里找这个属性，这个原型对象又会有自己的原型，于是就这样一直找下去，这种链式查找过程称之为原型链")],-1),Tt=n("h2",{id:"_4-9-原型链的终点是什么",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-9-原型链的终点是什么","aria-hidden":"true"},"#"),s(" 4.9 原型链的终点是什么？")],-1),Ct=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[s("原型链的尽头是 null。也就是"),n("strong",null,"Object.prototype.**proto**")])],-1),Bt=n("h2",{id:"_4-10-js-实现继承的方法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-10-js-实现继承的方法","aria-hidden":"true"},"#"),s(" 4.10 Js 实现继承的方法")],-1),Nt=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("h3",{id:"_1-原型链继承",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-原型链继承","aria-hidden":"true"},"#"),s(" 1.原型链继承")]),n("p",null,[n("strong",null,"关键：子类构造函数的原型为父类构造函数的实例对象")]),n("p",null,[n("strong",null,"缺点"),s("：1、子类构造函数无法向父类构造函数传参。")]),n("p",null,"2、所有的子类实例共享着一个原型对象，一旦原型对象的属性发生改变，所有子类的实例对象都会收影响"),n("p",null,"3、如果要给子类的原型上添加方法，必须放在 Son.prototype = new Father()语句后面"),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"Father"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"name"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("name "),n("span",{class:"token operator"},"="),s(" name"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token class-name"},"Father"),n("span",{class:"token punctuation"},"."),s("prototype"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function-variable function"},"showName"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("name"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"Son"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"age"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("age "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"20"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token comment"},"// 原型链继承,将子函数的原型绑定到父函数的实例上,子函数可以通过原型链查找到复函数的原型,实现继承"),s(`
`),n("span",{class:"token class-name"},"Son"),n("span",{class:"token punctuation"},"."),s("prototype "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Father"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token comment"},"// 将Son原型的构造函数指回Son, 否则Son实例的constructor会指向Father"),s(`
`),n("span",{class:"token class-name"},"Son"),n("span",{class:"token punctuation"},"."),s("prototype"),n("span",{class:"token punctuation"},"."),s("constructor "),n("span",{class:"token operator"},"="),s(" Son"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token class-name"},"Son"),n("span",{class:"token punctuation"},"."),s("prototype"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function-variable function"},"showAge"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("age"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"let"),s(" son "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Son"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"20"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"刘逍"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 无法向父构造函数里传参"),s(`
`),n("span",{class:"token comment"},"// 子类构造函数的实例继承了父类构造函数原型的属性,所以可以访问到父类构造函数原型里的showName方法"),s(`
`),n("span",{class:"token comment"},"// 子类构造函数的实例继承了父类构造函数的属性,但是无法传参赋值,所以是this.name是undefined"),s(`
son`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"showName"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// undefined"),s(`
son`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"showAge"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 20"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])]),n("h3",{id:"_2-借用构造函数继承",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-借用构造函数继承","aria-hidden":"true"},"#"),s(" 2.借用构造函数继承")]),n("p",null,[n("strong",null,"关键：用 .call() 和 .apply()方法,在子类构造函数中,调用父类构造函数")]),n("p",null,[n("strong",null,"缺点"),s("：1、只继承了父类构造函数的属性，没有继承父类原型的属性。")]),n("p",null,"2、无法实现函数复用，如果父类构造函数里面有一个方法，会导致每一个子类实例上面都有相同的方法。"),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"Father"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"name"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("name "),n("span",{class:"token operator"},"="),s(" name"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token class-name"},"Father"),n("span",{class:"token punctuation"},"."),s("prototype"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function-variable function"},"showName"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("name"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"Son"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("name"),n("span",{class:"token punctuation"},","),s(" age")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token function"},"Father"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"call"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},","),s(" name"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 在Son中借用了Father函数,只继承了父类构造函数的属性，没有继承父类原型的属性。"),s(`
  `),n("span",{class:"token comment"},"// 相当于 this.name = name"),s(`
  `),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("age "),n("span",{class:"token operator"},"="),s(" age"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token keyword"},"let"),s(" s "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Son"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"刘逍"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"20"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 可以给父构造函数传参"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("s"),n("span",{class:"token punctuation"},"."),s("name"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// '刘逍'"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("s"),n("span",{class:"token punctuation"},"."),s("showName"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// undefined"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])]),n("h3",{id:"_3-组合继承",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-组合继承","aria-hidden":"true"},"#"),s(" 3.组合继承")]),n("p",null,[n("strong",null,"关键：原型链继承+借用构造函数继承")]),n("p",null,[n("strong",null,"缺点"),s("：1、使用组合继承时，父类构造函数会被调用两次，子类实例对象与子类的原型上会有相同的方法与属性，浪费内存。")]),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"Father"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"name"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("name "),n("span",{class:"token operator"},"="),s(" name"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function-variable function"},"say"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"hello,world"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token class-name"},"Father"),n("span",{class:"token punctuation"},"."),s("prototype"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function-variable function"},"showName"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("name"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"Son"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("name"),n("span",{class:"token punctuation"},","),s(" age")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token function"},"Father"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"call"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},","),s(" name"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"//借用构造函数继承"),s(`
  `),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("age "),n("span",{class:"token operator"},"="),s(" age"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token comment"},"// 原型链继承"),s(`
`),n("span",{class:"token class-name"},"Son"),n("span",{class:"token punctuation"},"."),s("prototype "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Father"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// Son实例的原型上,会有同样的属性,父类构造函数相当于调用了两次"),s(`
`),n("span",{class:"token comment"},"// 将Son原型的构造函数指回Son, 否则Son实例的constructor会指向Father"),s(`
`),n("span",{class:"token class-name"},"Son"),n("span",{class:"token punctuation"},"."),s("prototype"),n("span",{class:"token punctuation"},"."),s("constructor "),n("span",{class:"token operator"},"="),s(" Son"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token class-name"},"Son"),n("span",{class:"token punctuation"},"."),s("prototype"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function-variable function"},"showAge"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("age"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"let"),s(" p "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Son"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"刘逍"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"20"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 可以向父构造函数里传参"),s(`
`),n("span",{class:"token comment"},"// 也继承了父函数原型上的方法"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("p"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
p`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"showName"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// '刘逍'"),s(`
p`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"showAge"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 20"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])]),n("h3",{id:"_4-原型式继承",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-原型式继承","aria-hidden":"true"},"#"),s(" 4.原型式继承")]),n("p",null,[n("strong",null,"关键：创建一个函数，将要继承的对象通过参数传递给这个函数，最终返回一个对象，它的隐式原型指向传入的对象。"),s(" ("),n("strong",null,[n("em",null,"Object.create()方法的底层就是原型式继承")]),s(")")]),n("p",null,[n("strong",null,"缺点"),s("：只能继承父类函数原型对象上的属性和方法，无法给父类构造函数传参")]),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"createObj"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"obj"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token constant"},"F"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token comment"},"// 声明一个构造函数"),s(`
  `),n("span",{class:"token class-name"},"F"),n("span",{class:"token punctuation"},"."),s("prototype "),n("span",{class:"token operator"},"="),s(" obj"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"//将这个构造函数的原型指向传入的对象"),s(`
  `),n("span",{class:"token class-name"},"F"),n("span",{class:"token punctuation"},"."),s("prototype"),n("span",{class:"token punctuation"},"."),s("construct "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token constant"},"F"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// construct属性指回子类构造函数"),s(`
  `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"F"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 返回子类构造函数的实例"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"Father"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("name "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"刘逍"'),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token class-name"},"Father"),n("span",{class:"token punctuation"},"."),s("prototype"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function-variable function"},"showName"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("name"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"const"),s(" son "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"createObj"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Father"),n("span",{class:"token punctuation"},"."),s("prototype"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
son`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"showName"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// undefined  继承了原型上的方法,但是没有继承构造函数里的name属性"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])]),n("h3",{id:"_5-寄生式继承",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-寄生式继承","aria-hidden":"true"},"#"),s(" 5.寄生式继承")]),n("p",null,[n("strong",null,"关键：在原型式继承的函数里，给继承的对象上添加属性和方法，增强这个对象")]),n("p",null,[n("strong",null,"缺点"),s("：只能继承父类函数原型对象上的属性和方法，无法给父类构造函数传参")]),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"createObj"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"obj"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token constant"},"F"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token class-name"},"F"),n("span",{class:"token punctuation"},"."),s("prototype "),n("span",{class:"token operator"},"="),s(" obj"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token class-name"},"F"),n("span",{class:"token punctuation"},"."),s("prototype"),n("span",{class:"token punctuation"},"."),s("construct "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token constant"},"F"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token class-name"},"F"),n("span",{class:"token punctuation"},"."),s("prototype"),n("span",{class:"token punctuation"},"."),s("age "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"20"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 给F函数的原型添加属性和方法,增强对象"),s(`
  `),n("span",{class:"token class-name"},"F"),n("span",{class:"token punctuation"},"."),s("prototype"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function-variable function"},"showAge"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("age"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"F"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"Father"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("name "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"刘逍"'),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token class-name"},"Father"),n("span",{class:"token punctuation"},"."),s("prototype"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function-variable function"},"showName"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("name"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"const"),s(" son "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"createObj"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Father"),n("span",{class:"token punctuation"},"."),s("prototype"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
son`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"showName"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// undefined"),s(`
son`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"showAge"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 20"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])]),n("h3",{id:"_6-寄生组合继承",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_6-寄生组合继承","aria-hidden":"true"},"#"),s(" 6.寄生组合继承")]),n("p",null,[n("strong",null,"关键：原型式继承 + 构造函数继承")]),n("p",null,[n("strong",null,"Js 最佳的继承方式，只调用了一次父类构造函数")]),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"Father"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"name"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("name "),n("span",{class:"token operator"},"="),s(" name"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function-variable function"},"say"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"hello,world"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token class-name"},"Father"),n("span",{class:"token punctuation"},"."),s("prototype"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function-variable function"},"showName"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("name"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"Son"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("name"),n("span",{class:"token punctuation"},","),s(" age")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token function"},"Father"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"call"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},","),s(" name"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("age "),n("span",{class:"token operator"},"="),s(" age"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token class-name"},"Son"),n("span",{class:"token punctuation"},"."),s("prototype "),n("span",{class:"token operator"},"="),s(" Object"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"create"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Father"),n("span",{class:"token punctuation"},"."),s("prototype"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// Object.create方法返回一个对象，它的隐式原型指向传入的对象。"),s(`
`),n("span",{class:"token class-name"},"Son"),n("span",{class:"token punctuation"},"."),s("prototype"),n("span",{class:"token punctuation"},"."),s("constructor "),n("span",{class:"token operator"},"="),s(" Son"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"const"),s(" son "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Son"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"刘逍"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"20"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("son"),n("span",{class:"token punctuation"},"."),s("prototype"),n("span",{class:"token punctuation"},"."),s("name"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 原型上已经没有name属性了,所以这里会报错"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])]),n("h3",{id:"_7-混入继承",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_7-混入继承","aria-hidden":"true"},"#"),s(" 7.混入继承")]),n("p",null,[n("strong",null,"关键：利用 Object.assign 的方法多个父类函数的原型拷贝给子类原型")]),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"Father"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"name"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("name "),n("span",{class:"token operator"},"="),s(" name"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token class-name"},"Father"),n("span",{class:"token punctuation"},"."),s("prototype"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function-variable function"},"showName"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("name"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"Mather"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"color"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("color "),n("span",{class:"token operator"},"="),s(" color"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token class-name"},"Mather"),n("span",{class:"token punctuation"},"."),s("prototype"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function-variable function"},"showColor"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("color"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"Son"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("name"),n("span",{class:"token punctuation"},","),s(" color"),n("span",{class:"token punctuation"},","),s(" age")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// 调用两个父类函数"),s(`
  `),n("span",{class:"token function"},"Father"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"call"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},","),s(" name"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token function"},"Mather"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"call"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},","),s(" color"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("age "),n("span",{class:"token operator"},"="),s(" age"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token class-name"},"Son"),n("span",{class:"token punctuation"},"."),s("prototype "),n("span",{class:"token operator"},"="),s(" Object"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"create"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Father"),n("span",{class:"token punctuation"},"."),s("prototype"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
Object`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"assign"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Son"),n("span",{class:"token punctuation"},"."),s("prototype"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Mather"),n("span",{class:"token punctuation"},"."),s("prototype"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 将Mather父类函数的原型拷贝给子类函数"),s(`
`),n("span",{class:"token keyword"},"const"),s(" son "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Son"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"刘逍"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"red"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"20"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
son`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"showColor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// red"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])]),n("h3",{id:"_8-class-继承",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_8-class-继承","aria-hidden":"true"},"#"),s(" 8. class 继承")]),n("p",null,[n("strong",null,"关键：class 里的 extends 和 super 关键字，继承效果与寄生组合继承一样")]),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Father"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token function"},"constructor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"name"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("name "),n("span",{class:"token operator"},"="),s(" name"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token function"},"showName"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("name"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Son"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token class-name"},"Father"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// 子类通过extends继承父类"),s(`
  `),n("span",{class:"token function"},"constructor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("name"),n("span",{class:"token punctuation"},","),s(" age")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"super"),n("span",{class:"token punctuation"},"("),s("name"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 调用父类里的constructor函数,等同于Father.call(this,name)"),s(`
    `),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("age "),n("span",{class:"token operator"},"="),s(" age"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token function"},"showAge"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("age"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token keyword"},"const"),s(" son "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Son"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"刘逍"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"20"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
son`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"showName"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// '刘逍'"),s(`
son`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"showAge"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 20"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1),Ot=n("h1",{id:"五、异步与事件循环",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#五、异步与事件循环","aria-hidden":"true"},"#"),s(" 五、异步与事件循环")],-1),Et=n("h2",{id:"_5-1-异步编程的实现方式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-1-异步编程的实现方式","aria-hidden":"true"},"#"),s(" 5.1. 异步编程的实现方式?")],-1),Ft=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"JavaScript 中的异步机制可以分为以下几种："),n("ul",null,[n("li",null,[n("strong",null,"回调函数"),s(" 的方式，使用回调函数的方式有一个缺点是，多个回调函数嵌套的时候会造成回调函数地狱，上下两层的回调函数间的代码耦合度太高，不利于代码的可维护。")]),n("li",null,[n("strong",null,"Promise"),s(" 的方式，使用 Promise 的方式可以将嵌套的回调函数作为链式调用。但是使用这种方法，有时会造成多个 then 的链式调用，可能会造成代码的语义不够明确。")]),n("li",null,[n("strong",null,"generator"),s(" 的方式，它可以在函数的执行过程中，将函数的执行权转移出去，在函数外部还可以将执行权转移回来。当遇到异步函数执行的时候，将函数执行权转移出去，当异步函数执行完毕时再将执行权给转移回来。因此在 generator 内部对于异步操作的方式，可以以同步的顺序来书写。使用这种方式需要考虑的问题是何时将函数的控制权转移回来，因此需要有一个自动执行 generator 的机制，比如说 co 模块等方式来实现 generator 的自动执行。")]),n("li",null,[n("strong",null,"async 函数"),s(" 的方式，async 函数是 generator 和 promise 实现的一个自动执行的语法糖，它内部自带执行器，当函数内部执行到一个 await 语句的时候，如果语句返回一个 promise 对象，那么函数将会等待 promise 对象的状态变为 resolve 后再继续向下执行。因此可以将异步逻辑，转化为同步的顺序来书写，并且这个函数可以自动执行。")])])],-1),At=n("h2",{id:"_5-2-并发与并行的区别",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-2-并发与并行的区别","aria-hidden":"true"},"#"),s(" 5.2 并发与并行的区别？")],-1),Jt=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("ul",null,[n("li",null,"并发是宏观概念，我分别有任务 A 和任务 B，在一段时间内通过任务间的切换完成了这两个任务，这种情况就可以称之为并发。"),n("li",null,"并行是微观概念，假设 CPU 中存在两个核心，那么我就可以同时完成任务 A、B。同时完成多个任务的情况就可以称之为并行。")])],-1),Dt=n("h2",{id:"_5-3-settimeout、setinterval、requestanimationframe-的区别",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-3-settimeout、setinterval、requestanimationframe-的区别","aria-hidden":"true"},"#"),s(" 5.3 setTimeout、setInterval、requestAnimationFrame 的区别")],-1),Rt={class:"custom-container tip"},Lt=n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])],-1),Ht=n("p",{class:"custom-container-title"},"TIP",-1),Ut=n("ul",null,[n("li",null,[n("strong",null,"setTimeout")])],-1),zt=n("p",null,"执行该语句时，是立即把当前定时器代码推入事件队列，当定时器在事件列表中满足设置的时间值时将传入的函数加入任务队列，之后的执行就交给任务队列负责。但是如果此时任务队列不为空，则需等待，所以执行定时器内代码的时间可能会大于设置的时间。",-1),qt=n("code",null,"timeoutID",-1),Wt={href:"https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FclearTimeout",target:"_blank",rel:"noopener noreferrer"},Xt=n("code",null,"clearTimeout()",-1),Gt=n("ul",null,[n("li",null,[n("strong",null,"setInterval")])],-1),Yt=n("code",null,"interval ID",-1),Vt={href:"https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FclearInterval",target:"_blank",rel:"noopener noreferrer"},Kt=n("code",null,"clearInterval()",-1),Qt=n("p",null,[n("strong",null,[s("技术上，"),n("code",null,"clearTimeout()"),s(" 和 "),n("code",null,"clearInterval()"),s("可以互换。但是，为了避免混淆，不要混用取消定时函数。")])],-1),Zt=n("ul",null,[n("li",null,[n("strong",null,"requestAnimationFrame")])],-1),$t=n("p",null,"是 JS 实现动画的一种方式，它告诉浏览器——你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行",-1),na=n("h2",{id:"_5-4-什么是回调地狱-回调地狱会带来什么问题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-4-什么是回调地狱-回调地狱会带来什么问题","aria-hidden":"true"},"#"),s(" 5.4. 什么是回调地狱？回调地狱会带来什么问题？")],-1),sa=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"回调函数的层层嵌套，就叫做回调地狱。回调地狱会造成代码可复用性不强，可阅读性差，可维护性(迭代性差)，扩展性差等等问题。")],-1),ta=n("h2",{id:"promise-语法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#promise-语法","aria-hidden":"true"},"#"),s(" Promise 语法")],-1),aa=n("h2",{id:"_5-5-promise-是什么",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-5-promise-是什么","aria-hidden":"true"},"#"),s(" 5.5. Promise 是什么")],-1),ea=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"Promise 是异步编程的一种解决方案，它是一个对象，可以获取异步操作的消息，他的出现大大改善了异步编程的困境，避免了地狱回调，它比传统的解决方案回调函数和事件更合理和更强大。"),n("p",null,[n("strong",null,"promise 本身只是一个容器,真正异步的是它的两个回调 resolve()和 reject()")]),n("p",null,[n("strong",null,"promise 本质 不是控制 异步代码的执行顺序（无法控制） ， 而是控制异步代码结果处理的顺序")])],-1),la=n("h2",{id:"_5-6-promise-实例有哪些状态-怎么改变状态",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-6-promise-实例有哪些状态-怎么改变状态","aria-hidden":"true"},"#"),s(" 5.6 promise 实例有哪些状态，怎么改变状态")],-1),oa=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[s("（1）Promise 的实例有"),n("strong",null,"三个状态"),s(":")]),n("ul",null,[n("li",null,"Pending（进行中）"),n("li",null,"Resolved（已完成）"),n("li",null,"Rejected（已拒绝）")]),n("p",null,"当把一件事情交给 promise 时，它的状态就是 Pending，任务完成了状态就变成了 Resolved、没有完成失败了就变成了 Rejected。"),n("p",null,[n("strong",null,"如何改变 promise 的状态")]),n("ul",null,[n("li",null,"resolve(value): 如果当前是 pending 就会变为 resolved"),n("li",null,"reject(error): 如果当前是 pending 就会变为 rejected"),n("li",null,"抛出异常: 如果当前是 pending 就会变为 rejected")]),n("p",null,"注意：一旦从进行状态变成为其他状态就永远不能更改状态了。")],-1),ca=n("h2",{id:"_5-7-创建-promise-实例有哪些方法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-7-创建-promise-实例有哪些方法","aria-hidden":"true"},"#"),s(" 5.7 创建 Promise 实例有哪些方法")],-1),ia=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("ul",null,[n("li",null,[n("strong",null,"new Promise((resolve,reject)=>{"),s(" ... "),n("strong",null,"})")])]),n("p",null,[n("strong",null,"一般情况下都会使用"),n("code",null,"new Promise()"),n("strong",null,"来创建 promise 对象，但是也可以使用"),n("code",null,"promise.resolve"),n("strong",null,"和"),n("code",null,"promise.reject"),n("strong",null,"这两个方法：")]),n("ul",null,[n("li",null,[n("strong",null,"Promise.resolve")])]),n("p",null,[n("code",null,"Promise.resolve(value)"),s("的返回值也是一个 promise 对象，可以对返回值进行.then 调用，代码如下：")]),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[s("Promise"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"resolve"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"11"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"then"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"value"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("value"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 打印出11"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])]),n("ul",null,[n("li",null,[n("strong",null,"Promise.reject")])]),n("p",null,[n("code",null,"Promise.reject"),s(" 也是"),n("code",null,"new Promise"),s("的快捷形式，也创建一个 promise 对象。代码如下：")]),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[s("Promise"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"reject"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Error"),n("span",{class:"token punctuation"},"("),s("“出错了！！”"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])])],-1),ua=n("h2",{id:"_5-8-promise-有哪些实例方法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-8-promise-有哪些实例方法","aria-hidden":"true"},"#"),s(" 5.8 Promise 有哪些实例方法")],-1),ra=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("strong",null,"then")]),n("p",null,[n("code",null,"then"),s("方法可以接受两个回调函数作为参数。第一个回调函数是 Promise 对象的状态变为"),n("code",null,"resolved"),s("时调用，第二个回调函数是 Promise 对象的状态变为"),n("code",null,"rejected"),s("时调用。其中第二个参数可以省略。 "),n("code",null,"then"),s("方法返回的是一个新的 Promise 实例（不是原来那个 Promise 实例）。因此可以采用链式写法，即"),n("code",null,"then"),s("方法后面再调用另一个 then 方法。")]),n("p",null,[n("strong",null,"catch")]),n("p",null,[s("该方法相当于"),n("code",null,"then"),s("方法的第二个参数，指向"),n("code",null,"reject"),s("的回调函数。不过"),n("code",null,"catch"),s("方法还有一个作用，就是在执行"),n("code",null,"resolve"),s("回调函数时，如果出现错误，抛出异常，不会停止运行，而是进入"),n("code",null,"catch"),s("方法中。")]),n("p",null,[n("strong",null,"finally")]),n("p",null,[n("code",null,"finally"),s("方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。该方法是 ES2018 引入标准的。")]),n("p",null,[s("下面是一个例子，服务器使用 Promise 处理请求，然后使用"),n("code",null,"finally"),s("方法关掉服务器。")]),n("div",{class:"language-scss line-numbers-mode","data-ext":"scss"},[n("pre",{class:"language-scss"},[n("code",null,[s("server."),n("span",{class:"token function"},"listen"),n("span",{class:"token punctuation"},"("),s("port"),n("span",{class:"token punctuation"},")"),s(`
  .`),n("span",{class:"token function"},"then"),n("span",{class:"token punctuation"},"("),s("function "),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// ..."),s(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`
  .`),n("span",{class:"token function"},"finally"),n("span",{class:"token punctuation"},"("),s("server.stop"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])]),n("p",null,[n("code",null,"finally"),s("方法的回调函数不接受任何参数，这意味着没有办法知道，前面的 Promise 状态到底是"),n("code",null,"fulfilled"),s("还是"),n("code",null,"rejected"),s("。这表明，"),n("code",null,"finally"),s("方法里面的操作，应该是与状态无关的，不依赖于 Promise 的执行结果。")])],-1),pa=n("h2",{id:"_5-9-promise-有哪些静态方法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-9-promise-有哪些静态方法","aria-hidden":"true"},"#"),s(" 5.9 Promise 有哪些静态方法")],-1),da={class:"custom-container tip"},ka=n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])],-1),ha=n("p",{class:"custom-container-title"},"TIP",-1),ma=n("p",null,[n("strong",null,"all")],-1),wa=n("code",null,"all",-1),va=n("code",null,"promise",-1),ga={href:"https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2FPromise",target:"_blank",rel:"noopener noreferrer"},xa=n("code",null,"Promise",-1),ba=n("code",null,"promise",-1),_a=n("code",null,"resolved",-1),fa=n("code",null,"all",-1),ya=n("code",null,"resolved",-1),ja=n("code",null,"rejected",-1),Ma=n("code",null,"all",-1),Pa=n("code",null,"rejected",-1),Sa=e("<p><strong>race</strong></p><p><code>race</code>方法和<code>all</code>一样，接受的参数是一个每项都是<code>promise</code>的数组，但是与<code>all</code>不同的是，当最先执行完的事件执行完之后，就直接返回该<code>promise</code>对象的值。如果第一个<code>promise</code>对象状态变成<code>resolved</code>，那自身的状态变成了<code>resolved</code>；反之第一个<code>promise</code>变成<code>rejected</code>，那自身状态就会变成<code>rejected</code>。</p><p><strong>any</strong></p><p>它接收一个数组，数组的每一项都是一个<code>promise</code>对象，该方法会返回一个新的 <code>promise</code>，数组内的任意一个 <code>promise</code> 变成了<code>resolved</code>状态，那么由该方法所返回的 <code>promise</code> 就会变成<code>resolved</code>状态。如果数组内的 <code>promise</code> 状态都是<code>rejected</code>，那么该方法所返回的 <code>promise</code> 就会变成<code>rejected</code>状态，</p><p><strong>resolve、reject</strong></p><p>用来生成对应状态的 Promise 实例</p>",6),Ia=n("h2",{id:"_5-10-promise-all、promise-race、promise-any-的区别",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-10-promise-all、promise-race、promise-any-的区别","aria-hidden":"true"},"#"),s(" 5.10 Promise.all、Promise.race、Promise.any 的区别")],-1),Ta=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("strong",null,"all："),s(" 成功的时候返回的是"),n("strong",null,"一个结果数组"),s("，而失败的时候则返回"),n("strong",null,"最先被 reject 失败状态的值"),s("。")]),n("p",null,[n("strong",null,"race："),s(" 哪个结果获得的快，就返回那个结果，不管结果本身是成功状态还是失败状态。")]),n("p",null,[n("strong",null,"any："),s(" 返回最快的成功结果，如果全部失败就返回失败结果。")])],-1),Ca=n("h2",{id:"_5-11-一个-promise-指定多个回调函数-都会调用吗",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-11-一个-promise-指定多个回调函数-都会调用吗","aria-hidden":"true"},"#"),s(" 5.11 一个 promise 指定多个回调函数, 都会调用吗?")],-1),Ba=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"都会调用，成功状态放在 then 的第一个参数里调用"),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"let"),s(" p2 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Promise"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("resolve"),n("span",{class:"token punctuation"},","),s(" reject")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token function"},"resolve"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
p2`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"then"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"value"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
  console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"第一个"'),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
p2`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"then"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"value"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
  console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"第二个"'),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])]),n("p",null,"失败状态放在 then 的第二个参数里调用"),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"let"),s(" p3 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Promise"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("resolve"),n("span",{class:"token punctuation"},","),s(" reject")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token function"},"reject"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
p3`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"then"),n("span",{class:"token punctuation"},"("),s(`
  `),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"value"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
    console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"第一个"'),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
p3`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"then"),n("span",{class:"token punctuation"},"("),s(`
  `),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"value"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
    console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"第二个"'),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1),Na=n("h2",{id:"_5-12-改变-promise-状态和指定回调函数谁先谁后",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-12-改变-promise-状态和指定回调函数谁先谁后","aria-hidden":"true"},"#"),s(" 5.12 改变 promise 状态和指定回调函数谁先谁后?")],-1),Oa=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("ol",null,[n("li",null,"都有可能, 正常情况下是先指定回调再改变状态, 但也可以先改状态再指定回调"),n("li",null,[s("如何先改状态再指定回调? "),n("ul",null,[n("li",null,"在执行器中直接调用 resolve()/reject()"),n("li",null,"延迟更长时间才调用 then()")])]),n("li",null,[s("什么时候才能得到数据? "),n("ul",null,[n("li",null,"如果先指定的回调, 那当状态发生改变时, 回调函数就会调用, 得到数据"),n("li",null,"如果先改变的状态, 那当指定回调时, 回调函数就会调用, 得到数据 :::")])])]),n("h2",{id:"_5-13-promise-then-返回的新-promise-的结果状态由什么决定",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-13-promise-then-返回的新-promise-的结果状态由什么决定","aria-hidden":"true"},"#"),s(" 5.13 promise.then()返回的新 promise 的结果状态由什么决定?")]),n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("ol",null,[n("li",null,"简单表达: 由 then()指定的回调函数执行的结果决定"),n("li",null,[s("详细表达: "),n("ul",null,[n("li",null,"如果抛出异常, 新 promise 变为 rejected, 参数为抛出的异常"),n("li",null,"如果返回的是非 promise 的任意值, 新 promise 变为 resolved, value 为返回的值"),n("li",null,"如果返回的是另一个新 promise, 此 promise 的结果就会成为新 promise 的结果 :::")])])]),n("h2",{id:"_5-14-promise-如何串连多个操作任务",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-14-promise-如何串连多个操作任务","aria-hidden":"true"},"#"),s(" 5.14 promise 如何串连多个操作任务?")]),n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("ul",null,[n("li",null,"promise 的 then()返回一个新的 promise, 可以开成 then()的链式调用"),n("li",null,"通过 then 的链式调用串连多个同步/异步任务")])])])],-1),Ea=n("h2",{id:"_5-15-promise-异常传透是什么",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-15-promise-异常传透是什么","aria-hidden":"true"},"#"),s(" 5.15 promise 异常传透是什么?")],-1),Fa=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[s("Promise 对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止。也就是说，错误总是会被下一个"),n("code",null,"catch"),s("语句捕获。")]),n("ul",null,[n("li",null,"当使用 promise 的 then 链式调用时, 可以在最后指定失败的回调,"),n("li",null,"前面任何操作出了异常, 都会传到最后失败的回调中处理")])],-1),Aa=n("h2",{id:"_5-16-如何中断-promise-链",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-16-如何中断-promise-链","aria-hidden":"true"},"#"),s(" 5.16 如何中断 promise 链?")],-1),Ja=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("ul",null,[n("li",null,"当使用 promise 的 then 链式调用时, 在中间中断, 不再调用后面的回调函数。 在回调函数中返回一个 pendding 状态的 promise 对象")])],-1),Da=n("h2",{id:"_5-17-promise-有什么缺点",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-17-promise-有什么缺点","aria-hidden":"true"},"#"),s(" 5.17 promise 有什么缺点")],-1),Ra=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("strong",null,"代码层面")]),n("ul",null,[n("li",null,"无法取消 Promise，一旦新建它就会立即执行，无法中途取消。"),n("li",null,"如果不设置回调函数，Promise 内部抛出的错误，不会反应到外部。"),n("li",null,"当处于 pending 状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。")]),n("p",null,[n("strong",null,"语法层面")]),n("ul",null,[n("li",null,"Promise 虽然摆脱了回调地狱，但是 then 的链式调⽤也会带来额外的阅读负担"),n("li",null,"Promise 传递中间值⾮常麻烦"),n("li",null,"Promise 的调试很差，由于没有代码块，你不能在⼀个返回表达式的箭头函数中设置断点，如果你在⼀个.then 代码块中使⽤调试器的步进(step-over)功能，调试器并不会进⼊后续的.then 代码块，因为调试器只能跟踪同步代码的每⼀步。")])],-1),La=n("h2",{id:"async-await-语法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#async-await-语法","aria-hidden":"true"},"#"),s(" async/await 语法")],-1),Ha=n("h2",{id:"_5-18-async-函数是什么",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-18-async-函数是什么","aria-hidden":"true"},"#"),s(" 5.18 async 函数是什么")],-1),Ua=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("ul",null,[n("li",null,[s("一句话概括： 它就是 Generator 函数的语法糖，也就是处理异步操作的另一种"),n("code",null,"高级写法")])])],-1),za=n("h2",{id:"_5-19-async-函数的实现原理",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-19-async-函数的实现原理","aria-hidden":"true"},"#"),s(" 5.19 async 函数的实现原理")],-1),qa=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"async 函数的实现原理，就是将 Generator 函数和自动执行器，包装在一个函数里。"),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"async"),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"fn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"args"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// ..."),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},"// 等同于"),s(`

`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"fn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"args"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token function"},"spawn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"function"),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// spawn函数就是自动执行器"),s(`
    `),n("span",{class:"token comment"},"// ..."),s(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1),Wa=n("h2",{id:"_5-20-async-函数的返回值",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-20-async-函数的返回值","aria-hidden":"true"},"#"),s(" 5.20 async 函数的返回值")],-1),Xa=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("code",null,"async"),s("函数返回一个 Promise 对象。")]),n("p",null,[n("code",null,"async"),s("函数内部"),n("code",null,"return"),s("语句返回的值，会成为"),n("code",null,"then"),s("方法回调函数的参数。")]),n("p",null,[n("code",null,"async"),s("函数内部抛出错误，会导致返回的 Promise 对象变为"),n("code",null,"reject"),s("状态。抛出的错误对象会被"),n("code",null,"catch"),s("方法回调函数接收到。")])],-1),Ga=n("h2",{id:"_5-21-await-到底在等待什么",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-21-await-到底在等待什么","aria-hidden":"true"},"#"),s(" 5.21 await 到底在等待什么?")],-1),Ya=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"await 等待的是一个表达式，这个表达式的计算结果是 Promise 对象或者其它值（换句话说，就是没有特殊限定）。await 不仅仅用于等 Promise 对象，它可以等任意表达式的结果，所以，await 后面实际是可以接普通函数调用或者直接量的。"),n("p",null,"await 表达式的运算结果取决于它等的是什么。"),n("ul",null,[n("li",null,"如果它等到的不是一个 Promise 对象，那 await 表达式的运算结果就是它等到的东西。"),n("li",null,"如果它等到的是一个 Promise 对象，await 就忙起来了，它会阻塞后面的代码，等着 Promise 对象 resolve，然后得到 resolve 的值，作为 await 表达式的运算结果。")])],-1),Va=n("h2",{id:"_5-22-什么是顶层-await",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-22-什么是顶层-await","aria-hidden":"true"},"#"),s(" 5.22 什么是顶层 await？")],-1),Ka=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[s("从 ES2022 开始，允许在模块的顶层独立使用"),n("code",null,"await"),s("命令，使得上面那行代码不会报错了。它的主要目的是使用"),n("code",null,"await"),n("strong",null,"解决模块异步加载的问题。")]),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" AsyncFun "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},'"module"'),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"await"),s(),n("span",{class:"token function"},"AsyncFun"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"123"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1),Qa=n("h2",{id:"_5-23-如何用-await-让程序停顿指定的时间-休眠效果",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-23-如何用-await-让程序停顿指定的时间-休眠效果","aria-hidden":"true"},"#"),s(" 5.23 如何用 await 让程序停顿指定的时间(休眠效果)")],-1),Za=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[s("JavaScript 一直没有休眠的语法，但是借助"),n("code",null,"await"),s("命令就可以让程序停顿指定的时间")]),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"sleep"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"interval"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Promise"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"resolve"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token function"},"setTimeout"),n("span",{class:"token punctuation"},"("),s("resolve"),n("span",{class:"token punctuation"},","),s(" interval"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},"// 用法"),s(`
`),n("span",{class:"token keyword"},"async"),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"one2FiveInAsync"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<="),s(),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("i"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"await"),s(),n("span",{class:"token function"},"sleep"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1000"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token function"},"one2FiveInAsync"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1),$a=n("h2",{id:"_5-24-await-的使用注意点",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-24-await-的使用注意点","aria-hidden":"true"},"#"),s(" 5.24 await 的使用注意点")],-1),ne=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("ol",null,[n("li",null,[n("code",null,"await"),s("命令后面的"),n("code",null,"Promise"),s("对象，运行结果可能是"),n("code",null,"rejected"),s("，所以最好把"),n("code",null,"await"),s("命令放在"),n("code",null,"try...catch"),s("代码块中。")]),n("li",null,[s("多个"),n("code",null,"await"),s("命令后面的异步操作，如果不存在继发关系，最好让它们同时触发。")]),n("li",null,[n("code",null,"await"),s("命令只能用在"),n("code",null,"async"),s("函数之中，如果用在普通函数，就会报错。")]),n("li",null,"async 函数可以保留运行堆栈。")])],-1),se=n("h2",{id:"_5-25-async-语法怎么捕获异常",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-25-async-语法怎么捕获异常","aria-hidden":"true"},"#"),s(" 5.25 async 语法怎么捕获异常")],-1),te=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("code",null,"async"),s("函数内部的异常可以通过 "),n("code",null,".catch()"),s("或者 "),n("code",null,"try"),s("/"),n("code",null,"catch"),s("来捕获,区别是")]),n("ul",null,[n("li",null,"try/catch 能捕获所有异常,try 语句抛出错误后会执行 catch 语句，try 语句内后面的内容不会执行"),n("li",null,"catch（）只能捕获异步方法中 reject 错误，并且 catch 语句之后的语句会继续执行")]),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"async"),s(`函数错误捕获，以登录功能为例
      `),n("span",{class:"token keyword"},"async"),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"getCatch"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"await"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Promise"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("resolve"),n("span",{class:"token punctuation"},","),s(" reject")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
          `),n("span",{class:"token function"},"reject"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Error"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'登录失败'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"catch"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"error"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
          console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("error"),n("span",{class:"token punctuation"},")"),s("  "),n("span",{class:"token comment"},"// .catch（）能捕获到错误信息"),s(`
        `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`
        console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'登录成功'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"//  但是成功信息也会执行"),s(`
      `),n("span",{class:"token punctuation"},"}"),s(`

     `),n("span",{class:"token keyword"},"async"),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"getCatch"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"try"),s(),n("span",{class:"token punctuation"},"{"),s(`
          `),n("span",{class:"token keyword"},"await"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Promise"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("resolve"),n("span",{class:"token punctuation"},","),s(" reject")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token function"},"reject"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Error"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'登录失败'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
          `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`
          console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'登录成功'"),n("span",{class:"token punctuation"},")"),s("  "),n("span",{class:"token comment"},"// try抛出错误之后，就不会执行这条语句"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"catch"),s(),n("span",{class:"token punctuation"},"("),s("error"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
          console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("error"),n("span",{class:"token punctuation"},")"),s("  "),n("span",{class:"token comment"},"//  catch语句能捕获到错误信息"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
      `),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1),ae=n("h2",{id:"_5-26-async-await-对比-promise-的优势",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-26-async-await-对比-promise-的优势","aria-hidden":"true"},"#"),s(" 5.26 async/await 对比 Promise 的优势")],-1),ee=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("ul",null,[n("li",null,"代码读起来更加同步，Promise 虽然摆脱了回调地狱，但是 then 的链式调⽤也会带来额外的阅读负担"),n("li",null,"Promise 传递中间值⾮常麻烦，⽽ async/await ⼏乎是同步的写法，⾮常优雅"),n("li",null,"错误处理友好，async/await 可以⽤成熟的 try/catch，Promise 的错误捕获⾮常冗余"),n("li",null,"调试友好，Promise 的调试很差，由于没有代码块，你不能在⼀个返回表达式的箭头函数中设置断点，如果你在⼀个.then 代码块中使⽤调试器的步进(step-over)功能，调试器并不会进⼊后续的.then 代码块，因为调试器只能跟踪同步代码的每⼀步。")])],-1),le=n("h2",{id:"事件循环-event-loop",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#事件循环-event-loop","aria-hidden":"true"},"#"),s(" 事件循环 Event Loop")],-1),oe=n("h2",{id:"_5-27-js-的执行机制-同步任务、异步任务",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-27-js-的执行机制-同步任务、异步任务","aria-hidden":"true"},"#"),s(" 5.27 JS 的执行机制(同步任务、异步任务)")],-1),ce=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"JS 是一门单线程语言，单线程就意味着，所有的任务需要排队，前一个任务结束，才会执行下一个任务。这样所导致的问题是：如果 JS 执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞的觉。为了解决这个问题，JS 中出现了同步和异步。"),n("p",null,[n("strong",null,"同步任务"),s("：即主线程上的任务，按照顺序由上⾄下依次执⾏，当前⼀个任务执⾏完毕后，才能执⾏下⼀个任务。")]),n("p",null,[n("strong",null,"异步任务"),s("：不进⼊主线程，⽽是进⼊任务队列的任务，执行完毕之后会产生一个回调函数,并且通知主线程。当主线程上的任务执行完后，就会调取最早通知自己的回调函数，使其进入主线程中执行。")])],-1),ie=n("h2",{id:"_5-28-什么是-event-loop",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-28-什么是-event-loop","aria-hidden":"true"},"#"),s(" 5.28 什么是 Event Loop")],-1),ue=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("ul",null,[n("li",null,"事件循环 Event Loop 又叫事件队列，两者是一个概念")]),n("p",null,"事件循环指的是 js 代码所在运行环境（浏览器、nodejs）编译器的一种解析执行规则。事件循环不属于 js 代码本身的范畴，而是属于 js 编译器的范畴，在 js 中讨论事件循环是没有意义的。换句话说，js 代码可以理解为是一个人在公司中具体做的事情， 而 事件循环 相当于是公司的一种规章制度。 两者不是一个层面的概念。")],-1),re=n("h2",{id:"_5-29-宏任务与微任务的概念与区别",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-29-宏任务与微任务的概念与区别","aria-hidden":"true"},"#"),s(" 5.29 宏任务与微任务的概念与区别")],-1),pe=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[s("为了协调任务有条不紊地在主线程上执行，页面进程引入了 "),n("strong",null,"消息队列"),s(" 和 "),n("strong",null,"事件循环机制"),s("，渲染进程内部也会维护多个消息队列，比如延迟执行队列和普通的消息队列。然后主线程采用一个 "),n("code",null,"for"),s(" 循环，不断地从这些任务队列中取出任务并执行任务。这些消息队列中的任务就称为 "),n("strong",null,"宏任务"),s("。")]),n("p",null,[n("strong",null,"微任务"),s("是一个需要异步执行的回调函数，执行时机是在主函数执行结束之后、当前宏任务结束之前。当 JS 执行一段脚本（一个宏任务）的时候，V8 会为其创建一个全局执行上下文，在创建全局执行上下文的同时，V8 引擎也会在内部创建一个 "),n("strong",null,"微任务队列"),s("。也就是说 "),n("strong",null,"每个宏任务都关联了一个微任务队列"),s("。")])],-1),de=n("h2",{id:"_5-30-常见的宏任务与微任务分别有哪些",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-30-常见的宏任务与微任务分别有哪些","aria-hidden":"true"},"#"),s(" 5.30 常见的宏任务与微任务分别有哪些")],-1),ke=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("table",null,[n("thead",null,[n("tr",null,[n("th",null,"任务（代码）"),n("th",null,"宏/微 任务"),n("th",null,"环境")])]),n("tbody",null,[n("tr",null,[n("td"),n("td",null,"宏任务"),n("td",null,"浏览器")]),n("tr",null,[n("td",null,"事件"),n("td",null,"宏任务"),n("td",null,"浏览器")]),n("tr",null,[n("td",null,"网络请求（Ajax）"),n("td",null,"宏任务"),n("td",null,"浏览器")]),n("tr",null,[n("td",null,"setTimeout() 定时器"),n("td",null,"宏任务"),n("td",null,"浏览器/Node")]),n("tr",null,[n("td",null,"fs.readFile() 读取文件"),n("td",null,"宏任务"),n("td",null,"Node")]),n("tr",null,[n("td",null,"Promise.then()"),n("td",null,"微任务"),n("td",null,"浏览器/Node")]),n("tr",null,[n("td",null,"async/await"),n("td",null,"微任务"),n("td",null,"浏览器/Node")])])])],-1),he=n("h2",{id:"_5-31-事件循环-event-loop-执行机制",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-31-事件循环-event-loop-执行机制","aria-hidden":"true"},"#"),s(" 5.31 事件循环 Event Loop 执行机制")],-1),me=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"1.进入到"),n("p",null,"2.遇到同步代码，立即执行"),n("p",null,"3.遇到宏任务,放入到宏任务队列里."),n("p",null,"4.遇到微任务,放入到微任务队列里."),n("p",null,"5.执行完所有同步代码"),n("p",null,"6.执行微任务代码"),n("p",null,"7.微任务代码执行完毕，本次队列清空"),n("p",null,"8.寻找下一个宏任务，重复步骤 1")],-1),we=n("h2",{id:"_5-32-为什么-js-是单线程",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-32-为什么-js-是单线程","aria-hidden":"true"},"#"),s(" 5.32 为什么 Js 是单线程？")],-1),ve=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"Js 是单线程，但是浏览器是多线程。单线程是为了避免 UI 操作混乱，所有和 UI 操作相关的开发语言都应该是单线程。")],-1),ge=n("h2",{id:"_5-33-代码题易考点",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-33-代码题易考点","aria-hidden":"true"},"#"),s(" 5.33 代码题易考点")],-1),xe=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("ol",null,[n("li",null,"promise 本身是一个同步的代码，只有它后面调用的 then()方法里面的回调才是微任务"),n("li",null,"then 方法需要 Promise 里的 resolve 传值才会执行"),n("li",null,"await 右边的表达式还是会立即执行,表达式之后的代码才是微任务, await 微任务可以转换成等价的 promise 微任务分析"),n("li",null,[s("script 标签本身是一个"),n("code",null,"宏任务"),s("， 当页面出现多个 script 标签的时候，浏览器会把 script 标签作为宏任务来解析")])])],-1),be=e('<h1 id="六、-es6-es2022-新语法" tabindex="-1"><a class="header-anchor" href="#六、-es6-es2022-新语法" aria-hidden="true">#</a> 六、 ES6-ES2022 新语法</h1><h2 id="_6-1-es6-es2015" tabindex="-1"><a class="header-anchor" href="#_6-1-es6-es2015" aria-hidden="true">#</a> 6.1 ES6(ES2015)</h2><h3 id="_1-说说-let-和-const" tabindex="-1"><a class="header-anchor" href="#_1-说说-let-和-const" aria-hidden="true">#</a> 1. 说说 let 和 const</h3>',3),_e=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("strong",null,"let:")]),n("ul",null,[n("li",null,"声明变量"),n("li",null,"没有变量提升"),n("li",null,"不可重复声明"),n("li",null,"具有块级作用域"),n("li",null,"声明变量后可以在使用时赋值")]),n("p",null,[n("strong",null,"const:")]),n("ul",null,[n("li",null,"只读常量"),n("li",null,"没有变量提升"),n("li",null,"不可重复声明"),n("li",null,"具有块级作用域"),n("li",null,"声明变量后必须立马赋值")])],-1),fe=n("h3",{id:"_2-let、const、var-的区别",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-let、const、var-的区别","aria-hidden":"true"},"#"),s(" 2. let、const、var 的区别")],-1),ye=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("strong",null,"（1）块级作用域："),s(" 块作用域由 "),n("code",null,"{ }"),s("包括，let 和 const 具有块级作用域，var 不存在块级作用域。块级作用域解决了 ES5 中的两个问题：")]),n("ul",null,[n("li",null,"内层变量可能覆盖外层变量"),n("li",null,"用来计数的循环变量泄露为全局变量")]),n("p",null,[n("strong",null,"（2）变量提升："),s(" var 存在变量提升，let 和 const 不存在变量提升，即在变量只能在声明之后使用，否在会报错。")]),n("p",null,[n("strong",null,"（3）给全局添加属性："),s(" 浏览器的全局对象是 window，Node 的全局对象是 global。var 声明的变量为全局变量，并且会将该变量添加为全局对象的属性，但是 let 和 const 不会。")]),n("p",null,[n("strong",null,"（4）重复声明："),s(" var 声明变量时，可以重复声明变量，后声明的同名变量会覆盖之前声明的遍历。const 和 let 不允许重复声明变量。")]),n("p",null,[n("strong",null,"（5）暂时性死区："),s(" 在使用 let、const 命令声明变量之前，该变量都是不可用的。这在语法上，称为"),n("strong",null,"暂时性死区"),s("。使用 var 声明的变量不存在暂时性死区。")]),n("p",null,[n("strong",null,"（6）初始值设置："),s(" 在变量声明时，var 和 let 可以不用设置初始值。而 const 声明变量必须设置初始值。")]),n("p",null,[n("strong",null,"（7）指针指向："),s(" let 和 const 都是 ES6 新增的用于创建变量的语法。 let 创建的变量是可以更改指针指向（可以重新赋值）。但 const 声明的变量是不允许改变指针的指向。")]),n("table",null,[n("thead",null,[n("tr",null,[n("th",null,[n("strong",null,"区别")]),n("th",null,[n("strong",null,"var")]),n("th",null,[n("strong",null,"let")]),n("th",null,[n("strong",null,"const")])])]),n("tbody",null,[n("tr",null,[n("td",null,"是否有块级作用域"),n("td",null,"×"),n("td",null,"✔️"),n("td",null,"✔️")]),n("tr",null,[n("td",null,"是否存在变量提升"),n("td",null,"✔️"),n("td",null,"×"),n("td",null,"×")]),n("tr",null,[n("td",null,"是否添加全局属性"),n("td",null,"✔️"),n("td",null,"×"),n("td",null,"×")]),n("tr",null,[n("td",null,"能否重复声明变量"),n("td",null,"✔️"),n("td",null,"×"),n("td",null,"×")]),n("tr",null,[n("td",null,"是否存在暂时性死区"),n("td",null,"×"),n("td",null,"✔️"),n("td",null,"✔️")]),n("tr",null,[n("td",null,"是否必须设置初始值"),n("td",null,"×"),n("td",null,"×"),n("td",null,"✔️")]),n("tr",null,[n("td",null,"能否改变指针指向"),n("td",null,"✔️"),n("td",null,"✔️"),n("td",null,"×")])])])],-1),je=n("h3",{id:"_3-解构赋值",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-解构赋值","aria-hidden":"true"},"#"),s(" 3. 解构赋值")],-1),Me=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("strong",null,"对象解构")]),n("ul",null,[n("li",null,[s("形式："),n("code",null,"const { x, y } = { x: 1, y: 2 }")]),n("li",null,[s("默认："),n("code",null,"const { x, y = 2 } = { x: 1 }")]),n("li",null,[s("改名："),n("code",null,"const { x, y: z } = { x: 1, y: 2 }")])]),n("p",null,[n("strong",null,"数组解构")]),n("ul",null,[n("li",null,[s("规则：数据结构具有"),n("code",null,"Iterator接口"),s("可采用数组形式的解构赋值")]),n("li",null,[s("形式："),n("code",null,"const [x, y] = [1, 2]")]),n("li",null,[s("默认："),n("code",null,"const [x, y = 2] = [1]")])]),n("p",null,[n("strong",null,"函数参数解构")]),n("ul",null,[n("li",null,[s("数组解构："),n("code",null,"function Func([x = 0, y = 1]) {}")]),n("li",null,[s("对象解构："),n("code",null,"function Func({ x = 0, y = 1 } = {}) {}")])]),n("p",null,[n("strong",null,"应用场景:")]),n("ul",null,[n("li",null,[s("交换变量值："),n("code",null,"[x, y] = [y, x]")]),n("li",null,[s("返回函数多个值："),n("code",null,"const [x, y, z] = Func()")]),n("li",null,[s("定义函数参数："),n("code",null,"Func([1, 2])")]),n("li",null,[s("提取 JSON 数据："),n("code",null,"const { name, version } = packageJson")]),n("li",null,[s("定义函数参数默认值："),n("code",null,"function Func({ x = 1, y = 2 } = {}) {}")]),n("li",null,[s("遍历 Map 结构："),n("code",null,"for (let [k, v] of Map) {}")]),n("li",null,[s("输入模块指定属性和方法："),n("code",null,'const { readFile, writeFile } = require("fs")')])]),n("p",null,[n("strong",null,"注意点")]),n("ul",null,[n("li",null,"匹配模式：只要等号两边的模式相同，左边的变量就会被赋予对应的值"),n("li",null,"解构赋值规则：只要等号右边的值不是对象或数组，就先将其转为对象"),n("li",null,[s("解构默认值生效条件：属性值严格等于"),n("code",null,"undefined")]),n("li",null,"解构遵循匹配模式"),n("li",null,[s("解构不成功时变量的值等于"),n("code",null,"undefined")]),n("li",null,[n("code",null,"undefined"),s("和"),n("code",null,"null"),s("无法转为对象，因此无法进行解构")])])],-1),Pe=n("h3",{id:"_4-字符串的新增方法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-字符串的新增方法","aria-hidden":"true"},"#"),s(" 4. 字符串的新增方法")],-1),Se=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("strong",null,"includes")]),n("p",null,"返回布尔值，表示是否找到了参数字符串。"),n("p",null,[n("strong",null,"startsWith")]),n("p",null,"返回布尔值，表示参数字符串是否在原字符串的头部。"),n("p",null,[n("strong",null,"endsWith")]),n("p",null,"返回布尔值，表示参数字符串是否在原字符串的尾部。"),n("p",null,[n("strong",null,"repeat")]),n("p",null,[n("code",null,"repeat"),s("方法返回一个新字符串，表示将原字符串重复"),n("code",null,"n"),s("次")])],-1),Ie=n("h3",{id:"_5-展开运算符",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-展开运算符","aria-hidden":"true"},"#"),s(" 5. 展开运算符")],-1),Te=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("strong",null,"（2）数组扩展运算符")]),n("p",null,"数组的扩展运算符可以将一个数组转为用逗号分隔的参数序列，且每次只能展开一层数组。"),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" arr "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"6"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"const"),s(" newArr "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token operator"},"..."),s("arr"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 复制数组"),s(`
`),n("span",{class:"token keyword"},"const"),s(" arr1 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token string"},'"two"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"three"'),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"const"),s(" arr2 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token string"},'"one"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"..."),s("arr1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 合并数组"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("Math"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"max"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"call"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"..."),s("arr"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 将数组中的每一项作为参数使用"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])]),n("p",null,"** (3) rest(剩余)参数**"),n("p",null,[s("扩展运算符被用在函数形参上时，"),n("strong",null,"它还可以把一个分离的参数序列整合成一个数组"),s("：")]),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"mutiple"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[n("span",{class:"token operator"},"..."),s("args")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"let"),s(" result "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"var"),s(" val "),n("span",{class:"token keyword"},"of"),s(" args"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    result `),n("span",{class:"token operator"},"*="),s(" val"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token keyword"},"return"),s(" result"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token function"},"mutiple"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 24"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1),Ce=n("h3",{id:"_6-数组新增的方法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_6-数组新增的方法","aria-hidden":"true"},"#"),s(" 6. 数组新增的方法")],-1),Be=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("strong",null,"Array.from()")]),n("p",null,"将类数组或者可迭代对象创建为一个新的数组，不改变原数组并返回这个新数组"),n("p",null,[n("strong",null,"Array.of()")]),n("p",null,[n("strong",null,"创建一个具有可变数量参数的新数组实例"),s("，示例代码如下：")]),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[s("Array"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"of"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// [1]"),s(`
Array`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"of"),n("span",{class:"token punctuation"},"("),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"刘逍"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// [true, 1, '刘逍']"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])]),n("p",null,[n("strong",null,"findIndex")]),n("p",null,"根据给定的回调函数，找到匹配的第一个元素的索引，找不到返回-1"),n("p",null,[n("strong",null,"find")]),n("p",null,"根据给定的回调函数，找到匹配的第一个元素，找不到返回 undefined"),n("p",null,[n("strong",null,"fill")]),n("p",null,"将给定值填充数组，示例代码如下："),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" arr "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token comment"},"// 将给定值填充索引1-3"),s(`
arr`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"fill"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"逍"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// [ 1, '逍', '逍', 4 ]"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])]),n("p",null,[n("strong",null,"keys")]),n("p",null,"返回一个可迭代的对象，其内容为数组的 key，示例代码如下："),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" arr "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"逍"'),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"const"),s(" keys "),n("span",{class:"token operator"},"="),s(" arr"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"keys"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"const"),s(" i "),n("span",{class:"token keyword"},"of"),s(" keys"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("i"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 遍历结果 0 1 2"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])]),n("p",null,[n("strong",null,"values")]),n("p",null,"返回一个可迭代的对象，其内容为数组的 valu*，示例代码如下："),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" arr "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"逍"'),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"const"),s(" values "),n("span",{class:"token operator"},"="),s(" arr"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"values"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"const"),s(" i "),n("span",{class:"token keyword"},"of"),s(" values"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("i"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 遍历结果 1 true 逍"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])]),n("p",null,[n("strong",null,"entries")]),n("p",null,"返回一个可迭代的对象，其内容是一个数组，索引 0 为原数组的元素，1 为原数组该位置的值，示例代码如下："),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" arr "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"逍"'),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"const"),s(" iterator "),n("span",{class:"token operator"},"="),s(" arr"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"entries"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("Array"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"from"),n("span",{class:"token punctuation"},"("),s("iterator"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// [ [ 0, 1 ], [ 1, true ], [ 2, '逍' ] ]"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1),Ne=n("h3",{id:"_7-对象新增方法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_7-对象新增方法","aria-hidden":"true"},"#"),s(" 7. 对象新增方法")],-1),Oe=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("strong",null,"Object.is() (用于解决 NaN ≠= NaN，+0 === -0 的问题)")]),n("p",null,"用于比较两个值是否相等，用于解决 NaN ≠= NaN，+0 === -0 的问题，示例代码如下："),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[s("console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"NaN"),s(),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token number"},"NaN"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// false"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"+"),n("span",{class:"token number"},"0"),s(),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// true"),s(`

console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("Object"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"is"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"NaN"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"NaN"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// true"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("Object"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"is"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"+"),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// false"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])]),n("p",null,[n("strong",null,"Object.assign()")]),n("p",null,[s("将"),n("strong",null,"所有可枚举属性的值从一个或多个源对象复制到目标对象，并返回目标对象"),s("，示例代码如下：")]),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" person "),n("span",{class:"token operator"},"="),s(" Object"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"assign"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token literal-property property"},"name"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"刘逍"'),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token literal-property property"},"age"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"18"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("person"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// { name: '刘逍', age: 18 }"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])]),n("p",null,[n("strong",null,"Object.getPrototypeOf()")]),n("p",null,"获取原型对象；"),n("p",null,[n("strong",null,"Object.setPrototypeOf()")]),n("p",null,"设置原型对象。")],-1),Ee=n("h3",{id:"_8-class-类",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_8-class-类","aria-hidden":"true"},"#"),s(" 8.class 类")],-1),Fe=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"JS 里的类就是构造函数的语法糖"),n("p",null,[n("strong",null,"基本用法")]),n("ol",null,[n("li",null,"类里面有个 constructor 函数,可以接收传递过来的参数,同时返回实例对象"),n("li",null,"constructor 函数只要 new 生成实例时,就会自动调用这个函数,如果我们不写这个函数,类也会自动生成这个函数"),n("li",null,"公共属性放在 constructor 中，公共方法直接在类里面写函数声明,会自动添加至原型对象中"),n("li",null,"class 类没有变量提升,所以必须先定义类,才能通过类实例化对象"),n("li",null,"super()调用父类里的 constructor 方法,可以向里面传参,就等于 Father.call(this,x,y)，super 必须在子类的 this 前面调用"),n("li",null,"class 里面的方法的 this 指向的是调用者,如果调用者不是类的实例,就需要改变 this 的指向")]),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Person"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token function"},"constructor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"age"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// 属性"),s(`
    `),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("myName "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"刘逍"'),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("age "),n("span",{class:"token operator"},"="),s(" age"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token comment"},"// 静态方法"),s(`
  `),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token function"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token comment"},"// 访问器"),s(`
  `),n("span",{class:"token keyword"},"get"),s(),n("span",{class:"token function"},"myName"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"getter"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("myName"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token keyword"},"set"),s(),n("span",{class:"token function"},"myName"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"v"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"setter"'),s(),n("span",{class:"token operator"},"+"),s(" v"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token function"},"setName"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"v"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("myName "),n("span",{class:"token operator"},"="),s(" v"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])]),n("p",null,[n("strong",null,"关键词")]),n("p",null,[n("strong",null,"constructor")]),n("p",null,[n("code",null,"constructor()"),s("方法是类的默认方法，通过"),n("code",null,"new"),s("命令生成对象实例时，自动调用该方法。一个类必须有"),n("code",null,"constructor()"),s("方法，如果没有显式定义，一个空的"),n("code",null,"constructor()"),s("方法会被默认添加。")]),n("p",null,[n("strong",null,"super")]),n("p",null,[n("code",null,"super"),s("这个关键字，既可以当作函数使用，也可以当作对象使用。")]),n("p",null,[n("code",null,"super"),s("作为函数调用时，代表父类的构造函数。子类的构造函数必须执行一次"),n("code",null,"super"),s("函数。"),n("code",null,"super"),s("虽然代表了父类"),n("code",null,"A"),s("的构造函数，"),n("strong",null,[s("但是返回的是子类"),n("code",null,"B"),s("的实例")])]),n("p",null,[n("code",null,"super"),s("作为对象时，在普通方法中，指向父类的原型对象；在静态方法中，指向父类。")]),n("p",null,[n("strong",null,"getter、setter")]),n("p",null,[s("在“类”的内部可以使用"),n("code",null,"get"),s("和"),n("code",null,"set"),s("关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为。")]),n("p",null,[n("strong",null,"static")]),n("p",null,[s("如果在一个方法前，加上"),n("code",null,"static"),s("关键字，就表示该方法不会被实例继承，而是直接通过类来调用，这就称为“静态方法”。")]),n("p",null,[n("strong",null,"# 私有属性")]),n("p",null,[n("code",null,"ES2022"),s("正式为"),n("code",null,"class"),s("添加了私有属性，方法是在属性名之前使用"),n("code",null,"#"),s("表示。私有属性只能在类的内部使用（"),n("code",null,"this.#count"),s("）。如果在类的外部使用，就会报错。")])],-1),Ae=n("h3",{id:"_9-模块化",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_9-模块化","aria-hidden":"true"},"#"),s(" 9. 模块化")],-1),Je=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[s("ES6"),n("strong",null,"中允许我们使用 export 导出模块，使用 import 引入模块")])],-1),De=n("h3",{id:"_10-symbol",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_10-symbol","aria-hidden":"true"},"#"),s(" 10. Symbol")],-1),Re=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[s("ES6 引入了一种新的原始数据类型"),n("code",null,"Symbol"),s("，表示独一无二的值。它属于 JavaScript 语言的原生数据类型之一")]),n("p",null,[s("Symbol 值通过"),n("code",null,"Symbol()"),s("函数生成。这就是说，对象的属性名现在可以有两种类型，一种是原来就有的字符串，另一种就是新增的 Symbol 类型。凡是属性名属于 Symbol 类型，就都是独一无二的，可以保证不会与其他属性名产生冲突。")])],-1),Le=n("h3",{id:"_11-iterator",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_11-iterator","aria-hidden":"true"},"#"),s(" 11. Iterator")],-1),He=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"Iterator 即迭代器，它是一种接口，为各种不同的数据结构提供了统一的访问机制，换句话说，只要有任何数据结构部署了迭代接口，就可以使用统一的方式的来遍历它。"),n("p",null,[s("实现可迭代接口的数据结构，一般都自身实现或继承了以"),n("code",null,"Symbol.iterator"),s("属性的，就属于可迭代对象。"),n("code",null,"Symbol.iterator"),s("属性本身是一个函数，就是当前数据结构默认的遍历器生成函数。")]),n("p",null,[s("一个包含"),n("code",null,"next()"),s("方法的对象，才可以称为一个迭代对象。"),n("code",null,"next()"),s("对象的会有返回一个对象，对象中包含两个值，如下所示：")]),n("ul",null,[n("li",null,[n("code",null,"value"),s("：迭代器返回的任何"),n("code",null,"JavaScript"),s("值。"),n("code",null,"done"),s("为"),n("code",null,"true"),s("时可省略。")]),n("li",null,[n("code",null,"done"),s("：一个布尔值，为"),n("code",null,"false"),s("时表示迭代未停止，为"),n("code",null,"true"),s("时立即停止迭代器，且可以省略"),n("code",null,"value"),s("的值。")])]),n("p",null,"Iterator 的作用有三个："),n("ol",null,[n("li",null,"为各种数据结构，提供一个统一的、简便的访问接口；"),n("li",null,"使得数据结构的成员能够按某种次序排列；"),n("li",null,[s("ES6 创造了一种新的遍历命令"),n("code",null,"for...of"),s("循环，Iterator 接口主要供"),n("code",null,"for...of"),s("消费。")])])],-1),Ue=n("h3",{id:"_12-for-of-循环",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_12-for-of-循环","aria-hidden":"true"},"#"),s(" 12. for...of..循环")],-1),ze=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("code",null,"for...of"),s("循环，作为遍历所有数据结构的统一的方法。")]),n("p",null,[s("一个数据结构只要部署了"),n("code",null,"Symbol.iterator"),s("属性，就被视为具有 iterator 接口，就可以用"),n("code",null,"for...of"),s("循环遍历它的成员。也就是说，"),n("code",null,"for...of"),s("循环内部调用的是数据结构的"),n("code",null,"Symbol.iterator"),s("方法。")]),n("p",null,[n("code",null,"for...of"),s("循环可以使用的范围包括数组、Set 和 Map 结构、某些类似数组的对象（比如"),n("code",null,"arguments"),s("对象、DOM NodeList 对象）、后文的 Generator 对象，以及字符串。")])],-1),qe=n("h3",{id:"_13-generator",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_13-generator","aria-hidden":"true"},"#"),s(" 13. Generator")],-1),We=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[s("Generator 是 ES2015 中提供的一种异步编程解决方案，定义 Generator 函数在"),n("code",null,"function"),s("关键字和函数名中间使用"),n("code",null,"*"),s("星号，函数内部使用"),n("code",null,"yield"),s("关键字定义不同的状态。")]),n("p",null,"async 的底层就是 Generator 函数")],-1),Xe=n("h3",{id:"_14-proxy-和-reffect",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_14-proxy-和-reffect","aria-hidden":"true"},"#"),s(" 14. Proxy 和 Reffect")],-1),Ge=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"Proxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。Proxy 这个词的原意是代理，用在这里表示由它来“代理”某些操作，可以译为“代理器”。"),n("p",null,"Proxy 对象用于创建一个代理对象，从而实现基本操作的拦截和自定义，基本操作包含 13 种，如下表所示："),n("table",null,[n("thead",null,[n("tr",null,[n("th",null,"拦截 ⽅法"),n("th",null,"触发⽅式")])]),n("tbody",null,[n("tr",null,[n("td",null,[n("code",null,"get(target, propKey, receiver)")]),n("td",null,"读取某个属性")]),n("tr",null,[n("td",null,[n("code",null,"set(target, propKey, value, receiver)")]),n("td",null,"写⼊某个属性")]),n("tr",null,[n("td",null,[n("code",null,"has(target, propKey)")]),n("td",null,[n("code",null,"in"),s("操作符")])]),n("tr",null,[n("td",null,[n("code",null,"deleteProperty(target, propKey)")]),n("td",null,[n("code",null,"delete"),s("操作符")])]),n("tr",null,[n("td",null,[n("code",null,"getPrototypeOf(target)")]),n("td",null,[n("code",null,"Object.getPropertypeOf()")])]),n("tr",null,[n("td",null,[n("code",null,"setPrototypeOf(target, proto)")]),n("td",null,[n("code",null,"Object.setPrototypeOf()")])]),n("tr",null,[n("td",null,[n("code",null,"isExtensible(target)")]),n("td",null,[n("code",null,"Object.isExtensible()")])]),n("tr",null,[n("td",null,[n("code",null,"preventExtensions(target)")]),n("td",null,[n("code",null,"Object.preventExtensions()")])]),n("tr",null,[n("td",null,[n("code",null,"getOwnPropertyDescriptor(target, propKey)")]),n("td",null,[n("code",null,"Object.getOwnPropertyDescriptor()")])]),n("tr",null,[n("td",null,[n("code",null,"defineProperty(target, propKey, propDesc)")]),n("td",null,[n("code",null,"Object.defineProperty()")])]),n("tr",null,[n("td",null,[n("code",null,"ownKeys(target)")]),n("td",null,[n("code",null,"Object.keys()"),s(" 、"),n("code",null,"Object.getOwnPropertyNames()"),s("、"),n("code",null,"Object.getOwnPropertySymbols()")])]),n("tr",null,[n("td",null,[n("code",null,"apply(target, thisArg, args)")]),n("td",null,"调⽤⼀个函数")]),n("tr",null,[n("td",null,[n("code",null,"construct(target, args)")]),n("td",null,"⽤ new 调⽤⼀个函数")])])]),n("p",null,[s("Vue3 就是基于"),n("code",null,"Proxy"),s("进行编写的")]),n("p",null,[n("strong",null,"Reflect"),s("是 ECMAScript2015 提供的一个对象，它提供了一些拦截 JavaScript 操作的静态方法，这些方法与 Proxy 中的"),n("code",null,"handlers"),s("中的方法一致。")]),n("p",null,"Reflect 并不是一个构造函数，也就是说它不能够被实例化。"),n("p",null,[n("code",null,"Proxy"),s("对象中的每一个拦截操作（例如："),n("code",null,"get"),s("、"),n("code",null,"delete"),s("等）,内部都对应的调用了"),n("code",null,"Reflect"),s("的方法。它提供的静态方法与 Proxy 中的"),n("code",null,"handlers"),s("中的方法名称都一致")])],-1),Ye=n("h3",{id:"_15-set、map、weakset、weakmap",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_15-set、map、weakset、weakmap","aria-hidden":"true"},"#"),s(" 15. Set、Map、WeakSet、WeakMap")],-1),Ve=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("code",null,"Set"),s("、"),n("code",null,"Map"),s("、"),n("code",null,"WeakSet"),s("、"),n("code",null,"WeakMap"),s("是 ES2015 中新增的几个对象：")]),n("p",null,[n("strong",null,"set"),s("类似于数组，但是成员的值都是唯一的，没有重复的值。")]),n("p",null,[n("code",null,"Set"),s("本身是一个构造函数，用来生成 Set 数据结构。")]),n("p",null,[n("code",null,"Set"),s("和"),n("code",null,"WeakSet"),s("与数组类似，准确的它他们是集合，这两者的区别就是"),n("code",null,"Set"),s("可以存储任何数据类型，而"),n("code",null,"WeakSet"),s("只能存储对象的引用，而且是弱引用；")]),n("p",null,[n("code",null,"Set"),s("对象在实际开发中最常见的就是实现数据去重，示例代码如下：")]),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" arr "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"const"),s(" set "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Set"),n("span",{class:"token punctuation"},"("),s("arr"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token comment"},"// set对象可以使用 ... 展开 所有项"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"["),n("span",{class:"token operator"},"..."),s("set"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// [ 1, 2, 3, 4, 5 ]"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])]),n("p",null,[n("strong",null,"map"),s("类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。也就是说，Object 结构提供了“字符串—值”的对应，Map 结构提供了“值—值”的对应，是一种更完善的 Hash 结构实现。如果你需要“键值对”的数据结构，Map 比 Object 更合适。")]),n("p",null,[n("code",null,"Map"),s("和"),n("code",null,"WeakMap"),s("与对象类似，存储方式是键值对形式的，这两者的区别"),n("code",null,"Map"),s("的键值对都是可以是任意的而"),n("code",null,"WeakMap"),s("键必须是对象的引用而值可以是任意类型的。")])],-1),Ke=n("h2",{id:"_6-2-es2016",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_6-2-es2016","aria-hidden":"true"},"#"),s(" 6.2 ES2016")],-1),Qe=n("h3",{id:"_1-指数运算符",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-指数运算符","aria-hidden":"true"},"#"),s(" 1. 指数运算符")],-1),Ze=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[s("ES2016 中新增指数"),n("code",null,"**"),s("，也叫幂运算符，与 Math.pow()有着一样的功能，示例代码如下：")]),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[s("console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),s(),n("span",{class:"token operator"},"**"),s(),n("span",{class:"token number"},"10"),s(),n("span",{class:"token operator"},"==="),s(" Math"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pow"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// true"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])])],-1),$e=n("h3",{id:"_2-array-prototype-includes-方法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-array-prototype-includes-方法","aria-hidden":"true"},"#"),s(" 2. Array.prototype.includes()方法")],-1),nl=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[s("在 ES2016 中在数组原型上增加了"),n("code",null,"includes()"),s("方法，该方法用于判断一个数组中是否包含指定的值，返回一个布尔值，示例代码如下：")]),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" arr "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"NaN"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("arr"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"indexOf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"NaN"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// -1"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("arr"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"includes"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"NaN"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// true"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])]),n("p",null,[s("值得注意的是使用"),n("code",null,"includes()"),s("时"),n("code",null,"NaN"),s("与"),n("code",null,"NaN"),s("、"),n("code",null,"+0"),s("与"),n("code",null,"-0"),s("是相等的。")])],-1),sl=n("h2",{id:"_6-3-es2017",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_6-3-es2017","aria-hidden":"true"},"#"),s(" 6.3 ES2017")],-1),tl=n("h3",{id:"_1-对象新增方法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-对象新增方法","aria-hidden":"true"},"#"),s(" 1. 对象新增方法")],-1),al=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("ul",null,[n("li",null,[n("code",null,"Object.values()"),s("：返回一个给定对象自身的所有可枚举属性值的数组；")]),n("li",null,[n("code",null,"Object.entries()"),s("：返回一个给定对象自身可枚举属性的键值对数组；")]),n("li",null,[n("code",null,"Object.getOwnPropertyDescriptors()"),s("：返回给定对象所有自有属性的属性描述符。")])])],-1),el=n("h3",{id:"_2-字符串新增方法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-字符串新增方法","aria-hidden":"true"},"#"),s(" 2. 字符串新增方法")],-1),ll=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("ul",null,[n("li",null,[n("code",null,"padStart()"),s("：在字符串开头填充空格；")]),n("li",null,[n("code",null,"padEnd()"),s("：在字符串结尾填充空格；")])])],-1),ol=n("h2",{id:"_6-4-es2018",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_6-4-es2018","aria-hidden":"true"},"#"),s(" 6.4 ES2018")],-1),cl=n("h3",{id:"_1-异步迭代",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-异步迭代","aria-hidden":"true"},"#"),s(" 1. 异步迭代")],-1),il=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[s("在 ES2018 中新增了"),n("code",null,"for await...of"),s("语句，该用于可以遍历异步可迭代对象")])],-1),ul=n("h3",{id:"_2-对象扩展运算符",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-对象扩展运算符","aria-hidden":"true"},"#"),s(" 2."),n("strong",null,"对象扩展运算符")],-1),rl=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"对象的扩展运算符(...)用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中。"),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"let"),s(" bar "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token literal-property property"},"a"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token literal-property property"},"b"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"2"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"let"),s(" baz "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token operator"},"..."),s("bar "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// { a: 1, b: 2 }"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])]),n("p",null,"上述方法实际上等价于:"),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"let"),s(" bar "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token literal-property property"},"a"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token literal-property property"},"b"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"2"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"let"),s(" baz "),n("span",{class:"token operator"},"="),s(" Object"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"assign"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(" bar"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// { a: 1, b: 2 }"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])]),n("p",null,[n("code",null,"Object.assign"),s("方法用于对象的合并，将源对象"),n("code",null,"（source）"),s("的所有可枚举属性，复制到目标对象"),n("code",null,"（target）"),s("。"),n("code",null,"Object.assign"),s("方法的第一个参数是目标对象，后面的参数都是源对象。("),n("strong",null,"如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性"),s(")")])],-1),pl=n("h3",{id:"_3-promise-prototype-finally",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-promise-prototype-finally","aria-hidden":"true"},"#"),s(" 3. Promise.prototype.finally")],-1),dl=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("code",null,"finally()"),s("方法会返回一个"),n("code",null,"Promise"),s("对象，当 promise 的状态变更，不管是变成"),n("code",null,"rejected"),s("或者"),n("code",null,"fulfilled"),s("，最终都会执行"),n("code",null,"finally()"),s("的回调。")])],-1),kl=e('<h2 id="_6-5-es2019" tabindex="-1"><a class="header-anchor" href="#_6-5-es2019" aria-hidden="true">#</a> 6.5 ES2019</h2><h3 id="_1-try-catch-语句中的catch允许不使用参数" tabindex="-1"><a class="header-anchor" href="#_1-try-catch-语句中的catch允许不使用参数" aria-hidden="true">#</a> 1. <code>try...catch</code>：语句中的<code>catch</code>允许不使用参数</h3><h3 id="_2-trimstart、trimleft、trimend、trimright" tabindex="-1"><a class="header-anchor" href="#_2-trimstart、trimleft、trimend、trimright" aria-hidden="true">#</a> 2. trimStart、trimLeft、trimEnd、trimRight</h3>',3),hl=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("ul",null,[n("li",null,[n("code",null,"String.prototype.trimStart"),s("：用于去除字符串左边的空格；")]),n("li",null,[n("code",null,"String.prototype.trimLeft"),s("：它是"),n("code",null,"trimStart"),s("的别名")]),n("li",null,[n("code",null,"String.prototype.trimEnd"),s("：用于去除字符串右边的空格；")]),n("li",null,[n("code",null,"String.prototype.trimRight"),s("：它是"),n("code",null,"trimEnd"),s("的别名")])])],-1),ml=n("h3",{id:"_3-object-fromentries",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-object-fromentries","aria-hidden":"true"},"#"),s(" 3. Object.fromEntries")],-1),wl=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("code",null,"Object.fromEntries()"),s("方法把键值对列表转换为一个对象，是"),n("code",null,"Object.entries()"),s("方法的反操作")])],-1),vl=n("h2",{id:"_6-6-es2020",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_6-6-es2020","aria-hidden":"true"},"#"),s(" 6.6 ES2020")],-1),gl=n("h3",{id:"_1-动态导入",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-动态导入","aria-hidden":"true"},"#"),s(" 1. 动态导入")],-1),xl=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"动态导入，也就是我们需要该模块的时候才会进行加载，这可以减少开销和页面加载时间，示例代码如下："),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"import"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"/modules/my-module.js"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"then"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"module"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// Do something with the module."),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])]),n("p",null,[s("动态导入使用"),n("code",null,"import()"),s("方法，它返回一个 Promise。")]),n("p",null,[s("在 ES2020 中，还为"),n("code",null,"import"),s("增加一个"),n("code",null,"meta"),s("对象，该对象给 JavaScript 模块暴露了特定上下文的元数据属性的对象。")])],-1),bl=n("h3",{id:"_2-bigint-数据类型",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-bigint-数据类型","aria-hidden":"true"},"#"),s(" 2. BigInt 数据类型")],-1),_l=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[s("BigInt 的出现时解决 JavaScript 中允许的最大数字是"),n("code",null,"2**53-1"),s("的问题，"),n("code",null,"BigInt"),s(" 可以表示任意大的整数。")])],-1),fl=n("h3",{id:"_3-空值合并运算符",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-空值合并运算符","aria-hidden":"true"},"#"),s(" 3. 空值合并运算符 ??")],-1),yl=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[s("该运算符与逻辑或运算符类似。其计算规则为，只要左运算元为"),n("code",null,"null"),s("或者"),n("code",null,"undefined"),s("，则返回右运算元，否则返回左运算元。而逻辑或运算符只有左运算元转换为"),n("code",null,"boolean"),s("类型后为"),n("code",null,"false"),s("，就返回右运算元。")])],-1),jl=n("h3",{id:"_4-可选链操作符",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-可选链操作符","aria-hidden":"true"},"#"),s(" 4. 可选链操作符 ?.")],-1),Ml={class:"custom-container tip"},Pl=n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])],-1),Sl=n("p",{class:"custom-container-title"},"TIP",-1),Il=n("code",null,"?.",-1),Tl=n("code",null,".",-1),Cl={href:"https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FGlossary%2FNullish",target:"_blank",rel:"noopener noreferrer"},Bl={href:"https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2Fnull",target:"_blank",rel:"noopener noreferrer"},Nl=n("code",null,"null",-1),Ol={href:"https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2Fundefined",target:"_blank",rel:"noopener noreferrer"},El=n("code",null,"undefined",-1),Fl=n("code",null,"undefined",-1),Al=e(`<p>当我们访问某个属性时，只要有一处不存在，就会返回<code>undefind</code>，不会报错。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token constant">A</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// console.log(A.a.b) // 报错</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">.</span>a<span class="token operator">?.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可选链操作符也可用于对象下方法的调用，示例代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 如果存在 obj.fun() 这个方法，下面则会直接调用，如果不存在则会返回undefined</span>
obj<span class="token punctuation">.</span>fun<span class="token operator">?.</span><span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),Jl=n("h2",{id:"_6-7-es2021",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_6-7-es2021","aria-hidden":"true"},"#"),s(" 6.7 ES2021")],-1),Dl=n("h3",{id:"_1-string-prototype-replaceall",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-string-prototype-replaceall","aria-hidden":"true"},"#"),s(" 1. String.prototype.replaceAll")],-1),Rl=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("code",null,"replaceAll()"),s("方法返回一个新字符串，新字符串的内容是经过替换的，实例代码如下：")]),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" str "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"刘逍"'),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"const"),s(" newStr "),n("span",{class:"token operator"},"="),s(" str"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"replaceAll"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"逍"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"小"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("newStr"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 刘小"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1),Ll=n("h3",{id:"_2-数值分隔符",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-数值分隔符","aria-hidden":"true"},"#"),s(" 2. 数值分隔符 _")],-1),Hl=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[s("严格意义上讲数值分隔符("),n("code",null,"_"),s(")并不属于一个运算符，其作用就是使数字更加利于阅读，例如下面的代码")]),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[s("console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1_0000_0000"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 100000000"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])])],-1),Ul=n("h3",{id:"_3-promise-any",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-promise-any","aria-hidden":"true"},"#"),s(" 3. Promise.any()")],-1),zl=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[s("ES2021 中新增的"),n("code",null,"Promise.any()"),s("方法，它接受的参数和与"),n("code",null,"promise.all()"),s("是一致的，唯一不同的是，"),n("code",null,"Promise.any()"),s("方法接受的可迭代对象中没有一个 promise 成功（即所有的 promises 都失败/拒绝），就返回一个失败的 promise 和 AggregateError 类型的实例。")])],-1),ql=n("h3",{id:"_4-逻辑赋值操作符-、-、",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-逻辑赋值操作符-、-、","aria-hidden":"true"},"#"),s(" 4. 逻辑赋值操作符 &&= 、||= 、？？=")],-1),Wl=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token punctuation"},"["),s("f1"),n("span",{class:"token punctuation"},","),s(" f2"),n("span",{class:"token punctuation"},","),s(" f3"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
f1 `),n("span",{class:"token operator"},"&&="),s(),n("span",{class:"token string"},'"逍"'),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 等同于 str = str && '逍'"),s(`
f2 `),n("span",{class:"token operator"},"||="),s(),n("span",{class:"token string"},'"逍"'),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 等同于 str = str || '逍'"),s(`
f3 `),n("span",{class:"token operator"},"??="),s(),n("span",{class:"token string"},'"逍"'),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 等同于 str = str ?? '逍'"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1),Xl=n("h2",{id:"_6-8-es2022",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_6-8-es2022","aria-hidden":"true"},"#"),s(" 6.8 ES2022")],-1),Gl=n("h3",{id:"_1-class-的扩展",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-class-的扩展","aria-hidden":"true"},"#"),s(" 1. class 的扩展")],-1),Yl=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[s("在 ES2022 中允许我们并不在"),n("code",null,"constructor"),s("中定义类的成员，示例代码如下：")]),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"C"),s(),n("span",{class:"token punctuation"},"{"),s(`
  myName `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"刘逍"'),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token comment"},"/* 两者是一致的 */"),s(`
`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"C"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token function"},"constructor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    myName `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"刘逍"'),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])]),n("p",null,[s("ES2022 中允许我们使用"),n("code",null,"#"),s("开头命名的变量作为类的私有成员")])],-1),Vl=n("h3",{id:"_2-await-在顶层使用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-await-在顶层使用","aria-hidden":"true"},"#"),s(" 2. await 在顶层使用")],-1),Kl=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[s("在 ES2022 中新增了允许在顶层使用"),n("code",null,"await"),s("，在顶层可以不适用"),n("code",null,"async"),s("函数进行包裹，示例代码如下：")]),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" AsyncFun "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},'"module"'),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"await"),s(),n("span",{class:"token function"},"AsyncFun"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"123"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1),Ql=n("h3",{id:"_3-object-hasown",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-object-hasown","aria-hidden":"true"},"#"),s(" 3. Object.hasOwn()")],-1),Zl=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("code",null,"Object.hasOwn()"),s("方法用于判断某个对象上是否具有某个属性，示例代码如下：")]),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" person "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token literal-property property"},"name"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"刘逍"'),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token literal-property property"},"age"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"18"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("Object"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"hasOwn"),n("span",{class:"token punctuation"},"("),s("person"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"name"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// true"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("Object"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"hasOwn"),n("span",{class:"token punctuation"},"("),s("person"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"sex"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// false"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1),$l=n("h3",{id:"_4-array-prototype-at",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-array-prototype-at","aria-hidden":"true"},"#"),s(" 4. Array.prototype.at()")],-1),no=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[s("ES2022 中新增的"),n("code",null,"at()"),s("方法，它的作用是获取数组中的某个成员，它的参数是数组的索引，与直接使用索引的方式不同，它允许我们传递负值，等同于从后面倒数，示例代码如下：")]),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" arr "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"6"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("arr"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"at"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 6"),s(`
`),n("span",{class:"token comment"},"// 等同于 arr[arr.length - 1]"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1),so=n("h1",{id:"七、-dom",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#七、-dom","aria-hidden":"true"},"#"),s(" 七、 DOM")],-1),to=n("h2",{id:"_7-1-说一下-dom-事件流",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_7-1-说一下-dom-事件流","aria-hidden":"true"},"#"),s(" 7.1 说一下 DOM 事件流")],-1),ao=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"⼜称为事件传播，是⻚⾯中接收事件的顺序。DOM2 级事件规定的事件流包括了 3 个阶段："),n("ul",null,[n("li",null,"事件捕获阶段（capture phase）"),n("li",null,"处于⽬标阶段（target phase）"),n("li",null,"事件冒泡阶段（bubbling phase）")]),n("p",null,[n("img",{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/152eeaa11c2c4ca9a93de8a484295bcd~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?",alt:"Snipaste_2022-08-22_18-26-46.jpg"})]),n("p",null,"如上图所示，事件流的触发顺序是："),n("ol",null,[n("li",null,"事件捕获阶段，为截获事件提供了机会"),n("li",null,"实际的⽬标元素接收到事件"),n("li",null,"事件冒泡阶段，可在这个阶段对事件做出响应")])],-1),eo=n("h2",{id:"_7-2-什么是事件冒泡-event-bubbling",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_7-2-什么是事件冒泡-event-bubbling","aria-hidden":"true"},"#"),s(" 7.2 什么是事件冒泡（Event Bubbling）")],-1),lo=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"事件开始由最具体的元素（⽂档中嵌套层次最深的那个节点）接收到后，开始逐级向上传播到较为不具体的节点。"),n("div",{class:"language-html line-numbers-mode","data-ext":"html"},[n("pre",{class:"language-html"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("html")]),n("span",{class:"token punctuation"},">")]),s(`
  `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("head")]),n("span",{class:"token punctuation"},">")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("title")]),n("span",{class:"token punctuation"},">")]),s("Document"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("title")]),n("span",{class:"token punctuation"},">")]),s(`
  `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("head")]),n("span",{class:"token punctuation"},">")]),s(`

  `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("body")]),n("span",{class:"token punctuation"},">")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("button")]),n("span",{class:"token punctuation"},">")]),s("按钮"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("button")]),n("span",{class:"token punctuation"},">")]),s(`
  `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("body")]),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("html")]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])]),n("p",null,[s("如果点击了上面页面代码中的 "),n("code",null,"<button>"),s(" 按钮，那么该 "),n("code",null,"click"),s(" 点击事件会沿着 DOM 树向上逐级传播，在途经的每个节点上都会发生，具体顺序如下：")]),n("ol",null,[n("li",null,"button 元素"),n("li",null,"body 元素"),n("li",null,"html 元素"),n("li",null,"document 对象")])],-1),oo=n("h2",{id:"_7-3-什么是事件捕获-event-capturing",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_7-3-什么是事件捕获-event-capturing","aria-hidden":"true"},"#"),s(" 7.3 什么是事件捕获（Event Capturing）")],-1),co=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"事件开始由较为不具体的节点接收后，然后开始逐级向下传播到最具体的元素上。"),n("p",null,"事件捕获的最大作用在于：事件在到达预定⽬标之前就可以捕获到它。"),n("p",null,[s("如果仍以上面那段 HTML 代码为例，当点击按钮后，在事件捕获的过程中，document 对象会首先接收到这个 "),n("code",null,"click"),s(" 事件，然后再沿着 DOM 树依次向下，直到 "),n("code",null,"<button>"),s("。具体顺序如下：")]),n("ol",null,[n("li",null,"document 对象"),n("li",null,"html 元素"),n("li",null,"body 元素"),n("li",null,"button 元素")])],-1),io=n("h2",{id:"_7-4-什么是事件委托",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_7-4-什么是事件委托","aria-hidden":"true"},"#"),s(" 7.4 什么是事件委托")],-1),uo=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"事件委托，就是利用了事件冒泡的机制，在较上层位置的元素上添加一个事件监听函数，来管理该元素及其所有子孙元素上的某一类的所有事件。"),n("p",null,"适用场景：在绑定大量事件的时候，可以选择事件委托"),n("p",null,[n("strong",null,"优点")]),n("ul",null,[n("li",null,"事件委托可以减少事件注册数量，节省内存占⽤!"),n("li",null,"当新增⼦元素时，⽆需再次做事件绑定，因此非常适合动态添加元素 (vue 解析模板时, 会对新创建的元素, 额外进行绑定的)")])],-1),ro=n("h2",{id:"_7-5-什么是-dom",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_7-5-什么是-dom","aria-hidden":"true"},"#"),s(" 7.5 什么是 DOM")],-1),po=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[s("DOM 就是文档对象模型 ，是用来呈现以及与任意 "),n("code",null,"HTML"),s(" 和或"),n("code",null,"XML"),s(" 文档交互的 API")]),n("p",null,"它提供了对文档的结构化的表述，并定义了一种方式可以使从程序中对该结构进行访问，从而改变文档的结构，样式和内容")],-1),ko=n("h2",{id:"_7-6-dom-的常用操作",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_7-6-dom-的常用操作","aria-hidden":"true"},"#"),s(" 7.6 DOM 的常用操作")],-1),ho=n("h3",{id:"_1-创建节点",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-创建节点","aria-hidden":"true"},"#"),s(" (1)创建节点")],-1),mo=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("strong",null,"createElement")]),n("p",null,"创建新元素，接受一个参数，即要创建元素的标签名"),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" divEl "),n("span",{class:"token operator"},"="),s(" document"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"createElement"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"div"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])]),n("p",null,[n("strong",null,"createTextNode")]),n("p",null,"创建一个文本节点"),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" textEl "),n("span",{class:"token operator"},"="),s(" document"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"createTextNode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"content"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])]),n("p",null,[n("strong",null,"createDocumentFragment")]),n("p",null,[s("用来创建一个文档碎片，它表示一种轻量级的文档，主要是用来存储临时节点，然后把文档碎片的内容一次性添加到"),n("code",null,"DOM"),s("中")]),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" fragment "),n("span",{class:"token operator"},"="),s(" document"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"createDocumentFragment"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])]),n("p",null,[s("当请求把一个"),n("code",null,"DocumentFragment"),s(" 节点插入文档树时，插入的不是 "),n("code",null,"DocumentFragment"),s("自身，而是它的所有子孙节点")]),n("p",null,[n("strong",null,"createAttribute")]),n("p",null,"创建属性节点，可以是自定义属性"),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" dataAttribute "),n("span",{class:"token operator"},"="),s(" document"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"createAttribute"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"custom"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
consle`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("dataAttribute"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1),wo=n("h3",{id:"_2-获取节点",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-获取节点","aria-hidden":"true"},"#"),s(" (2)获取节点")],-1),vo=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("strong",null,"querySelector")]),n("p",null,[s("传入任何有效的"),n("code",null,"css"),s(" 选择器，即可选中单个 "),n("code",null,"DOM"),s("元素（首个）：")]),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[s("document"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"querySelector"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'".element"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
document`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"querySelector"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"#element"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
document`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"querySelector"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"div"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
document`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"querySelector"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},`'[name="username"]'`),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
document`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"querySelector"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"div + p > span"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])]),n("p",null,[s("如果页面上没有指定的元素时，返回 "),n("code",null,"null")]),n("p",null,[n("strong",null,"querySelectorAll")]),n("p",null,[s("返回一个包含节点子树内所有与之相匹配的"),n("code",null,"Element"),s("节点列表，如果没有相匹配的，则返回一个空节点列表")]),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" notLive "),n("span",{class:"token operator"},"="),s(" document"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"querySelectorAll"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"p"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])]),n("p",null,[s("需要注意的是，该方法返回的是一个 "),n("code",null,"NodeList"),s("的静态实例，它是一个静态的“快照”，而非“实时”的查询")]),n("p",null,[s("关于获取"),n("code",null,"DOM"),s("元素的方法还有如下，就不一一述说")]),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[s("document"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getElementById"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"id属性值"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
返回拥有指定id的对象的引用`),n("span",{class:"token punctuation"},";"),s(`
document`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getElementsByClassName"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"class属性值"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
返回拥有指定`),n("span",{class:"token keyword"},"class"),s("的对象集合"),n("span",{class:"token punctuation"},";"),s(`
document`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getElementsByTagName"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"标签名"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
返回拥有指定标签名的对象集合`),n("span",{class:"token punctuation"},";"),s(`
document`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getElementsByName"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"name属性值"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
返回拥有指定名称的对象结合`),n("span",{class:"token punctuation"},";"),s(`
document `),n("span",{class:"token operator"},"/"),s(" element"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"querySelector"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"CSS选择器"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
仅返回第一个匹配的元素`),n("span",{class:"token punctuation"},";"),s(`
document `),n("span",{class:"token operator"},"/"),s(" element"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"querySelectorAll"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"CSS选择器"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
返回所有匹配的元素`),n("span",{class:"token punctuation"},";"),s(`
document`),n("span",{class:"token punctuation"},"."),s("documentElement"),n("span",{class:"token punctuation"},";"),s(`
获取页面中的`),n("span",{class:"token constant"},"HTML"),s("标签"),n("span",{class:"token punctuation"},";"),s(`
document`),n("span",{class:"token punctuation"},"."),s("body"),n("span",{class:"token punctuation"},";"),s(`
获取页面中的`),n("span",{class:"token constant"},"BODY"),s("标签"),n("span",{class:"token punctuation"},";"),s(`
document`),n("span",{class:"token punctuation"},"."),s("all"),n("span",{class:"token punctuation"},"["),n("span",{class:"token string"},'""'),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
获取页面中的所有元素节点的对象集合型`),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1),go=n("h3",{id:"_3-更新节点",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-更新节点","aria-hidden":"true"},"#"),s(" (3)更新节点")],-1),xo=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("strong",null,"innerHTML")]),n("p",null,[s("不但可以修改一个"),n("code",null,"DOM"),s("节点的文本内容，还可以直接通过"),n("code",null,"HTML"),s("片段修改"),n("code",null,"DOM"),s("节点内部的子树")]),n("div",{class:"language-css line-numbers-mode","data-ext":"css"},[n("pre",{class:"language-css"},[n("code",null,[s("// 获取<p id="),n("span",{class:"token string"},'"p"'),s(`>...</p >
var p = document.`),n("span",{class:"token function"},"getElementById"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'p'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
// `),n("span",{class:"token property"},"设置文本为abc"),n("span",{class:"token punctuation"},":"),s(`
p.innerHTML = `),n("span",{class:"token string"},"'ABC'"),n("span",{class:"token punctuation"},";"),s(" // <p id="),n("span",{class:"token string"},'"p"'),s(`>ABC</p >
// `),n("span",{class:"token property"},"设置HTML"),n("span",{class:"token punctuation"},":"),s(`
p.innerHTML = `),n("span",{class:"token string"},`'ABC <span style="color:red">RED</span> XYZ'`),n("span",{class:"token punctuation"},";"),s(`
// <p>...</p >的内部结构已修改
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])]),n("p",null,[n("strong",null,"innerText、textContent")]),n("p",null,[s("自动对字符串进行"),n("code",null,"HTML"),s("编码，保证无法设置任何"),n("code",null,"HTML"),s("标签")]),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token comment"},'// 获取<p id="p-id">...</p >'),s(`
`),n("span",{class:"token keyword"},"var"),s(" p "),n("span",{class:"token operator"},"="),s(" document"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getElementById"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"p-id"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token comment"},"// 设置文本:"),s(`
p`),n("span",{class:"token punctuation"},"."),s("innerText "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},`'<script>alert("Hi")<\/script>'`),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token comment"},"// HTML被自动编码，无法设置一个<script>节点:"),s(`
`),n("span",{class:"token comment"},'// <p id="p-id">&lt;script&gt;alert("Hi")&lt;/script&gt;</p >'),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])]),n("p",null,[s("两者的区别在于读取属性时，"),n("code",null,"innerText"),s("不返回隐藏元素的文本，而"),n("code",null,"textContent"),s("返回所有文本")]),n("p",null,[n("strong",null,"style")]),n("p",null,[n("code",null,"DOM"),s("节点的"),n("code",null,"style"),s("属性对应所有的"),n("code",null,"CSS"),s("，可以直接获取或设置。遇到"),n("code",null,"-"),s("需要转化为驼峰命名")]),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token comment"},'// 获取<p id="p-id">...</p >'),s(`
`),n("span",{class:"token keyword"},"const"),s(" p "),n("span",{class:"token operator"},"="),s(" document"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getElementById"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"p-id"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token comment"},"// 设置CSS:"),s(`
p`),n("span",{class:"token punctuation"},"."),s("style"),n("span",{class:"token punctuation"},"."),s("color "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"#ff0000"'),n("span",{class:"token punctuation"},";"),s(`
p`),n("span",{class:"token punctuation"},"."),s("style"),n("span",{class:"token punctuation"},"."),s("fontSize "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"20px"'),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 驼峰命名"),s(`
p`),n("span",{class:"token punctuation"},"."),s("style"),n("span",{class:"token punctuation"},"."),s("paddingTop "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"2em"'),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1),bo=n("h3",{id:"_4-添加节点",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-添加节点","aria-hidden":"true"},"#"),s(" (4)添加节点")],-1),_o=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("strong",null,"innerHTML")]),n("p",null,[s("如果这个 DOM 节点是空的，例如，"),n("code",null,"<div></div>"),s("，那么，直接使用"),n("code",null,"innerHTML = '<span>child</span>'"),s("就可以修改"),n("code",null,"DOM"),s("节点的内容，相当于添加了新的"),n("code",null,"DOM"),s("节点")]),n("p",null,[s("如果这个 DOM 节点不是空的，那就不能这么做，因为"),n("code",null,"innerHTML"),s("会直接替换掉原来的所有子节点")]),n("p",null,[n("strong",null,"appendChild")]),n("p",null,"把一个子节点添加到父节点的最后一个子节点"),n("p",null,[s("如果是获取"),n("code",null,"DOM"),s("元素后再进行添加操作，这个"),n("code",null,"js"),s("节点是已经存在当前文档树中，因此这个节点首先会从原先的位置删除，再插入到新的位置")]),n("p",null,"如果动态添加新的节点，则先创建一个新的节点，然后插入到指定的位置"),n("p",null,[n("strong",null,"insertBefore")]),n("p",null,"把子节点插入到指定的位置，使用方法如下："),n("div",{class:"language-scss line-numbers-mode","data-ext":"scss"},[n("pre",{class:"language-scss"},[n("code",null,[s("parentElement."),n("span",{class:"token function"},"insertBefore"),n("span",{class:"token punctuation"},"("),s("newElement"),n("span",{class:"token punctuation"},","),s(" referenceElement"),n("span",{class:"token punctuation"},")"),s(`

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])]),n("p",null,[s("子节点会插入到"),n("code",null,"referenceElement"),s("之前")]),n("p",null,[n("strong",null,"setAttribute")]),n("p",null,"添加一个属性节点，如果元素中已有该属性改变属性值"),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" div "),n("span",{class:"token operator"},"="),s(" document"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getElementById"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"id"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
div`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setAttribute"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"class"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"white"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"//第一个参数属性名，第二个参数属性值。"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1),fo=n("h3",{id:"_5-删除节点",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-删除节点","aria-hidden":"true"},"#"),s(" (5)删除节点")],-1),yo=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("strong",null,"removeChild")]),n("p",null,[s("删除一个节点，首先要获得该节点本身以及它的父节点，然后，调用父节点的"),n("code",null,"removeChild"),s("把自己删掉")]),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token comment"},"// 拿到待删除节点:"),s(`
`),n("span",{class:"token keyword"},"const"),s(" self "),n("span",{class:"token operator"},"="),s(" document"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getElementById"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"to-be-removed"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token comment"},"// 拿到父节点:"),s(`
`),n("span",{class:"token keyword"},"const"),s(" parent "),n("span",{class:"token operator"},"="),s(" self"),n("span",{class:"token punctuation"},"."),s("parentElement"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token comment"},"// 删除:"),s(`
`),n("span",{class:"token keyword"},"const"),s(" removed "),n("span",{class:"token operator"},"="),s(" parent"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"removeChild"),n("span",{class:"token punctuation"},"("),s("self"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
removed `),n("span",{class:"token operator"},"==="),s(" self"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// true"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])]),n("p",null,"删除后的节点虽然不在文档树中了，但其实它还在内存中，可以随时再次被添加到别的位置")],-1),jo=n("h2",{id:"_7-7-什么是-dom-树",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_7-7-什么是-dom-树","aria-hidden":"true"},"#"),s(" 7.7 什么是 DOM 树")],-1),Mo=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"以 HTMLDocument 为根节点，其余节点为子节点，组织成一个树的数据结构的表示就是 DOM 树。"),n("p",null,"DOM 树直接体现了标签与标签之间的关系")],-1),Po=n("h2",{id:"_7-8-什么是-dom-对象-什么是-document-对象",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_7-8-什么是-dom-对象-什么是-document-对象","aria-hidden":"true"},"#"),s(" 7.8 什么是 DOM 对象，什么是 document 对象")],-1),So=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"DOM 对象是浏览器根据 html 标签生成的 Js 对象"),n("p",null,"docement 对象是 DOM 里提供的一个对象，它提供的属性和方法都是用来访问和操作网页内容的")],-1),Io=n("h2",{id:"_7-9-l0-和-l2-注册事件的区别",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_7-9-l0-和-l2-注册事件的区别","aria-hidden":"true"},"#"),s(" 7.9 L0 和 L2 注册事件的区别")],-1),To=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4328d62ad5e54a66b4aed311f2c2d954~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?",alt:"Snipaste_2022-08-22_18-46-17.jpg"})])],-1),Co=n("h2",{id:"_7-10-怎么解绑事件",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_7-10-怎么解绑事件","aria-hidden":"true"},"#"),s(" 7.10 怎么解绑事件")],-1),Bo=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("img",{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d9c245425aef478b907f84c84f331c70~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?",alt:"Snipaste_2022-08-22_18-47-08.jpg"})])],-1),No=n("h2",{id:"_7-11-addeventlistener-的第三个参数有什么用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_7-11-addeventlistener-的第三个参数有什么用","aria-hidden":"true"},"#"),s(" 7.11 addEventListener 的第三个参数有什么用")],-1),Oo={class:"custom-container tip"},Eo=n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])],-1),Fo=e(`<p class="custom-container-title">TIP</p><p>addEventListener 有三个参数：</p><div class="language-vbnet line-numbers-mode" data-ext="vbnet"><pre class="language-vbnet"><code> element.addEventListener<span class="token punctuation">(</span><span class="token keyword">event</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">,</span> useCapture<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,3),Ao=n("thead",null,[n("tr",null,[n("th",null,"参数"),n("th",null,"描述")])],-1),Jo=n("td",null,"event",-1),Do=n("strong",null,"注意:",-1),Ro=n("strong",null,"提示：",-1),Lo={href:"https://link.juejin.cn?target=http%3A%2F%2Fwww.runoob.com%2Fjsref%2Fdom-obj-event.html",target:"_blank",rel:"noopener noreferrer"},Ho=n("tr",null,[n("td",null,"function"),n("td",null,'必须。指定要事件触发时执行的函数。 当事件对象会作为第一个参数传入函数。 事件对象的类型取决于特定的事件。例如， "click" 事件属于 MouseEvent(鼠标事件) 对象。')],-1),Uo=n("tr",null,[n("td",null,"useCapture"),n("td",null,"可选。布尔值，指定事件是否在捕获或冒泡阶段执行。 可能值:true - 事件句柄在捕获阶段执行（即在事件捕获阶段调用处理函数）false- false- 默认。事件句柄在冒泡阶段执行（即表示在事件冒泡的阶段调用事件处理函数）")],-1),zo=n("h2",{id:"_7-12-常用-dom-事件",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_7-12-常用-dom-事件","aria-hidden":"true"},"#"),s(" 7.12 常用 DOM 事件")],-1),qo=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("ul",null,[n("li",null,[s("鼠标事件 "),n("ul",null,[n("li",null,"鼠标单击 click"),n("li",null,"鼠标双击 dblclick"),n("li",null,[s("鼠标移入/移出 "),n("ul",null,[n("li",null,"mouseover/mouseout : 支持冒泡"),n("li",null,"mouseenter/mouseleave： 不支持冒泡")])]),n("li",null,"鼠标移动 mousemove"),n("li",null,"鼠标按下 mousedown"),n("li",null,"鼠标松开 mouseup")])]),n("li",null,[s("键盘事件 "),n("ul",null,[n("li",null,"input : 键盘输入"),n("li",null,"keydwon : 键盘按下"),n("li",null,"focus: 成为焦点"),n("li",null,"blur: 失去焦点")])]),n("li",null,[s("页面事件 "),n("ul",null,[n("li",null,"scroll ： 页面滚动"),n("li",null,"resize：页面大小变化 :::")])])]),n("h2",{id:"_7-13-怎么阻止事件冒泡、阻止默认事件",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_7-13-怎么阻止事件冒泡、阻止默认事件","aria-hidden":"true"},"#"),s(" 7.13 怎么阻止事件冒泡、阻止默认事件？")]),n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("strong",null,"阻止事件冒泡")]),n("p",null,"e.stopPropagation**()"),n("p",null,[n("strong",null,"阻止默认事件,3 种方式")]),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[s("e"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"preventDefault"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"//谷歌及IE8以上"),s(`
window`),n("span",{class:"token punctuation"},"."),s("event"),n("span",{class:"token punctuation"},"."),s("returnValue "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"//IE8及以下"),s(`
`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"//无兼容问题（但不能用于节点直接onclick绑定函数）"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])])],-1),Wo=n("h2",{id:"_7-14-dom-的类型有哪几种",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_7-14-dom-的类型有哪几种","aria-hidden":"true"},"#"),s(" 7.14 DOM 的类型有哪几种？")],-1),Xo=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"12 种"),n("div",{class:"language-scss line-numbers-mode","data-ext":"scss"},[n("pre",{class:"language-scss"},[n("code",null,[s("元素节点            　　Node.ELEMENT_"),n("span",{class:"token function"},"NODE"),n("span",{class:"token punctuation"},"("),s("1"),n("span",{class:"token punctuation"},")"),s(`
属性节点            　　Node.ATTRIBUTE_`),n("span",{class:"token function"},"NODE"),n("span",{class:"token punctuation"},"("),s("2"),n("span",{class:"token punctuation"},")"),s(`
文本节点            　　Node.TEXT_`),n("span",{class:"token function"},"NODE"),n("span",{class:"token punctuation"},"("),s("3"),n("span",{class:"token punctuation"},")"),s(`
CDATA节点             Node.CDATA_SECTION_`),n("span",{class:"token function"},"NODE"),n("span",{class:"token punctuation"},"("),s("4"),n("span",{class:"token punctuation"},")"),s(`
实体引用名称节点    　　 Node.ENTRY_REFERENCE_`),n("span",{class:"token function"},"NODE"),n("span",{class:"token punctuation"},"("),s("5"),n("span",{class:"token punctuation"},")"),s(`
实体名称节点        　　Node.ENTITY_`),n("span",{class:"token function"},"NODE"),n("span",{class:"token punctuation"},"("),s("6"),n("span",{class:"token punctuation"},")"),s(`
处理指令节点        　　Node.PROCESSING_INSTRUCTION_`),n("span",{class:"token function"},"NODE"),n("span",{class:"token punctuation"},"("),s("7"),n("span",{class:"token punctuation"},")"),s(`
注释节点            　 Node.COMMENT_`),n("span",{class:"token function"},"NODE"),n("span",{class:"token punctuation"},"("),s("8"),n("span",{class:"token punctuation"},")"),s(`
文档节点            　 Node.DOCUMENT_`),n("span",{class:"token function"},"NODE"),n("span",{class:"token punctuation"},"("),s("9"),n("span",{class:"token punctuation"},")"),s(`
文档类型节点        　　Node.DOCUMENT_TYPE_`),n("span",{class:"token function"},"NODE"),n("span",{class:"token punctuation"},"("),s("10"),n("span",{class:"token punctuation"},")"),s(`
文档片段节点        　　Node.DOCUMENT_FRAGMENT_`),n("span",{class:"token function"},"NODE"),n("span",{class:"token punctuation"},"("),s("11"),n("span",{class:"token punctuation"},")"),s(`
DTD声明节点            Node.NOTATION_`),n("span",{class:"token function"},"NODE"),n("span",{class:"token punctuation"},"("),s("12"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1),Go=n("h2",{id:"_7-15-dom-种获取坐标的属性有哪些-它们有什么不同",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_7-15-dom-种获取坐标的属性有哪些-它们有什么不同","aria-hidden":"true"},"#"),s(" 7.15 DOM 种获取坐标的属性有哪些，它们有什么不同？")],-1),Yo=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("table",null,[n("thead",null,[n("tr",null,[n("th",null,"属性"),n("th",null,"说明"),n("th",null,"兼容性")])]),n("tbody",null,[n("tr",null,[n("td",null,"offsetX"),n("td",null,"以当前的目标元素左上角为原点，定位 x 轴坐标"),n("td",null,"除 Mozilla 外都兼容")]),n("tr",null,[n("td",null,"offsetY"),n("td",null,"以当前的目标元素左上角为原点，定位 y 轴坐标"),n("td",null,"除 Mozilla 外都兼容")]),n("tr",null,[n("td",null,"clientX"),n("td",null,"以浏览器可视窗口左上角为原点，定位 x 轴坐标"),n("td",null,"都兼容")]),n("tr",null,[n("td",null,"clientY"),n("td",null,"以浏览器可视窗口左上角为原点，定位 y 轴坐标"),n("td",null,"都兼容")]),n("tr",null,[n("td",null,"pageX"),n("td",null,"以 doument 对象左上角为原点，定位 x 轴坐标"),n("td",null,"除 IE 外都兼容")]),n("tr",null,[n("td",null,"pageY"),n("td",null,"以 doument 对象左上角为原点，定位 y 轴坐标"),n("td",null,"除 IE 外都兼容")]),n("tr",null,[n("td",null,"screenX"),n("td",null,"以计算机屏幕左上顶角为原点，定位 x 轴坐标(多屏幕会影响)"),n("td",null,"全兼容")]),n("tr",null,[n("td",null,"screenY"),n("td",null,"以计算机屏幕左上顶角为原点，定位 y 轴坐标"),n("td",null,"全兼容")]),n("tr",null,[n("td",null,"layerX"),n("td",null,"最近的绝对定位的父元素（如果没有，则为 document 对象）左上顶角为元素，定位 x 轴坐标"),n("td",null,"Mozilla 和 Safari")]),n("tr",null,[n("td",null,"layerY"),n("td",null,"最近的绝对定位的父元素（如果没有，则为 document 对象）左上顶角为元素，定位 y 轴坐标"),n("td",null,"Mozilla 和 Safari")])])])],-1),Vo=n("h2",{id:"_7-16-dom-种元素视图尺寸的属性有哪些",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_7-16-dom-种元素视图尺寸的属性有哪些","aria-hidden":"true"},"#"),s(" 7.16 DOM 种元素视图尺寸的属性有哪些？")],-1),Ko=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("table",null,[n("thead",null,[n("tr",null,[n("th",null,"属性"),n("th",null,"说明")])]),n("tbody",null,[n("tr",null,[n("td",null,"offsetLeft"),n("td",null,"获取当前元素到定位父节点的 left 方向的距离")]),n("tr",null,[n("td",null,"offsetTop"),n("td",null,"获取当前元素到定位父节点的 top 方向的距离")]),n("tr",null,[n("td",null,"offsetWidth"),n("td",null,"获取当前元素 width + 左右 padding + 左右 border-width")]),n("tr",null,[n("td",null,"offsetHeight"),n("td",null,"获取当前元素 height + 上下 padding + 上下 border-width")]),n("tr",null,[n("td",null,"clientWidth"),n("td",null,"获取当前元素 width + 左右 padding")]),n("tr",null,[n("td",null,"clientHeight"),n("td",null,"获取当前元素 height + 上下 padding")]),n("tr",null,[n("td",null,"scrollWidth"),n("td",null,"当前元素内容真实的宽度，内容不超出盒子宽度时为盒子的 clientWidth")]),n("tr",null,[n("td",null,"scrollHeight"),n("td",null,"当前元素内容真实的高度，内容不超出盒子高度时为盒子的 clientHeight")])])])],-1),Qo=n("h2",{id:"_7-17-如何判断元素是否在可视区域",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_7-17-如何判断元素是否在可视区域","aria-hidden":"true"},"#"),s(" 7.17 如何判断元素是否在可视区域")],-1),Zo=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("h3",{id:"getboundingclientrect",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#getboundingclientrect","aria-hidden":"true"},"#"),s(" getBoundingClientRect")]),n("div",{class:"language-text line-numbers-mode","data-ext":"text"},[n("pre",{class:"language-text"},[n("code",null,"Element.getBoundingClientRect()` 方法返回元素的大小及其相对于视口的位置。返回的是一个对象，对象里有这8个属性：`left，right，top，bottom，width，height，x，y\n")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])])],-1),$o=n("h2",{id:"_7-18-intersectionobserver",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_7-18-intersectionobserver","aria-hidden":"true"},"#"),s(" 7.18 IntersectionObserver")],-1),nc={class:"custom-container tip"},sc=n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])],-1),tc=n("p",{class:"custom-container-title"},"TIP",-1),ac=n("code",null,"IntersectionObserver",-1),ec=n("strong",null,"接口",-1),lc={href:"https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FGlossary%2FViewport",target:"_blank",rel:"noopener noreferrer"},oc={href:"https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FGlossary%2FViewport",target:"_blank",rel:"noopener noreferrer"},cc=n("strong",null,"根(root)",-1),ic=n("p",null,[s("通俗点说就是："),n("code",null,"IntersectionObserver"),s("是用来监听"),n("strong",null,"某个元素与视口"),s("的"),n("code",null,"交叉状态"),s("的。")],-1),uc=n("h2",{id:"_7-19-如何遍历输出页面中的所有元素",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_7-19-如何遍历输出页面中的所有元素","aria-hidden":"true"},"#"),s(" 7.19 如何遍历输出页面中的所有元素")],-1),rc=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("h3",{id:"createnodeiterator",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#createnodeiterator","aria-hidden":"true"},"#"),s(" createNodeIterator")]),n("p",null,[s("使用"),n("code",null,"createNodeIterator"),s("对页面中所有元素进行遍历输出呢？")]),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" body "),n("span",{class:"token operator"},"="),s(" document"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getElementsByTagName"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"body"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"const"),s(" it "),n("span",{class:"token operator"},"="),s(" document"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"createNodeIterator"),n("span",{class:"token punctuation"},"("),s("body"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"let"),s(" root "),n("span",{class:"token operator"},"="),s(" it"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"nextNode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  root `),n("span",{class:"token operator"},"="),s(" it"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"nextNode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1),pc=n("h2",{id:"_7-20-什么是-bom-对象",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_7-20-什么是-bom-对象","aria-hidden":"true"},"#"),s(" 7.20 什么是 BOM 对象")],-1),dc=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[n("img",{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d02d3f7e82ce497eb64f8bb03a02a9cd~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?",alt:"Snipaste_2022-08-22_18-53-44.jpg"})]),n("h3",{id:"_1-location-对象的常用方法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-location-对象的常用方法","aria-hidden":"true"},"#"),s(" (1) location 对象的常用方法")]),n("p",null,[n("img",{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/afee995fe98e42b983727698a8d4e1ff~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?",alt:"Snipaste_2022-08-22_18-54-33.jpg"})]),n("h3",{id:"_2-navigator-对象-获取浏览器平台和版本数据",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-navigator-对象-获取浏览器平台和版本数据","aria-hidden":"true"},"#"),s(" (2) navigator 对象 (获取浏览器平台和版本数据)")]),n("p",null,[n("img",{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0121daea446e484b87746930d3545777~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?",alt:"Snipaste_2022-08-22_18-55-25.jpg"})]),n("h3",{id:"_3-histroy-对象-管理浏览器历史记录",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-histroy-对象-管理浏览器历史记录","aria-hidden":"true"},"#"),s(" (3) histroy 对象 （管理浏览器历史记录）")]),n("p",null,[n("img",{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/886d847bf7984663b41d1acb8329c509~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?",alt:"Snipaste_2022-08-22_18-57-03.jpg"})])],-1),kc=n("h1",{id:"八、其他类型问题补充",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#八、其他类型问题补充","aria-hidden":"true"},"#"),s(" 八、其他类型问题补充")],-1),hc=n("h2",{id:"_8-1-简单说说你对观察者模式的理解",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_8-1-简单说说你对观察者模式的理解","aria-hidden":"true"},"#"),s(" 8.1 简单说说你对观察者模式的理解")],-1),mc=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"观察者模式定义了对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知，并自动更新"),n("p",null,"观察者模式属于行为型模式，行为型模式关注的是对象之间的通讯，观察者模式就是观察者和被观察者之间的通讯"),n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/455aea9a384646bebf4521ebbbd07d34~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp",alt:"img"})]),n("p",null,"例如生活中，我们可以用报纸期刊的订阅来形象的说明，当你订阅了一份报纸，每天都会有一份最新的报纸送到你手上，有多少人订阅报纸，报社就会发多少份报纸"),n("p",null,"报社和订报纸的客户就形成了一对多的依赖关系")],-1),wc=n("h2",{id:"_8-2-简单说说你对发布订阅模式的理解",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_8-2-简单说说你对发布订阅模式的理解","aria-hidden":"true"},"#"),s(" 8.2 简单说说你对发布订阅模式的理解")],-1),vc=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"发布-订阅是一种消息范式，消息的发送者（称为发布者）不会将消息直接发送给特定的接收者（称为订阅者）。而是将发布的消息分为不同的类别，无需了解哪些订阅者（如果有的话）可能存在"),n("p",null,"同样的，订阅者可以表达对一个或多个类别的兴趣，只接收感兴趣的消息，无需了解哪些发布者存在")],-1),gc=n("h2",{id:"_8-3-观察者模式与发布订阅的区别",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_8-3-观察者模式与发布订阅的区别","aria-hidden":"true"},"#"),s(" 8.3 观察者模式与发布订阅的区别")],-1),xc=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("ul",null,[n("li",null,"在观察者模式中，观察者是知道 Subject 的，Subject 一直保持对观察者进行记录。然而，在发布订阅模式中，发布者和订阅者不知道对方的存在。它们只有通过消息代理进行通信。"),n("li",null,"在发布订阅模式中，组件是松散耦合的，正好和观察者模式相反。"),n("li",null,"观察者模式大多数时候是同步的，比如当事件触发，Subject 就会去调用观察者的方法。而发布-订阅模式大多数时候是异步的（使用消息队列）")])],-1),bc=n("h2",{id:"_8-4-说说你对正则表达式的理解",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_8-4-说说你对正则表达式的理解","aria-hidden":"true"},"#"),s(" 8.4 说说你对正则表达式的理解")],-1),_c=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"正则表达式是一种用来匹配字符串的强有力的武器"),n("p",null,"它的设计思想是用一种描述性的语言定义一个规则，凡是符合规则的字符串，我们就认为它“匹配”了，否则，该字符串就是不合法的"),n("p",null,[s("在 "),n("code",null,"JavaScript"),s("中，正则表达式也是对象，构建正则表达式有两种方式：")]),n("ol",null,[n("li",null,"字面量创建，其由包含在斜杠之间的模式组成")]),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" re "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token regex"},[n("span",{class:"token regex-delimiter"},"/"),n("span",{class:"token regex-source language-regex"},"\\d+"),n("span",{class:"token regex-delimiter"},"/"),n("span",{class:"token regex-flags"},"g")]),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])]),n("ol",null,[n("li",null,[s("调用"),n("code",null,"RegExp"),s("对象的构造函数")])]),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" re "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"RegExp"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"d+"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"g"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"const"),s(" rul "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"d+"'),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"const"),s(" re1 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"RegExp"),n("span",{class:"token punctuation"},"("),s("rul"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"g"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])]),n("p",null,[s("使用构建函数创建，第一个参数可以是一个变量，遇到特殊字符``需要使用"),n("code",null,"\\"),s("进行转义")])],-1),fc=n("h2",{id:"_8-5-如何判断当前的-js-代码是否在浏览器环境中运行",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_8-5-如何判断当前的-js-代码是否在浏览器环境中运行","aria-hidden":"true"},"#"),s(" 8.5 如何判断当前的 Js 代码是否在浏览器环境中运行")],-1),yc=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[s("如果 Javascript 在浏览器环境中运行，则会有一个全局对象："),n("code",null,"window"),s("。因此，可以通过以下方式判断环境：")]),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[s(),n("span",{class:"token keyword"},"typeof"),s(" window"),n("span",{class:"token punctuation"},"."),s("self ！"),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token string"},'"undefined"'),n("span",{class:"token punctuation"},";"),s(`
 `),n("span",{class:"token comment"},"// 在web worker或者sevice worker下是无法获取到windows全局变量， 所以需要通过self变量判断"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1);function jc(Mc,Pc){const t=o("ExternalLinkIcon");return c(),i("div",null,[r,p,d,k,h,m,w,v,g,x,b,_,f,y,j,M,P,S,I,T,C,B,N,O,E,F,A,J,D,R,L,H,U,z,q,W,X,G,Y,V,K,Q,Z,$,nn,sn,tn,an,en,ln,on,cn,un,rn,pn,dn,kn,hn,mn,wn,vn,gn,xn,bn,_n,fn,yn,jn,Mn,Pn,Sn,In,Tn,Cn,Bn,Nn,On,En,Fn,An,Jn,Dn,Rn,Ln,Hn,Un,zn,qn,Wn,Xn,Gn,Yn,Vn,Kn,Qn,Zn,$n,ns,ss,ts,as,es,ls,os,cs,is,us,rs,ps,ds,ks,hs,ms,ws,vs,gs,xs,bs,_s,fs,ys,js,Ms,Ps,Ss,Is,Ts,Cs,Bs,Ns,Os,Es,Fs,As,Js,Ds,Rs,Ls,Hs,Us,zs,qs,Ws,Xs,Gs,Ys,Vs,Ks,Qs,Zs,$s,nt,st,tt,at,et,lt,ot,ct,it,ut,rt,pt,dt,kt,ht,mt,wt,vt,gt,xt,bt,_t,ft,yt,jt,Mt,Pt,St,It,Tt,Ct,Bt,Nt,Ot,Et,Ft,At,Jt,Dt,n("div",Rt,[Lt,Ht,Ut,zt,n("p",null,[s("返回值"),qt,s("是一个正整数，表示定时器的编号。这个值可以传递给"),n("a",Wt,[Xt,a(t)]),s("来取消该定时器。")]),Gt,n("p",null,[s("重复调用一个函数或执行一个代码片段，每次都精确的隔一段时间推入一个事件（但是，事件的执行时间不一定就不准确，还有可能是这个事件还没执行完毕，下一个事件就来了）。它返回一个 "),Yt,s("，该 ID 唯一地标识时间间隔，因此你可以稍后通过调用 "),n("a",Vt,[Kt,a(t)]),s(" 来移除定时器。")]),Qt,Zt,$t]),na,sa,ta,aa,ea,la,oa,ca,ia,ua,ra,pa,n("div",da,[ka,ha,ma,n("p",null,[wa,s("方法可以完成并发任务， 它接收一个数组，数组的每一项都是一个"),va,s("对象，返回一个"),n("a",ga,[xa,a(t)]),s("实例。当数组中所有的"),ba,s("的状态都达到"),_a,s("的时候，"),fa,s("方法的状态就会变成"),ya,s("，如果有一个状态变成了"),ja,s("，那么"),Ma,s("方法的状态就会变成"),Pa,s("。")]),Sa]),Ia,Ta,Ca,Ba,Na,Oa,Ea,Fa,Aa,Ja,Da,Ra,La,Ha,Ua,za,qa,Wa,Xa,Ga,Ya,Va,Ka,Qa,Za,$a,ne,se,te,ae,ee,le,oe,ce,ie,ue,re,pe,de,ke,he,me,we,ve,ge,xe,be,_e,fe,ye,je,Me,Pe,Se,Ie,Te,Ce,Be,Ne,Oe,Ee,Fe,Ae,Je,De,Re,Le,He,Ue,ze,qe,We,Xe,Ge,Ye,Ve,Ke,Qe,Ze,$e,nl,sl,tl,al,el,ll,ol,cl,il,ul,rl,pl,dl,kl,hl,ml,wl,vl,gl,xl,bl,_l,fl,yl,jl,n("div",Ml,[Pl,Sl,n("p",null,[Il,s(" 操作符的功能类似于 "),Tl,s(" 链式操作符，不同之处在于，在引用为空 ("),n("a",Cl,[s("nullish"),a(t)]),s(" ) ("),n("a",Bl,[Nl,a(t)]),s(" 或者 "),n("a",Ol,[El,a(t)]),s(") 的情况下不会引起错误，该表达式短路返回值是 "),Fl,s("。")]),Al]),Jl,Dl,Rl,Ll,Hl,Ul,zl,ql,Wl,Xl,Gl,Yl,Vl,Kl,Ql,Zl,$l,no,so,to,ao,eo,lo,oo,co,io,uo,ro,po,ko,ho,mo,wo,vo,go,xo,bo,_o,fo,yo,jo,Mo,Po,So,Io,To,Co,Bo,No,n("div",Oo,[Eo,Fo,n("table",null,[Ao,n("tbody",null,[n("tr",null,[Jo,n("td",null,[s("必须。字符串，指定事件名。 "),Do,s(' 不要使用 "on" 前缀。 例如，使用 "click" ,而不是使用 "onclick"。 '),Ro,s(" 所有 HTML DOM 事件，可以查看我们完整的 "),n("a",Lo,[s("HTML DOM Event 对象参考手册"),a(t)]),s("。")])]),Ho,Uo])])]),zo,qo,Wo,Xo,Go,Yo,Vo,Ko,Qo,Zo,$o,n("div",nc,[sc,tc,n("p",null,[ac,ec,s(" 提供了一种异步观察目标元素与其祖先元素或顶级文档视窗("),n("a",lc,[s("viewport"),a(t)]),s(")交叉状态的方法。祖先元素与视窗("),n("a",oc,[s("viewport"),a(t)]),s(")被称为"),cc]),ic]),uc,rc,pc,dc,kc,hc,mc,wc,vc,gc,xc,bc,_c,fc,yc])}const Ic=l(u,[["render",jc],["__file","index.html.vue"]]);export{Ic as default};
