import{_ as p,r as o,o as l,c,b as n,d as s,e,a as t}from"./app-48690364.js";const i={},r=t('<p>在上一篇文章中，我们已经详细了解了开发 Webpack Loader 需要用到的基本技能，包括：Loader 基本形态、如何构建测试环境、如何使用 Loader Context 接口等。接下来我们继续拓展学习一些 Loader 辅助工具，包括：</p><ul><li>了解 <code>loader-utils</code>，并使用 <code>loader-utils</code> 拼接文件名；</li><li>了解 <code>schema-tiles</code>，以及其背后的 <code>ajv</code> 库与 JSON-Schema 协议，学习使用 <code>schema-utils</code> 实现参数校验。</li></ul><p>文章最后还会深入剖析 <code>vue-loader</code> 组件源码，通过实战方式帮助大家更深入理解：如何开发一个成熟 Loader。</p><h2 id="使用-schema-utils" tabindex="-1"><a class="header-anchor" href="#使用-schema-utils" aria-hidden="true">#</a> 使用 <code>schema-utils</code></h2>',4),u=n("strong",null,"配置项",-1),d={href:"https://www.npmjs.com/package/schema-utils",target:"_blank",rel:"noopener noreferrer"},k=t(`<p>因此，若我们开发的 Loader 需要对外暴露配置项，建议也尽量使用这一工具，基本用法：</p><ol><li>安装依赖：</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yarn add -D schema-utils
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>编写配置对象的 Schema 描述，例如：</li></ol><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// options.json</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;properties&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;boolean&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;required&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;additionalProperties&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>在 Loader 中调用 <code>schema-utils</code> 校验配置对象：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> validate <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;schema-utils&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> schema <span class="token keyword">from</span> <span class="token string">&quot;./options.json&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 调用 schema-utils 完成校验</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">loader</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">validate</span><span class="token punctuation">(</span>schema<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> source<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Webpack5 之后还可以借助 Loader Context 的 \`getOptions\` 接口完成校验</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">loader</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getOptions</span><span class="token punctuation">(</span>schema<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> source<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),v={href:"https://github1s.com/Tecvan-fe/webpack-book-samples/blob/main/loader-validate/package.json",target:"_blank",rel:"noopener noreferrer"},m=n("p",null,"之后，若用户传入不符合 Schema 描述的参数对象，会报类似下面这种错误提示：",-1),b=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/077c1aab02994c9a912f3614de6f60c0~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"})],-1),g=n("code",null,"schema-utils",-1),y={href:"https://ajv.js.org/guide/getting-started.html",target:"_blank",rel:"noopener noreferrer"},h=n("p",null,[n("img",{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/461958492c45459bb25cff296651d89e~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"})],-1),f=n("code",null,"ajv",-1),q={href:"https://www.npmjs.com/browse/depended/ajv",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"ajv",-1),_=n("code",null,"ajv",-1),w={href:"https://ajv.js.org/guide/why-ajv.html",target:"_blank",rel:"noopener noreferrer"},j=n("blockquote",null,[n("p",null,[n("code",null,"ajv"),s(" 数据描述格式基础知识：")])],-1),L=n("code",null,"schema-utils",-1),S=n("code",null,"ajv",-1),P={href:"https://ajv.js.org/json-schema.html",target:"_blank",rel:"noopener noreferrer"},R={href:"https://json-schema.org/specification.html",target:"_blank",rel:"noopener noreferrer"},C=n("code",null,"type",-1),N=t(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{
  &quot;type&quot;: &quot;number&quot;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ajv</code> 默认支持七种基本数据类型。</p>`,2),$={href:"https://ajv.js.org/json-schema.html#keywords-for-numbers",target:"_blank",rel:"noopener noreferrer"},W=t("<ul><li><code>maximum</code>、<code>minimum</code>：属性值必须大于等于 <code>minimum</code> ，且小于等于 <code>maximum</code>；</li><li><code>exclusiveMaximum</code>、<code>exclusiveMinimum</code>：属性值必须大于 <code>exclusiveMinimum</code> ，且小于 <code>exclusiveMinimum</code>；</li><li><code>multipleOf</code>：属性值必须为 <code>multipleOf</code> 的整数倍，例如对于 <code>multipleOf = 5</code>，则 <code>10/20/5</code> 均符合预期，但 <code>8/9/1</code> 等不符合预期。</li></ul>",1),O=n("li",null,[n("code",null,"interger"),s("：整数型，与 "),n("code",null,"number"),s(" 类似，也支持上面介绍的 "),n("code",null,"maximum"),s(" 等校验规则；")],-1),Q={href:"https://ajv.js.org/json-schema.html#keywords-for-strings",target:"_blank",rel:"noopener noreferrer"},E=t("<ul><li><code>maxLength</code>、<code>minLength</code>：限定字符串的最大长度、最小长度；</li><li><code>pattern</code>：以正则表达式方式限定字符串内容；</li><li><code>format</code>：声明字符串内容格式，<code>schema-utils</code> 底层调用了 <code>[ajv-formats](https://github.com/ajv-validator/ajv-formats)</code> 插件，开箱支持 <code>date/ipv4/regex/uuid</code> 等格式。</li></ul>",1),F=n("li",null,[n("code",null,"boolean"),s("：bool 值；")],-1),V={href:"https://ajv.js.org/json-schema.html#keywords-for-arrays",target:"_blank",rel:"noopener noreferrer"},J=n("ul",null,[n("li",null,[n("code",null,"maxItems"),s("、"),n("code",null,"minItems"),s("：限定数组的最多、最少的元素数量；")]),n("li",null,[n("code",null,"uniqueItems"),s("：限定数组元素是否必须唯一，不可重复；")]),n("li",null,[n("code",null,"items"),s("：声明数组项的 Schema 描述，数组项内可复用 JSON-Schema 的任意规则，从而形成嵌套定义结构；")])],-1),B=n("li",null,[n("code",null,"null"),s("：空值，常用于复合 "),n("code",null,"type"),s(" 类型，如 "),n("code",null,"type = ['object', 'null']"),s(" 支持传入对象结构或 "),n("code",null,"null"),s(" 值；")],-1),I={href:"https://ajv.js.org/json-schema.html#keywords-for-objects",target:"_blank",rel:"noopener noreferrer"},M=t("<ul><li><code>maxProperties</code> / <code>minProperties</code>：限定对象支持的最多、最少属性数量；</li><li><code>required</code>：声明哪些属性不可为空，例如 <code>required = [&#39;name&#39;, &#39;age&#39;]</code> 时，传入的值必须至少提供 <code>name/age</code> 属性；</li><li><code>properties</code>：定义特定属性的 Schema 描述，与 <code>array</code> 的 <code>items</code> 属性类似，支持嵌套规则，例如：</li></ul>",1),z=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">properties</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">minimum</span><span class="token operator">:</span> <span class="token number">2</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>patternProperties</code>：同样用于定义对象属性的 Schema，但属性名支持正则表达式形式，例如：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">patternProperties</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;^fo.*$&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;^ba.*$&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>additionalProperties</code>：限定对象是否可以提供除 <code>properties</code>、<code>patternProperties</code> 之外的属性；</li></ul><p>除此之外，Schema 节点还支持一些通用的规则字段，包括：</p><ul><li><code>enum</code>：枚举数组，属性值必须完全等于(Deep equal)这些值之一，例如：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// JSON-Schema</span>
<span class="token punctuation">{</span>
  <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;enum&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;fanwenjie&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;tecvan&quot;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token comment">// 有效值：</span>
<span class="token string">&quot;fanwenjie&quot;</span><span class="token operator">/</span><span class="token string">&quot;tecvan&quot;</span>
<span class="token comment">// 无效值，如：</span>
<span class="token string">&quot;foo bar&quot;</span> 等
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),T=n("code",null,"const",-1),D=n("code",null,"const",-1),A=n("code",null,"const",-1),H={href:"https://ajv.js.org/guide/combining-schemas.html#data-reference",target:"_blank",rel:"noopener noreferrer"},U={href:"https://datatracker.ietf.org/doc/rfc6901/",target:"_blank",rel:"noopener noreferrer"},G=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// JSON-Schema</span>
<span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">properties</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token keyword">const</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">$data</span><span class="token operator">:</span> <span class="token string">&quot;1/foo&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// bar 必须等于 foo，如：</span>
<span class="token punctuation">{</span>
  <span class="token string-property property">&quot;foo&quot;</span><span class="token operator">:</span> <span class="token string">&quot;fanwenjie&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;bar&quot;</span><span class="token operator">:</span> <span class="token string">&quot;fanwenjie&quot;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 否则无效：</span>
<span class="token punctuation">{</span>
  <span class="token string-property property">&quot;foo&quot;</span><span class="token operator">:</span> <span class="token string">&quot;fanwenjie&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;bar&quot;</span><span class="token operator">:</span> <span class="token string">&quot;tecvan&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些基础数据类型与校验规则奠定了 <code>ajv</code> 的基础校验能力，我们使用 <code>schema-utils</code> 时大部分时间都需要与之打交道，建议同学们多加学习掌握。</p><blockquote><p>使用 <code>ajv</code> 复合条件指令</p></blockquote>`,3),K=n("code",null,"ajv",-1),X={href:"https://ajv.js.org/json-schema.html#compound-keywords",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://ajv.js.org/json-schema.html#not",target:"_blank",rel:"noopener noreferrer"},Z=n("code",null,'{type: "number", not: {minimum: 3}}',-1),nn={href:"https://ajv.js.org/json-schema.html#anyof",target:"_blank",rel:"noopener noreferrer"},sn=n("code",null,"anyof",-1),an=n("code",null,"css-loader",-1),en=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// css-loader/src/options.json</span>
<span class="token punctuation">{</span>
  <span class="token string-property property">&quot;additionalProperties&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;properties&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;url&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Enables/Disables &#39;url&#39;/&#39;image-set&#39; functions handling (https://github.com/webpack-contrib/css-loader#url).&quot;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&quot;anyOf&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;boolean&quot;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
          <span class="token string-property property">&quot;instanceof&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Function&quot;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// more properties</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;object&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这意味着 <code>css-loader</code> 的 <code>url</code> 配置项只接受 Bool 或函数值。</p>`,2),tn={href:"https://ajv.js.org/json-schema.html#oneof",target:"_blank",rel:"noopener noreferrer"},pn=n("code",null,"oneof",-1),on=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">oneOf</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token literal-property property">maximum</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;integer&quot;</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token comment">// 下述数值符合要求：</span>
<span class="token number">1.1</span>、<span class="token number">2.1</span>、<span class="token number">4</span>、<span class="token number">5</span> 等

<span class="token comment">// 下述数值不符合要求：</span>
<span class="token number">3.5</span>、<span class="token number">2</span>、<span class="token number">1</span> 等
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数值要么是小于等于3的浮点数，要么是大于3的整数，不在此区间的数值如“3.5/2” 等均不符合要求。</p>`,2),ln={href:"https://ajv.js.org/json-schema.html#allof",target:"_blank",rel:"noopener noreferrer"},cn=n("code",null,"allof",-1),rn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">allOf</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token literal-property property">maximum</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;integer&quot;</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token comment">// 下述数值符合要求：</span>
<span class="token number">1</span>、<span class="token number">2</span>、<span class="token number">3</span> 等

<span class="token comment">// 下述数值不符合要求：</span>
<span class="token number">1.1</span>、<span class="token number">4</span>、<span class="token number">5</span> 等
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这要求传入的数值必须小于 3，且必须为整型。</p><ul><li><code>if/then/else</code>：这是一个稍显复杂的三元组复合条件，大致逻辑为：若传入的数值满足 <code>if</code> 条件，则必须同时满足 <code>then</code> 条件；若不满足 <code>if</code> 则必须同时满足 <code>else</code>，其中 <code>else</code> 可选。例如：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">,</span>
  <span class="token keyword">if</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">properties</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">minimum</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">then</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;bar&quot;</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">else</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;baz&quot;</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这意味着，若传入的 <code>foo</code> 属性值大于等于 10 时，则必须同时提供 <code>then</code> 所要求的 <code>bar</code> 属性；否则必须同时提供 <code>else</code> 所要求的 <code>baz</code> 属性。</p><p>总结一下，Webpack 官方选择 <code>ajv</code> 作用配置参数的校验工具，并将其二次封装为 <code>schema-utils</code> 库，供 Webpack 生态下的诸多 Loader、Plugin 使用。</p>`,6),un=n("code",null,"ajv",-1),dn=n("code",null,"ajv",-1),kn=n("code",null,"schema",-1),vn=n("code",null,"$data",-1),mn=n("code",null,"$ref",-1),bn=n("code",null,"definitions",-1),gn={href:"https://github1s.com/webpack/webpack/blob/HEAD/schemas/WebpackOptions.json",target:"_blank",rel:"noopener noreferrer"},yn=n("h2",{id:"使用-loader-utils",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#使用-loader-utils","aria-hidden":"true"},"#"),s(" 使用 "),n("code",null,"loader-utils")],-1),hn={href:"https://github.com/webpack/loader-utils",target:"_blank",rel:"noopener noreferrer"},fn=n("code",null,"getOptions/getCurrentRequest/parseQuery",-1),qn=n("code",null,"loader-utils",-1),xn=t("<p>被裁减后的 <code>loader-utils</code> 仅保留了四个接口：</p><ul><li><code>urlToRequest</code>：用于将模块路径转换为文件路径的工具函数；</li><li><code>isUrlRequest</code>：用于判定字符串是否为模块请求路径；</li><li><code>getHashDigest</code>：用于计算内容 Hash 值；</li><li><code>interpolateName</code>：用于拼接文件名的模板工具；</li></ul><p>翻阅大量 Loader 源码后发现，前三个接口使用率极低，实用性不大，因此本文直接跳过，仅侧重介绍 <code>interpolateName</code> 接口。</p><blockquote><p>使用 <code>interpolateName</code> 拼接文件名</p></blockquote>",4),_n=n("code",null,"[path]/[name]-[hash].js",-1),wn=n("code",null,"output.filename",-1),jn={href:"https://github.com/webpack-contrib/file-loader",target:"_blank",rel:"noopener noreferrer"},Ln=t(`<p>此时可以使用 <code>loader-utils</code> 提供的 <code>interpolateName</code> 方法在 Loader 中以类似 Webpack 的 <code>output.filename</code> 规则拼接资源路径及名称，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// file-loader/src/index.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> interpolateName <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;loader-utils&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">loader</span><span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> context <span class="token operator">=</span> options<span class="token punctuation">.</span>context <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rootContext<span class="token punctuation">;</span>
  <span class="token keyword">const</span> name <span class="token operator">=</span> options<span class="token punctuation">.</span>name <span class="token operator">||</span> <span class="token string">&#39;[contenthash].[ext]&#39;</span><span class="token punctuation">;</span>

  <span class="token comment">// 拼接最终输出的名称</span>
  <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token function">interpolateName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    context<span class="token punctuation">,</span>
    content<span class="token punctuation">,</span>
    <span class="token literal-property property">regExp</span><span class="token operator">:</span> options<span class="token punctuation">.</span>regExp<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> outputPath <span class="token operator">=</span> url<span class="token punctuation">;</span>
  <span class="token comment">// ...</span>

  <span class="token keyword">let</span> publicPath <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">__webpack_public_path__ + </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>outputPath<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token comment">// ...</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> options<span class="token punctuation">.</span>emitFile <span class="token operator">===</span> <span class="token string">&#39;undefined&#39;</span> <span class="token operator">||</span> options<span class="token punctuation">.</span>emitFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>

    <span class="token comment">// 提交、写出文件</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emitFile</span><span class="token punctuation">(</span>outputPath<span class="token punctuation">,</span> content<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> assetInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// ...</span>

  <span class="token keyword">const</span> esModule <span class="token operator">=</span>
    <span class="token keyword">typeof</span> options<span class="token punctuation">.</span>esModule <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span> <span class="token operator">?</span> options<span class="token punctuation">.</span>esModule <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

  <span class="token comment">// 返回模块化内容</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>esModule <span class="token operator">?</span> <span class="token string">&#39;export default&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;module.exports =&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>publicPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> raw <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码的核心逻辑：</p><ol><li>根据 Loader 配置，调用 <code>interpolateName</code> 方法拼接目标文件的完整路径；</li><li>调用上下文 <code>this.emitFile</code> 接口，写出文件；</li><li>返回 <code>module.exports = \${publicPath}</code> ，其它模块可以引用到该文件路径。</li></ol><blockquote><p>提示：除 <code>file-loader</code> 外，<code>css-loader</code>、<code>eslint-loader</code> 都有用到该接口，感兴趣的同学请自行前往查阅源码。</p></blockquote>`,5),Sn=n("code",null,"interpolateName",-1),Pn={href:"https://webpack.js.org/configuration/output/#template-strings",target:"_blank",rel:"noopener noreferrer"},Rn=t('<ul><li><code>[ext]</code>：原始资源文件的扩展名，如 <code>.js</code>；</li><li><code>[name]</code>：原始文件名；</li><li><code>[path]</code>：原始文件相对 <code>context</code> 参数的路径；</li><li><code>[hash]</code>：原始文件的内容 Hash 值，与 <code>output.file</code> 类似同样支持 <code>[hash:length]</code> 指定 Hash 字符串的长度；</li><li><code>[contenthash]</code>：作用、用法都与上述 <code>[hash]</code> 一模一样。</li></ul><h2 id="综合示例-vue-loader" tabindex="-1"><a class="header-anchor" href="#综合示例-vue-loader" aria-hidden="true">#</a> 综合示例：Vue-loader</h2>',2),Cn={href:"https://vue-loader.vuejs.org/",target:"_blank",rel:"noopener noreferrer"},Nn=n("code",null,"vue-loader",-1),$n=t(`<p>先从结构说起，<code>vue-loader</code> 内部实际上包含了三个组件：</p><ul><li><code>lib/index.js</code> 定义的 Normal Loader，负责将 Vue SFC 不同区块转化为 JavaScript <code>import</code> 语句，具体逻辑下面细讲；</li><li><code>lib/loaders/pitcher.js</code> 定义的 Pitch Loader，负责遍历的 <code>rules</code> 数组，拼接出完整的行内引用路径；</li><li><code>lib/plugin.js</code> 定义的插件，负责初始化编译环境，如复制原始 <code>rules</code> 配置等；</li></ul><p>三者协作共同完成对 SFC 的处理，使用时需要用户同时注册 Normal Loader 和 Plugin，如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> VueLoaderPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;vue-loader/lib/plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.vue$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&quot;vue-loader&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">VueLoaderPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>vue-loader</code> 运行过程大致上可以划分为两个阶段：</p><ol><li>预处理阶段：动态修改 Webpack 配置，注入 <code>vue-loader</code> 专用的一系列 <code>module.rules</code>；</li><li>内容处理阶段：Normal Loader 配合 Pitch Loader 完成文件内容转译。</li></ol><h3 id="预处理阶段" tabindex="-1"><a class="header-anchor" href="#预处理阶段" aria-hidden="true">#</a> 预处理阶段</h3><p><code>vue-loader</code> 插件会在 <code>apply</code> 函数中动态修改 Webpack 配置，核心代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">VueLoaderPlugin</span> <span class="token punctuation">{</span>
  <span class="token function">apply</span> <span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>

    <span class="token keyword">const</span> rules <span class="token operator">=</span> compiler<span class="token punctuation">.</span>options<span class="token punctuation">.</span>module<span class="token punctuation">.</span>rules
    <span class="token comment">// ...</span>

    <span class="token keyword">const</span> clonedRules <span class="token operator">=</span> rules
      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">r</span> <span class="token operator">=&gt;</span> r <span class="token operator">!==</span> rawVueRules<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">rawRule</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">cloneRule</span><span class="token punctuation">(</span>rawRule<span class="token punctuation">,</span> refs<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment">// ...</span>

    <span class="token comment">// global pitcher (responsible for injecting template compiler loader &amp; CSS</span>
    <span class="token comment">// post loader)</span>
    <span class="token keyword">const</span> pitcher <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">loader</span><span class="token operator">:</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;./loaders/pitcher&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function-variable function">resourceQuery</span><span class="token operator">:</span> <span class="token parameter">query</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>query<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>
        <span class="token keyword">const</span> parsed <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> parsed<span class="token punctuation">.</span>vue <span class="token operator">!=</span> <span class="token keyword">null</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// replace original rules</span>
    compiler<span class="token punctuation">.</span>options<span class="token punctuation">.</span>module<span class="token punctuation">.</span>rules <span class="token operator">=</span> <span class="token punctuation">[</span>
      pitcher<span class="token punctuation">,</span>
      <span class="token operator">...</span>clonedRules<span class="token punctuation">,</span>
      <span class="token operator">...</span>rules
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">cloneRule</span> <span class="token punctuation">(</span><span class="token parameter">rawRule<span class="token punctuation">,</span> refs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> VueLoaderPlugin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>拆开来看，插件主要完成两个任务：</p><ol><li>初始化并注册 Pitch Loader：代码第16行，定义pitcher对象，指定loader路径为 <code>require.resolve(&#39;./loaders/pitcher&#39;)</code> ，并将pitcher注入到 <code>rules</code> 数组首位。</li></ol><p>这种动态注入的好处是用户不用关注 —— 不去看源码根本不知道还有一个pitcher loader，而且能保证pitcher能在其他rule之前执行，确保运行顺序。</p><ol start="2"><li>复制 <code>rules</code> 配置：代码第8行遍历 <code>compiler.options.module.rules</code> 数组，也就是用户提供的 Webpack 配置中的 <code>module.rules</code> 项，对每个rule执行 <code>cloneRule</code> 方法复制规则对象。</li></ol><p>之后，将 Webpack 配置修改为 <code>[pitcher, ...clonedRules, ...rules]</code> 。感受一下实际效果，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.vue$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&quot;vue-loader&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">&quot;css-loader&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&quot;babel-loader&quot;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&quot;@babel/preset-env&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">targets</span><span class="token operator">:</span> <span class="token string">&quot;defaults&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">VueLoaderPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;[name].css&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里定义了三个 rule，分别对应 vue、js、css 文件。经过 plugin 转换之后的结果大概为：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&quot;/node_modules/vue-loader/lib/loaders/pitcher.js&quot;</span><span class="token punctuation">,</span>
        <span class="token function-variable function">resourceQuery</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token function-variable function">resource</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function-variable function">resourceQuery</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token punctuation">{</span>
            <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&quot;/node_modules/mini-css-extract-plugin/dist/loader.js&quot;</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">{</span> <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&quot;css-loader&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token function-variable function">resource</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function-variable function">resourceQuery</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token punctuation">{</span>
            <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&quot;babel-loader&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
              <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&quot;@babel/preset-env&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">targets</span><span class="token operator">:</span> <span class="token string">&quot;defaults&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token literal-property property">ident</span><span class="token operator">:</span> <span class="token string">&quot;clonedRuleSet-2[0].rules[0].use&quot;</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.vue$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token punctuation">{</span> <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&quot;vue-loader&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token literal-property property">ident</span><span class="token operator">:</span> <span class="token string">&quot;vue-loader-options&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token punctuation">{</span>
            <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&quot;/node_modules/mini-css-extract-plugin/dist/loader.js&quot;</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">{</span> <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&quot;css-loader&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.vue$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token punctuation">{</span>
            <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&quot;babel-loader&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
              <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&quot;@babel/preset-env&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">targets</span><span class="token operator">:</span> <span class="token string">&quot;defaults&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token literal-property property">ident</span><span class="token operator">:</span> <span class="token string">&quot;clonedRuleSet-2[0].rules[0].use&quot;</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>转换之后生成6个rule，按定义的顺序分别为：</p><ol><li>针对 <code>xx.vue&amp;vue</code> 格式路径生效的规则，只用了 <code>vue-loader</code> 的 Pitch 作为 Loader；</li><li>被复制的 CSS 处理规则，<code>use</code> 数组与开发者定义的规则相同；</li><li>被复制的 JS 处理规则，<code>use</code> 数组也跟开发者定义的规则相同；</li><li>开发者定义的 <code>vue-loader</code> 规则，内容及配置都不变；</li><li>开发者定义的css规则，用到 <code>css-loader</code>、<code>mini-css-extract-plugin loader</code>；</li><li>开发者定义的js规则，用到 <code>babel-loader</code>。</li></ol><p>可以看到，第2、3项是从开发者提供的配置中复制过来的，内容相似，只是 <code>cloneRule</code> 在复制过程会给这些规则重新定义 <code>resourceQuery</code> 函数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">cloneRule</span> <span class="token punctuation">(</span><span class="token parameter">rawRule<span class="token punctuation">,</span> refs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> rules <span class="token operator">=</span> ruleSetCompiler<span class="token punctuation">.</span><span class="token function">compileRules</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">clonedRuleSet-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token operator">++</span>uid<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
      <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>rawRule<span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> refs<span class="token punctuation">)</span>
  
    <span class="token keyword">const</span> conditions <span class="token operator">=</span> rules<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rules
      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">rule</span> <span class="token operator">=&gt;</span> rule<span class="token punctuation">.</span>conditions<span class="token punctuation">)</span>
      <span class="token comment">// shallow flat</span>
      <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> prev<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token comment">// ...</span>
  
    <span class="token keyword">const</span> res <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> rawRule<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token function-variable function">resource</span><span class="token operator">:</span> <span class="token parameter">resources</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        currentResource <span class="token operator">=</span> resources
        <span class="token keyword">return</span> <span class="token boolean">true</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function-variable function">resourceQuery</span><span class="token operator">:</span> <span class="token parameter">query</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>query<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>
        <span class="token keyword">const</span> parsed <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>parsed<span class="token punctuation">.</span>vue <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token boolean">false</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>conditions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token boolean">false</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 用import路径的lang参数测试是否适用于当前rule</span>
        <span class="token keyword">const</span> fakeResourcePath <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>currentResource<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>parsed<span class="token punctuation">.</span>lang<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> condition <span class="token keyword">of</span> conditions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// add support for resourceQuery</span>
          <span class="token keyword">const</span> request <span class="token operator">=</span> condition<span class="token punctuation">.</span>property <span class="token operator">===</span> <span class="token string">&#39;resourceQuery&#39;</span> <span class="token operator">?</span> query <span class="token operator">:</span> fakeResourcePath
          <span class="token keyword">if</span> <span class="token punctuation">(</span>condition <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>condition<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment">// ...</span>
  
    <span class="token keyword">return</span> res
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21),Wn=n("code",null,"cloneRule",-1),On=n("code",null,"resourceQuery",-1),Qn={href:"https://webpack.js.org/configuration/module/#ruleresourcequery",target:"_blank",rel:"noopener noreferrer"},En=n("code",null,"test",-1),Fn=n("code",null,"resourceQuery",-1),Vn=n("code",null,"lang",-1),Jn=n("code",null,"/\\.js$/i",-1),Bn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> script <span class="token keyword">from</span> <span class="token string">&quot;./index.vue?vue&amp;type=script&amp;lang=js&amp;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>vue-loader</code> 正是基于这一规则，为不同内容块 (css/js/template) 匹配、复用用户所提供的 rule 设置。</p><h3 id="内容处理阶段" tabindex="-1"><a class="header-anchor" href="#内容处理阶段" aria-hidden="true">#</a> 内容处理阶段</h3><p>插件处理完配置，webpack 运行起来之后，Vue SFC 文件会被多次传入不同的 Loader，经历多次中间形态变换之后才产出最终的 js 结果，大致上可以分为如下步骤：</p><ol><li>路径命中 <code>/\\.vue$/i</code> 规则，调用 <code>vue-loader</code> 生成中间结果 A；</li><li>结果 A 命中 <code>xx.vue?vue</code> 规则，调用 <code>vue-loader</code> Pitch Loader 生成中间结果 B；</li><li>结果 B 命中具体 Loader，直接调用 Loader 做处理。</li></ol><p>过程大致为：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2ba22f6bdf754a00997c607117e6c881~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>举个转换过程的例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 原始代码</span>
<span class="token keyword">import</span> xx <span class="token keyword">from</span> <span class="token string">&#39;./index.vue&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 第一步，命中 vue-loader，转换为：</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> render<span class="token punctuation">,</span> staticRenderFns <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./index.vue?vue&amp;type=template&amp;id=2964abc9&amp;scoped=true&amp;&quot;</span>
<span class="token keyword">import</span> script <span class="token keyword">from</span> <span class="token string">&quot;./index.vue?vue&amp;type=script&amp;lang=js&amp;&quot;</span>
<span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">&quot;./index.vue?vue&amp;type=script&amp;lang=js&amp;&quot;</span>
<span class="token keyword">import</span> style0 <span class="token keyword">from</span> <span class="token string">&quot;./index.vue?vue&amp;type=style&amp;index=0&amp;id=2964abc9&amp;scoped=true&amp;lang=css&amp;&quot;</span>

<span class="token comment">// 第二步，命中 pitcher，转换为：</span>
<span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">&quot;-!../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&amp;type=template&amp;id=2964abc9&amp;scoped=true&amp;&quot;</span>
<span class="token keyword">import</span> mod <span class="token keyword">from</span> <span class="token string">&quot;-!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-2[0].rules[0].use!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&amp;type=script&amp;lang=js&amp;&quot;</span><span class="token punctuation">;</span> 
<span class="token keyword">export</span> <span class="token keyword">default</span> mod<span class="token punctuation">;</span> <span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">&quot;-!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-2[0].rules[0].use!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&amp;type=script&amp;lang=js&amp;&quot;</span>
<span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">&quot;-!../../node_modules/mini-css-extract-plugin/dist/loader.js!../../node_modules/css-loader/dist/cjs.js!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&amp;type=style&amp;index=0&amp;id=2964abc9&amp;scoped=true&amp;lang=css&amp;&quot;</span>

<span class="token comment">// 第三步，根据行内路径规则按序调用loader</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每一步的细节，请继续往下看。</p><blockquote><p>第一次执行 vue-loader</p></blockquote><p>在运行阶段，根据配置规则， Webpack 首先将原始的 SFC 内容传入 <code>vue-loader</code>，例如对于下面的代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// main.js</span>
<span class="token keyword">import</span> xx <span class="token keyword">from</span> <span class="token string">&#39;index.vue&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// index.vue 代码</span>
<span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;root&quot;</span><span class="token operator">&gt;</span>hello world<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>style scoped<span class="token operator">&gt;</span>
<span class="token punctuation">.</span>root <span class="token punctuation">{</span>
  font<span class="token operator">-</span>size<span class="token operator">:</span> 12px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时<strong>第一次</strong>执行 vue-loader ，执行如下逻辑：</p><ol><li>调用 <code>@vue/component-compiler-utils</code> 包的parse函数，将SFC 文本解析为AST对象；</li><li>遍历 AST 对象属性，转换为特殊的引用路径；</li><li>返回转换结果。</li></ol><p>对于上述 <code>index.vue</code> 内容，转换结果为：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> render<span class="token punctuation">,</span> staticRenderFns <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./index.vue?vue&amp;type=template&amp;id=2964abc9&amp;scoped=true&amp;&quot;</span>
<span class="token keyword">import</span> script <span class="token keyword">from</span> <span class="token string">&quot;./index.vue?vue&amp;type=script&amp;lang=js&amp;&quot;</span>
<span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">&quot;./index.vue?vue&amp;type=script&amp;lang=js&amp;&quot;</span>
<span class="token keyword">import</span> style0 <span class="token keyword">from</span> <span class="token string">&quot;./index.vue?vue&amp;type=style&amp;index=0&amp;id=2964abc9&amp;scoped=true&amp;lang=css&amp;&quot;</span>


<span class="token comment">/* normalize component */</span>
<span class="token keyword">import</span> normalizer <span class="token keyword">from</span> <span class="token string">&quot;!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js&quot;</span>
<span class="token keyword">var</span> component <span class="token operator">=</span> <span class="token function">normalizer</span><span class="token punctuation">(</span>
  script<span class="token punctuation">,</span>
  render<span class="token punctuation">,</span>
  staticRenderFns<span class="token punctuation">,</span>
  <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token string">&quot;2964abc9&quot;</span><span class="token punctuation">,</span>
  <span class="token keyword">null</span>
  
<span class="token punctuation">)</span>

<span class="token operator">...</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> component<span class="token punctuation">.</span>exports
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，这里并没有真的处理 block 里面的内容，而是简单地针对不同类型的内容块生成 import 语句：</p><ul><li>Script：<code>&quot;./index.vue?vue&amp;type=script&amp;lang=js&amp;&quot;</code></li><li>Template: <code>&quot;./index.vue?vue&amp;type=template&amp;id=2964abc9&amp;scoped=true&amp;&quot;</code></li><li>Style: <code>&quot;./index.vue?vue&amp;type=style&amp;index=0&amp;id=2964abc9&amp;scoped=true&amp;lang=css&amp;&quot;</code></li></ul><p>这些路径都对应原始的 <code>.vue</code> 路径基础上增加了 <code>vue</code> 标志符及 type、lang 等参数。</p><blockquote><p>执行 Pitch Loader</p></blockquote><p>如前所述，<code>vue-loader</code> 插件会在预处理阶段插入带 <code>resourceQuery</code> 函数的 Pitch Loader：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> pitcher <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">loader</span><span class="token operator">:</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;./loaders/pitcher&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function-variable function">resourceQuery</span><span class="token operator">:</span> <span class="token parameter">query</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>query<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>
    <span class="token keyword">const</span> parsed <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> parsed<span class="token punctuation">.</span>vue <span class="token operator">!=</span> <span class="token keyword">null</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中， <code>resourceQuery</code> 函数命中 <code>xx.vue?vue</code> 格式的路径，也就是说上面 <code>vue-loader</code> 转换后的 import 路径会被 Pitch Loader 命中，做进一步处理。Pitch Loader 的逻辑比较简单，做的事情也只是转换 import 路径：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> qs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;querystring&#39;</span><span class="token punctuation">)</span>
<span class="token operator">...</span>

<span class="token keyword">const</span> <span class="token function-variable function">dedupeESLintLoader</span> <span class="token operator">=</span> <span class="token parameter">loaders</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">shouldIgnoreCustomBlock</span> <span class="token operator">=</span> <span class="token parameter">loaders</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>

<span class="token comment">// 正常的loader阶段，直接返回结果</span>
module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token parameter">code</span> <span class="token operator">=&gt;</span> code

module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span><span class="token function-variable function">pitch</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">remainingRequest</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> options <span class="token operator">=</span> loaderUtils<span class="token punctuation">.</span><span class="token function">getOptions</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> cacheDirectory<span class="token punctuation">,</span> cacheIdentifier <span class="token punctuation">}</span> <span class="token operator">=</span> options
  <span class="token comment">// 关注点1： 通过解析 resourceQuery 获取loader参数</span>
  <span class="token keyword">const</span> query <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceQuery<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token keyword">let</span> loaders <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>loaders

  <span class="token comment">// if this is a language block request, eslint-loader may get matched</span>
  <span class="token comment">// multiple times</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>query<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// if this is an inline block, since the whole file itself is being linted,</span>
    <span class="token comment">// remove eslint-loader to avoid duplicate linting.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.vue$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourcePath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      loaders <span class="token operator">=</span> loaders<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">l</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span><span class="token function">isESLintLoader</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// This is a src import. Just make sure there&#39;s not more than 1 instance</span>
      <span class="token comment">// of eslint present.</span>
      loaders <span class="token operator">=</span> <span class="token function">dedupeESLintLoader</span><span class="token punctuation">(</span>loaders<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// remove self</span>
  loaders <span class="token operator">=</span> loaders<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>isPitcher<span class="token punctuation">)</span>

  <span class="token comment">// do not inject if user uses null-loader to void the type (#1239)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>loaders<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>isNullLoader<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> <span class="token function-variable function">genRequest</span> <span class="token operator">=</span> <span class="token parameter">loaders</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span> 
  <span class="token punctuation">}</span>

  <span class="token comment">// Inject style-post-loader before css-loader for scoped CSS and trimming</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>query<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">style</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> cssLoaderIndex <span class="token operator">=</span> loaders<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>isCSSLoader<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cssLoaderIndex <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token operator">...</span>
      <span class="token keyword">return</span> query<span class="token punctuation">.</span>module
        <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">export { default } from  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>request<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">; export * from </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>request<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
        <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">export * from </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>request<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// for templates: inject the template compiler &amp; optional cache</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>query<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">template</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>​<span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token comment">// console.log(request)</span>
    <span class="token comment">// the template compiler uses esm exports</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">export * from </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>request<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">}</span>

  <span class="token comment">// if a custom block has no other matching loader other than vue-loader itself</span>
  <span class="token comment">// or cache-loader, we should ignore it</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>query<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">custom</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">&amp;&amp;</span> <span class="token function">shouldIgnoreCustomBlock</span><span class="token punctuation">(</span>loaders<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token function">genRequest</span><span class="token punctuation">(</span>loaders<span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">import mod from </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>request<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">; export default mod; export * from </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>request<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>核心功能是遍历用户定义的rule数组，拼接出完整的行内引用路径，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 开发代码：</span>
<span class="token keyword">import</span> xx <span class="token keyword">from</span> <span class="token string">&#39;index.vue&#39;</span>
<span class="token comment">// 第一步，通过vue-loader转换成带参数的路径</span>
<span class="token keyword">import</span> script <span class="token keyword">from</span> <span class="token string">&quot;./index.vue?vue&amp;type=script&amp;lang=js&amp;&quot;</span>
<span class="token comment">// 第二步，在 pitcher 中解读loader数组的配置，并将路径转换成完整的行内路径格式</span>
<span class="token keyword">import</span> mod <span class="token keyword">from</span> <span class="token string">&quot;-!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-2[0].rules[0].use!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&amp;type=script&amp;lang=js&amp;&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>第二次执行vue-loader</p></blockquote><p>通过上面 <code>vue-loader</code> -&gt; Pitch Loader 处理后，会得到一个新的行内路径，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> mod <span class="token keyword">from</span> <span class="token string">&quot;-!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-2[0].rules[0].use!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&amp;type=script&amp;lang=js&amp;&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以这个 import 语句为例，之后 Webpack 会按照下述逻辑运行：</p><ul><li>调用 <code>vue-loader</code> 处理 <code>index.js</code> 文件；</li><li>调用 <code>babel-loader</code> 处理上一步返回的内容。</li></ul><p>这就给了 <code>vue-loader</code> 第二次执行的机会，再回过头来看看 <code>vue-loader</code> 的代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>

  <span class="token keyword">const</span> <span class="token punctuation">{</span>
    target<span class="token punctuation">,</span>
    request<span class="token punctuation">,</span>
    minimize<span class="token punctuation">,</span>
    sourceMap<span class="token punctuation">,</span>
    rootContext<span class="token punctuation">,</span>
    resourcePath<span class="token punctuation">,</span>
    resourceQuery <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span> <span class="token operator">=</span> loaderContext<span class="token punctuation">;</span>
  <span class="token comment">// ...</span>

  <span class="token keyword">const</span> descriptor <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    source<span class="token punctuation">,</span>
    <span class="token literal-property property">compiler</span><span class="token operator">:</span> options<span class="token punctuation">.</span>compiler <span class="token operator">||</span> <span class="token function">loadTemplateCompiler</span><span class="token punctuation">(</span>loaderContext<span class="token punctuation">)</span><span class="token punctuation">,</span>
    filename<span class="token punctuation">,</span>
    sourceRoot<span class="token punctuation">,</span>
    <span class="token literal-property property">needMap</span><span class="token operator">:</span> sourceMap<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// if the query has a type field, this is a language block request</span>
  <span class="token comment">// e.g. foo.vue?type=template&amp;id=xxxxx</span>
  <span class="token comment">// and we will return early</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>incomingQuery<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">selectBlock</span><span class="token punctuation">(</span>
      descriptor<span class="token punctuation">,</span>
      loaderContext<span class="token punctuation">,</span>
      incomingQuery<span class="token punctuation">,</span>
      <span class="token operator">!</span><span class="token operator">!</span>options<span class="token punctuation">.</span>appendExtension
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//...</span>
  <span class="token keyword">return</span> code<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>VueLoaderPlugin <span class="token operator">=</span> plugin<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二次运行时由于路径已经带上了 <code>type</code> 参数，会命中上面第26行的判断语句，进入 <code>selectBlock</code> 函数，这个函数的逻辑很简单：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">selectBlock</span> <span class="token punctuation">(</span>
  <span class="token parameter">descriptor<span class="token punctuation">,</span>
  loaderContext<span class="token punctuation">,</span>
  query<span class="token punctuation">,</span>
  appendExtension</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// template</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>query<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">template</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>appendExtension<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      loaderContext<span class="token punctuation">.</span>resourcePath <span class="token operator">+=</span> <span class="token string">&#39;.&#39;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>descriptor<span class="token punctuation">.</span>template<span class="token punctuation">.</span>lang <span class="token operator">||</span> <span class="token string">&#39;html&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    loaderContext<span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span>
      <span class="token keyword">null</span><span class="token punctuation">,</span>
      descriptor<span class="token punctuation">.</span>template<span class="token punctuation">.</span>content<span class="token punctuation">,</span>
      descriptor<span class="token punctuation">.</span>template<span class="token punctuation">.</span>map
    <span class="token punctuation">)</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// script</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>query<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">script</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>appendExtension<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      loaderContext<span class="token punctuation">.</span>resourcePath <span class="token operator">+=</span> <span class="token string">&#39;.&#39;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>descriptor<span class="token punctuation">.</span>script<span class="token punctuation">.</span>lang <span class="token operator">||</span> <span class="token string">&#39;js&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    loaderContext<span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span>
      <span class="token keyword">null</span><span class="token punctuation">,</span>
      descriptor<span class="token punctuation">.</span>script<span class="token punctuation">.</span>content<span class="token punctuation">,</span>
      descriptor<span class="token punctuation">.</span>script<span class="token punctuation">.</span>map
    <span class="token punctuation">)</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// styles</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>query<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">style</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">&amp;&amp;</span> query<span class="token punctuation">.</span>index <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> style <span class="token operator">=</span> descriptor<span class="token punctuation">.</span>styles<span class="token punctuation">[</span>query<span class="token punctuation">.</span>index<span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>appendExtension<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      loaderContext<span class="token punctuation">.</span>resourcePath <span class="token operator">+=</span> <span class="token string">&#39;.&#39;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>style<span class="token punctuation">.</span>lang <span class="token operator">||</span> <span class="token string">&#39;css&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    loaderContext<span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span>
      <span class="token keyword">null</span><span class="token punctuation">,</span>
      style<span class="token punctuation">.</span>content<span class="token punctuation">,</span>
      style<span class="token punctuation">.</span>map
    <span class="token punctuation">)</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// custom</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>query<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;custom&#39;</span> <span class="token operator">&amp;&amp;</span> query<span class="token punctuation">.</span>index <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> block <span class="token operator">=</span> descriptor<span class="token punctuation">.</span>customBlocks<span class="token punctuation">[</span>query<span class="token punctuation">.</span>index<span class="token punctuation">]</span>
    loaderContext<span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span>
      <span class="token keyword">null</span><span class="token punctuation">,</span>
      block<span class="token punctuation">.</span>content<span class="token punctuation">,</span>
      block<span class="token punctuation">.</span>map
    <span class="token punctuation">)</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，就可以完成从 Vue SFC 文件中抽取特定 Block 内容，并复用用户定义的其它 Loader 加载这些 Block。</p><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h3><p>综上，我们可以将 <code>vue-loader</code> 的核心逻辑总结为：</p><ol><li>首先给原始文件路径增加不同的参数，后续配合 <code>resourceQuery</code> 参数就可以分开处理这些内容，这样的实现相比于一次性处理，逻辑更清晰简洁，更容易理解；</li><li>经过 Normal Loader、Pitch Loader 两个阶段后，SFC 内容会被转化为 <code>import xxx from &#39;!-babel-loader!vue-loader?xxx&#39;</code> 格式的引用路径，以此复用用户配置。</li></ol><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>`,41),In=n("code",null,"schema-utils",-1),Mn=n("code",null,"loader-utils",-1),zn=n("code",null,"vue-loader",-1),Tn={href:"https://juejin.cn/book/7115598540721618944/section/7119035404715556879",target:"_blank",rel:"noopener noreferrer"},Dn=t('<ul><li>Loader 主要负责将资源内容转译为 Webpack 能够理解、处理的标准 JavaScript 形式，所以通常需要做 Loader 内通过 <code>return</code>/<code>this.callback</code> 方式返回翻译结果；</li><li>Loader Context 提供了许多实用接口，我们可以借助这些接口读取上下文信息，或改变 Webpack 运行状态(相当于产生 Side Effect，例如通过 <code>emitFile</code> 接口)；</li><li>假若我们开发的 Loader 需要对外提供配置选项，建议使用 <code>schema-utils</code> 校验配置参数是否合法；</li><li>假若 Loader 需要生成额外的资源文件，建议使用 <code>loader-utils</code> 拼接产物路径；</li><li>执行时，Webpack 会按照 <code>use</code> 定义的顺序从前到后执行 Pitch Loader，从后到前执行 Normal Loader，我们可以将一些预处理逻辑放在 Pitch 中(如 <code>vue-loader</code>)；</li><li>等等。</li></ul><p>最后，建议你同步翻阅一些知名 Loader 的源码(如：css-loader/babel-loader/file-loader 等)，结合这两篇文章介绍的知识点与方法论，透彻理解 Webpack Loader 的开发方式。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题" aria-hidden="true">#</a> 思考题</h2><p>总结一下，<code>vue-loader</code> 中的 Pitch Loader 与 Normal Loader 分别做了什么事情？两者是怎么串联协作起来的？</p>',4);function An(Hn,Un){const a=o("ExternalLinkIcon");return l(),c("div",null,[r,n("p",null,[s("Webpack，以及 Webpack 生态下的诸多 Loader、Plugin 基本上都会提供若干“"),u,s("”，供用户调整组件的运行逻辑，这些组件内部通常都会使用 "),n("a",d,[s("schema-utils"),e(a)]),s(" 工具库校验用户传入的配置是否满足要求。")]),k,n("blockquote",null,[n("p",null,[s("提示：示例代码已上传到小册 "),n("a",v,[s("仓库"),e(a)]),s("。")])]),m,b,n("p",null,[g,s(" 的校验能力很强，能够完美支撑起 Webpack 生态下非常复杂的参数校验需求，但官方文档非常语焉不详，翻阅源码后发现，它底层主要依赖于 "),n("a",y,[s("ajv"),e(a)]),s(" ，这是一个应用广泛、功能强大且性能优异的校验工具：")]),h,n("blockquote",null,[n("p",null,[s("提示："),f,s(" 在对象校验、JSON 序列化/反序列化方面的性能表现非常突出，许多知名"),n("a",q,[s("开源框架"),e(a)]),s(" 如：ESLint、fast-json-stringify、middy、swagger、tailwind 等底层都依赖于 "),x,s("，值得我们学习、复用到业务项目中。")])]),n("p",null,[_,s(" 功能非常完备，基本上已经覆盖了“使用 JSON 描述对象约束”的所有场景，我们不可能在一篇文章里介绍所有细节，所以我下面只摘要介绍一些比较重要的能力与实例，更多信息建议参考 "),n("a",w,[s("官网"),e(a)]),s("。")]),j,n("p",null,[L,s(" 内部使用 "),S,s(" 的 "),n("a",P,[s("JSON-Schema"),e(a)]),s(" 模式实现参数校验，而 JSON-Schema 是一种以 JSON 格式描述数据结构的 "),n("a",R,[s("公共规范"),e(a)]),s("，使用时至少需要提供 "),C,s(" 参数，如：")]),N,n("ul",null,[n("li",null,[n("a",$,[s("number"),e(a)]),s("：数值型，支持整数、浮点数，支持如下校验规则： "),W]),O,n("li",null,[n("a",Q,[s("string"),e(a)]),s("：字符串型，支持如下校验规则： "),E]),F,n("li",null,[n("a",V,[s("array"),e(a)]),s("：数组型，支持如下校验属性： "),J]),B,n("li",null,[n("a",I,[s("object"),e(a)]),s("：对象结构，这是一个比较负责的结构，支持如下校验属性： "),M])]),z,n("ul",null,[n("li",null,[T,s("：静态数值，属性值必须完全等于 "),D,s(" 定义，单独看 "),A,s(" 似乎作用不大，但配合 "),n("a",H,[s("$data"),e(a)]),s(" 指令的 "),n("a",U,[s("JSON-Pointer"),e(a)]),s(" 能力，可以实现关联相等的效果，例如：")])]),G,n("p",null,[s("除上述介绍的基本类型与基础校验规则外，"),K,s(" 还提供了若干"),n("a",X,[s("复合校验指令"),e(a)]),s("：")]),n("ul",null,[n("li",null,[n("a",Y,[s("not"),e(a)]),s("：数值必须不符合该条件，例如："),Z,s(" 时，传入数值必须小于 3；")]),n("li",null,[n("a",nn,[s("anyof"),e(a)]),s("：数值必须满足 "),sn,s(" 条件之一，这是一个非常实用的指令，例如在 "),an,s(" 中：")])]),en,n("ul",null,[n("li",null,[n("a",tn,[s("oneof"),e(a)]),s("：数值必须满足且只能满足 "),pn,s(" 条件之一，例如：")])]),on,n("ul",null,[n("li",null,[n("a",ln,[s("allof"),e(a)]),s("：数值必须满足 "),cn,s(" 指定的所有条件，例如：")])]),rn,n("p",null,[s("而上面介绍的基础类型、类型校验、复合校验规则等内容是 "),un,s(" 非常基础且重要的知识点，三者协作组成 "),dn,s(" 校验 "),kn,s(" 的框架结构，除此之外还有许多增强 Schema 表述能力的增强指令，包括："),vn,s("、"),mn,s("、"),bn,s(" 等，篇幅关系这里不一一列举。同学们也可以参考 Webpack 官方编写的 "),n("a",gn,[s("Schema 文件"),e(a)]),s("，学习各种校验规则的写法。")]),yn,n("p",null,[s("在 Webpack5 之前，"),n("a",hn,[s("loader-utils"),e(a)]),s(" 是一个非常重要的 Loader 开发辅助工具，为开发者提供了诸如 "),fn,s(" 等核心接口，这些接口被诸多 Loader 广泛使用，到 Webpack5 之后干脆将这部分能力迁移到 Loader Context，致使 "),qn,s(" 被大幅裁减简化。")]),xn,n("p",null,[s("Webpack 支持以类似 "),_n,s(" 方式设定 "),wn,s(" 即输出文件的命名，这一层规则通常不需要关注，但在编写类似 "),n("a",jn,[s("webpack-contrib/file-loader"),e(a)]),s(" 这种自行输出产物文件的 Loader 时，需要由开发者自行处理产物路径逻辑。")]),Ln,n("p",null,[Sn,s(" 功能稍弱于 Webpack 的 "),n("a",Pn,[s("Template String"),e(a)]),s(" 规则，仅支持如下占位符：")]),Rn,n("p",null,[s("接下来，我们再结合 "),n("a",Cn,[s("vue-loader"),e(a)]),s(" 源码进一步学习 Loader 开发的进阶技巧。"),Nn,s(" 是一个综合性很强的示例，它借助 Webpack 与组件的一系列特性巧妙地解决了：如何区分 Vue SFC 不同代码块，并复用其它 Loader 处理不同区块的内容？")]),$n,n("p",null,[Wn,s(" 内部定义的 "),On,s(" 函数对应 "),n("a",Qn,[s("module.rules.resourceQuery"),e(a)]),s(" 配置项，与我们经常用的 "),En,s(" 差不多，都用于判断资源路径是否适用这个rule。这里 "),Fn,s(" 核心逻辑就是取出路径中的lang参数，伪造一个以 "),Vn,s(" 结尾的路径，传入rule的condition中测试路径名对该rule是否生效，例如下面这种会命中 "),Jn,s(" 规则：")]),Bn,n("p",null,[s("本文主要介绍如何使用 "),In,s(" 与 "),Mn,s(" 工具实现更多 Loader 进阶特性，并进一步剖析 "),zn,s(" 源码，讲解如何构建一个成熟的 Webpack Loader 组件。结合《"),n("a",Tn,[s("Loader 开发基础：从开源项目学到的 Loader 开发技巧"),e(a)]),s("》一文，我们可以总结一些常用的开发方法论，包括：")]),Dn])}const Kn=p(i,[["render",An],["__file","di20zhang—Loaderkaifajinjie：ruheyonghaoLoaderkuozhankaifagongju.html.vue"]]);export{Kn as default};
