import{_ as o,r as e,o as c,c as i,b as n,d as s,e as p,a as t}from"./app-48690364.js";const l={},u=t(`<p>Webpack 对外提供了 Loader 与 Plugin 两种扩展方式，其中 Loader 职责比较单一，开发方法比较简单容易理解；Plugin 则功能强大，借助 Webpack 数量庞大的 Hook，我们几乎能改写 Webpack 所有特性，但也伴随着巨大的开发复杂度。</p><p>学习如何开发 Webpack 插件并不是一件简单的事情，所以我打算用 3 个连续的章节，力求足够全面地剖析如何开发一款成熟、稳定的插件。本文将聚焦在插件代码形态、插件架构、Hook 与上下文参数等内容，同时深入剖析若干常用插件的实现原理，帮你构建起关于 Webpack 插件开发的基本认知。</p><h2 id="插件简介" tabindex="-1"><a class="header-anchor" href="#插件简介" aria-hidden="true">#</a> 插件简介</h2><p>从形态上看，插件通常是一个带有 <code>apply</code> 函数的类，如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">SomePlugin</span> <span class="token punctuation">{</span>
    <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),k=n("code",null,"apply",-1),r=n("code",null,"compiler",-1),d=n("code",null,"compiler",-1),m={href:"https://webpack.js.org/api/plugins/",target:"_blank",rel:"noopener noreferrer"},v=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">SomePlugin</span> <span class="token punctuation">{</span>
  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>thisCompilation<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">&quot;SomePlugin&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">compilation</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      compilation<span class="token punctuation">.</span><span class="token function">addModule</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例中的 <code>compiler</code> 为 Hook 挂载的对象；<code>thisCompilation</code> 为 Hook 名称；后面调用的 <code>tap</code> 为调用方式，支持 <code>tap/tapAsync/tapPromise</code> 等，后面章节会展开细讲。</p><p>在 Webpack 运行过程中，随着构建流程的推进会触发各个钩子回调，并传入上下文参数(例如上例回调函数中的 <code>compilation</code> 对象)，插件可以通过调用上下文接口、修改上下文状态等方式「篡改」构建逻辑，从而将扩展代码「勾入」到 Webpack 构建流程中。</p><blockquote><p>提示：网上不少资料将 Webpack 的插件架构归类为“事件/订阅”模式，我认为这种归纳有失偏颇。订阅模式是一种<strong>松散耦合结构</strong>，发布器只是在特定时机发布事件消息，订阅者并不或者很少与事件源直接发生交互。</p></blockquote><p>基于 Hook 这一设计，开发插件时我们需要重点关注两个问题：</p><ol><li>针对插件需求，我们应该使用什么钩子？</li><li>选定钩子后，我怎么跟上下文参数交互？</li></ol><blockquote><p>什么时候会触发什么钩子：</p></blockquote><p>Webpack5 暴露了多达 200+ 个 Hook，基本上覆盖了整个构建流程的所有环节 —— 这也就意味着通过编写插件，我们几乎可以改写 Webpack 的所有执行逻辑。问题是，我们在什么情况下该用什么钩子？这就需要了解 Webpack 内部几个核心对象，以及各对象下 Hook 的触发时机，例如：</p>`,8),b={href:"https://webpack.js.org/api/compiler-hooks/",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"compiler",-1),h=n("code",null,"compiler",-1),f=n("p",null,[n("img",{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/407f8596a5b24203b091a51b5fca6726~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"})],-1),y={href:"https://webpack.js.org/api/compilation-hooks/",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"watch = true",-1),_=n("code",null,"compilation",-1),j=n("code",null,"compilation",-1),q=n("p",null,[n("img",{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/08c337e97f664f3da4d301a3a5404f7d~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"})],-1),x={href:"https://webpack.js.org/api/normalmodulefactory-hooks/",target:"_blank",rel:"noopener noreferrer"},W={href:"https://webpack.js.org/api/parser/",target:"_blank",rel:"noopener noreferrer"},H=t("<p>由此可见，Webpack Hook 与构建流程强相关，使用时你结合上面流程图分析 Hook 对应的流程环节，以及这个环节主要完成了什么工作，可以借助 Hook 做出哪些修改，等等。</p><blockquote><p>使用 Hook 上下文接口：</p></blockquote><p>Webpack Hook 有两个重点，一是上面介绍的触发时机；二是触发时传递的上下文参数。例如：</p><ul><li><code>compiler.hooks.compilation</code> ： <ul><li>时机：Webpack 刚启动完，创建出 <code>compilation</code> 对象后触发；</li><li>参数：当前编译的 <code>compilation</code> 对象。</li></ul></li><li><code>compiler.hooks.make</code>： <ul><li>时机：正式开始构建时触发；</li><li>参数：同样是当前编译的 <code>compilation</code> 对象。</li></ul></li><li><code>compilation.hooks.optimizeChunks</code> ： <ul><li>时机： <code>seal</code> 函数中，<code>chunk</code> 集合构建完毕后触发；</li><li>参数：<code>chunks</code> 集合与 <code>chunkGroups</code> 集合。</li></ul></li><li><code>compiler.hooks.done</code>： <ul><li>时机：编译完成后触发；</li><li>参数： <code>stats</code> 对象，包含编译过程中的各类统计信息。</li></ul></li></ul><p>每个钩子传递的上下文参数不同，但主要包含如下几种类型(以 Webpack5 为例)：</p>",5),S={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/Compilation.js",target:"_blank",rel:"noopener noreferrer"},D=t("<ul><li><code>addModule</code>：用于添加模块，例如 Module 遍历出依赖之后，就会调用该接口将新模块添加到构建需求中；</li><li><code>addEntry</code>：添加新的入口模块，效果与直接定义 <code>entry</code> 配置相似；</li><li><code>emitAsset</code>：用于添加产物文件，效果与 Loader Context 的 <code>emitAsset</code> 相同；</li><li><code>getDependencyReference</code>：从给定模块返回对依赖项的引用，常用于计算模块引用关系；</li><li>等等。</li></ul>",1),P={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/Compiler.js",target:"_blank",rel:"noopener noreferrer"},C=t("<li><code>createChildCompiler</code>：创建子 <code>compiler</code> 对象，子对象将继承原始 Compiler 对象的所有配置数据；</li><li><code>createCompilation</code>：创建 <code>compilation</code> 对象，可以借此实现并行编译；</li><li><code>close</code>：结束编译；</li><li><code>getCache</code>：获取缓存接口，可借此复用 Webpack5 的缓存功能；</li>",4),A=n("code",null,"getInfrastructureLogger",-1),E={href:"https://webpack.js.org/configuration/other-options/#infrastructurelogging",target:"_blank",rel:"noopener noreferrer"},M=n("li",null,"等等。",-1),R={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/NormalModule.js",target:"_blank",rel:"noopener noreferrer"},I=n("code",null,"NormalModule/RawModule/ContextModule",-1),L=n("code",null,"NormalModule",-1),z=t("<ul><li><code>identifier</code>：读取模块的唯一标识符；</li><li><code>getCurrentLoader</code>：获取当前正在执行的 Loader 对象；</li><li><code>originalSource</code>：读取模块原始内容；</li><li><code>serialize/deserialize</code>：模块序列化与反序列化函数，用于实现持久化缓存，一般不需要调用；</li><li><code>issuer</code>：模块的引用者；</li><li><code>isEntryModule</code>：用于判断该模块是否为入口文件；</li><li>等等。</li></ul>",1),O={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/Chunk.js",target:"_blank",rel:"noopener noreferrer"},N=t("<ul><li><code>addModule</code>：添加模块，之后该模块会与 Chunk 中其它模块一起打包，生成最终产物；</li><li><code>removeModule</code>：删除模块；</li><li><code>containsModule</code>：判断是否包含某个特定模块；</li><li><code>size</code>：推断最终构建出的产物大小；</li><li><code>hasRuntime</code>：判断 Chunk 中是否包含运行时代码；</li><li><code>updateHash</code>：计算 Hash 值。</li></ul>",1),T={href:"https://webpack.js.org/api/stats/",target:"_blank",rel:"noopener noreferrer"},F=t('<blockquote><p>提示：无论官网还是社区，我都没有找到完整介绍这些对象的，足够好、足够完备的文档，且 Webpack 本身还在不断升级迭代，许多内部对象的接口并不稳定，建议读者使用时直接翻阅相关版本源码。</p></blockquote><p>篇幅关系，我们只对部分重要接口做了简单介绍，后面我还会讲解各种常用插件源码，展开介绍部分常见接口的使用方法。</p><blockquote><p>小结</p></blockquote><p>总结一下，Webpack 的插件体系与平常所见的 <code>订阅/发布</code> 模式差别很大，是一种非常强耦合的设计，Hook 回调由 Webpack 决定何时，以何种方式执行；而在 Hook 回调内部可以通过调用上下文 API 、修改上下文状态等方式，对 Webpack 原定流程产生 Side Effect。</p><p>所以想熟练编写插件，需要深入理解常见 Hook 调用时机，以及各类上下文参数的用法，这方面没有太多学习资料，我建议直接翻阅相关开源插件源码，下面我会抽几个比较经典、逻辑简单、容易理解的插件，剖析如何灵活使用 Hook。</p><h2 id="实例剖析-imagemin-webpack-plugin" tabindex="-1"><a class="header-anchor" href="#实例剖析-imagemin-webpack-plugin" aria-hidden="true">#</a> 实例剖析：<code>imagemin-webpack-plugin</code></h2><blockquote><p>学习如何遍历、修改最终产物文件</p></blockquote>',7),B={href:"https://github1s.com/Klathmon/imagemin-webpack-plugin",target:"_blank",rel:"noopener noreferrer"},V={href:"https://webpack.js.org/api/compiler-hooks/#emit",target:"_blank",rel:"noopener noreferrer"},G={href:"https://github.com/imagemin/imagemin",target:"_blank",rel:"noopener noreferrer"},J=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">ImageminPlugin</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// init options</span>
  <span class="token punctuation">}</span>

  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">const</span> <span class="token function-variable function">onEmit</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">compilation<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// ...</span>
      <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
        <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">optimizeWebpackImages</span><span class="token punctuation">(</span>throttle<span class="token punctuation">,</span> compilation<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">optimizeExternalImages</span><span class="token punctuation">(</span>throttle<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>emit<span class="token punctuation">.</span><span class="token function">tapAsync</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>name<span class="token punctuation">,</span> onEmit<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">optimizeWebpackImages</span><span class="token punctuation">(</span><span class="token parameter">throttle<span class="token punctuation">,</span> compilation</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token function">optimizeExternalImages</span><span class="token punctuation">(</span><span class="token parameter">throttle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码主要用到 <code>compiler.hooks.emit</code> 钩子，该钩子在 Webpack 完成代码构建与打包操作，准备将产物发送到输出目录之前执行，我们可以在此修改产物内容，如上例 <code>optimizeWebpackImages</code> 函数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">ImageminPlugin</span> <span class="token punctuation">{</span>
  <span class="token function">optimizeWebpackImages</span><span class="token punctuation">(</span><span class="token parameter">throttle<span class="token punctuation">,</span> compilation</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token comment">// 用于判断是否对特定文件做图像压缩操作</span>
        testFunction<span class="token punctuation">,</span>
        <span class="token comment">// 缓存目录</span>
        cacheFolder
      <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options
  
    <span class="token comment">// 遍历 \`assets\` 产物数组</span>
      <span class="token keyword">return</span> <span class="token function">map</span><span class="token punctuation">(</span>compilation<span class="token punctuation">.</span>assets<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">asset<span class="token punctuation">,</span> filename</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 读取产物内容</span>
        <span class="token keyword">const</span> assetSource <span class="token operator">=</span> asset<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">testFunction</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> assetSource<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 尝试从缓存中读取</span>
          <span class="token keyword">let</span> optimizedImageBuffer <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getFromCacheIfPossible</span><span class="token punctuation">(</span>cacheFolder<span class="token punctuation">,</span> assetSource<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// 调用 \`imagemin\` 压缩图片</span>
            <span class="token keyword">return</span> <span class="token function">optimizeImage</span><span class="token punctuation">(</span>assetSource<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
  
          <span class="token comment">// 之后，使用优化版本替换原始文件</span>
          compilation<span class="token punctuation">.</span>assets<span class="token punctuation">[</span>filename<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RawSource</span><span class="token punctuation">(</span>optimizedImageBuffer<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里面的关键逻辑是：</p><ol><li>遍历 <code>compilation.assets</code> 产物列表，调用 <code>asset.source()</code> 方法读取产物内容；</li><li>调用 <code>imagemin</code> 压缩图片；</li><li>修改 <code>compilation.assets</code>，使用优化后的图片 <code>RawSource</code> 对象替换原始 <code>asset</code> 对象。</li></ol><p>至此完成文件压缩操作。</p>`,6),K=n("code",null,"Source",-1),Q={href:"https://github1s.com/webpack/webpack-sources/blob/HEAD/lib/index.js",target:"_blank",rel:"noopener noreferrer"},U=n("code",null,"RawSource/ConcatSource",-1),X=n("h2",{id:"实例剖析-eslint-webpack-plugin",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#实例剖析-eslint-webpack-plugin","aria-hidden":"true"},"#"),s(" 实例剖析："),n("code",null,"eslint-webpack-plugin")],-1),Y=n("blockquote",null,[n("p",null,"学习如何提交错误日志")],-1),Z={href:"https://github1s.com/webpack-contrib/eslint-webpack-plugin",target:"_blank",rel:"noopener noreferrer"},$=n("code",null,"error/warn",-1),nn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">ESLintWebpackPlugin</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>

  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>run<span class="token punctuation">.</span><span class="token function">tapPromise</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> options<span class="token punctuation">,</span> wanted<span class="token punctuation">,</span> exclude<span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">async</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token parameter">compiler<span class="token punctuation">,</span> options<span class="token punctuation">,</span> wanted<span class="token punctuation">,</span> exclude</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>compilation<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">compilation</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token punctuation">(</span><span class="token punctuation">{</span> lint<span class="token punctuation">,</span> report<span class="token punctuation">,</span> threads <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">linter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>key<span class="token punctuation">,</span> options<span class="token punctuation">,</span> compilation<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">const</span> files <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

      <span class="token comment">// 单个模块成功编译后触发</span>
      compilation<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>succeedModule<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> resource <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 判断是否需要检查该文件</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>
          <span class="token function">isMatch</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> wanted<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">dot</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
          <span class="token operator">!</span><span class="token function">isMatch</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> exclude<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">dot</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">lint</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// 所有模块构建完毕后触发</span>
      compilation<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>finishModules<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>files<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> threads <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">lint</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// 等待检查结果</span>
      compilation<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>additionalAssets<span class="token punctuation">.</span><span class="token function">tapPromise</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>key<span class="token punctuation">,</span> processResults<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">processResults</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码用到如下 Hook：</p><ul><li><code>compiler.hooks.compilation</code>：Compiler 环境初始化完毕，创建出 <code>compilation</code> 对象，准备开始执行构建前触发；</li><li><code>compilation.hooks.succeedModule</code>：Webpack 完成单个「模块」的读入、运行 Loader、AST 分析、依赖分析等操作后触发；</li><li><code>compilation.hooks.finishModules</code>：Webpack 完成「所有」模块的读入、运行 Loader、依赖分析等操作后触发；</li><li><code>compilation.hooks.additionalAssets</code>：构建、打包完毕后触发，通常用于为编译创建附加资产。</li></ul>`,3),sn=n("code",null,"compilation.hooks.succeedModule",-1),an=n("code",null,"lint",-1),pn={href:"https://www.npmjs.com/package/eslint-loader",target:"_blank",rel:"noopener noreferrer"},tn=t(`<p>其次，借助 <code>compilation.hooks.additionalAssets</code> 钩子，在所有模块处理完毕后读取检查结果 —— 即 <code>processResults</code> 函数，核心代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">processResults</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> errors<span class="token punctuation">,</span> warnings <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">report</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>warnings <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>options<span class="token punctuation">.</span>failOnWarning<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    compilation<span class="token punctuation">.</span>warnings<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>warnings<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>warnings <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>failOnWarning<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    compilation<span class="token punctuation">.</span>errors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>warnings<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>errors <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>failOnError<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    compilation<span class="token punctuation">.</span>errors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>errors<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>errors <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>options<span class="token punctuation">.</span>failOnError<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    compilation<span class="token punctuation">.</span>warnings<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>errors<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码读取 ESLint 执行结果(<code>report</code> 函数)，并使用 <code>compilation</code> 的 <code>errors</code> 与 <code>warnings</code> 数组提交错误/警告信息，这种方式只会输出错误信息，不会中断编译流程，运行效果如：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3ad70295b2214f3ebb77b9024d41ae1f~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h2 id="实例剖析-defineplugin" tabindex="-1"><a class="header-anchor" href="#实例剖析-defineplugin" aria-hidden="true">#</a> 实例剖析：<code>DefinePlugin</code></h2><blockquote><p>学习在插件中如何与 AST 结构交互</p></blockquote>`,6),on={href:"https://github1s.com/webpack/webpack",target:"_blank",rel:"noopener noreferrer"},en={href:"https://webpack.js.org/plugins/define-plugin/",target:"_blank",rel:"noopener noreferrer"},cn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> DefinePlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;webpack&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> baseConfig <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token constant">PROD</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token constant">VERSION</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token string">&quot;12.13.0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后，Webpack 会帮我们替换掉代码中所有 <code>DefinePlugin</code> 声明的属性值，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 源码：</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">PROD</span><span class="token punctuation">,</span> <span class="token constant">VERSION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 构建结果：</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">&quot;5fa3b9&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),ln=n("code",null,"DefinePlugin",-1),un={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/DefinePlugin.js",target:"_blank",rel:"noopener noreferrer"},kn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">DefinePlugin</span> <span class="token punctuation">{</span>
  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>compilation<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span>
      <span class="token string">&quot;DefinePlugin&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">(</span><span class="token parameter">compilation<span class="token punctuation">,</span> <span class="token punctuation">{</span> normalModuleFactory <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> <span class="token function-variable function">handler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">parser</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token comment">// 递归处理 \`DefinePlugin\` 参数</span>
          <span class="token keyword">const</span> <span class="token function-variable function">walkDefinitions</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">definitions<span class="token punctuation">,</span> prefix</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>definitions<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
              <span class="token keyword">const</span> code <span class="token operator">=</span> definitions<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
              <span class="token keyword">if</span> <span class="token punctuation">(</span>isObject <span class="token comment">/*...*/</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 递归处理对象属性</span>
                <span class="token function">walkDefinitions</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> prefix <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">applyObjectDefine</span><span class="token punctuation">(</span>prefix <span class="token operator">+</span> key<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
              <span class="token function">applyDefineKey</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token function">applyDefine</span><span class="token punctuation">(</span>prefix <span class="token operator">+</span> key<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span><span class="token punctuation">;</span>

          <span class="token comment">// 替换基本类型的表达式值</span>
          <span class="token keyword">const</span> <span class="token function-variable function">applyDefine</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> code</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isTypeof<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token comment">// 借助 expression 钩子替换内容</span>
              parser<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>expression<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">&quot;DefinePlugin&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">expr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token comment">/*...*/</span>
              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 处理 \`&#39;typeof window&#39;: JSON.stringify(&#39;object&#39;),\` 场景</span>
            parser<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>typeof<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">&quot;DefinePlugin&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">expr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
              <span class="token comment">/*...*/</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span><span class="token punctuation">;</span>

          <span class="token comment">// 替换引用类型的表达式值</span>
          <span class="token keyword">const</span> <span class="token function-variable function">applyObjectDefine</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> obj</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// ...</span>
            parser<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>expression<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">&quot;DefinePlugin&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">expr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
              <span class="token comment">/*...*/</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span><span class="token punctuation">;</span>

          <span class="token function">walkDefinitions</span><span class="token punctuation">(</span>definitions<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token comment">// 监听 \`parser\` 钩子</span>
        normalModuleFactory<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>parser
          <span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&quot;javascript/auto&quot;</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">&quot;DefinePlugin&quot;</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
        normalModuleFactory<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>parser
          <span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&quot;javascript/dynamic&quot;</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">&quot;DefinePlugin&quot;</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
        normalModuleFactory<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>parser
          <span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&quot;javascript/esm&quot;</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">&quot;DefinePlugin&quot;</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> DefinePlugin<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>提示：可能有同学注意到，上例代码中出现 <code>xxx.hooks.xxx.for(condition).tap</code> 形式的调用，这里的 <code>for</code> 函数可以理解为 Hook 的过滤条件，仅在满足 <code>condition</code> 时触发，后面章节会详细讲解。</p></blockquote><p>核心逻辑：</p>`,3),rn=t("<li>使用 <code>normalModuleFactory.hooks.parser</code> 钩子(上例 48 行)，在 Webpack 创建出代码解析器 <code>Parser</code> 对象后执行 <code>handler</code> 函数。注意，此时还没有执行代码转 AST 操作；</li><li><code>walkDefinitions</code> 函数中递归遍历 <code>DefinePlugin</code> 参数对象，为每一个属性注册 <code>parser.hooks.expression</code> 钩子回调，该钩子会在 Webpack 遍历 AST 过程遇到表达式语句时触发；</li>",2),dn=n("code",null,"parser.hooks.expression",-1),mn=n("code",null,"Dependency",-1),vn={href:"https://github1s.com/webpack/webpack/blob/HEAD/lib/Module.js#L494",target:"_blank",rel:"noopener noreferrer"},bn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">toConstantDependency</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">parser<span class="token punctuation">,</span> value<span class="token punctuation">,</span> runtimeRequirements</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">constDependency</span><span class="token punctuation">(</span><span class="token parameter">expr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConstDependency</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> expr<span class="token punctuation">.</span>range<span class="token punctuation">,</span> runtimeRequirements<span class="token punctuation">)</span><span class="token punctuation">;</span>
    dep<span class="token punctuation">.</span>loc <span class="token operator">=</span> expr<span class="token punctuation">.</span>loc<span class="token punctuation">;</span>
    <span class="token comment">// 创建静态依赖对象，替换 loc 指定位置内容</span>
    parser<span class="token punctuation">.</span>state<span class="token punctuation">.</span>module<span class="token punctuation">.</span><span class="token function">addPresentationalDependency</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">applyDefine</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> code</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  parser<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>expression<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">&quot;DefinePlugin&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">expr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> strCode <span class="token operator">=</span> <span class="token function">toCode</span><span class="token punctuation">(</span><span class="token comment">/*...*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token comment">/*...*/</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">/*...*/</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">toConstantDependency</span><span class="token punctuation">(</span>parser<span class="token punctuation">,</span> strCode<span class="token punctuation">)</span><span class="token punctuation">(</span>expr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后，Webpack 会借助 Template 接口将上述 <code>Dependency</code> 打包进 Chunk 中，替换对应位置(<code>loc</code>)代码：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4eaa247a0d034d6dbcc4a5624573311c~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>这是一个功能效果看起来简单，但实现特别复杂的例子，底层需要使用 <code>Parser</code> 钩子遍历 AST 结构，之后借助 <code>Dependency</code> 声明代码依赖，最后借助 Template 替换代码内容，过程中已经涉及到许多 Webpack 底层对象。</p><p>这正是学习开发 Webpack 插件的难点，有时候你不仅仅需要了解每一个 Hook 的时机与作用、如何与上下文参数交互，还需要了解 Webpack 底层许多类型的实现、作用、接口等等，才能写出符合预期的功能，而 Webpack 是一个极度复杂、庞大的工具，这些具体知识点太多太碎，几乎不可能一一枚举。不过，我们可以换一种方式，从更高更抽象的视角审视 Webpack 插件架构，从“道”的角度加深理解。</p><h2 id="插件架构综述" tabindex="-1"><a class="header-anchor" href="#插件架构综述" aria-hidden="true">#</a> 插件架构综述</h2><p>前端社区里很多有名的框架都各自有一套插件架构，例如 axios、quill、vscode、webpack、vue、rollup 等等。插件架构灵活性高，扩展性强，但通常架构复杂度更高，学习曲线更陡峭。插件架构至少需要解决三个方面的问题：</p><ul><li><strong>接口</strong>：需要提供一套逻辑接入方法，让开发者能够将代码插入特定环节，变更原始逻辑；</li><li><strong>输入</strong>：如何将上下文信息高效传导给插件；</li><li><strong>输出</strong>：插件内部通过何种方式影响整套运行体系。</li></ul>`,8),gn={href:"https://github.com/webpack/tapable",target:"_blank",rel:"noopener noreferrer"},hn=t(`<ol><li>编译过程的特定节点以钩子形式，通知插件此刻正在发生什么事情；</li><li>通过 tapable 提供的回调机制，以参数方式传递上下文信息；</li><li>在上下文参数对象中附带了很多存在 Side Effect 的交互接口，插件可以通过这些接口改变。</li></ol><p>这一切都离不开 tapable，举例来说：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Compiler</span> <span class="token punctuation">{</span>
  <span class="token comment">// 在构造函数中，先初始化钩子对象</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>hooks <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">thisCompilation</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">SyncHook</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;compilation&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;params&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 特定时机触发特定钩子</span>
    <span class="token keyword">const</span> compilation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Compilation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">.</span><span class="token function">thisCompilation</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>compilation<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Compiler</code> 类型内部定义了 <code>thisCompilation</code> 钩子，并在 <code>compilation</code> 创建完毕后发布事件消息，插件开发者就可以基于这个钩子获取到最新创建出的 <code>compilation</code> 对象：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">SomePlugin</span> <span class="token punctuation">{</span>
  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>thisCompilation<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">&quot;SomePlugin&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">compilation<span class="token punctuation">,</span> params</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 上下文信息： compilation、params</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>钩子回调传递的 <code>compilation/params</code> 参数，就是 Webpack 希望传递给插件的上下文信息，也是插件能拿到的输入。不同钩子会传递不同的上下文对象，这一点在钩子被创建的时候就定下来了，比如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Compiler</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>hooks <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span>SyncBailHook<span class="token punctuation">&lt;</span>Compilation<span class="token punctuation">&gt;</span><span class="token punctuation">}</span></span> */</span>
            <span class="token literal-property property">shouldEmit</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">SyncBailHook</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;compilation&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span>AsyncSeriesHook<span class="token punctuation">&lt;</span>Stats<span class="token punctuation">&gt;</span><span class="token punctuation">}</span></span> */</span>
            <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">AsyncSeriesHook</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;stats&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span>AsyncSeriesHook<span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">}</span></span> */</span>
            <span class="token literal-property property">additionalPass</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">AsyncSeriesHook</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span>AsyncSeriesHook<span class="token punctuation">&lt;</span>Compiler<span class="token punctuation">&gt;</span><span class="token punctuation">}</span></span> */</span>
            <span class="token literal-property property">beforeRun</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">AsyncSeriesHook</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;compiler&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span>AsyncSeriesHook<span class="token punctuation">&lt;</span>Compiler<span class="token punctuation">&gt;</span><span class="token punctuation">}</span></span> */</span>
            <span class="token literal-property property">run</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">AsyncSeriesHook</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;compiler&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span>AsyncSeriesHook<span class="token punctuation">&lt;</span>Compilation<span class="token punctuation">&gt;</span><span class="token punctuation">}</span></span> */</span>
            <span class="token literal-property property">emit</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">AsyncSeriesHook</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;compilation&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span>AsyncSeriesHook<span class="token punctuation">&lt;</span>string<span class="token punctuation">,</span> Buffer<span class="token punctuation">&gt;</span><span class="token punctuation">}</span></span> */</span>
            <span class="token literal-property property">assetEmitted</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">AsyncSeriesHook</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;file&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;content&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span>AsyncSeriesHook<span class="token punctuation">&lt;</span>Compilation<span class="token punctuation">&gt;</span><span class="token punctuation">}</span></span> */</span>
            <span class="token literal-property property">afterEmit</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">AsyncSeriesHook</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;compilation&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>shouldEmit</code> 会被传入 <code>compilation</code> 参数；</li><li><code>done</code> 会被传入 <code>stats</code> 参数；</li><li>……</li></ul><p>这一设计贯穿 Webpack 整个执行过程，几乎无处不在，我们可以借此介入 Webpack 的运行逻辑。</p><p>插件架构的灵魂就在于，框架自身只负责实现最关键的核心流程，其它具体功能都尽量交给具体插件实现，包括 Webpack 仓库内也会内置非常多插件(如 <code>DefinePlugin/EntryPlugin</code> 等)，这就为我们提供了非常充分的学习素材。因此，我的建议是：</p><ol><li>先透彻理解上述 Webpack 插件架构的设计逻辑，捋清楚 Webpack 主流程与 Hook 之间的关系；</li><li>尝试用本文第一节提及的若干常见 Hook 与上下文参数对象编写一些示例，对这些钩子有一个感性认知；</li><li>尝试分析一些常用但不是很复杂的插件源码，例如文中提到的 <code>eslint-webpack-plugin</code> 等，或者：<code>terser-webpack-plugin</code>、<code>stylelint-webpack-plugin</code> 等，从中学习一些编写插件的常见方法；</li><li>最后，在实际开发时参考相关插件源码实现，带着问题与明确目标，逐行分析插件实现逻辑。</li></ol><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>综上，Webpack 插件在代码形态上是一个带 <code>apply</code> 方法的对象，我们可以在 <code>apply</code> 函数中注册各式各样的 Hook 回调，监听对应事件，之后在回调中修改上下文状态，达到干预 Webpack 构建逻辑的效果。</p><p>由此可见，编写插件时大部分工作都围绕 Hook 展开，因此我们需要理解构建过程中的不同环节会触发什么 Hook、对应传递什么上下文参数、如何与上下文参数对象交互等，而学习这些知识最高效的方式，我认为是阅读、分析各种开源插件源码。例如文章中提及的：</p><ul><li>从 <code>imagemin-webpack-plugin</code> 学习：如何借助 <code>assets</code> 数组修改最终产物内容；</li><li>从 <code>eslint-webpack-plugin</code> 学习：如何提交错误信息；</li><li>从 <code>DefinePlugin</code> 学习：如何与 AST 结构交互。</li></ul><p>相信通过阅读这些内容，你已经对 Webpack 插件的形态与开发方式有了一个基本理解，下一章节我会继续抽象一些常见的开发用例，包括：校验插件参数、提交日志、搭建自动化测试环境等，帮助你进一步掌握插件的开发方法。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题" aria-hidden="true">#</a> 思考题</h2><p>插件架构设计算是许多优秀软件工程项目的标配，那么作为对比，Rollup 又是怎么实现插件扩展能力的呢？感兴趣的同学可以参考相关源码，交叉学习。</p>`,18);function fn(yn,wn){const a=e("ExternalLinkIcon");return c(),i("div",null,[u,n("p",null,[s("Webpack 在启动时会调用插件对象的 "),k,s(" 函数，并以参数方式传递核心对象 "),r,s(" ，以此为起点，插件内可以注册 "),d,s(" 对象及其子对象的钩子("),n("a",m,[s("Hook"),p(a)]),s(")回调，例如：")]),v,n("ul",null,[n("li",null,[n("a",b,[s("Compiler"),p(a)]),s("：全局构建管理器，Webpack 启动后会首先创建 "),g,s(" 对象，负责管理配置信息、Loader、Plugin 等。从启动构建到结束，"),h,s(" 大致上会触发如下钩子：")])]),f,n("ul",null,[n("li",null,[n("a",y,[s("Compilation"),p(a)]),s("：单次构建过程的管理器，负责遍历模块，执行编译操作；当 "),w,s(" 时，每次文件变更触发重新编译，都会创建一个新的 "),_,s(" 对象；"),j,s(" 生命周期中主要触发如下钩子：")])]),q,n("ul",null,[n("li",null,[s("此外，还有 "),n("a",x,[s("Module"),p(a)]),s("、Resolver、"),n("a",W,[s("Parser"),p(a)]),s("、Generator 等关键类型，也都相应暴露了许多 Hook。")])]),H,n("ul",null,[n("li",null,[n("a",S,[s("complation"),p(a)]),s(" 对象：构建管理器，使用率非常高，主要提供了一系列与单次构建相关的接口，包括： "),D]),n("li",null,[n("a",P,[s("compiler"),p(a)]),s(" 对象：全局构建管理器，提供如下接口： "),n("ul",null,[C,n("li",null,[A,s("：获取"),n("a",E,[s("日志对象"),p(a)]),s("；")]),M])]),n("li",null,[n("a",R,[s("module"),p(a)]),s(" 对象：资源模块，有诸如 "),I,s(" 等子类型，其中 "),L,s(" 使用频率较高，提供如下接口： "),z]),n("li",null,[n("a",O,[s("chunk"),p(a)]),s(" 对象：模块封装容器，提供如下接口： "),N]),n("li",null,[n("a",T,[s("stats"),p(a)]),s(" 对象：构建过程收集到的统计信息，包括模块构建耗时、模块依赖关系、产物文件列表等。")])]),F,n("p",null,[n("a",B,[s("imagemin-webpack-plugin"),p(a)]),s(" 是一个用于实现图像压缩的插件，它会在 Webpack 完成前置的代码分析构建，提交("),n("a",V,[s("emit"),p(a)]),s(")产物时，找出所有图片资源并调用 "),n("a",G,[s("imagemin"),p(a)]),s(" 压缩图像。核心逻辑：")]),J,n("blockquote",null,[n("p",null,[s("提示："),K,s(" 是 Webpack 内代表资源内容的类，由 "),n("a",Q,[s("webpack-source"),p(a)]),s(" 库实现，支持 "),U,s(" 等子类型，用于实现文件读写、合并、修改、Sourcemap 等操作。")])]),X,Y,n("p",null,[n("a",Z,[s("eslint-webpack-plugin"),p(a)]),s(" 是一个基于 ESLint 实现的代码风格检查插件，它的实现比较巧妙，一是使用多个 Hook，在不同时间点执行 Lint 检查；二是复用 Webpack 内置的 "),$,s(" 方法提交代码风格问题。核心逻辑：")]),nn,n("p",null,[s("其中，比较重要的是借助 "),sn,s(" 钩子，在每个模块处理完毕之后立即通过 "),an,s(" 函数添加非阻塞代码检查任务，相比于过去的 "),n("a",pn,[s("eslint-loader"),p(a)]),s(" 的阻塞式执行，这种方式能够提高 ESLint 的并发度，效率更高。")]),tn,n("p",null,[n("a",on,[s("DefinePlugin"),p(a)]),s(" 是 Webpack 官方实现的，用于构建时注入预定义常量的插件，先简单回顾一下"),n("a",en,[s("用法"),p(a)]),s("，如：")]),cn,n("p",null,[ln,s(" 的 "),n("a",un,[s("底层实现"),p(a)]),s(" 比较复杂，需要遍历 AST 找出变量名对应的代码位置之后再做替换，插件核心结构：")]),kn,n("ol",null,[rn,n("li",null,[s("在 "),dn,s(" 回调中创建新的 "),mn,s(" 对象，调用 "),n("a",vn,[s("addPresentationalDependency"),p(a)]),s(" 添加为模块依赖：")])]),bn,n("p",null,[s("针对这些问题，webpack 基于 "),n("a",gn,[s("tapable"),p(a)]),s(" 实现了：")]),hn])}const jn=o(l,[["render",fn],["__file","di21zhang—chajiankaifajichu：shilipouxichajianjibenxingtaiyujiagouluoji.html.vue"]]);export{jn as default};
