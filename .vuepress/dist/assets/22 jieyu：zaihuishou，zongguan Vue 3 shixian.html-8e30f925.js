import{_ as o,r as c,o as p,c as t,b as e,d as n,e as d,a}from"./app-48690364.js";const i={},l=a(`<h2 id="再看-vue-3-设计" tabindex="-1"><a class="header-anchor" href="#再看-vue-3-设计" aria-hidden="true">#</a> 再看 Vue 3 设计</h2><p>前面的章节，我们分别学完了 <code>渲染器</code>、<code>响应式原理</code>、<code>编译器</code>、<code>内置组件</code>、<code>特殊元素&amp;指令</code> 这五大部分的内容，也大致清楚了各个部分的设计细节和原理，现在，让我们再把这些知识串联，回顾本课程开篇中的那张核心运行机制图：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4b410850bd4d4e2198e62e4c38bf8b92~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>相信这个时候我们再看这张图，相对而言理解起来就比较容易了。那么让我们再来宏观的梳理一遍整体的运作流程吧：</p><h3 id="_1-渲染器" tabindex="-1"><a class="header-anchor" href="#_1-渲染器" aria-hidden="true">#</a> 1. 渲染器</h3><p>我们通常在使用 <code>Vue.js</code> 的时候，最开始的入口使用大多数场景如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;./App.vue&#39;</span>

<span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们通过 <code>createApp</code> 的方式创建了一个渲染器对象 <code>renderer</code>，所谓渲染器，就是是用来执行渲染任务的，另外也能够进行框架跨平台能力的渲染任务，而这里我们讨论的是渲染器针对于浏览器端渲染成真实 <code>DOM</code> 的场景。</p><p>渲染器在初始化挂载阶段，通过渲染器内部的 <code>patch</code> 函数进行初始化挂载任务。将编译器输出的 <code>render</code> 函数执行后生成 <code>vnode</code> 节点，然后再将 <code>vnode</code> 渲染成真实的 <code>DOM</code> 挂载到指定容器中。</p><p>渲染器在更新阶段，则会根据编译器中输出的标记 <code>PatchFlags</code> 和 <code>dynamicChildren</code> 在 <code>patch</code> 时做到靶向更新。</p><h3 id="_2-编译器" tabindex="-1"><a class="header-anchor" href="#_2-编译器" aria-hidden="true">#</a> 2. 编译器</h3><p>编译器的作用简单概括就是将源代码 <code>A</code> 转换成目标代码 <code>B</code>。<code>Vue.js</code> 的源代码就是我们写的 <code>template</code> 函数，编译器的目标代码就是渲染函数：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4f117f1e4ba14881b011a6d16bcacc72~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt=""></p><p>编译器的核心流程经历了：</p><ol><li><code>parse</code>：接收字符串模板作为参数，并将解析后得到的 <code>模版 AST</code> 作为返回值返回。</li><li><code>transform</code>：接受 <code>模板 AST</code> 做为参数，语义化转换为 <code>JavaScript AST</code> 并返回。</li><li><code>generate</code>：接受 <code>JavaScript AST</code> 生成渲染函数并返回。</li></ol><h3 id="_3-响应式" tabindex="-1"><a class="header-anchor" href="#_3-响应式" aria-hidden="true">#</a> 3. 响应式</h3><p>响应式是 <code>Vue.js</code> 的核心部分，简而言之，响应式就是为了实现对需要侦测的状态数据进行监听，当状态数据变化时反馈给与状态数据相关的副作用函数重新执行。</p><p><code>Vue 3</code> 通过 <code>proxy API</code> 完成了对响应式状态数据的定义，当在副作用函数中访问响应式数据时，进行副作用函数的收集（这里的副作用函数也可以是渲染函数）。当触发响应式状态数据更新时，再重新执行副作用函数。</p><p>针对于渲染函数（<code>render</code>）这种副作用函数而言，在重新执行的时候，则会比对新老的 <code>vnode</code> 节点情况进行选择性更新（<code>diff</code>）。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>vnode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 销毁组件</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>container<span class="token punctuation">.</span>_vnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">unmount</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span>_vnode<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建或者更新组件</span>
    <span class="token function">patch</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span>_vnode <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> container<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 缓存 vnode 节点，表示已经渲染</span>
  container<span class="token punctuation">.</span>_vnode <span class="token operator">=</span> vnode
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-性能优化" tabindex="-1"><a class="header-anchor" href="#_4-性能优化" aria-hidden="true">#</a> 4. 性能优化</h3><p>另外值得一提的是，<code>Vue 3</code> 不管是在编译时还是在运行时都做了大量的性能优化。例如在编译时，<code>Vue 3</code> 通过标记 <code>/*#__PURE__*/</code> 来为打包工具提供良好的 <code>Tree-Shaking</code> 机制，通过 <code>静态提升</code> 机制，避免了大量静态节点的重复渲染执行；在运行时又通过批量队列更新机制优化了更新性能，通过 <code>PatchFlags</code> 和 <code>dynamicChildren</code> 进行了 <code>diff</code> 的靶向更新...</p><p>通过这些精细的设计，我们可以在不了解 <code>Vue.js</code> 运行原理的基础上，写出性能卓越的前端代码，降低了开发者的心智负担。</p><h2 id="一些说明" tabindex="-1"><a class="header-anchor" href="#一些说明" aria-hidden="true">#</a> 一些说明</h2>`,24),u=e("code",null,"Vue 3",-1),r=e("code",null,"Vue 3",-1),k=e("code",null,"Vue 2.x",-1),h=e("code",null,"Vue 2.x",-1),v=e("code",null,"Vue 3",-1),m=e("code",null,"Vue 3",-1),_=e("code",null,"Vue 2.x",-1),b={href:"https://github.com/muwoo/blogs",target:"_blank",rel:"noopener noreferrer"},f=a('<h2 id="最后" tabindex="-1"><a class="header-anchor" href="#最后" aria-hidden="true">#</a> 最后</h2><p>漫无目的的干啃源码的过程是非常枯燥乏味的，非常容易让我们半途而废，但是如果大家一起组队打 “boss”，并且在打怪升级的过程中有大量的沟通和交流，那么这个过程将会变得非常有趣，吸取的知识点也会更加饱满和充实。本课程内的一些章节结尾会有一些问题的引入，这些问题并没有直接给出答案，也希望在学习源码的你可以给到一些自己的见解和小伙伴们充分沟通讨论。</p><p>另外，无论何时我们都应该保持一颗辩证的心态看待问题，任何理论上的观点和技术实现都可能不是最优解，所以我们可以在阅读源码和课程的过程中，多问问自己 <code>“为什么要这么实现？还有没有最优的解决方案？”</code>。如果有新的体验和心得，也可在评论区里面留言，让组队打怪的队友一同思考，增加 “游戏” 的趣味性！</p><p><code>Vue 3</code> 是非常优秀的开源框架，里面的每行代码都汇集了业界最顶尖大佬的思考，如果我们的没有串联上下文和设计背景，可能有些晦涩难懂的代码读一遍很难理解其中的设计意图，所以非常建议小伙伴在看本课程的同时，自己打开 <code>Vue 3</code> 源码，对于晦涩难懂的地方，一边看一边调试。</p><p>最后，给阅读完本小册的你，点个赞吧👍🏻！</p>',5);function g(V,x){const s=c("ExternalLinkIcon");return p(),t("div",null,[l,e("p",null,[n("本课程的内容核心是介绍 "),u,n(" 设计和实现原理，帮助小伙伴们构建起对 "),r,n(" 运行机制的广度和深度认知。课程里面呢有部分内容会和 "),k,n(" 进行一些比较，如果小伙伴们不熟悉不了解 "),h,n(" 的设计原理，可以选择性屏蔽这块的知识点，只看 "),v,n(" 的相关内容就可以了，毕竟 "),m,n(" 才是面向未来的。但如果你对 "),_,n(" 的设计和实现原理非常感兴趣，想再深入了解一下的话，也可以参考阅读作者之前相关体系的开源文章："),e("a",b,[n("Vue 2.x 技术揭秘。"),d(s)])]),f])}const j=o(i,[["render",g],["__file","22 jieyu：zaihuishou，zongguan Vue 3 shixian.html.vue"]]);export{j as default};
