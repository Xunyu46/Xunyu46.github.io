import{_ as p,r as e,o,c,b as s,d as n,e as i,a}from"./app-48690364.js";const l={},u=a(`<p>在前面两节的内容中，我们一起手写了一个迷你版的 no-bundle 开发服务，也就是 Vite 开发阶段的 Dev Server，而在生产环境下面，处于页面性能的考虑，Vite 还是选择进行打包(bundle)，并且在底层使用 Rollup 来完成打包的过程。在接下来的篇幅中，我们就来实现一个 JavaScript Bundler，让你理解生产环境下 Vite/Rollup 的模块打包究竟是如何实现的。</p><p>不过，需要提前声明的是，Bundler 的实现非常依赖于 AST 的实现，有相当多的地方需要解析模块 AST 并且操作 AST 节点，因此，我们有必要先完成 AST 解析的方案。目前在业界有诸多的 JavaScript AST 解析方案，如<code>acorn</code>、<code>@babel/parser</code>、<code>swc</code> 等，可以实现开箱即用，但为了让大家对其中的原理理解得更为深入，本小节会教大家一步步开发出 AST 的解析器，实现 <code>tokenize</code> 和 <code>parse</code> 的底层逻辑，而这本身也是一件非常有意思的事情，相信你经过本节的学习也能领略到前端编译领域的底层风光。</p><h2 id="搭建开发测试环境" tabindex="-1"><a class="header-anchor" href="#搭建开发测试环境" aria-hidden="true">#</a> 搭建开发测试环境</h2><p>首先通过<code>pnpm init -y</code>新建项目，安装测试工具<code>vitest</code>:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>pnpm i vitest <span class="token operator">-</span><span class="token constant">D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>新建 <code>src/__test__</code> 目录，之后所有的测试代码都会放到这个目录中。我们不妨先尝试编写一个测试文件:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/__test__/example.test.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> describe<span class="token punctuation">,</span> test<span class="token punctuation">,</span> expect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vitest&quot;</span><span class="token punctuation">;</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&quot;example test&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;should return correct result&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在<code>package.json</code>中增加如下的 <code>scripts</code>:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vitest&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接着在命令行执行 <code>pnpm test</code>，如果你可以看到如下的终端界面，说明测试环境已经搭建成功:</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b77385f8d8da4e5689a97471d4a1b0b2~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h2 id="词法分析器开发" tabindex="-1"><a class="header-anchor" href="#词法分析器开发" aria-hidden="true">#</a> 词法分析器开发</h2><p>接下来，我们正式进入 AST 解析器的开发，主要分为两个部分来进行: <code>词法分析器</code>和<code>语法分析器</code>。</p><p>首先是<code>词法分析器</code>，也叫分词器(Tokenizer)，它的作用是将代码划分为一个个词法单元，便于进行后续的语法分析。比如下面的这段代码:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在经过分词之后，代码会被切分为如下的 token 数组:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">[</span><span class="token string">&#39;let&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;(&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;)&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;{&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;}&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>从中你可以看到，原本一行普通的代码字符串被拆分成了拥有语法属性的 token 列表，不同的 token 之间也存在千丝万缕的联系，而后面所要介绍的<code>语法分析器</code>，就是来梳理各个 token 之间的联系，整理出 AST 数据结构。</p><p>当下我们所要实现的词法分析器，本质上是<strong>对代码字符串进行逐个字符的扫描，然后根据一定的语法规则进行分组</strong>。其中，涉及到几个关键的步骤:</p><ul><li>确定语法规则，包括语言内置的关键词、单字符、分隔符等</li><li>逐个代码字符扫描，根据语法规则进行 token 分组</li></ul><p>接下来我们以一个简单的语法为例，来初步实现如上的关键流程。需要解析的示例代码如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-确定语法规则" tabindex="-1"><a class="header-anchor" href="#_1-确定语法规则" aria-hidden="true">#</a> 1. 确定语法规则</h3><p>新建<code>src/Tokenizer.ts</code>，首先声明一些必要的类型:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">enum</span> TokenType <span class="token punctuation">{</span>
  <span class="token comment">// let</span>
  Let <span class="token operator">=</span> <span class="token string">&quot;Let&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// =</span>
  Assign <span class="token operator">=</span> <span class="token string">&quot;Assign&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// function</span>
  <span class="token builtin">Function</span> <span class="token operator">=</span> <span class="token string">&quot;Function&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// 变量名</span>
  Identifier <span class="token operator">=</span> <span class="token string">&quot;Identifier&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// (</span>
  LeftParen <span class="token operator">=</span> <span class="token string">&quot;LeftParen&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// )</span>
  RightParen <span class="token operator">=</span> <span class="token string">&quot;RightParen&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// {</span>
  LeftCurly <span class="token operator">=</span> <span class="token string">&quot;LeftCurly&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// }</span>
  RightCurly <span class="token operator">=</span> <span class="token string">&quot;RightCurly&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Token</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> TokenType<span class="token punctuation">;</span>
  value<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  start<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  end<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  raw<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后定义 Token 的生成器对象:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token constant">TOKENS_GENERATOR</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Token<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span><span class="token punctuation">(</span>start<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> type<span class="token operator">:</span> TokenType<span class="token punctuation">.</span>Let<span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token string">&quot;let&quot;</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token operator">:</span> start <span class="token operator">+</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">assign</span><span class="token punctuation">(</span>start<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> type<span class="token operator">:</span> TokenType<span class="token punctuation">.</span>Assign<span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token string">&quot;=&quot;</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token operator">:</span> start <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">function</span><span class="token punctuation">(</span>start<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      type<span class="token operator">:</span> TokenType<span class="token punctuation">.</span><span class="token builtin">Function</span><span class="token punctuation">,</span>
      value<span class="token operator">:</span> <span class="token string">&quot;function&quot;</span><span class="token punctuation">,</span>
      start<span class="token punctuation">,</span>
      end<span class="token operator">:</span> start <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">leftParen</span><span class="token punctuation">(</span>start<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> type<span class="token operator">:</span> TokenType<span class="token punctuation">.</span>LeftParen<span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token string">&quot;(&quot;</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token operator">:</span> start <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">rightParen</span><span class="token punctuation">(</span>start<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> type<span class="token operator">:</span> TokenType<span class="token punctuation">.</span>RightParen<span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token operator">:</span> start <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">leftCurly</span><span class="token punctuation">(</span>start<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> type<span class="token operator">:</span> TokenType<span class="token punctuation">.</span>LeftCurly<span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token string">&quot;{&quot;</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token operator">:</span> start <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">rightCurly</span><span class="token punctuation">(</span>start<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> type<span class="token operator">:</span> TokenType<span class="token punctuation">.</span>RightCurly<span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token string">&quot;}&quot;</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token operator">:</span> start <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">identifier</span><span class="token punctuation">(</span>start<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      type<span class="token operator">:</span> TokenType<span class="token punctuation">.</span>Identifier<span class="token punctuation">,</span>
      value<span class="token punctuation">,</span>
      start<span class="token punctuation">,</span>
      end<span class="token operator">:</span> start <span class="token operator">+</span> value<span class="token punctuation">.</span>length<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">SingleCharTokens</span> <span class="token operator">=</span> <span class="token string">&quot;(&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;)&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;{&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;}&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;=&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 单字符到 Token 生成器的映射</span>
<span class="token keyword">const</span> <span class="token constant">KNOWN_SINGLE_CHAR_TOKENS</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map<span class="token operator">&lt;</span>
  SingleCharTokens<span class="token punctuation">,</span>
  <span class="token keyword">typeof</span> <span class="token constant">TOKENS_GENERATOR</span><span class="token punctuation">[</span><span class="token keyword">keyof</span> <span class="token keyword">typeof</span> <span class="token constant">TOKENS_GENERATOR</span><span class="token punctuation">]</span>
<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token punctuation">[</span><span class="token string">&quot;(&quot;</span><span class="token punctuation">,</span> <span class="token constant">TOKENS_GENERATOR</span><span class="token punctuation">.</span>leftParen<span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&quot;)&quot;</span><span class="token punctuation">,</span> <span class="token constant">TOKENS_GENERATOR</span><span class="token punctuation">.</span>rightParen<span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&quot;{&quot;</span><span class="token punctuation">,</span> <span class="token constant">TOKENS_GENERATOR</span><span class="token punctuation">.</span>leftCurly<span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&quot;}&quot;</span><span class="token punctuation">,</span> <span class="token constant">TOKENS_GENERATOR</span><span class="token punctuation">.</span>rightCurly<span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&quot;=&quot;</span><span class="token punctuation">,</span> <span class="token constant">TOKENS_GENERATOR</span><span class="token punctuation">.</span>assign<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-代码字符扫描、分组" tabindex="-1"><a class="header-anchor" href="#_2-代码字符扫描、分组" aria-hidden="true">#</a> 2. 代码字符扫描、分组</h3><p>现在我们开始实现 Tokenizer 对象:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Tokenizer</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> _tokens<span class="token operator">:</span> Token<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> _currentIndex<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> _source<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>input<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_source <span class="token operator">=</span> input<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">tokenize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Token<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_currentIndex <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_source<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> currentChar <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_source<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>_currentIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> startIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_currentIndex<span class="token punctuation">;</span>
      
      <span class="token comment">// 根据语法规则进行 token 分组</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_tokens<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在扫描字符的过程，我们需要对不同的字符各自进行不同的处理，具体的策略如下：</p><ul><li>当前字符为分隔符，如<code>空格</code>，直接跳过，不处理；</li><li>当前字符为字母，需要继续扫描，获取完整的单词: <ul><li>如果单词为语法关键字，则新建相应关键字的 Token</li><li>否则视为普通的变量名</li></ul></li><li>当前字符为单字符，如<code>{</code>、<code>}</code>、<code>(</code>、<code>)</code>，则新建单字符对应的 Token</li></ul><p>接着我们在代码中实现:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// while 循环内部</span>
<span class="token keyword">let</span> currentChar <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_source<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>_currentIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> startIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_currentIndex<span class="token punctuation">;</span>

<span class="token keyword">const</span> isAlpha <span class="token operator">=</span> <span class="token punctuation">(</span>char<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>char <span class="token operator">&gt;=</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">&amp;&amp;</span> char <span class="token operator">&lt;=</span> <span class="token string">&quot;z&quot;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>char <span class="token operator">&gt;=</span> <span class="token string">&quot;A&quot;</span> <span class="token operator">&amp;&amp;</span> char <span class="token operator">&lt;=</span> <span class="token string">&quot;Z&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 1. 处理空格</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>currentChar <span class="token operator">===</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>_currentIndex<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token keyword">continue</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 2. 处理字母</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isAlpha</span><span class="token punctuation">(</span>currentChar<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> identifier <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isAlpha</span><span class="token punctuation">(</span>currentChar<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    identifier <span class="token operator">+=</span> currentChar<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_currentIndex <span class="token operator">++</span><span class="token punctuation">;</span>
    currentChar <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_source<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>_currentIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> token<span class="token operator">:</span> Token<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>identifier <span class="token keyword">in</span> <span class="token constant">TOKENS_GENERATOR</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果是关键字</span>
    token <span class="token operator">=</span>
        <span class="token constant">TOKENS_GENERATOR</span><span class="token punctuation">[</span>identifier <span class="token keyword">as</span> <span class="token keyword">keyof</span> <span class="token keyword">typeof</span> <span class="token constant">TOKENS_GENERATOR</span><span class="token punctuation">]</span><span class="token punctuation">(</span>
          startIndex
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果是普通标识符</span>
    token <span class="token operator">=</span> <span class="token constant">TOKENS_GENERATOR</span><span class="token punctuation">[</span><span class="token string">&quot;identifier&quot;</span><span class="token punctuation">]</span><span class="token punctuation">(</span>startIndex<span class="token punctuation">,</span> identifier<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>_tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">continue</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 3. 处理单字符</span>
<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">KNOWN_SINGLE_CHAR_TOKENS</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>currentChar <span class="token keyword">as</span> SingleCharTokens<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> token <span class="token operator">=</span> <span class="token constant">KNOWN_SINGLE_CHAR_TOKENS</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>
    currentChar <span class="token keyword">as</span> SingleCharTokens
  <span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">(</span>startIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>_tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>_currentIndex<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token keyword">continue</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>OK，接下来我们来增加测试用例，新建<code>src/__test__/tokenizer.test.ts</code>，内容如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&quot;testTokenizerFunction&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;test example&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&quot;Let&quot;</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token string">&quot;let&quot;</span><span class="token punctuation">,</span> start<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> end<span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&quot;Identifier&quot;</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> start<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> end<span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&quot;Assign&quot;</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token string">&quot;=&quot;</span><span class="token punctuation">,</span> start<span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span> end<span class="token operator">:</span> <span class="token number">7</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&quot;Function&quot;</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token string">&quot;function&quot;</span><span class="token punctuation">,</span> start<span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span> end<span class="token operator">:</span> <span class="token number">16</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&quot;LeftParen&quot;</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token string">&quot;(&quot;</span><span class="token punctuation">,</span> start<span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span> end<span class="token operator">:</span> <span class="token number">17</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&quot;RightParen&quot;</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">,</span> start<span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">,</span> end<span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&quot;LeftCurly&quot;</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token string">&quot;{&quot;</span><span class="token punctuation">,</span> start<span class="token operator">:</span> <span class="token number">19</span><span class="token punctuation">,</span> end<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&quot;RightCurly&quot;</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token string">&quot;}&quot;</span><span class="token punctuation">,</span> start<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> end<span class="token operator">:</span> <span class="token number">21</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> tokenizer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tokenizer</span><span class="token punctuation">(</span><span class="token string">&quot;let a = function() {}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>tokenizer<span class="token punctuation">.</span><span class="token function">tokenize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在终端执行<code>pnpm test</code>，可以发现如下的测试结果:</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d0ca23fabb94409da8364d2dfd69e761~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>说明此时一个简易版本的分词器已经被我们开发出来了，不过目前的分词器还比较简陋，仅仅支持有限的语法，不过在明确了核心的开发步骤之后，后面继续完善的过程就比较简单了。</p><h2 id="语法分析器开发" tabindex="-1"><a class="header-anchor" href="#语法分析器开发" aria-hidden="true">#</a> 语法分析器开发</h2>`,40),k={href:"https://astexplorer.net/",target:"_blank",rel:"noopener noreferrer"},r=a(`<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fb95f9badf324b77b70b2e62015cb171~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>接下来，我们要做的就是将 token 数组转换为上图所示的 AST 数据。</p><p>首先新建<code>src/Parser.ts</code>，添加如下的类型声明代码及 <code>Parser</code> 类的初始化代码:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">enum</span> NodeType <span class="token punctuation">{</span>
  Program <span class="token operator">=</span> <span class="token string">&quot;Program&quot;</span><span class="token punctuation">,</span>
  VariableDeclaration <span class="token operator">=</span> <span class="token string">&quot;VariableDeclaration&quot;</span><span class="token punctuation">,</span>
  VariableDeclarator <span class="token operator">=</span> <span class="token string">&quot;VariableDeclarator&quot;</span><span class="token punctuation">,</span>
  Identifier <span class="token operator">=</span> <span class="token string">&quot;Identifier&quot;</span><span class="token punctuation">,</span>
  FunctionExpression <span class="token operator">=</span> <span class="token string">&quot;FunctionExpression&quot;</span><span class="token punctuation">,</span>
  BlockStatement <span class="token operator">=</span> <span class="token string">&quot;BlockStatement&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span> 
  type<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  start<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  end<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Identifier</span> <span class="token keyword">extends</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> NodeType<span class="token punctuation">.</span>Identifier<span class="token punctuation">;</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Expression</span> <span class="token keyword">extends</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Statement</span> <span class="token keyword">extends</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Program</span> <span class="token keyword">extends</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> NodeType<span class="token punctuation">.</span>Program<span class="token punctuation">;</span>
  body<span class="token operator">:</span> Statement<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">VariableDeclarator</span> <span class="token keyword">extends</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> NodeType<span class="token punctuation">.</span>VariableDeclarator<span class="token punctuation">;</span>
  id<span class="token operator">:</span> Identifier<span class="token punctuation">;</span>
  init<span class="token operator">:</span> Expression<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">VariableDeclaration</span> <span class="token keyword">extends</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> NodeType<span class="token punctuation">.</span>VariableDeclaration<span class="token punctuation">;</span>
  kind<span class="token operator">:</span> <span class="token string">&quot;var&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;let&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;const&quot;</span><span class="token punctuation">;</span>
  declarations<span class="token operator">:</span> VariableDeclarator<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">FunctionExpression</span> <span class="token keyword">extends</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> NodeType<span class="token punctuation">.</span>FunctionExpression<span class="token punctuation">;</span>
  id<span class="token operator">:</span> Identifier <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  params<span class="token operator">:</span> Expression<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> Identifier<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  body<span class="token operator">:</span> BlockStatement<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">BlockStatement</span> <span class="token keyword">extends</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> NodeType<span class="token punctuation">.</span>BlockStatement<span class="token punctuation">;</span>
  body<span class="token operator">:</span> Statement<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">VariableKind</span> <span class="token operator">=</span> <span class="token string">&quot;let&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Parser</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> _tokens<span class="token operator">:</span> Token<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> _currentIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>token<span class="token operator">:</span> Token<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_tokens <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>token<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Program <span class="token punctuation">{</span>
    <span class="token keyword">const</span> program <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_parseProgram</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> program<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">private</span> <span class="token function">_parseProgram</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Program <span class="token punctuation">{</span>
    <span class="token keyword">const</span> program<span class="token operator">:</span> Program <span class="token operator">=</span> <span class="token punctuation">{</span>
      type<span class="token operator">:</span> NodeType<span class="token punctuation">.</span>Program<span class="token punctuation">,</span>
      body<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      start<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      end<span class="token operator">:</span> <span class="token number">Infinity</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// 解析 token 数组</span>
    <span class="token keyword">return</span> program<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从中你可以看出，解析 AST 的核心逻辑就集中在 <code>_parseProgram</code> 方法中，接下来让我们一步步完善一个方法:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Parser</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> _parseProgram <span class="token punctuation">{</span>
    <span class="token comment">// 省略已有代码</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_isEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_parseStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      program<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_isEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        program<span class="token punctuation">.</span>end <span class="token operator">=</span> node<span class="token punctuation">.</span>end<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> program<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// token 是否已经扫描完</span>
  <span class="token keyword">private</span> <span class="token function">_isEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_currentIndex <span class="token operator">&gt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_tokens<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 工具方法，表示消费当前 Token，扫描位置移动到下一个 token</span>
  <span class="token keyword">private</span> <span class="token function">_goNext</span><span class="token punctuation">(</span>type<span class="token operator">:</span> TokenType <span class="token operator">|</span> TokenType<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Token <span class="token punctuation">{</span>
    <span class="token keyword">const</span> currentToken <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_tokens<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>_currentIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// 断言当前 Token 的类型，如果不能匹配，则抛出错误</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>type<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>currentToken<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>
          <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Expect </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>type<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, but got </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>currentToken<span class="token punctuation">.</span><span class="token keyword">type</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>currentToken<span class="token punctuation">.</span>type <span class="token operator">!==</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Expect </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">type</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, but got </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>currentToken<span class="token punctuation">.</span><span class="token keyword">type</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_currentIndex<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> currentToken<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">private</span> <span class="token function">_checkCurrentTokenType</span><span class="token punctuation">(</span>type<span class="token operator">:</span> TokenType <span class="token operator">|</span> TokenType<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_isEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> currentToken <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_tokens<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>_currentIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> type<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>currentToken<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> currentToken<span class="token punctuation">.</span>type <span class="token operator">===</span> type<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">private</span> <span class="token function">_getCurrentToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Token <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_tokens<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>_currentIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">private</span> <span class="token function">_getPreviousToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Token <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_tokens<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>_currentIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个程序(Program)实际上由各个语句(Statement)来构成，因此在<code>_parseProgram</code>逻辑中，我们主要做的就是扫描一个个语句，然后放到 Program 对象的 body 中。那么，接下来，我们将关注点放到语句的扫描逻辑上面。</p><p>从之前的示例代码:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> <span class="token function-variable function">a</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们可以知道这是一个变量声明语句，那么现在我们就在 <code>_parseStatement</code> 中实现这类语句的解析:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">enum</span> NodeType <span class="token punctuation">{</span>
  Program <span class="token operator">=</span> <span class="token string">&quot;Program&quot;</span><span class="token punctuation">,</span>
  VariableDeclarator <span class="token operator">=</span> <span class="token string">&quot;VariableDeclarator&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Parser</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token function">_parseStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Statement <span class="token punctuation">{</span>
    <span class="token comment">// TokenType 来自 Tokenizer 的实现中</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_checkCurrentTokenType</span><span class="token punctuation">(</span>TokenType<span class="token punctuation">.</span>Let<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_parseVariableDeclaration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Unexpected token&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">private</span> <span class="token function">_parseVariableDeclaration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> VariableDeclaration <span class="token punctuation">{</span>
    <span class="token comment">// 获取语句开始位置</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> start <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_getCurrentToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 拿到 let</span>
    <span class="token keyword">const</span> kind <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_getCurrentToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_goNext</span><span class="token punctuation">(</span>TokenType<span class="token punctuation">.</span>Let<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 解析变量名 foo</span>
    <span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_parseIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 解析 = </span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_goNext</span><span class="token punctuation">(</span>TokenType<span class="token punctuation">.</span>Assign<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 解析函数表达式</span>
    <span class="token keyword">const</span> init <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_parseFunctionExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> declarator<span class="token operator">:</span> VariableDeclarator <span class="token operator">=</span> <span class="token punctuation">{</span>
      type<span class="token operator">:</span> NodeType<span class="token punctuation">.</span>VariableDeclarator<span class="token punctuation">,</span>
      id<span class="token punctuation">,</span>
      init<span class="token punctuation">,</span>
      start<span class="token operator">:</span> id<span class="token punctuation">.</span>start<span class="token punctuation">,</span>
      end<span class="token operator">:</span> init <span class="token operator">?</span> init<span class="token punctuation">.</span>end <span class="token operator">:</span> id<span class="token punctuation">.</span>end<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// 构造 Declaration 节点</span>
    <span class="token keyword">const</span> node<span class="token operator">:</span> VariableDeclaration <span class="token operator">=</span> <span class="token punctuation">{</span>
      type<span class="token operator">:</span> NodeType<span class="token punctuation">.</span>VariableDeclaration<span class="token punctuation">,</span>
      kind<span class="token operator">:</span> kind <span class="token keyword">as</span> VariableKind<span class="token punctuation">,</span>
      declarations<span class="token operator">:</span> <span class="token punctuation">[</span>declarator<span class="token punctuation">]</span><span class="token punctuation">,</span>
      start<span class="token punctuation">,</span>
      end<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_getPreviousToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>end<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> node<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来主要的代码解析逻辑可以梳理如下:</p><ul><li>发现 <code>let</code> 关键词对应的 token，进入 <code>_parseVariableDeclaration</code></li><li>解析变量名，如示例代码中的 <code>foo</code></li><li>解析函数表达式，如示例代码中的 <code>function() {}</code></li></ul><p>其中，解析变量名的过程我们通过<code>_parseIdentifier</code> 方法实现，解析函数表达式的过程由<code>_parseFunctionExpression</code>来实现，代码如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 1. 解析变量名</span>
<span class="token keyword">private</span> <span class="token function">_parseIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Identifier <span class="token punctuation">{</span>
  <span class="token keyword">const</span> token <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_getCurrentToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> identifier<span class="token operator">:</span> Identifier <span class="token operator">=</span> <span class="token punctuation">{</span>
    type<span class="token operator">:</span> NodeType<span class="token punctuation">.</span>Identifier<span class="token punctuation">,</span>
    name<span class="token operator">:</span> token<span class="token punctuation">.</span>value<span class="token operator">!</span><span class="token punctuation">,</span>
    start<span class="token operator">:</span> token<span class="token punctuation">.</span>start<span class="token punctuation">,</span>
    end<span class="token operator">:</span> token<span class="token punctuation">.</span>end<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_goNext</span><span class="token punctuation">(</span>TokenType<span class="token punctuation">.</span>Identifier<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> identifier<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 2. 解析函数表达式</span>
<span class="token keyword">private</span> <span class="token function">_parseFunctionExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> FunctionExpression <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> start <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_getCurrentToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_goNext</span><span class="token punctuation">(</span>TokenType<span class="token punctuation">.</span><span class="token builtin">Function</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_checkCurrentTokenType</span><span class="token punctuation">(</span>TokenType<span class="token punctuation">.</span>Identifier<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    id <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_parseIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> node<span class="token operator">:</span> FunctionExpression <span class="token operator">=</span> <span class="token punctuation">{</span>
    type<span class="token operator">:</span> NodeType<span class="token punctuation">.</span>FunctionExpression<span class="token punctuation">,</span>
    id<span class="token punctuation">,</span>
    params<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    body<span class="token operator">:</span> <span class="token punctuation">{</span>
      type<span class="token operator">:</span> NodeType<span class="token punctuation">.</span>BlockStatement<span class="token punctuation">,</span>
      body<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      start<span class="token operator">:</span> start<span class="token punctuation">,</span>
      end<span class="token operator">:</span> <span class="token number">Infinity</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    start<span class="token punctuation">,</span>
    end<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> node<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 用于解析函数参数</span>
<span class="token keyword">private</span> <span class="token function">_parseParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Identifier<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> Expression<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token comment">// 消费 &quot;(&quot;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_goNext</span><span class="token punctuation">(</span>TokenType<span class="token punctuation">.</span>LeftParen<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">// 逐个解析括号中的参数</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_checkCurrentTokenType</span><span class="token punctuation">(</span>TokenType<span class="token punctuation">.</span>RightParen<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> param <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_parseIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    params<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 消费 &quot;)&quot;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_goNext</span><span class="token punctuation">(</span>TokenType<span class="token punctuation">.</span>RightParen<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> params<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 用于解析函数体</span>
<span class="token keyword">private</span> <span class="token function">_parseBlockStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> BlockStatement <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> start <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_getCurrentToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> blockStatement<span class="token operator">:</span> BlockStatement <span class="token operator">=</span> <span class="token punctuation">{</span>
    type<span class="token operator">:</span> NodeType<span class="token punctuation">.</span>BlockStatement<span class="token punctuation">,</span>
    body<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    start<span class="token punctuation">,</span>
    end<span class="token operator">:</span> <span class="token number">Infinity</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">// 消费 &quot;{&quot;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_goNext</span><span class="token punctuation">(</span>TokenType<span class="token punctuation">.</span>LeftCurly<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_checkCurrentTokenType</span><span class="token punctuation">(</span>TokenType<span class="token punctuation">.</span>RightCurly<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 递归调用 _parseStatement 解析函数体中的语句(Statement)</span>
    <span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_parseStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    blockStatement<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  blockStatement<span class="token punctuation">.</span>end <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_getCurrentToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>end<span class="token punctuation">;</span>
  <span class="token comment">// 消费 &quot;}&quot;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_goNext</span><span class="token punctuation">(</span>TokenType<span class="token punctuation">.</span>RightCurly<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> blockStatement<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>OK，一个简易的 Parser 现在就已经搭建出来了，你可以用如下的测试用例看看程序运行的效果，代码如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/__test__/parser.test.ts</span>
<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&quot;testParserFunction&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;test example code&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">{</span>
      type<span class="token operator">:</span> <span class="token string">&quot;Program&quot;</span><span class="token punctuation">,</span>
      body<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          type<span class="token operator">:</span> <span class="token string">&quot;VariableDeclaration&quot;</span><span class="token punctuation">,</span>
          kind<span class="token operator">:</span> <span class="token string">&quot;let&quot;</span><span class="token punctuation">,</span>
          declarations<span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token punctuation">{</span>
              type<span class="token operator">:</span> <span class="token string">&quot;VariableDeclarator&quot;</span><span class="token punctuation">,</span>
              id<span class="token operator">:</span> <span class="token punctuation">{</span>
                type<span class="token operator">:</span> <span class="token string">&quot;Identifier&quot;</span><span class="token punctuation">,</span>
                name<span class="token operator">:</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span>
                start<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
                end<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
              <span class="token punctuation">}</span><span class="token punctuation">,</span>
              init<span class="token operator">:</span> <span class="token punctuation">{</span>
                type<span class="token operator">:</span> <span class="token string">&quot;FunctionExpression&quot;</span><span class="token punctuation">,</span>
                id<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
                params<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                body<span class="token operator">:</span> <span class="token punctuation">{</span>
                  type<span class="token operator">:</span> <span class="token string">&quot;BlockStatement&quot;</span><span class="token punctuation">,</span>
                  body<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                  start<span class="token operator">:</span> <span class="token number">19</span><span class="token punctuation">,</span>
                  end<span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">,</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                start<span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>
                end<span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">,</span>
              <span class="token punctuation">}</span><span class="token punctuation">,</span>
              start<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
              end<span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">]</span><span class="token punctuation">,</span>
          start<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
          end<span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
      start<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      end<span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> code <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">let a = function() {};</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> tokenizer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tokenizer</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parser</span><span class="token punctuation">(</span>tokenizer<span class="token punctuation">.</span><span class="token function">tokenize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>恭喜你，学习完了本小节的内容。在本小节中，你需要重点掌握 AST 解析器中<code>词法分析</code>和<code>语法分析</code>的核心原理与实现细节。</p><p>虽然本节只是实现了一个比较简陋的 AST 解析器，但重点在于整个词法分析和语法分析代码框架的搭建。当核心的流程已经实现之后，接下来的事情就是基于已有的代码框架不断地完善语法细节，整体的难度降低了很多。</p><p>另外，小册的 Github 仓库中在本小节的基础上已经实现了一个更加完整的 AST 解析器，虽然代码量远远多于本节的示例代码，但原理完全一样，很容易理解。当 AST 解析的功能被开发完成后，接下来要做的就是正式实现一个 Bundler 的功能了，让我们下一节不见不散👋🏻</p>`,21);function d(v,m){const t=e("ExternalLinkIcon");return o(),c("div",null,[u,s("p",null,[n("在解析出词法 token 之后，我们就可以进入语法分析阶段了。在这个阶段，我们会依次遍历 token，对代码进行语法结构层面的分析，最后的目标是生成 AST 数据结构。至于代码的 AST 结构到底是什么样子，你可以去 "),s("a",k,[n("AST Explorer"),i(t)]),n(" 网站进行在线预览:")]),r])}const y=p(l,[["render",d],["__file","di26zhang—shouxieBundler：shixianJavaScriptASTjiexiqi——cifafenxi、yuyifenxi.html.vue"]]);export{y as default};
