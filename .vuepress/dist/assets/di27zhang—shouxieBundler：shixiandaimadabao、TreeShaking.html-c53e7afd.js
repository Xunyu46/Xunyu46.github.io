import{_ as e,r as o,o as c,c as l,b as s,d as n,e as p,a as t}from"./app-48690364.js";const i={},u=t(`<p>在上一小节，我带你实现了一个简单的 JavaScript AST 解析器，你也应该对词法分析和语法分析底层原理有了一定的了解。那么在本小节的内容中，我们将基于 AST 解析器来实现一个模块打包工具(Bundler)，也就是实现一个精简版的 Rollup。通过本节的实战学习，你不仅能对各种 AST 的各种操作信手拈来，还能够对 JavaScript 模块打包工具本身有更加深刻的理解。</p><h2 id="实现思路梳理" tabindex="-1"><a class="header-anchor" href="#实现思路梳理" aria-hidden="true">#</a> 实现思路梳理</h2><p>首先我们来梳理一下整体的实现思路，如下图所示:</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/598856bbb7bd4dae8040143b203e85bb~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>第一步我们需要获取模块的内容并解析模块 AST，然后梳理模块间的依赖关系，生成一张模块依赖图(<code>ModuleGraph</code>)。</p><p>接下来，我们根据模块依赖图生成拓扑排序后的模块列表，以保证最后的产物中各个模块的顺序是正确的，比如模块 A 依赖了模块 B，那么在产物中，模块 B 的代码需要保证在模块 A 的代码之前执行。</p><p>当然，Tree Shaking 的实现也是很重要的一环，我会带你实现一个基于 import/export 符号分析的 Tree Shaking 效果，保证只有被 import 的部分被打包进产物。最后，我们便可以输出完整的 Bundle 代码，完成模块打包。</p><h2 id="开发环境搭建" tabindex="-1"><a class="header-anchor" href="#开发环境搭建" aria-hidden="true">#</a> 开发环境搭建</h2><p>我们先来搭建一下项目的基本开发环境，首先新建目录<code>my-bundler</code>，然后进入目录中执行 <code>pnpm init -y</code> 初始化，安装一些必要的依赖:</p><blockquote><p>建议 fork 小册的 <a href="git@github.com:sanyuan0704/juejin-book-vite.git">Github 仓库</a>，从项目根目录下创建项目，因为需要使用仓库中的 ast-parser</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>pnpm i magic<span class="token operator">-</span><span class="token builtin">string</span> <span class="token operator">-</span><span class="token constant">S</span>
pnpm i <span class="token decorator"><span class="token at operator">@</span><span class="token function">types</span></span><span class="token operator">/</span>node tsup typescript typescript<span class="token operator">-</span>transform<span class="token operator">-</span>paths <span class="token operator">-</span><span class="token constant">D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>新建<code>tsconfig.json</code>，内容如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;es2016&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;allowJs&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;commonjs&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;moduleResolution&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;outDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dist&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;esModuleInterop&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;forceConsistentCasingInFileNames&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;strict&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;skipLibCheck&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;sourceMap&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;baseUrl&quot;</span><span class="token operator">:</span> <span class="token string">&quot;src&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;rootDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;src&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;declaration&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token string-property property">&quot;transform&quot;</span><span class="token operator">:</span> <span class="token string">&quot;typescript-transform-paths&quot;</span><span class="token comment">/* 支持别名 */</span> 
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token string-property property">&quot;transform&quot;</span><span class="token operator">:</span> <span class="token string">&quot;typescript-transform-paths&quot;</span><span class="token punctuation">,</span>
        <span class="token string-property property">&quot;afterDeclarations&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token comment">/* 支持类型文件中的别名 */</span> 
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;paths&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;*&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;./*&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token string-property property">&quot;ast-parser&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;../../ast-parser&quot;</span><span class="token punctuation">]</span><span class="token comment">/* AST 解析器的路径*/</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;references&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token string-property property">&quot;path&quot;</span><span class="token operator">:</span> <span class="token string">&quot;../ast-parser&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在 package.json 中添加如下的构建脚本:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token string-property property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;tsup ./src/rollup.ts --format cjs,esm --dts --clean --watch&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;tsup ./src/rollup.ts --format cjs,esm --dts --clean --minify&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，你可以在<code>src</code>目录下新建<code>index.ts</code>，内容如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/index.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Bundle <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Bundle&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">BuildOptions</span> <span class="token punctuation">{</span>
  input<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">build</span><span class="token punctuation">(</span>options<span class="token operator">:</span> BuildOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> bundle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bundle</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    entry<span class="token operator">:</span> options<span class="token punctuation">.</span>input
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> bundle<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token function-variable function">generate</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> bundle<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由此可见，所有核心的逻辑我们封装在了 Bundle 对象中，接着新建<code>Bundle.ts</code>及其依赖的<code>Graph.ts</code>， 添加如下的代码骨架:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// Bundle.ts</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Bundle</span> <span class="token punctuation">{</span>
  graph<span class="token operator">:</span> Graph<span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>options<span class="token operator">:</span> BundleOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 初始化模块依赖图对象</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>graph <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graph</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      entry<span class="token operator">:</span> options<span class="token punctuation">.</span>entry<span class="token punctuation">,</span>
      bundle<span class="token operator">:</span> <span class="token keyword">this</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">async</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 模块打包逻辑，完成所有的 AST 相关操作</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>graph<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 代码生成逻辑，拼接模块 AST 节点，产出代码</span>
  <span class="token punctuation">}</span>
  
  <span class="token function">getModuleById</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>graph<span class="token punctuation">.</span><span class="token function">getModuleById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">addModule</span><span class="token punctuation">(</span>module<span class="token operator">:</span> Module<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>graph<span class="token punctuation">.</span><span class="token function">addModule</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Graph.ts</span>
<span class="token comment">// 模块依赖图对象的实现</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> dirname<span class="token punctuation">,</span> resolve <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;path&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Graph</span> <span class="token punctuation">{</span>
  entryPath<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  basedir<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  moduleById<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> Module<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  modules<span class="token operator">:</span> Module<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span>options<span class="token operator">:</span> GraphOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> entry<span class="token punctuation">,</span> bundle <span class="token punctuation">}</span> <span class="token operator">=</span> options<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>entryPath <span class="token operator">=</span> <span class="token function">resolve</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>basedir <span class="token operator">=</span> <span class="token function">dirname</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>entryPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>bundle <span class="token operator">=</span> bundle<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">async</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1. 获取并解析模块信息</span>
    <span class="token comment">// 2. 构建依赖关系图</span>
    <span class="token comment">// 3. 模块拓扑排序</span>
    <span class="token comment">// 4. Tree Shaking, 标记需要包含的语句</span>
  <span class="token punctuation">}</span>
  
  <span class="token function">getModuleById</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>moduleById<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">addModule</span><span class="token punctuation">(</span>module<span class="token operator">:</span> Module<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>moduleById<span class="token punctuation">[</span>module<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>moduleById<span class="token punctuation">[</span>module<span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> module<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>modules<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们就正式开始实现打包器的模块解析逻辑。</p><h3 id="模块-ast-解析" tabindex="-1"><a class="header-anchor" href="#模块-ast-解析" aria-hidden="true">#</a> 模块 AST 解析</h3><p>我们基于目前的 <code>Graph.ts</code> 继续开发，首先在 Graph 对象中初始化模块加载器(ModuleLoader):</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/Graph.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> dirname<span class="token punctuation">,</span> resolve <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;path&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Graph</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>options<span class="token operator">:</span> GraphOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 省略其它代码</span>
    <span class="token comment">// 初始化模块加载器对象</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>moduleLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModuleLoader</span><span class="token punctuation">(</span>bundle<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">async</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1. 获取并解析模块信息，返回入口模块对象</span>
    <span class="token keyword">const</span> entryModule <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>moduleLoader<span class="token punctuation">.</span><span class="token function">fetchModule</span><span class="token punctuation">(</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>entryPath<span class="token punctuation">,</span>
      <span class="token keyword">null</span><span class="token punctuation">,</span>
      <span class="token boolean">true</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后添加<code>ModuleLoader.ts</code>，代码如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/ModuleLoader.ts</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ModuleLoader</span> <span class="token punctuation">{</span>
  bundle<span class="token operator">:</span> Bundle<span class="token punctuation">;</span>
  resolveIdsMap<span class="token operator">:</span> Map<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token boolean">false</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>bundle<span class="token operator">:</span> Bundle<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>bundle <span class="token operator">=</span> bundle<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
 
  <span class="token comment">// 解析模块逻辑</span>
  <span class="token function">resolveId</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> importer<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> cacheKey <span class="token operator">=</span> id <span class="token operator">+</span> importer<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resolveIdsMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resolveIdsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> resolved <span class="token operator">=</span> <span class="token function">defaultResolver</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> importer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>resolveIdsMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> resolved<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> resolved<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token comment">// 加载模块内容并解析</span>
  <span class="token keyword">async</span> <span class="token function">fetchModule</span><span class="token punctuation">(</span>
    id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
    importer<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
    isEntry <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    bundle<span class="token operator">:</span> Bundle <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bundle<span class="token punctuation">,</span>
    loader<span class="token operator">:</span> ModuleLoader <span class="token operator">=</span> <span class="token keyword">this</span>
  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Module <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolveId</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> importer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 查找缓存</span>
    <span class="token keyword">const</span> existModule <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bundle<span class="token punctuation">.</span><span class="token function">getModuleById</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>existModule<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> existModule<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> code <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readFile</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token punctuation">{</span> encoding<span class="token operator">:</span> <span class="token string">&#39;utf-8&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 初始化模块，解析 AST</span>
    <span class="token keyword">const</span> module <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Module</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      path<span class="token punctuation">,</span>
      code<span class="token punctuation">,</span>
      bundle<span class="token punctuation">,</span>
      loader<span class="token punctuation">,</span>
      isEntry
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>bundle<span class="token punctuation">.</span><span class="token function">addModule</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 拉取所有的依赖模块</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fetchAllDependencies</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> module<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">async</span> <span class="token function">fetchAllDependencies</span><span class="token punctuation">(</span>module<span class="token operator">:</span> Module<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>
      module<span class="token punctuation">.</span>dependencies<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fetchModule</span><span class="token punctuation">(</span>dep<span class="token punctuation">,</span> module<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要由 <code>fetchModule</code> 方法完成模块的加载和解析，流程如下:</p><ul><li><ol><li>调用 resolveId 方法解析模块路径</li></ol></li><li><ol start="2"><li>初始化模块实例即 Module 对象，解析模块 AST</li></ol></li><li><ol start="3"><li>递归初始化模块的所有依赖模块</li></ol></li></ul><p>其中，最主要的逻辑在于第二步，即 Module 对象实例的初始化，在这个过程中，模块代码将会被进行 AST 解析及依赖分析。接下来，让我们把目光集中在 Module 对象的实现上。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/Module.ts</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Module</span> <span class="token punctuation">{</span>
  isEntry<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  bundle<span class="token operator">:</span> Bundle<span class="token punctuation">;</span>
  moduleLoader<span class="token operator">:</span> ModuleLoader<span class="token punctuation">;</span>
  code<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  magicString<span class="token operator">:</span> MagicString<span class="token punctuation">;</span>
  statements<span class="token operator">:</span> Statement<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  imports<span class="token operator">:</span> Imports<span class="token punctuation">;</span>
  exports<span class="token operator">:</span> Exports<span class="token punctuation">;</span>
  reexports<span class="token operator">:</span> Exports<span class="token punctuation">;</span>
  exportAllSources<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  exportAllModules<span class="token operator">:</span> Module<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  dependencies<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  dependencyModules<span class="token operator">:</span> Module<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  referencedModules<span class="token operator">:</span> Module<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">{</span> path<span class="token punctuation">,</span> bundle<span class="token punctuation">,</span> code<span class="token punctuation">,</span> loader<span class="token punctuation">,</span> isEntry <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token operator">:</span> ModuleOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> path<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>bundle <span class="token operator">=</span> bundle<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>moduleLoader <span class="token operator">=</span> loader<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>isEntry <span class="token operator">=</span> isEntry<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>path <span class="token operator">=</span> path<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>magicString <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MagicString</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>imports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>reexports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>declarations <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> ast <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> nodes <span class="token operator">=</span> ast<span class="token punctuation">.</span>body <span class="token keyword">as</span> StatementNode<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token comment">// 以语句(Statement)的维度来拆分 Module，保存 statement 的集合，供之后分析</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>statements <span class="token operator">=</span> nodes<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> magicString <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>magicString<span class="token punctuation">.</span><span class="token function">snip</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>start<span class="token punctuation">,</span> node<span class="token punctuation">.</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Statement 对象将在后文中介绍具体实现</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Statement</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> magicString<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">throw</span> e<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 分析 AST 节点</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">analyseAST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">analyseAST</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 以语句为最小单元来分析</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>statements<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>statement<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 对 statement 进行分析</span>
      statement<span class="token punctuation">.</span><span class="token function">analyse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 注册顶层声明</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>statement<span class="token punctuation">.</span>scope<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        statement<span class="token punctuation">.</span>scope<span class="token punctuation">.</span><span class="token function">eachDeclaration</span><span class="token punctuation">(</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> declaration<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>declarations<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> declaration<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 注册 statement 的 next 属性，用于生成代码使用，next 即下一个 statement 的起始位置</span>
    <span class="token keyword">const</span> statements <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>statements<span class="token punctuation">;</span>
    <span class="token keyword">let</span> next <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>code<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> statements<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      statements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>
      next <span class="token operator">=</span> statements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>start<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>OK，我们可以来梳理一下解析 AST 节点主要做了哪些事情:</p><ol><li><p>调用 ast-parser 将代码字符串解析为 AST 对象。</p></li><li><p>遍历 AST 对象中的各个语句，以语句的维度来进行 AST 分析，通过语句的分析结果来构造作用域链和模块依赖关系。</p></li></ol><p>ast-parser 的解析部分我们已经详细介绍过，这里不再赘述。接下来我们将重点放到 Statement 对象的实现上。你可以新建<code>src/Statement.ts</code>，内容如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/Statement.ts</span>
<span class="token comment">// 以下为三个工具函数</span>
<span class="token comment">// 是否为函数节点</span>
<span class="token keyword">function</span> <span class="token function">isFunctionDeclaration</span><span class="token punctuation">(</span>node<span class="token operator">:</span> Declaration<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token comment">// function foo() {}</span>
    node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;FunctionDeclaration&#39;</span> <span class="token operator">||</span>
    <span class="token comment">// const foo = function() {}</span>
    <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeType<span class="token punctuation">.</span>VariableDeclarator <span class="token operator">&amp;&amp;</span>
      node<span class="token punctuation">.</span>init <span class="token operator">&amp;&amp;</span>
      node<span class="token punctuation">.</span>init<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeType<span class="token punctuation">.</span>FunctionExpression<span class="token punctuation">)</span> <span class="token operator">||</span>
    <span class="token comment">// export function ...</span>
    <span class="token comment">// export default function</span>
    <span class="token punctuation">(</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeType<span class="token punctuation">.</span>ExportNamedDeclaration <span class="token operator">||</span>
      node<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeType<span class="token punctuation">.</span>ExportDefaultDeclaration<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
      <span class="token operator">!</span><span class="token operator">!</span>node<span class="token punctuation">.</span>declaration <span class="token operator">&amp;&amp;</span>
      node<span class="token punctuation">.</span>declaration<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeType<span class="token punctuation">.</span>FunctionDeclaration<span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 是否为 export 声明节点</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isExportDeclaration</span><span class="token punctuation">(</span>node<span class="token operator">:</span> ExportDeclaration<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^Export</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 是否为 import 声明节点</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isImportDeclaration</span><span class="token punctuation">(</span>node<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;ImportDeclaration&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Statement</span> <span class="token punctuation">{</span>
  node<span class="token operator">:</span> StatementNode<span class="token punctuation">;</span>
  magicString<span class="token operator">:</span> MagicString<span class="token punctuation">;</span>
  module<span class="token operator">:</span> Module<span class="token punctuation">;</span>
  scope<span class="token operator">:</span> Scope<span class="token punctuation">;</span>
  start<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  next<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  isImportDeclaration<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  isExportDeclaration<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  isReexportDeclaration<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  isFunctionDeclaration<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  isIncluded<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  defines<span class="token operator">:</span> Set<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  modifies<span class="token operator">:</span> Set<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  dependsOn<span class="token operator">:</span> Set<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  references<span class="token operator">:</span> Reference<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>node<span class="token operator">:</span> StatementNode<span class="token punctuation">,</span> magicString<span class="token operator">:</span> MagicString<span class="token punctuation">,</span> module<span class="token operator">:</span> Module<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>magicString <span class="token operator">=</span> magicString<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>node <span class="token operator">=</span> node<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>module <span class="token operator">=</span> module<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>scope <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scope</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      statement<span class="token operator">:</span> <span class="token keyword">this</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> node<span class="token punctuation">.</span>start<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>isImportDeclaration <span class="token operator">=</span> <span class="token function">isImportDeclaration</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>isExportDeclaration <span class="token operator">=</span> <span class="token function">isExportDeclaration</span><span class="token punctuation">(</span>node <span class="token keyword">as</span> ExportDeclaration<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>isReexportDeclaration <span class="token operator">=</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>isExportDeclaration <span class="token operator">&amp;&amp;</span>
      <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>node <span class="token keyword">as</span> ExportAllDeclaration <span class="token operator">|</span> ExportNamedDeclaration<span class="token punctuation">)</span><span class="token punctuation">.</span>source<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>isFunctionDeclaration <span class="token operator">=</span> <span class="token function">isFunctionDeclaration</span><span class="token punctuation">(</span>
      node <span class="token keyword">as</span> FunctionDeclaration
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token punctuation">}</span>

  <span class="token function">analyse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>isImportDeclaration<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token comment">// 1、构建作用域链，记录 Declaration 节点表</span>
    <span class="token function">buildScope</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2. 寻找引用的依赖节点，记录 Reference 节点表</span>
    <span class="token function">findReference</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Statement 节点的分析过程中主要需要做两件事情:</p><ul><li>构建作用域链。这是为了记录当前语句中声明的变量。</li><li>记录引用的依赖节点。这是为了记录当前语句引用了哪些变量以及这些变量对应的 AST 节点。</li></ul>`,35),k=s("code",null,"src/utils/walk.ts",-1),r={href:"https://github.com/sanyuan0704/juejin-book-vite/blob/main/bundler/src/utils/walk.ts",target:"_blank",rel:"noopener noreferrer"},d=t(`<p>对于作用域链的分析，我们先来新建一个 Scope 对象，封装作用域相关的基本信息:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/utils/Scope.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Statement <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;Statement&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Declaration <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;ast/Declaration&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">ScopeOptions</span> <span class="token punctuation">{</span>
  parent<span class="token operator">?</span><span class="token operator">:</span> Scope<span class="token punctuation">;</span>
  paramNodes<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  block<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  statement<span class="token operator">:</span> Statement<span class="token punctuation">;</span>
  isTopLevel<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Scope</span> <span class="token punctuation">{</span>
  <span class="token comment">// 父作用域</span>
  parent<span class="token operator">?</span><span class="token operator">:</span> Scope<span class="token punctuation">;</span>
  <span class="token comment">// 如果是函数作用域，则需要参数节点</span>
  paramNodes<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">// 是否为块级作用域</span>
  isBlockScope<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  <span class="token comment">// 作用域对应的语句节点</span>
  statement<span class="token operator">:</span> Statement<span class="token punctuation">;</span>
  <span class="token comment">// 变量/函数 声明节点，为 Scope 的核心数据</span>
  declarations<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> Declaration<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>options<span class="token operator">:</span> ScopeOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> parent<span class="token punctuation">,</span> paramNodes<span class="token punctuation">,</span> block<span class="token punctuation">,</span> statement <span class="token punctuation">}</span> <span class="token operator">=</span> options<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> parent<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>paramNodes <span class="token operator">=</span> paramNodes <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>statement <span class="token operator">=</span> statement<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>isBlockScope <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>block<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>paramNodes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>
      <span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
        <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>declarations<span class="token punctuation">[</span>node<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Declaration</span><span class="token punctuation">(</span>
          node<span class="token punctuation">,</span>
          <span class="token boolean">true</span><span class="token punctuation">,</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>statement
        <span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">addDeclaration</span><span class="token punctuation">(</span>node<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> isBlockDeclaration<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// block scope &amp; var, 向上追溯，直到顶层作用域</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>isBlockScope <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isBlockDeclaration <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>parent<span class="token punctuation">.</span><span class="token function">addDeclaration</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> isBlockDeclaration<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 否则在当前作用域新建声明节点(Declaration)</span>
      <span class="token keyword">const</span> key <span class="token operator">=</span> node<span class="token punctuation">.</span>id <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>id<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>declarations<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Declaration</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>statement<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 遍历声明节点(Declaration)</span>
  <span class="token function">eachDeclaration</span><span class="token punctuation">(</span><span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> dec<span class="token operator">:</span> Declaration<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>declarations<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">fn</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>declarations<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">contains</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> Declaration <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findDeclaration</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">findDeclaration</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> Declaration <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>declarations<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">||</span>
      <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>parent<span class="token punctuation">.</span><span class="token function">findDeclaration</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Scope 的核心在于声明节点(即<code>Declaration</code>)的收集与存储，而上述的代码中并没有 Declaration 对象的实现，接下来我们来封装一下这个对象:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/ast/Declaration.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Module <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../Module&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Statement <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../Statement&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Reference <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Reference&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Declaration</span> <span class="token punctuation">{</span>
  isFunctionDeclaration<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  functionNode<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
  statement<span class="token operator">:</span> Statement <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  isParam<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  isUsed<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  isReassigned<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>node<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> isParam<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span> statement<span class="token operator">:</span> Statement <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 考虑函数和变量声明两种情况</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;FunctionDeclaration&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>isFunctionDeclaration <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>functionNode <span class="token operator">=</span> node<span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>
        node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;VariableDeclarator&#39;</span> <span class="token operator">&amp;&amp;</span>
        node<span class="token punctuation">.</span>init <span class="token operator">&amp;&amp;</span>
        <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">FunctionExpression</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>init<span class="token punctuation">.</span>type<span class="token punctuation">)</span>
      <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>isFunctionDeclaration <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>functionNode <span class="token operator">=</span> node<span class="token punctuation">.</span>init<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>statement <span class="token operator">=</span> statement<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>isParam <span class="token operator">=</span> isParam<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token function">addReference</span><span class="token punctuation">(</span>reference<span class="token operator">:</span> Reference<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    reference<span class="token punctuation">.</span>declaration <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> reference<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>既然有了声明节点，那么我们如果感知到哪些地方使用了这些节点呢？这时候就需要 Reference 节点登场了，它的作用就是记录其它节点与 Declaration 节点的引用关系，让我门来简单实现一下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Scope <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Scope&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Statement <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../Statement&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Declaration <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Declaration&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Reference</span> <span class="token punctuation">{</span>
  node<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
  scope<span class="token operator">:</span> Scope<span class="token punctuation">;</span>
  statement<span class="token operator">:</span> Statement<span class="token punctuation">;</span>
  <span class="token comment">// declaration 信息在构建依赖图的部分补充</span>
  declaration<span class="token operator">:</span> Declaration <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  start<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  end<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  objectPaths<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>node<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> scope<span class="token operator">:</span> Scope<span class="token punctuation">,</span> statement<span class="token operator">:</span> Statement<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>node <span class="token operator">=</span> node<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>scope <span class="token operator">=</span> scope<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>statement <span class="token operator">=</span> statement<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> node<span class="token punctuation">.</span>start<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>end <span class="token operator">=</span> node<span class="token punctuation">.</span>end<span class="token punctuation">;</span>
    <span class="token keyword">let</span> root <span class="token operator">=</span> node<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>objectPaths <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;MemberExpression&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>objectPaths<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>property<span class="token punctuation">)</span><span class="token punctuation">;</span>
      root <span class="token operator">=</span> root<span class="token punctuation">.</span>object<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>objectPaths<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> root<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>OK，前面铺垫了这么多基础的数据结构，让大家了解到各个关键对象的作用及其联系，接下来我们正式开始编写构建作用域链的代码。</p><p>你可以新建<code>src/utils/buildScope.ts</code>，内容如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> walk <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;utils/walk&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Scope <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;ast/Scope&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Statement <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;Statement&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>
  NodeType<span class="token punctuation">,</span>
  Node<span class="token punctuation">,</span>
  VariableDeclaration<span class="token punctuation">,</span>
  VariableDeclarator
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;ast-parser&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> FunctionDeclaration <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;ast-parser&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">buildScope</span><span class="token punctuation">(</span>statement<span class="token operator">:</span> Statement<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> node<span class="token punctuation">,</span> scope<span class="token operator">:</span> initialScope <span class="token punctuation">}</span> <span class="token operator">=</span> statement<span class="token punctuation">;</span>
  <span class="token keyword">let</span> scope <span class="token operator">=</span> initialScope<span class="token punctuation">;</span>
  <span class="token comment">// 遍历 AST</span>
  <span class="token function">walk</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token comment">// 遵循深度优先的原则，每进入和离开一个节点会触发 enter 和 leave 钩子</span>
    <span class="token comment">// 如 a 的子节点为 b，那么触发顺序为 a-enter、b-enter、b-leave、a-leave</span>
    <span class="token function">enter</span><span class="token punctuation">(</span>node<span class="token operator">:</span> Node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// function foo () {...}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeType<span class="token punctuation">.</span>FunctionDeclaration<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        scope<span class="token punctuation">.</span><span class="token function">addDeclaration</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// var let const</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeType<span class="token punctuation">.</span>VariableDeclaration<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> currentNode <span class="token operator">=</span> node <span class="token keyword">as</span> VariableDeclaration<span class="token punctuation">;</span>
        <span class="token keyword">const</span> isBlockDeclaration <span class="token operator">=</span> currentNode<span class="token punctuation">.</span>kind <span class="token operator">!==</span> <span class="token string">&#39;var&#39;</span><span class="token punctuation">;</span>
        currentNode<span class="token punctuation">.</span>declarations<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>declarator<span class="token operator">:</span> VariableDeclarator<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          scope<span class="token punctuation">.</span><span class="token function">addDeclaration</span><span class="token punctuation">(</span>declarator<span class="token punctuation">,</span> isBlockDeclaration<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">let</span> newScope<span class="token punctuation">;</span>

      <span class="token comment">// function scope</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeType<span class="token punctuation">.</span>FunctionDeclaration<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> currentNode <span class="token operator">=</span> node <span class="token keyword">as</span> FunctionDeclaration<span class="token punctuation">;</span>
        newScope <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scope</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          parent<span class="token operator">:</span> scope<span class="token punctuation">,</span>
          block<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
          paramNodes<span class="token operator">:</span> currentNode<span class="token punctuation">.</span>params<span class="token punctuation">,</span>
          statement
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// new block scope</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeType<span class="token punctuation">.</span>BlockStatement<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        newScope <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scope</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          parent<span class="token operator">:</span> scope<span class="token punctuation">,</span>
          block<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
          statement
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// 记录 Scope 父子关系</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>newScope<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token string">&#39;_scope&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
          value<span class="token operator">:</span> newScope<span class="token punctuation">,</span>
          configurable<span class="token operator">:</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        scope <span class="token operator">=</span> newScope<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">leave</span><span class="token punctuation">(</span>node<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 更新当前作用域</span>
      <span class="token comment">// 当前 scope 即 node._scope</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>_scope <span class="token operator">&amp;&amp;</span> scope<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        scope <span class="token operator">=</span> scope<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从中可以看到，我们会对如下类型的 AST 节点进行处理:</p><ul><li><p>变量声明节点。包括<code>var</code>、<code>let</code>和<code>const</code>声明对应的节点。对<code>let</code>和<code>const</code>，我们需要将声明节点绑定到<code>当前作用域</code>中，而对于<code>var</code>，需要绑定到全局作用域。</p></li><li><p>函数声明节点。对于这类节点，我们直接创建一个新的作用域。</p></li><li><p>块级节点。即用 <code>{ }</code> 包裹的节点，如 if 块、函数体，此时我们也创建新的作用域。</p></li></ul><p>在构建完作用域完成后，我们进入下一个环节: <strong>记录引用节点</strong>。</p><p>新建<code>src/utils/findReference.ts</code>，内容如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Statement <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;Statement&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> walk <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;utils/walk&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Reference <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;ast/Reference&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">isReference</span><span class="token punctuation">(</span>node<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> parent<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;MemberExpression&#39;</span> <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span>type <span class="token operator">!==</span> <span class="token string">&#39;MemberExpression&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;Identifier&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如 export { foo as bar }, 忽略 bar</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;ExportSpecifier&#39;</span> <span class="token operator">&amp;&amp;</span> node <span class="token operator">!==</span> parent<span class="token punctuation">.</span>local<span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token comment">// 如 import { foo as bar } from &#39;xxx&#39;, 忽略 bar</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;ImportSpecifier&#39;</span> <span class="token operator">&amp;&amp;</span> node <span class="token operator">!==</span> parent<span class="token punctuation">.</span>imported<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">findReference</span><span class="token punctuation">(</span>statement<span class="token operator">:</span> Statement<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> references<span class="token punctuation">,</span> scope<span class="token operator">:</span> initialScope<span class="token punctuation">,</span> node <span class="token punctuation">}</span> <span class="token operator">=</span> statement<span class="token punctuation">;</span>
  <span class="token keyword">let</span> scope <span class="token operator">=</span> initialScope<span class="token punctuation">;</span>
  <span class="token function">walk</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function">enter</span><span class="token punctuation">(</span>node<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> parent<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>_scope<span class="token punctuation">)</span> scope <span class="token operator">=</span> node<span class="token punctuation">.</span>_scope<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isReference</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 记录 Reference 节点</span>
        <span class="token keyword">const</span> reference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Reference</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> scope<span class="token punctuation">,</span> statement<span class="token punctuation">)</span><span class="token punctuation">;</span>
        references<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>reference<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">leave</span><span class="token punctuation">(</span>node<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>_scope <span class="token operator">&amp;&amp;</span> scope<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        scope <span class="token operator">=</span> scope<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，我们就完成了模块 AST 解析的功能。</p><h2 id="模块依赖图绑定" tabindex="-1"><a class="header-anchor" href="#模块依赖图绑定" aria-hidden="true">#</a> 模块依赖图绑定</h2><p>回到 Graph 对象中，接下来我们需要实现的是模块依赖图的构建:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/Graph.ts</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Graph</span> <span class="token punctuation">{</span>
  <span class="token keyword">async</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//  ✅(完成) 1. 获取并解析模块信息</span>
    <span class="token comment">// 2. 构建依赖关系图</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>module<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>module <span class="token operator">=&gt;</span> <span class="token function">module</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 3. 模块拓扑排序</span>
    <span class="token comment">// 4. Tree Shaking, 标记需要包含的语句</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们在 Module 对象的 AnalyzeAST 中新增依赖绑定的代码:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/Module.ts</span>
<span class="token function">analyzeAST</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 如果语句为 import/export 声明，那么给当前模块记录依赖的标识符</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>statements<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>statement<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>statement<span class="token punctuation">.</span>isImportDeclaration<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addImports</span><span class="token punctuation">(</span>statement<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>statement<span class="token punctuation">.</span>isExportDeclaration<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addExports</span><span class="token punctuation">(</span>statement<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 处理 import 声明</span>
<span class="token function">addImports</span><span class="token punctuation">(</span>statement<span class="token operator">:</span> Statement<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> node <span class="token operator">=</span> statement<span class="token punctuation">.</span>node <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> source <span class="token operator">=</span> node<span class="token punctuation">.</span>source<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
  <span class="token comment">// import</span>
  node<span class="token punctuation">.</span>specifiers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>specifier<span class="token operator">:</span> Specifier<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 为方便理解，本文只处理具名导入</span>
    <span class="token keyword">const</span> localName <span class="token operator">=</span> specifier<span class="token punctuation">.</span>local<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token keyword">const</span> name <span class="token operator">=</span> specifier<span class="token punctuation">.</span>imported<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>imports<span class="token punctuation">[</span>localName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> source<span class="token punctuation">,</span> name<span class="token punctuation">,</span> localName <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_addDependencySource</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 处理 export 声明</span>
<span class="token function">addExports</span><span class="token punctuation">(</span>statement<span class="token operator">:</span> Statement<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> node <span class="token operator">=</span> statement<span class="token punctuation">.</span>node <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> source <span class="token operator">=</span> node<span class="token punctuation">.</span>source <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>source<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
  <span class="token comment">// 为方便立即，本文只处理具名导出</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;ExportNamedDeclaration&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// export { a, b } from &#39;mod&#39;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>specifiers<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      node<span class="token punctuation">.</span>specifiers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>specifier<span class="token operator">:</span> Specifier<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> localName <span class="token operator">=</span> specifier<span class="token punctuation">.</span>local<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
        <span class="token keyword">const</span> exportedName <span class="token operator">=</span> specifier<span class="token punctuation">.</span>exported<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>exports<span class="token punctuation">[</span>exportedName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
          localName<span class="token punctuation">,</span>
          name<span class="token operator">:</span> exportedName
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>reexports<span class="token punctuation">[</span>localName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
            statement<span class="token punctuation">,</span>
            source<span class="token punctuation">,</span>
            localName<span class="token punctuation">,</span>
            name<span class="token operator">:</span> localName<span class="token punctuation">,</span>
            module<span class="token operator">:</span> <span class="token keyword">undefined</span>
          <span class="token punctuation">}</span><span class="token punctuation">;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>imports<span class="token punctuation">[</span>localName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
            source<span class="token punctuation">,</span>
            localName<span class="token punctuation">,</span>
            name<span class="token operator">:</span> localName
          <span class="token punctuation">}</span><span class="token punctuation">;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_addDependencySource</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> declaration <span class="token operator">=</span> node<span class="token punctuation">.</span>declaration<span class="token punctuation">;</span>
      <span class="token keyword">let</span> name<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>declaration<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;VariableDeclaration&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// export const foo = 2;</span>
        name <span class="token operator">=</span> declaration<span class="token punctuation">.</span>declarations<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// export function foo() {}</span>
        name <span class="token operator">=</span> declaration<span class="token punctuation">.</span>id<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>exports<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
        statement<span class="token punctuation">,</span>
        localName<span class="token operator">:</span> name<span class="token punctuation">,</span>
        name
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;ExportAllDeclaration&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// export * from &#39;mod&#39;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>exportAllSources<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addDependencySource</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token function">_addDependencySource</span><span class="token punctuation">(</span>source<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>dependencies<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>dependencies<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在记录完 import 和 export 的标识符之后，我们根据这些标识符绑定到具体的模块对象，新增<code>bind</code>方法，实现如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 省略已有代码</span>
  <span class="token comment">// 记录标识符对应的模块对象</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">bindDependencies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/// 除此之外，根据之前记录的 Reference 节点绑定对应的 Declaration 节点</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">bindReferences</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">bindDependencies</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token operator">...</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>imports<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">...</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reexports<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span>specifier<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      specifier<span class="token punctuation">.</span>module <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_getModuleBySource</span><span class="token punctuation">(</span>specifier<span class="token punctuation">.</span>source<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>exportAllModules <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>exportAllSources<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_getModuleBySource</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 建立模块依赖图</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>dependencyModules <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dependencies<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_getModuleBySource</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>dependencyModules<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    module<span class="token punctuation">.</span>referencedModules<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">bindReferences</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>statements<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>statement<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    statement<span class="token punctuation">.</span>references<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>reference<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 根据引用寻找声明的位置</span>
      <span class="token comment">// 寻找顺序: 1. statement 2. 当前模块 3. 依赖模块</span>
      <span class="token keyword">const</span> declaration <span class="token operator">=</span>
        reference<span class="token punctuation">.</span>scope<span class="token punctuation">.</span><span class="token function">findDeclaration</span><span class="token punctuation">(</span>reference<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">||</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span>reference<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>declaration<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        declaration<span class="token punctuation">.</span><span class="token function">addReference</span><span class="token punctuation">(</span>reference<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token function">_getModuleBySource</span><span class="token punctuation">(</span>source<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>moduleLoader<span class="token punctuation">.</span><span class="token function">resolveId</span><span class="token punctuation">(</span>source<span class="token operator">!</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>path<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bundle<span class="token punctuation">.</span><span class="token function">getModuleById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们便将各个模块间的依赖关系绑定完成了。</p><h2 id="模块拓扑排序" tabindex="-1"><a class="header-anchor" href="#模块拓扑排序" aria-hidden="true">#</a> 模块拓扑排序</h2><p>接下来，我们将所有的模块根据依赖关系进行拓扑排序:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/Graph.ts</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Graph</span> <span class="token punctuation">{</span>
  <span class="token keyword">async</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//  ✅(完成) 1. 获取并解析模块信息</span>
    <span class="token comment">//  ✅(完成) 2. 构建依赖关系图</span>
    <span class="token comment">// 3. 模块拓扑排序</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>orderedModules <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sortModules</span><span class="token punctuation">(</span>entryModule<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 4. Tree Shaking, 标记需要包含的语句</span>
  <span class="token punctuation">}</span>
  
  <span class="token function">sortModules</span><span class="token punctuation">(</span>entryModule<span class="token operator">:</span> Module<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 拓扑排序模块数组</span>
    <span class="token keyword">const</span> orderedModules<span class="token operator">:</span> Module<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// 记录已经分析过的模块表</span>
    <span class="token keyword">const</span> analysedModule<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// 记录模块的父模块 id </span>
    <span class="token keyword">const</span> parent<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// 记录循环依赖</span>
    <span class="token keyword">const</span> cyclePathList<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 用来回溯，用来定位循环依赖</span>
    <span class="token keyword">function</span> <span class="token function">getCyclePath</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> parentId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> paths <span class="token operator">=</span> <span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> currrentId <span class="token operator">=</span> parentId<span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>currrentId <span class="token operator">!==</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        paths<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>currrentId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 向前回溯</span>
        currrentId <span class="token operator">=</span> parent<span class="token punctuation">[</span>currrentId<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      paths<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>paths<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> paths<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 拓扑排序核心逻辑，基于依赖图的后序遍历完成</span>
    <span class="token keyword">function</span> <span class="token function">analyseModule</span><span class="token punctuation">(</span>module<span class="token operator">:</span> Module<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>analysedModule<span class="token punctuation">[</span>module<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> dependency <span class="token keyword">of</span> module<span class="token punctuation">.</span>dependencyModules<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 检测循环依赖</span>
        <span class="token comment">// 为什么是这个条件，下文会分析</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">[</span>dependency<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>analysedModule<span class="token punctuation">[</span>dependency<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cyclePathList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">getCyclePath</span><span class="token punctuation">(</span>dependency<span class="token punctuation">.</span>id<span class="token punctuation">,</span> module<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        parent<span class="token punctuation">[</span>dependency<span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> module<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
        <span class="token function">analyseModule</span><span class="token punctuation">(</span>dependency<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      analysedModule<span class="token punctuation">[</span>module<span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      orderedModules<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 从入口模块开始分析</span>
    <span class="token function">analyseModule</span><span class="token punctuation">(</span>entryModule<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 如果有循环依赖，则打印循环依赖信息</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cyclePathList<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      cyclePathList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>paths<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>paths<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> orderedModules<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>拓扑排序的核心在于对依赖图进行后续遍历，将被依赖的模块放到前面，如下图所示:</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a33a6a2f4d284f1093b3ea5e796a03aa~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>其中 A 依赖 B 和 C，B 和 C 依赖 D，D 依赖 E，那么最后的拓扑排序即<code>E、D、B、C、A</code>。但也有一种特殊情况，就是出现循环的情况，如下面这张图所示:</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a5de64cd3e114e98873976cd3dbc768f~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>上图中的依赖关系呈现了<code>B-&gt;C-&gt;D-&gt;B</code>的循环依赖，这种情况是我们需要避免的。那么如何来检测出循环依赖呢？</p><p>由于 <code>analyseModule</code> 函数中采用后序的方式来遍历依赖，也就是说一旦某个模块被记录到 <code>analysedModule</code> 表中，那么也就意味着其所有的依赖模块已经被遍历完成了:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">analyseModule</span><span class="token punctuation">(</span>module<span class="token operator">:</span> Module<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>analysedModule<span class="token punctuation">[</span>module<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> dependency <span class="token keyword">of</span> module<span class="token punctuation">.</span>dependencyModules<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 检测循环依赖的代码省略</span>
    parent<span class="token punctuation">[</span>dependency<span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> module<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
    <span class="token function">analyseModule</span><span class="token punctuation">(</span>dependency<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  analysedModule<span class="token punctuation">[</span>module<span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  orderedModules<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果某个模块没有被记录到 analysedModule 中，则表示它的依赖模块并没有分析完，在这个前提下中，如果再次遍历到这个模块，说明已经出现了循环依赖，你可以对照下图理解:</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a5de64cd3e114e98873976cd3dbc768f~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>因此检测循环依赖的条件应该为下面这样:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> dependency <span class="token keyword">of</span> module<span class="token punctuation">.</span>dependencyModules<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 检测循环依赖</span>
  <span class="token comment">// 1. 不为入口模块</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">[</span>dependency<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 2. 依赖模块还没有分析结束</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>analysedModule<span class="token punctuation">[</span>dependency<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      cyclePathList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">getCyclePath</span><span class="token punctuation">(</span>dependency<span class="token punctuation">.</span>id<span class="token punctuation">,</span> module<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">continue</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  parent<span class="token punctuation">[</span>dependency<span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> module<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
  <span class="token function">analyseModule</span><span class="token punctuation">(</span>dependency<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>OK，到目前为止，我们完成了第三步<code>模块拓扑排序</code>的步骤，接下来我们进入 Tree Shaking 功能的开发:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/Graph.ts</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Graph</span> <span class="token punctuation">{</span>
  <span class="token keyword">async</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ✅(完成) 1. 获取并解析模块信息</span>
    <span class="token comment">// ✅(完成) 2. 构建依赖关系图</span>
    <span class="token comment">// ✅(完成) 3. 模块拓扑排序</span>
    <span class="token comment">// 4. Tree Shaking, 标记需要包含的语句</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实现-tree-shaking" tabindex="-1"><a class="header-anchor" href="#实现-tree-shaking" aria-hidden="true">#</a> 实现 Tree Shaking</h2><p>相信 Tree Shaking 对于大家并不陌生，它主要的作用就是在打包产物中摇掉没有使用的代码，从而优化产物体积。而得益于 ES 模块的静态特性，我们可以基于 import/export 的符号可达性来进行 Tree Shaking 分析，如:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// index.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> a <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./utils&#39;</span><span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// utils.ts</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于在如上的代码中我们只使用到了 a，则 a 属于可达符号，b 属于不可达符号，因此最后的代码不会包含 b 相关的实现代码。</p><p>接下来我们就来实现这一功能，即基于符号可达性来进行无用代码的删除。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/Graph.ts</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Graph</span> <span class="token punctuation">{</span>
  <span class="token keyword">async</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ✅(完成) 1. 获取并解析模块信息</span>
    <span class="token comment">// ✅(完成) 2. 构建依赖关系图</span>
    <span class="token comment">// ✅(完成) 3. 模块拓扑排序</span>
    <span class="token comment">// 4. Tree Shaking, 标记需要包含的语句</span>
    <span class="token comment">// 从入口处分析</span>
    entryModule<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">getExports</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> declaration <span class="token operator">=</span> entryModule<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">traceExport</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
      declaration<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Module 对象中，我们需要增加<code>getExports</code>和<code>traceExport</code>方法来获取和分析模块的导出:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 拿到模块所有导出</span>
<span class="token function">getExports</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span>
    <span class="token operator">...</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>exports<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token operator">...</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reexports<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>exportAllModules
      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>module <span class="token operator">=&gt;</span> module<span class="token punctuation">.</span><span class="token function">getExports</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 从导出名追溯到 Declaration 声明节点</span>
<span class="token function">traceExport</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> Declaration <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
  <span class="token comment">// 1. reexport</span>
  <span class="token comment">// export { foo as bar } from &#39;./mod&#39;</span>
  <span class="token keyword">const</span> reexportDeclaration <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reexports<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>reexportDeclaration<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 说明是从其它模块 reexport 出来的</span>
    <span class="token comment">// 经过 bindDependencies 方法处理，现已绑定 module</span>
    <span class="token keyword">const</span> declaration <span class="token operator">=</span> reexportDeclaration<span class="token punctuation">.</span>module<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">traceExport</span><span class="token punctuation">(</span>
      reexportDeclaration<span class="token punctuation">.</span>localName
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>declaration<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>reexportDeclaration<span class="token punctuation">.</span>localName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is not exported by module </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>
          reexportDeclaration<span class="token punctuation">.</span>module<span class="token operator">!</span><span class="token punctuation">.</span>path
        <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">(imported by </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> declaration<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 2. export</span>
  <span class="token comment">// export { foo }</span>
  <span class="token keyword">const</span> exportDeclaration <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>exports<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>exportDeclaration<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> declaration <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>declaration<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> declaration<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 3. export all</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> exportAllModule <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>exportAllModules<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> declaration <span class="token operator">=</span> exportAllModule<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>declaration<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> declaration<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">trace</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>declarations<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 从当前模块找</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>declarations<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 从依赖模块找</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>imports<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> importSpecifier <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>imports<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> importModule <span class="token operator">=</span> importSpecifier<span class="token punctuation">.</span>module<span class="token operator">!</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> declaration <span class="token operator">=</span> importModule<span class="token punctuation">.</span><span class="token function">traceExport</span><span class="token punctuation">(</span>importSpecifier<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>declaration<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> declaration<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们对每个导出找到对应的 Declaration 节点之后，则对这个节点进行标记，从而让其代码能够在代码生成阶段得以保留。那么如何进行标记呢？</p><p>我们不妨回到 Declaration 的实现中，增加 <code>use</code> 方法:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 标记该节点被使用</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>isUsed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token comment">// 对应的 statement 节点也应该被标记</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>statement<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>statement<span class="token punctuation">.</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 另外，你可以加上 render 方法，便于后续代码生成的步骤</span>
<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们到 Statement 对象中，继续增加 mark 方法，来追溯被使用过的 Declaration 节点:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/Statement.ts</span>
<span class="token function">mark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>isIncluded<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>isIncluded <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>references<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span>ref<span class="token operator">:</span> Reference<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ref<span class="token punctuation">.</span>declaration <span class="token operator">&amp;&amp;</span> ref<span class="token punctuation">.</span>declaration<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时候，Reference 节点的作用就体现出来了，由于我们之前专门收集到 Statement 的 Reference 节点，通过 Reference 节点我们可以追溯到对应的 Declaration 节点，并调用其 use 方法进行标记。</p><h2 id="代码生成" tabindex="-1"><a class="header-anchor" href="#代码生成" aria-hidden="true">#</a> 代码生成</h2><p>如此，我们便完成了 Tree Shaking 的标记过程，接下来我们看看如何来进行代码生成，直观地看到 Tree Shaking 的效果。</p><p>我们在 Module 对象中增加<code>render</code>方法，用来将模块渲染为字符串:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> source <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>magicString<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>statements<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>statement<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1. Tree Shaking</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>statement<span class="token punctuation">.</span>isIncluded<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      source<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>statement<span class="token punctuation">.</span>start<span class="token punctuation">,</span> statement<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 2. 重写引用位置的变量名 -&gt; 对应的声明位置的变量名</span>
    statement<span class="token punctuation">.</span>references<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>reference<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> start<span class="token punctuation">,</span> end <span class="token punctuation">}</span> <span class="token operator">=</span> reference<span class="token punctuation">;</span>
      <span class="token keyword">const</span> declaration <span class="token operator">=</span> reference<span class="token punctuation">.</span>declaration<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>declaration<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> name <span class="token operator">=</span> declaration<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        source<span class="token punctuation">.</span><span class="token function">overwrite</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> name<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 3. 擦除/重写 export 相关的代码</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>statement<span class="token punctuation">.</span>isExportDeclaration <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isEntry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// export { foo, bar }</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>
        statement<span class="token punctuation">.</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;ExportNamedDeclaration&#39;</span> <span class="token operator">&amp;&amp;</span>
        statement<span class="token punctuation">.</span>node<span class="token punctuation">.</span>specifiers<span class="token punctuation">.</span>length
      <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        source<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>statement<span class="token punctuation">.</span>start<span class="token punctuation">,</span> statement<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// remove \`export\` from \`export const foo = 42\`</span>
      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>
        statement<span class="token punctuation">.</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;ExportNamedDeclaration&#39;</span> <span class="token operator">&amp;&amp;</span>
        <span class="token punctuation">(</span>statement<span class="token punctuation">.</span>node<span class="token punctuation">.</span>declaration<span class="token operator">!</span><span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;VariableDeclaration&#39;</span> <span class="token operator">||</span>
          statement<span class="token punctuation">.</span>node<span class="token punctuation">.</span>declaration<span class="token operator">!</span><span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;FunctionDeclaration&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        source<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>
          statement<span class="token punctuation">.</span>node<span class="token punctuation">.</span>start<span class="token punctuation">,</span>
          statement<span class="token punctuation">.</span>node<span class="token punctuation">.</span>declaration<span class="token operator">!</span><span class="token punctuation">.</span>start
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// remove \`export * from &#39;./mod&#39;\`</span>
      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>statement<span class="token punctuation">.</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;ExportAllDeclaration&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        source<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>statement<span class="token punctuation">.</span>start<span class="token punctuation">,</span> statement<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> source<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着，我们在 Bundle 对象也实现一下 render 方法，用来生成最后的产物代码:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">{</span> code<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> msBundle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MagicString</span><span class="token punctuation">.</span><span class="token function">Bundle</span><span class="token punctuation">(</span><span class="token punctuation">{</span> separator<span class="token operator">:</span> <span class="token string">&#39;\\n&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 按照模块拓扑顺序生成代码</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>graph<span class="token punctuation">.</span>orderedModules<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    msBundle<span class="token punctuation">.</span><span class="token function">addSource</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      content<span class="token operator">:</span> module<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    code<span class="token operator">:</span> msBundle<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>OK，现在我们终于可以来测试目前的 Bundler 功能了，测试代码如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// test.js</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> build <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;./dist/index&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">buildTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> bundle <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    input<span class="token operator">:</span> <span class="token string">&#39;./test/index.js&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> bundle<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span><span class="token string">&#39;./test/bundle.js&#39;</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">buildTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// test/index.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> a<span class="token punctuation">,</span> add <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./utils.js&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// test/utils.js</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在终端执行<code>node test.js</code>，即可将产物代码输出到 test 目录下的 <code>bundle.js</code> 中:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// test/bundle.js</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，最后的产物代码已经成功生成，变量 b 相关的代码已经完全从产出中擦除，实现了基于符号可达性的 Tree Shaking 的效果。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>至此，我们便实现了一个简易版的 Bundler，完成了如下几个核心的步骤:</p><ul><li>模块 AST 解析</li><li>模块依赖图生成</li><li>模块拓扑排序</li><li>基于符号可达性的 Tree Shaking</li><li>Bundle 代码生成</li></ul>`,67),v={href:"https://github.com/sanyuan0704/juejin-book-vite/tree/main/bundler",target:"_blank",rel:"noopener noreferrer"},m=s("p",null,"最后，恭喜你学习完了本小册最后一节的内容，不过我并不希望这一小节作为小册的结束，在未来我还会不定期地更新一些加餐内容，将这本小册打磨得更加系统和完善，和大家一起继续加油！",-1);function b(y,w){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,s("p",null,[n("而无论是构建作用域链还是记录引用节点，我们都离不开一个最基本的操作，那就是对 AST 进行遍历操作。你可以新建"),k,n("，用来存放 AST 节点遍历的逻辑，代码可以去 "),s("a",r,[n("Github 仓库链接"),p(a)]),n("获取，由于这部分内容并不属于本文的重点，就不再详细赘述了，感兴趣的同学可以研究一下实现细节。接下来我们主要通过这个遍历器来完成 Statement 节点的分析。")]),d,s("p",null,[n("文中所有的代码我也已经放到了 "),s("a",v,[n("Github 仓库"),p(a)]),n("上，你可以对照着一起学习。")]),m])}const g=e(i,[["render",b],["__file","di27zhang—shouxieBundler：shixiandaimadabao、TreeShaking.html.vue"]]);export{g as default};
