import{_ as p,r as o,o as c,c as i,b as n,d as s,e as t,a as e}from"./app-48690364.js";const l={},u=n("p",null,"我们知道，Vite 在开发阶段实现了一个按需加载的服务器，每一个文件请求进来都会经历一系列的编译流程，然后 Vite 会将编译结果响应给浏览器。在生产环境下，Vite 同样会执行一系列编译过程，将编译结果交给 Rollup 进行模块打包。这一系列的编译过程指的就是 Vite 的插件工作流水线(Pipeline)，而插件功能又是 Vite 构建能力的核心，因此谈到阅读 Vite 源码，我们永远绕不开插件的作用与实现原理。",-1),r=n("p",null,[s("接下来，我就和你一起分析 Vite 插件流水线的顶层架构，也就是各个插件如何被调度和组织起来的，详细说说 Vite 插件容器("),n("code",null,"PluginContainer"),s(")机制的实现，同时带你一起梳理开发阶段和生产环境各自会用到的插件，并分析各自的功能与实现原理，让你能够全面、准确地认识 Vite 的插件流水线！")],-1),d=n("h2",{id:"插件容器",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#插件容器","aria-hidden":"true"},"#"),s(" 插件容器")],-1),k={href:"https://juejin.cn/book/7050063811973218341/section/7060398408430780431",target:"_blank",rel:"noopener noreferrer"},v=n("p",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/02910cd2c6894bcdb3a9e0fc9e59f4c2~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"})],-1),m=n("p",null,"我们可以看到:",-1),b=n("ul",null,[n("li",null,"在生产环境中 Vite 直接调用 Rollup 进行打包，所以 Rollup 可以调度各种插件；"),n("li",null,[s("在开发环境中，Vite 模拟了 Rollup 的插件机制，设计了一个"),n("code",null,"PluginContainer"),s(" 对象来调度各个插件。")])],-1),g=n("p",null,[n("code",null,"PluginContainer"),s("(插件容器)对象非常重要，前两节我们也多次提到了它，接下来我们就把目光集中到这个对象身上，看看 Vite 的插件容器机制究竟是如何实现的。")],-1),h=n("code",null,"PluginContainer",-1),f={href:"https://github.com/vitejs/vite/blob/main/packages/vite/src/node/server/pluginContainer.ts",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"rollup-plugin-container.js",-1),y=n("ol",null,[n("li",null,"实现 Rollup 插件钩子的调度"),n("li",null,"实现插件钩子内部的 Context 上下文对象")],-1),w={href:"https://github.com/vitejs/vite/blob/main/packages/vite/src/node/server/pluginContainer.ts#L463",target:"_blank",rel:"noopener noreferrer"},x=e(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> container <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 异步串行钩子</span>
  options<span class="token operator">:</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> options <span class="token operator">=</span> rollupOptions
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> plugin <span class="token keyword">of</span> plugins<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>plugin<span class="token punctuation">.</span>options<span class="token punctuation">)</span> <span class="token keyword">continue</span>
      options <span class="token operator">=</span>
        <span class="token punctuation">(</span><span class="token keyword">await</span> plugin<span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>minimalContext<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> options
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> options<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token comment">// 异步并行钩子</span>
  <span class="token keyword">async</span> <span class="token function">buildStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>
      plugins<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>plugin<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>plugin<span class="token punctuation">.</span>buildStart<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> plugin<span class="token punctuation">.</span><span class="token function">buildStart</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>
            <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span>plugin<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">,</span>
            container<span class="token punctuation">.</span>options <span class="token keyword">as</span> NormalizedInputOptions
          <span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 异步优先钩子</span>
  <span class="token keyword">async</span> <span class="token function">resolveId</span><span class="token punctuation">(</span>rawId<span class="token punctuation">,</span> importer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 上下文对象，后文介绍</span>
    <span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">let</span> id<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token keyword">const</span> partial<span class="token operator">:</span> Partial<span class="token operator">&lt;</span>PartialResolvedId<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> plugin <span class="token keyword">of</span> plugins<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> plugin<span class="token punctuation">.</span><span class="token function">resolveId</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>
        ctx <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">,</span>
        rawId<span class="token punctuation">,</span>
        importer<span class="token punctuation">,</span>
        <span class="token punctuation">{</span> ssr <span class="token punctuation">}</span>
      <span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 异步优先钩子</span>
  <span class="token keyword">async</span> <span class="token function">load</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> plugin <span class="token keyword">of</span> plugins<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> plugin<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>ctx <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> <span class="token punctuation">{</span> ssr <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> result
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 异步串行钩子</span>
  <span class="token keyword">async</span> <span class="token function">transform</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> id<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> ssr <span class="token operator">=</span> options<span class="token operator">?.</span>ssr
    <span class="token comment">// 每次 transform 调度过程会有专门的上下文对象，用于合并 SourceMap，后文会介绍</span>
    <span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransformContext</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> code<span class="token punctuation">,</span> inMap <span class="token keyword">as</span> SourceMap<span class="token punctuation">)</span>
    ctx<span class="token punctuation">.</span>ssr <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>ssr
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> plugin <span class="token keyword">of</span> plugins<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> result<span class="token operator">:</span> TransformResult <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        result <span class="token operator">=</span> <span class="token keyword">await</span> plugin<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>ctx <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">,</span> code<span class="token punctuation">,</span> id<span class="token punctuation">,</span> <span class="token punctuation">{</span> ssr <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ctx<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token comment">// 省略 SourceMap 合并的逻辑 </span>
      code <span class="token operator">=</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      code<span class="token punctuation">,</span>
      map<span class="token operator">:</span> ctx<span class="token punctuation">.</span><span class="token function">_getCombinedSourcemap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// close 钩子实现省略</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),j={href:"https://juejin.cn/book/7050063811973218341/section/7061854307863232547",target:"_blank",rel:"noopener noreferrer"},S=n("code",null,"PluginContainer",-1),q=e(`<p>不过值得注意的是，在各种钩子被调用的时候，Vite 会强制将钩子函数的 <code>this</code> 绑定为一个上下文对象，如:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> plugin<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>ctx <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> <span class="token punctuation">{</span> ssr <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个对象究竟是用来干什么的呢？</p>`,3),C=n("code",null,"this.emitFile",-1),V=n("code",null,"this.resolve",-1),P={href:"https://rollupjs.org/guide/en/#plugin-context",target:"_blank",rel:"noopener noreferrer"},R=n("code",null,"Context",-1),M=e(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> RollupPluginContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;rollup&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">PluginContext</span> <span class="token operator">=</span> Omit<span class="token operator">&lt;</span>
  RollupPluginContext<span class="token punctuation">,</span>
  <span class="token comment">// not documented</span>
  <span class="token operator">|</span> <span class="token string">&#39;cache&#39;</span>
  <span class="token comment">// deprecated</span>
  <span class="token operator">|</span> <span class="token string">&#39;emitAsset&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;emitChunk&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;getAssetFileName&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;getChunkFileName&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;isExternal&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;moduleIds&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;resolveId&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;load&#39;</span>
<span class="token operator">&gt;</span>

<span class="token keyword">const</span> watchFiles <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Context</span> <span class="token keyword">implements</span> <span class="token class-name">PluginContext</span> <span class="token punctuation">{</span>
  <span class="token comment">// 实现各种上下文方法</span>
  <span class="token comment">// 解析模块 AST(调用 acorn)</span>
  <span class="token function">parse</span><span class="token punctuation">(</span>code<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> opts<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      sourceType<span class="token operator">:</span> <span class="token string">&#39;module&#39;</span><span class="token punctuation">,</span>
      ecmaVersion<span class="token operator">:</span> <span class="token string">&#39;latest&#39;</span><span class="token punctuation">,</span>
      locations<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token operator">...</span>opts
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 解析模块路径</span>
  <span class="token keyword">async</span> <span class="token function">resolve</span><span class="token punctuation">(</span>
    id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
    importer<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
    options<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span> skipSelf<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">}</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> skip<span class="token operator">:</span> Set<span class="token operator">&lt;</span>Plugin<span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">undefined</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token operator">?.</span>skipSelf <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_activePlugin<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      skip <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_resolveSkips<span class="token punctuation">)</span>
      skip<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_activePlugin<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> out <span class="token operator">=</span> <span class="token keyword">await</span> container<span class="token punctuation">.</span><span class="token function">resolveId</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> importer<span class="token punctuation">,</span> <span class="token punctuation">{</span> skip<span class="token punctuation">,</span> ssr<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ssr <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> out <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> out <span class="token operator">=</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> out <span class="token punctuation">}</span>
    <span class="token keyword">return</span> out <span class="token keyword">as</span> ResolvedId <span class="token operator">|</span> <span class="token keyword">null</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 以下两个方法均从 Vite 的模块依赖图中获取相关的信息</span>
  <span class="token comment">// 我们将在下一节详细介绍模块依赖图，本节不做展开</span>
  <span class="token function">getModuleInfo</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">getModuleInfo</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">getModuleIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> moduleGraph
      <span class="token operator">?</span> moduleGraph<span class="token punctuation">.</span>idToModuleMap<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token builtin">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  
  <span class="token comment">// 记录开发阶段 watch 的文件</span>
  <span class="token function">addWatchFile</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    watchFiles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
    <span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_addedImports <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_addedImports <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>watcher<span class="token punctuation">)</span> <span class="token function">ensureWatchedFile</span><span class="token punctuation">(</span>watcher<span class="token punctuation">,</span> id<span class="token punctuation">,</span> root<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">getWatchFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>watchFiles<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
  
  <span class="token function">warn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 打印 warning 信息</span>
  <span class="token punctuation">}</span>
  
  <span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 打印 error 信息</span>
  <span class="token punctuation">}</span>
  
  <span class="token comment">// 其它方法只是声明，并没有具体实现，这里就省略了</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>很显然，Vite 将 Rollup 的<code>PluginContext</code>对象重新实现了一遍，因为只是开发阶段用到，所以去除了一些打包相关的方法实现。同时，上下文对象与 Vite 开发阶段的 ModuleGraph 即模块依赖图相结合，是为了实现开发时的 HMR。 HMR 实现的细节，我们将在下一节展开介绍。</p><p>另外，transform 钩子也会绑定一个插件上下文对象，不过这个对象和其它钩子不同，实现代码精简如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">TransformContext</span> <span class="token keyword">extends</span> <span class="token class-name">Context</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>filename<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> code<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> inMap<span class="token operator">?</span><span class="token operator">:</span> SourceMap <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>filename <span class="token operator">=</span> filename
    <span class="token keyword">this</span><span class="token punctuation">.</span>originalCode <span class="token operator">=</span> code
    <span class="token keyword">if</span> <span class="token punctuation">(</span>inMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>sourcemapChain<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>inMap<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">_getCombinedSourcemap</span><span class="token punctuation">(</span>createIfNull <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>combinedMap
  <span class="token punctuation">}</span>

  <span class="token function">getCombinedSourcemap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_getCombinedSourcemap</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">as</span> SourceMap
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，<code>TransformContext</code>继承自之前所说的<code>Context</code>对象，也就是说 transform 钩子的上下文对象相比其它钩子只是做了一些扩展，增加了 sourcemap 合并的功能，将不同插件的 transform 钩子执行后返回的 sourcemap 进行合并，以保证 sourcemap 的准确性和完整性。</p><h2 id="插件工作流概览" tabindex="-1"><a class="header-anchor" href="#插件工作流概览" aria-hidden="true">#</a> 插件工作流概览</h2><p>在分析配置解析服务的小节中，我们提到过生成插件流水线即<code>resolvePlugins</code>的逻辑，但没有具体展开，这里我们就来详细拆解一下 Vite 在这一步究竟做了啥。</p>`,7),L=n("code",null,"resolvePlugins",-1),I={href:"https://github.com/vitejs/vite/blob/main/packages/vite/src/node/plugins/index.ts#L22",target:"_blank",rel:"noopener noreferrer"},E=e(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">resolvePlugins</span><span class="token punctuation">(</span>
  config<span class="token operator">:</span> ResolvedConfig<span class="token punctuation">,</span>
  prePlugins<span class="token operator">:</span> Plugin<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  normalPlugins<span class="token operator">:</span> Plugin<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  postPlugins<span class="token operator">:</span> Plugin<span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Plugin<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> isBuild <span class="token operator">=</span> config<span class="token punctuation">.</span>command <span class="token operator">===</span> <span class="token string">&#39;build&#39;</span>
  <span class="token comment">// 收集生产环境构建的插件，后文会介绍</span>
  <span class="token keyword">const</span> buildPlugins <span class="token operator">=</span> isBuild
    <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;../build&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resolveBuildPlugins</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>
    <span class="token operator">:</span> <span class="token punctuation">{</span> pre<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> post<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">[</span>
    <span class="token comment">// 1. 别名插件</span>
    isBuild <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token function">preAliasPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">aliasPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> entries<span class="token operator">:</span> config<span class="token punctuation">.</span>resolve<span class="token punctuation">.</span>alias <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">// 2. 用户自定义 pre 插件(带有\`enforce: &quot;pre&quot;\`属性)</span>
    <span class="token operator">...</span>prePlugins<span class="token punctuation">,</span>
    <span class="token comment">// 3. Vite 核心构建插件</span>
    <span class="token comment">// 数量比较多，暂时省略代码</span>
    <span class="token comment">// 4. 用户插件（不带有 \`enforce\` 属性）</span>
    <span class="token operator">...</span>normalPlugins<span class="token punctuation">,</span>
    <span class="token comment">// 5. Vite 生产环境插件 &amp; 用户插件(带有 \`enforce: &quot;post&quot;\`属性)</span>
    <span class="token function">definePlugin</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">cssPostPlugin</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token operator">...</span>buildPlugins<span class="token punctuation">.</span>pre<span class="token punctuation">,</span>
    <span class="token operator">...</span>postPlugins<span class="token punctuation">,</span>
    <span class="token operator">...</span>buildPlugins<span class="token punctuation">.</span>post<span class="token punctuation">,</span>
    <span class="token comment">// 6. 一些开发阶段特有的插件</span>
    <span class="token operator">...</span><span class="token punctuation">(</span>isBuild
      <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
      <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">clientInjectionsPlugin</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">importAnalysisPlugin</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span> <span class="token keyword">as</span> Plugin<span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上述代码中我们可以总结出 Vite 插件的具体执行顺序。</p><ol><li><p><strong>别名插件</strong>包括 <code>vite:pre-alias</code>和<code>@rollup/plugin-alias</code>，用于路径别名替换。</p></li><li><p>用户自定义 pre 插件，也就是带有<code>enforce: &quot;pre&quot;</code>属性的自定义插件。</p></li><li><p>Vite 核心构建插件，这部分插件为 Vite 的核心编译插件，数量比较多，我们在下部分一一拆解。</p></li><li><p>用户自定义的普通插件，即不带有 <code>enforce</code> 属性的自定义插件。</p></li><li><p><code>Vite 生产环境插件</code>和用户插件中带有<code>enforce: &quot;post&quot;</code>属性的插件。</p></li><li><p>一些开发阶段特有的插件，包括环境变量注入插件<code>clientInjectionsPlugin</code>和 import 语句分析及重写插件<code>importAnalysisPlugin</code>。</p></li></ol><p>那么，在执行过程中 Vite 到底应用了哪些插件，以及这些插件内部究竟做了什么？我们来一一梳理一下。</p><h2 id="插件功能梳理" tabindex="-1"><a class="header-anchor" href="#插件功能梳理" aria-hidden="true">#</a> 插件功能梳理</h2><blockquote><p>这一节，我们主要围绕实现原理展开，并不会详细介绍所有插件的代码实现细节，不过相应的源码链接我都会放到文章当中，感兴趣的同学可以在课后进一步阅读。</p></blockquote><p>除用户自定义插件之外，我们需要梳理的 Vite 内置插件有下面这几类:</p><ul><li>别名插件</li><li>核心构建插件</li><li>生产环境特有插件</li><li>开发环境特有插件</li></ul><h3 id="_1-别名插件" tabindex="-1"><a class="header-anchor" href="#_1-别名插件" aria-hidden="true">#</a> 1. 别名插件</h3>`,9),H={href:"https://github.com/vitejs/vite/blob/72cb33e947e7aa72d27ed0c5eacb2457d523dfbf/packages/vite/src/node/plugins/preAlias.ts",target:"_blank",rel:"noopener noreferrer"},T={href:"https://github.com/vitejs/vite/blob/72cb33e947e7aa72d27ed0c5eacb2457d523dfbf/packages/vite/src/node/plugins/index.ts#L3",target:"_blank",rel:"noopener noreferrer"},A=e(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 假设 React 已经过 Vite 预构建</span>
<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 会被重定向到预构建产物的路径</span>
<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;/node_modules/.vite/react.js&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),B=n("code",null,"resolve.alias",-1),N={href:"https://github.com/rollup/plugins/tree/master/packages/alias#rollupplugin-alias",target:"_blank",rel:"noopener noreferrer"},F=e(`<h3 id="_2-核心构建插件" tabindex="-1"><a class="header-anchor" href="#_2-核心构建插件" aria-hidden="true">#</a> 2. 核心构建插件</h3><h4 id="_2-1-module-preload-特性的-polyfill" tabindex="-1"><a class="header-anchor" href="#_2-1-module-preload-特性的-polyfill" aria-hidden="true">#</a> 2.1 module preload 特性的 Polyfill</h4><p>当你在 Vite 配置文件中开启下面这个配置时:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">{</span>
  build<span class="token operator">:</span> <span class="token punctuation">{</span>
    polyfillModulePreload<span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),O=n("code",null,"modulePreloadPolyfillPlugin",-1),U={href:"https://github.com/vitejs/vite/blob/2b7e836f84b56b5f3dc81e0f5f161a9b5f9154c0/packages/vite/src/node/plugins/modulePreloadPolyfill.ts#L7",target:"_blank",rel:"noopener noreferrer"},W=n("code",null,"es-module-shims",-1),J=n("ol",null,[n("li",null,[n("p",null,"扫描出当前所有的 modulepreload 标签，拿到 link 标签对应的地址，通过执行 fetch 实现预加载；")]),n("li",null,[n("p",null,"同时通过 MutationObserver 监听 DOM 的变化，一旦发现包含 modulepreload 属性的 link 标签，则同样通过 fetch 请求实现预加载。")])],-1),$=n("blockquote",null,[n("p",null,"由于部分支持原生 ESM 的浏览器并不支持 module preload，因此某些情况下需要注入相应的 polyfill 进行降级。")],-1),D=n("h4",{id:"_2-2-路径解析插件",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-2-路径解析插件","aria-hidden":"true"},"#"),s(" 2.2 路径解析插件")],-1),z=n("code",null,"vite:resolve",-1),G={href:"https://nodejs.org/api/modules.html#modules_all_together",target:"_blank",rel:"noopener noreferrer"},Y=e(`<p>这个插件的实现细节足以再开一个小节专门分析了，所以本节我们就不展开了，你初步了解就可以了。</p><h4 id="_2-3-内联脚本加载插件" tabindex="-1"><a class="header-anchor" href="#_2-3-内联脚本加载插件" aria-hidden="true">#</a> 2.3 内联脚本加载插件</h4><p>对于 HTML 中的内联脚本，Vite 会通过<code>vite:html-inline-script-proxy</code> 插件来进行加载。比如下面这个 script 标签:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">&quot;module&quot;</span><span class="token operator">&gt;</span>
<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>React<span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些内容会在后续的<code>build-html</code>插件从 HTML 代码中剔除，并且变成下面的这一行代码插入到项目入口模块的代码中:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token string">&#39;/User/xxx/vite-app/index.html?http-proxy&amp;index=0.js&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>而 <code>vite:html-inline-script-proxy</code> 就是用来加载这样的模块，实现如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> htmlProxyRE <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\?html-proxy&amp;index=(\\d+)\\.js$</span><span class="token regex-delimiter">/</span></span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">htmlInlineScriptProxyPlugin</span><span class="token punctuation">(</span>config<span class="token operator">:</span> ResolvedConfig<span class="token punctuation">)</span><span class="token operator">:</span> Plugin <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">&#39;vite:html-inline-script-proxy&#39;</span><span class="token punctuation">,</span>
    <span class="token function">load</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> proxyMatch <span class="token operator">=</span> id<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>htmlProxyRE<span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>proxyMatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>proxyMatch<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">const</span> file <span class="token operator">=</span> <span class="token function">cleanUrl</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
        <span class="token keyword">const</span> url <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token function">normalizePath</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>root<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
        <span class="token comment">// 内联脚本的内容会被记录在 htmlProxyMap 这个表中</span>
        <span class="token keyword">const</span> result <span class="token operator">=</span> htmlProxyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">[</span>index<span class="token punctuation">]</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> result <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 加载脚本的具体内容</span>
          <span class="token keyword">return</span> result
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">No matching HTML proxy module found from </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-4-css-编译插件" tabindex="-1"><a class="header-anchor" href="#_2-4-css-编译插件" aria-hidden="true">#</a> 2.4 CSS 编译插件</h4>`,9),X=n("code",null,"vite:css",-1),K={href:"https://github.com/vitejs/vite/blob/2b7e836f84b56b5f3dc81e0f5f161a9b5f9154c0/packages/vite/src/node/plugins/css.ts#L137",target:"_blank",rel:"noopener noreferrer"},Q=n("ul",null,[n("li",null,[n("code",null,"CSS 预处理器的编译")]),n("li",null,[n("code",null,"CSS Modules")]),n("li",null,[n("code",null,"Postcss 编译")]),n("li",null,[s("通过 @import "),n("code",null,"记录依赖"),s("，便于 HMR")])],-1),Z=n("code",null,"compileCSS",-1),nn={href:"https://github.com/vitejs/vite/blob/2b7e836f84b56b5f3dc81e0f5f161a9b5f9154c0/packages/vite/src/node/plugins/css.ts#L568",target:"_blank",rel:"noopener noreferrer"},sn=n("h4",{id:"_2-5-esbuild-转译插件",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-5-esbuild-转译插件","aria-hidden":"true"},"#"),s(" 2.5 Esbuild 转译插件")],-1),an=n("code",null,"vite:esbuild",-1),tn={href:"https://github.com/vitejs/vite/blob/2b7e836f84b56b5f3dc81e0f5f161a9b5f9154c0/packages/vite/src/node/plugins/esbuild.ts",target:"_blank",rel:"noopener noreferrer"},en=n("code",null,".js",-1),pn=n("code",null,".ts",-1),on=n("code",null,".jsx",-1),cn=n("code",null,"tsx",-1),ln=n("code",null,"transformWithEsbuild",-1),un=e(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> transformWithEsbuild <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 传入两个参数: code, filename</span>
<span class="token function">transformWithEsbuild</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;h1&gt;hello&lt;/h1&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;./index.tsx&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// {</span>
  <span class="token comment">//   warnings: [],</span>
  <span class="token comment">//   code: &#39;/* @__PURE__ */ React.createElement(&quot;h1&quot;, null, &quot;hello&quot;);\\n&#39;,</span>
  <span class="token comment">//   map: {/* sourcemap 信息 */}</span>
  <span class="token comment">// }</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-6-静态资源加载插件" tabindex="-1"><a class="header-anchor" href="#_2-6-静态资源加载插件" aria-hidden="true">#</a> 2.6 静态资源加载插件</h4><p>静态资源加载插件包括如下几个:</p>`,3),rn=n("strong",null,"vite:json",-1),dn=n("code",null,"@rollup/pluginutils",-1),kn=n("code",null,"dataToEsm",-1),vn={href:"https://github.com/vitejs/vite/blob/2b7e836f84b56b5f3dc81e0f5f161a9b5f9154c0/packages/vite/src/node/plugins/json.ts#L30",target:"_blank",rel:"noopener noreferrer"},mn=n("strong",null,"vite:wasm",-1),bn=n("code",null,".wasm",-1),gn={href:"https://github.com/vitejs/vite/blob/2b7e836f84b56b5f3dc81e0f5f161a9b5f9154c0/packages/vite/src/node/plugins/wasm.ts#L45",target:"_blank",rel:"noopener noreferrer"},hn=n("strong",null,"vite:worker",-1),fn={href:"https://github.com/vitejs/vite/blob/2b7e836f84b56b5f3dc81e0f5f161a9b5f9154c0/packages/vite/src/node/plugins/worker.ts",target:"_blank",rel:"noopener noreferrer"},_n=n("li",null,[n("p",null,[n("strong",null,"vite:asset"),s("，开发阶段实现了其他格式静态资源的加载，而生产环境会通过 "),n("code",null,"renderChunk"),s(" 钩子将静态资源地址重写为产物的文件地址，如"),n("code",null,"./img.png"),s(" 重写为 "),n("code",null,"https://cdn.xxx.com/assets/img.91ee297e.png"),s("。")])],-1),yn={href:"https://bundlers.tooling.report/hashing/asset-cascade/",target:"_blank",rel:"noopener noreferrer"},wn={href:"https://github.com/rollup/rollup/issues/3415",target:"_blank",rel:"noopener noreferrer"},xn={href:"https://github.com/vitejs/vite/blob/2b7e836f84b56b5f3dc81e0f5f161a9b5f9154c0/packages/vite/src/node/plugins/asset.ts#L306",target:"_blank",rel:"noopener noreferrer"},jn=n("code",null,"asset-cascade",-1),Sn=e(`<h3 id="_3-生产环境特有插件" tabindex="-1"><a class="header-anchor" href="#_3-生产环境特有插件" aria-hidden="true">#</a> 3. 生产环境特有插件</h3><h4 id="_3-1-全局变量替换插件" tabindex="-1"><a class="header-anchor" href="#_3-1-全局变量替换插件" aria-hidden="true">#</a> 3.1 全局变量替换插件</h4><p>提供全局变量替换功能，如下面的这个配置:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// vite.config.ts</span>
<span class="token keyword">const</span> version <span class="token operator">=</span> <span class="token string">&#39;2.0.0&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  define<span class="token operator">:</span> <span class="token punctuation">{</span>
    __APP_VERSION__<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">JSON.stringify(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>version<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),qn={href:"https://github.com/rollup/plugins/tree/master/packages/replace",target:"_blank",rel:"noopener noreferrer"},Cn=n("li",null,[s("开发环境下，Vite 会通过将所有的全局变量挂载到"),n("code",null,"window"),s("对象，而不用经过 define 插件的处理，节省编译开销；")],-1),Vn={href:"https://github.com/vitejs/vite/blob/main/packages/vite/src/node/plugins/define.ts",target:"_blank",rel:"noopener noreferrer"},Pn=e('<blockquote><p>特殊情况: SSR 构建会在开发环境经过这个插件，仅替换字符串。</p></blockquote><h4 id="_3-2-css-后处理插件" tabindex="-1"><a class="header-anchor" href="#_3-2-css-后处理插件" aria-hidden="true">#</a> 3.2 CSS 后处理插件</h4><p>CSS 后处理插件即<code>name</code>为<code>vite:css-post</code>的插件，它的功能包括<code>开发阶段 CSS 响应结果处理</code>和<code>生产环境 CSS 文件生成</code>。</p>',3),Rn={href:"https://github.com/vitejs/vite/blob/2b7e836f84b56b5f3dc81e0f5f161a9b5f9154c0/packages/vite/src/node/plugins/css.ts#L284",target:"_blank",rel:"noopener noreferrer"},Mn={href:"https://github.com/vitejs/vite/blob/2b7e836f84b56b5f3dc81e0f5f161a9b5f9154c0/packages/vite/src/node/plugins/css.ts#L400",target:"_blank",rel:"noopener noreferrer"},Ln=e(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> fileHandle <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emitFile</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  name<span class="token operator">:</span> chunk<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&#39;.css&#39;</span><span class="token punctuation">,</span>
  type<span class="token operator">:</span> <span class="token string">&#39;asset&#39;</span><span class="token punctuation">,</span>
  source<span class="token operator">:</span> chunkCSS
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),In=n("code",null,"build.cssCodeSplit",-1),En={href:"https://github.com/vitejs/vite/blob/2b7e836f84b56b5f3dc81e0f5f161a9b5f9154c0/packages/vite/src/node/plugins/css.ts#L433",target:"_blank",rel:"noopener noreferrer"},Hn=n("code",null,"minifyCSS",-1),Tn={href:"https://github.com/vitejs/vite/blob/2b7e836f84b56b5f3dc81e0f5f161a9b5f9154c0/packages/vite/src/node/plugins/css.ts#L905",target:"_blank",rel:"noopener noreferrer"},An=e(`<h4 id="_3-3-html-构建插件" tabindex="-1"><a class="header-anchor" href="#_3-3-html-构建插件" aria-hidden="true">#</a> 3.3 HTML 构建插件</h4><p><code>HTML</code> 构建插件 即<code>build-html</code>插件。之前我们在<code>内联脚本加载插件</code>中提到过，项目根目录下的<code>html</code>会转换为一段 JavaScript 代码，如下面的这个例子:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  // 普通方式引入
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./index.ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  // 内联脚本
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>React<span class="token punctuation">)</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，当 Vite 在生产环境<code>transform</code>这段入口 HTML 时，会做 3 件事情:</p><ol><li>对 HTML 执行各个插件中带有 <code>enforce: &quot;pre&quot;</code> 属性的 transformIndexHtml 钩子；</li></ol><blockquote><p>我们知道插件本身可以带有 <code>enforce: &quot;pre&quot;|&quot;post&quot;</code> 属性，而 transformIndexHtml 本身也可以带有这个属性，用于在不同的阶段进行 HTML 转换。后文会介绍 transformIndexHtml 钩子带有 <code>enforce: &quot;post&quot;</code> 时的执行时机。</p></blockquote>`,6),Bn={start:"2"},Nn=n("li",null,[s("将其中的 script 标签内容删除，并将其转换为 "),n("code",null,"import 语句"),s("如"),n("code",null,"import './index.ts'"),s("，并记录下来；")],-1),Fn={href:"https://github.com/vitejs/vite/blob/main/packages/vite/src/node/plugins/html.ts#L233",target:"_blank",rel:"noopener noreferrer"},On=e(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">buildHtmlPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&#39;vite:build&#39;</span><span class="token punctuation">,</span>
  <span class="token function">transform</span><span class="token punctuation">(</span>html<span class="token punctuation">,</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;.html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> js <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
      <span class="token comment">// 省略 HTML AST 遍历过程(通过 @vue/compiler-dom 实现)</span>
      <span class="token comment">// 收集 script 标签，转换成 import 语句，拼接到 js 字符串中</span>
      <span class="token keyword">return</span> js<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其次，在生成产物的最后一步即<code>generateBundle</code>钩子中，拿到入口 Chunk，分析入口 Chunk 的内容, 分情况进行处理。</p><p>如果只有 import 语句，先通过 Rollup 提供的 <code>chunk</code> 和 <code>bundle</code> 对象获取入口 chunk 所有的依赖 chunk，并将这些 chunk 进行后序排列，如 <code>a 依赖 b，b 依赖 c</code>，最后的依赖数组就是<code>[c, b, a]</code>。然后依次将 c，b, a 生成三个 script 标签，插入 HTML 中。最后，Vite 会将入口 chunk 的内容从 bundle 产物中移除，因此它的内容只要 import 语句，而它 import 的 chunk 已经作为 script 标签插入到了 HTML 中，那入口 Chunk 的存在也就没有意义了。</p><p>如果除了 import 语句，还有其它内容， Vite 就会将入口 Chunk 单独生成一个 <code>script 标签</code>，分析出依赖的后序排列(和上一种情况分析手段一样)，然后通过注入 <code>&lt;link rel=&quot;modulepreload&quot;&gt; 标签</code>对入口文件的依赖 chunk 进行预加载。</p>`,4),Un=n("code",null,'enforce: "post"',-1),Wn={href:"https://github.com/vitejs/vite/blob/main/packages/vite/src/node/plugins/html.ts#L471",target:"_blank",rel:"noopener noreferrer"},Jn=n("h4",{id:"_3-3-commonjs-转换插件",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-3-commonjs-转换插件","aria-hidden":"true"},"#"),s(" 3.3 Commonjs 转换插件")],-1),$n={href:"https://github.com/rollup/plugins/tree/master/packages/commonjs",target:"_blank",rel:"noopener noreferrer"},Dn=e(`<h4 id="_3-4-date-uri-插件" tabindex="-1"><a class="header-anchor" href="#_3-4-date-uri-插件" aria-hidden="true">#</a> 3.4 date-uri 插件</h4><p>date-uri 插件用来支持 import 模块中含有 Base64 编码的情况，如:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> batman <span class="token keyword">from</span> <span class="token string">&#39;data:application/json;base64, eyAiYmF0bWFuIjogInRydWUiIH0=&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),zn={href:"https://github.com/vitejs/vite/blob/2b7e836f84b56b5f3dc81e0f5f161a9b5f9154c0/packages/vite/src/node/plugins/dataUri.ts#L14",target:"_blank",rel:"noopener noreferrer"},Gn=e('<h4 id="_3-5-dynamic-import-vars-插件" tabindex="-1"><a class="header-anchor" href="#_3-5-dynamic-import-vars-插件" aria-hidden="true">#</a> 3.5 dynamic-import-vars 插件</h4><p>用于支持在动态 import 中使用变量的功能，如下示例代码:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">importLocale</span><span class="token punctuation">(</span>locale<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">./locales/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>locale<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.js</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',3),Yn={href:"https://github.com/rollup/plugins/tree/master/packages/dynamic-import-vars",target:"_blank",rel:"noopener noreferrer"},Xn=e(`<h4 id="_3-6-import-meta-url-支持插件" tabindex="-1"><a class="header-anchor" href="#_3-6-import-meta-url-支持插件" aria-hidden="true">#</a> 3.6 import-meta-url 支持插件</h4><p>用来转换如下格式的资源 URL:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">new</span> <span class="token class-name"><span class="token constant">URL</span></span><span class="token punctuation">(</span><span class="token string">&#39;./foo.png&#39;</span><span class="token punctuation">,</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将其转换为生产环境的 URL 格式，如:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 使用 self.location 来保证低版本浏览器和 Web Worker 环境的兼容性</span>
<span class="token keyword">new</span> <span class="token class-name"><span class="token constant">URL</span></span><span class="token punctuation">(</span>&#39;<span class="token punctuation">.</span><span class="token operator">/</span>assets<span class="token punctuation">.</span>a4b3d56d<span class="token punctuation">.</span>png<span class="token punctuation">,</span> self<span class="token punctuation">.</span>location<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>同时，对于动态 import 的情况也能进行支持，如下面的这种写法:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">getImageUrl</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">URL</span></span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">./dir/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.png</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>href
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Vite 识别到<code>./dir/\${name}.png</code>这样的模板字符串，会将整行代码转换成下面这样:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">getImageUrl</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span><span class="token function">globEager</span><span class="token punctuation">(</span><span class="token string">&#39;./dir/**.png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">./dir/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.png</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">]</span><span class="token punctuation">.</span>default<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),Kn={href:"https://github.com/vitejs/vite/blob/2b7e836f84b56b5f3dc81e0f5f161a9b5f9154c0/packages/vite/src/node/plugins/assetImportMetaUrl.ts#L18",target:"_blank",rel:"noopener noreferrer"},Qn=n("h4",{id:"_3-7-生产环境-import-分析插件",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-7-生产环境-import-分析插件","aria-hidden":"true"},"#"),s(" 3.7 生产环境 import 分析插件")],-1),Zn=n("p",null,[n("code",null,"vite:build-import-analysis"),s(" 插件会在生产环境打包时用作 import 语句分析和重写，主要目的是对动态 import 的模块进行预加载处理。")],-1),ns=n("code",null,"tranform",-1),ss={href:"https://github.com/vitejs/vite/blob/v2.7.0/packages/vite/src/node/plugins/importAnalysisBuild.ts#L43",target:"_blank",rel:"noopener noreferrer"},as=e(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">preload</span><span class="token punctuation">(</span>importModule<span class="token punctuation">,</span> deps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>
    deps<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>dep <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 如果异步模块的依赖还没有加载</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">alreadyLoaded</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token comment">// 创建 link 标签加载，包括 JS 或者 CSS</span>
        document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">createLink</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span><span class="token punctuation">)</span>  
        <span class="token comment">// 如果是 CSS，进行特殊处理，后文会介绍</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isCss</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            link<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;load&#39;</span><span class="token punctuation">,</span> resolve<span class="token punctuation">)</span>
            link<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">importModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),ts={href:"https://en.wikipedia.org/wiki/Flash_of_unstyled_content#:~:text=A%20flash%20of%20unstyled%20content,before%20all%20information%20is%20retrieved.",target:"_blank",rel:"noopener noreferrer"},es=n("code",null,"load",-1),ps=e(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>isCss<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> rej<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    link<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;load&#39;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>
    link<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> rej<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们已经知道了预加载的实现方法，那么 Vite 是如何将动态 import 编译成预加载的代码的呢？</p>`,2),os=n("code",null,"transform",-1),cs={href:"https://github.com/vitejs/vite/blob/v2.7.0/packages/vite/src/node/plugins/importAnalysisBuild.ts#L111",target:"_blank",rel:"noopener noreferrer"},is=e(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 转换前</span>
<span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 转换后</span>
<span class="token function">__vitePreload</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> true <span class="token operator">?</span><span class="token string">&quot;__VITE_PRELOAD__&quot;</span><span class="token operator">:</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),ls=n("code",null,"__vitePreload",-1),us=n("code",null,"preload",-1),rs=n("code",null,"true",-1),ds={href:"https://github.com/vitejs/vite/blob/v2.7.0/packages/vite/src/node/plugins/importAnalysisBuild.ts#L208",target:"_blank",rel:"noopener noreferrer"},ks=n("code",null,'void 0',-1),vs={href:"https://github.com/vitejs/vite/blob/v2.7.0/packages/vite/src/node/plugins/importAnalysisBuild.ts#L208",target:"_blank",rel:"noopener noreferrer"},ms=e(`<p>同时，对于 Vite 独有的 i<wbr>mport.meta.glob 语法，也会在这个插件中进行编译，如:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> modules <span class="token operator">=</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span><span class="token function">glob</span><span class="token punctuation">(</span><span class="token string">&#39;./dir/*.js&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>会通过插件转换成下面这段代码:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> modules <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&#39;./dir/foo.js&#39;</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./dir/foo.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;./dir/bar.js&#39;</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./dir/bar.js&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),bs={href:"https://github.com/vitejs/vite/blob/075128a8dd0a2680540179dad2277a797f793199/packages/vite/src/node/importGlob.ts#L11",target:"_blank",rel:"noopener noreferrer"},gs=n("h4",{id:"_3-8-js-压缩插件",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-8-js-压缩插件","aria-hidden":"true"},"#"),s(" 3.8 JS 压缩插件")],-1),hs=n("p",null,"Vite 中提供了两种 JS 代码压缩的工具，即 Esbuild 和 Terser，分别由两个插件插件实现:",-1),fs=n("strong",null,"vite:esbuild-transpile",-1),_s={href:"https://github.com/vitejs/vite/blob/v2.7.0/packages/vite/src/node/plugins/esbuild.ts#L219",target:"_blank",rel:"noopener noreferrer"},ys=n("strong",null,"vite:terser",-1),ws={href:"https://github.com/vitejs/vite/blob/v2.7.0/packages/vite/src/node/plugins/terser.ts#L23",target:"_blank",rel:"noopener noreferrer"},xs=n("h4",{id:"_3-9-构建报告插件",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-9-构建报告插件","aria-hidden":"true"},"#"),s(" 3.9 构建报告插件")],-1),js=n("p",null,"主要由三个插件输出构建报告:",-1),Ss=n("strong",null,"vite:manifest",-1),qs={href:"https://github.com/vitejs/vite/blob/v2.7.0/packages/vite/src/node/plugins/manifest.ts",target:"_blank",rel:"noopener noreferrer"},Cs=e(`<div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// manifest.json</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;index.html&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;file&quot;</span><span class="token operator">:</span> <span class="token string">&quot;assets/index.8edffa56.js&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;src&quot;</span><span class="token operator">:</span> <span class="token string">&quot;index.html&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;isEntry&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">&quot;imports&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token comment">// JS 引用</span>
      <span class="token string">&quot;_vendor.71e8fac3.js&quot;</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;css&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token comment">// 样式文件应用</span>
      <span class="token string">&quot;assets/index.458f9883.css&quot;</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;assets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token comment">// 静态资源引用</span>
      <span class="token string">&quot;assets/img.9f0de7da.png&quot;</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;_vendor.71e8fac3.js&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;file&quot;</span><span class="token operator">:</span> <span class="token string">&quot;assets/vendor.71e8fac3.js&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Vs=n("strong",null,"vite:ssr-manifest",-1),Ps={href:"https://github.com/vitejs/vite/blob/v2.7.0/packages/vite/src/node/plugins/manifest.ts",target:"_blank",rel:"noopener noreferrer"},Rs=e(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// ssr-manifest.json</span>
<span class="token punctuation">{</span>
  <span class="token string-property property">&quot;node_modules/object-assign/index.js&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;/assets/vendor.71e8fac3.js&quot;</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;node_modules/object-assign/index.js?commonjs-proxy&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;/assets/vendor.71e8fac3.js&quot;</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// 省略其它模块信息</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Ms=n("strong",null,"vite:reporter",-1),Ls={href:"https://github.com/vitejs/vite/blob/v2.7.0/packages/vite/src/node/plugins/reporter.ts",target:"_blank",rel:"noopener noreferrer"},Is=e('<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1d5b15eb7fd347da9b838c983047321b~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="_4-开发环境特有插件" tabindex="-1"><a class="header-anchor" href="#_4-开发环境特有插件" aria-hidden="true">#</a> 4. 开发环境特有插件</h3><h4 id="_4-1-客户端环境变量注入插件" tabindex="-1"><a class="header-anchor" href="#_4-1-客户端环境变量注入插件" aria-hidden="true">#</a> 4.1 客户端环境变量注入插件</h4>',3),Es={href:"https://github.com/vitejs/vite/blob/v2.7.0/packages/vite/src/node/server/middlewares/indexHtml.ts#L159",target:"_blank",rel:"noopener noreferrer"},Hs=e(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">&quot;module&quot;</span> src<span class="token operator">=</span><span class="token string">&quot;/@vite/client&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),Ts=n("code",null,"注入环境变量",-1),As=n("code",null,"处理 HMR 更新逻辑",-1),Bs=n("code",null,"构建出现错误时提供报错界面",-1),Ns=n("code",null,"vite:client-inject",-1),Fs=n("code",null,"__MODE__",-1),Os=n("code",null,"__BASE__",-1),Us=n("code",null,"__DEFINE__",-1),Ws={href:"https://github.com/vitejs/vite/blob/v2.7.0/packages/vite/src/node/plugins/clientInjections.ts",target:"_blank",rel:"noopener noreferrer"},Js=e(`<h4 id="_4-2-开发阶段-import-分析插件" tabindex="-1"><a class="header-anchor" href="#_4-2-开发阶段-import-分析插件" aria-hidden="true">#</a> 4.2 开发阶段 import 分析插件</h4><p>最后，Vite 会在开发阶段加入 import 分析插件，即<code>vite:import-analysis</code>。与之前所介绍的<code>vite:build-import-analysis</code>相对应，主要处理 import 语句相关的解析和重写，但<code>vite:import-analysis</code> 插件的关注点会不太一样，主要围绕 Vite 开发阶段的各项特性来实现，我们可以来梳理一下这个插件需要做哪些事情:</p><ul><li>对 bare import，将路径名转换为真实的文件路径，如:</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 转换前</span>
<span class="token keyword">import</span> <span class="token string">&#39;foo&#39;</span>
<span class="token comment">// 转换后</span>
<span class="token comment">// tip: 如果是预构建的依赖，则会转换为预构建产物的路径</span>
<span class="token keyword">import</span> <span class="token string">&#39;/@fs/project/node_modules/foo/dist/foo.js&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要调用 <code>PluginContainer</code>的上下文对象方法即<code>this.resolve</code>实现，这个方法会调用所有插件的 resolveId 方法，包括之前介绍的<code>vite:pre-alias</code>和<code>vite:resolve</code>，完成路径解析的核心逻辑，<a href="vite:html-inline-script-proxy">点击查看实现</a>。</p>`,5),$s=n("code",null,[s("i"),n("wbr"),s("mport.meta.hot")],-1),Ds=n("wbr",null,null,-1),zs={href:"https://github.com/vitejs/vite/blob/v2.7.0/packages/vite/src/node/plugins/importAnalysis.ts#L502",target:"_blank",rel:"noopener noreferrer"},Gs=n("code",null,"接受自身更新",-1),Ys={href:"https://juejin.cn/book/7050063811973218341/section/7065976180020609032",target:"_blank",rel:"noopener noreferrer"},Xs=n("code",null,"isSelfAccepting",-1),Ks=n("code",null,"HMR Boundary",-1),Qs=n("li",null,[n("p",null,[s("对于全局环境变量读取语句，即 "),n("code",null,[s("i"),n("wbr"),s("mport.meta.env")]),s("，Vite 会注入 "),n("code",null,[s("i"),n("wbr"),s("mport.meta.env")]),s(" 的实现，也就是如下的"),n("code",null,"env"),s("字符串:")])],-1),Zs=e(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// config 即解析完的配置</span>
<span class="token keyword">let</span> env <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">i<wbr>mport.meta.env = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token operator">...</span>config<span class="token punctuation">.</span>env<span class="token punctuation">,</span>
  <span class="token constant">SSR</span><span class="token operator">:</span> <span class="token operator">!</span><span class="token operator">!</span>ssr
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;</span><span class="token template-punctuation string">\`</span></span>
<span class="token comment">// 对用户配置的 define 对象中，将带有 i<wbr>mport.meta.env 前缀的全局变量挂到 i<wbr>mport.meta.env 对象上</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> config<span class="token punctuation">.</span>define<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">i<wbr>mport.meta.env.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> val <span class="token operator">=</span> config<span class="token punctuation">.</span>define<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
    env <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>
      <span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span> <span class="token operator">?</span> val <span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
    <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;</span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),na=n("code",null,[s("i"),n("wbr"),s("mport.meta.glob")],-1),sa=n("code",null,"transformImportGlob",-1),aa={href:"https://github.com/vitejs/vite/blob/v2.7.0/packages/vite/src/node/plugins/importAnalysis.ts#L324",target:"_blank",rel:"noopener noreferrer"},ta=e('<h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>好，本小节的内容讲完了。</p><p>这一节我们介绍了 Vite 的插件机制实现以及各个编译插件的作用和实现，信息密度比较大，需要你对照着官方的代码好好梳理一遍。其中，你需要重点掌握<strong>PluginContainer 的实现机制</strong>和 <strong>Vite 内置插件各自的作用</strong>。</p><p>首先，PluginContainer 主要由两部分实现，包括 Rollup 插件钩子的调度和插件钩子内部的 Context 上下文对象实现，总体上模拟了 Rollup 的插件机制。</p><p>其次，Vite 内置的插件包括四大类: <strong>别名插件</strong>、<strong>核心构建插件</strong>、<strong>生产环境特有插件</strong>和<strong>开发环境特有插件</strong>。这些插件包含了 Vite 核心的编译逻辑，可以说是 Vite 作为构建工具的命脉所在，希望你能对照本小节的内容及其对应的源码链接，了解各个插件的作用。</p><p>此外，在学习这些插件的过程中，我们切忌扎到众多繁琐的实现细节中，要尽可能抓关键的实现思路，来高效理解插件背后的原理，这样学习效率会更高。进一步来讲，在你理解了各个插件的实现原理之后，如果遇到某些场景下需要调试某些插件的代码，你也可以做到有的放矢。</p><p>最后，欢迎大家在评论区记录自己的学习收获和心得，也欢迎大家来一起讨论，把这部分的难点啃下来，让你对 Vite 底层的理解更上一层楼！</p>',7);function ea(pa,oa){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,r,d,n("p",null,[s("从"),n("a",k,[s("《双引擎架构》"),t(a)]),s("小节中我们知道 Vite 的插件机制是与 Rollup 兼容的，但它在开发和生产环境下的实现稍有差别，你可以回顾一下这张架构图:")]),v,m,b,g,n("p",null,[h,s(" 的 "),n("a",f,[s("实现"),t(a)]),s(" 基于借鉴于 WMR 中的"),_,s("，主要分为 2 个部分:")]),y,n("p",null,[s("首先，你可以通过 "),n("a",w,[s("container 的定义"),t(a)]),s(" 来看看各个 Rollup 钩子的实现方式，代码精简后如下:")]),x,n("p",null,[s("在 "),n("a",j,[s("《Vite 构建基石(下)——深入理解 Rollup 的插件机制》"),t(a)]),s(" 中，我们已经系统学习过 Rollup 中异步、串行、并行等钩子类型的执行原理了，现在再来阅读这部分 "),S,s(" 的实现代码应该并不困难。")]),q,n("p",null,[s("我们知道，在 Rollup 钩子函数中，我们可以调用"),C,s("、"),V,s(" 等诸多的上下文方法("),n("a",P,[s("详情地址"),t(a)]),s(")，因此，Vite 除了要模拟各个插件的执行流程，还需要模拟插件执行的上下文对象，代码中的 "),R,s(" 对象就是用来完成这件事情的。我们来看看 Context 对象的具体实现:")]),M,n("p",null,[s("让我们把目光集中在"),L,s("的"),n("a",I,[s("实现"),t(a)]),s("上，Vite 所有的插件就是在这里被收集起来的。具体实现如下:")]),E,n("p",null,[s("别名插件有两个，分别是 "),n("a",H,[s("vite:pre-alias"),t(a)]),s(" 和 "),n("a",T,[s("@rollup/plugin-alias"),t(a)]),s("。 前者主要是为了将 bare import 路径重定向到预构建依赖的路径，如:")]),A,n("p",null,[s("后者则是实现了比较通用的路径别名(即"),B,s("配置)的功能，使用的是 "),n("a",N,[s("Rollup 官方 Alias 插件"),t(a)]),s("。")]),F,n("p",null,[s("Vite 会自动应用 "),O,s(" 插件，在产物中注入 module preload 的 Polyfill 代码，"),n("a",U,[s("具体实现"),t(a)]),s(" 摘自之前我们提到过的 "),W,s("这个库，实现原理如下:")]),J,$,D,n("p",null,[s("路径解析插件(即"),z,s(")是 Vite 中比较核心的插件，几乎所有重要的 Vite 特性都离不开这个插件的实现，诸如依赖预构建、HMR、SSR 等等。同时它也是实现相当复杂的插件，一方面实现了 "),n("a",G,[s("Node.js 官方的 resolve 算法"),t(a)]),s("，另一方面需要支持前面所说的各项特性，可以说是专门给 Vite 实现了一套路径解析算法。")]),Y,n("p",null,[s("即名为"),X,s("的"),n("a",K,[s("插件"),t(a)]),s("，主要实现下面这些功能:")]),Q,n("p",null,[s("这个插件的核心在于"),Z,s("函数的实现，感兴趣的同学可以阅读一下"),n("a",nn,[s("这部分的源码"),t(a)]),s("。")]),sn,n("p",null,[s("即名为"),an,s("的"),n("a",tn,[s("插件"),t(a)]),s("，用来进行 "),en,s("、"),pn,s("、"),on,s("和"),cn,s("，代替了传统的 Babel 或者 TSC 的功能，这也是 Vite 开发阶段性能强悍的一个原因。插件中主要的逻辑是"),ln,s("函数，顾名思义，你可以通过这个函数进行代码转译。当然，Vite 本身也导出了这个函数，作为一种通用的 transform 能力，你可以这样来使用:")]),un,n("ul",null,[n("li",null,[n("p",null,[rn,s(" 用来加载 JSON 文件，通过"),dn,s("的"),kn,s("方法可实现 JSON 的按名导入，具体实现见"),n("a",vn,[s("链接"),t(a)]),s("；")])]),n("li",null,[n("p",null,[mn,s(" 用来加载 "),bn,s(" 格式的文件，具体实现见"),n("a",gn,[s("链接"),t(a)]),s("；")])]),n("li",null,[n("p",null,[hn,s(" 用来 Web Worker 脚本，插件内部会使用 Rollup 对 Worker 脚本进行打包，具体实现见"),n("a",fn,[s("链接"),t(a)]),s("；")])]),_n]),n("p",null,[s("值得注意的是，Rollup 本身存在 "),n("a",yn,[s("asset cascade"),t(a)]),s(" 问题，即静态资源哈希更新，引用它的 JS 的哈希并没有更新("),n("a",wn,[s("issue 链接"),t(a)]),s(")。因此 Vite 在静态资源处理的时候，并没有交给 Rollup 生成资源哈希，而是自己根据资源内容生成哈希("),n("a",xn,[s("源码实现"),t(a)]),s(")，并手动进行路径重写，以此避免 "),jn,s(" 问题。")]),Sn,n("p",null,[s("全局变量替换的功能和我们之前在 Rollup 插件小节中提到的"),n("a",qn,[s("@rollup/plugin-replace"),t(a)]),s(" 差不多，当然在实现上 Vite 会有所区别:")]),n("ul",null,[Cn,n("li",null,[s("生产环境下，Vite 会使用 "),n("a",Vn,[s("define 插件"),t(a)]),s("，进行字符串替换以及 sourcemap 生成。")])]),Pn,n("p",null,[s("首先，在开发阶段，这个插件会将之前的 CSS 编译插件处理后的结果，包装成一个 ESM 模块，返回给浏览器，"),n("a",Rn,[s("点击查看实现代码"),t(a)]),s("。")]),n("p",null,[s("其次，生产环境中，Vite 默认会通过这个插件进行 CSS 的 code splitting，即对于每个异步 chunk，Vite 会将其依赖的 CSS 代码单独打包成一个文件，关键代码如下("),n("a",Mn,[s("源码链接"),t(a)]),s("):")]),Ln,n("p",null,[s("如果 CSS 的 code splitting 功能被关闭(通过"),In,s("配置)，那么 Vite 会将所有的 CSS 代码打包到同一个 CSS 文件中，"),n("a",En,[s("点击查看实现"),t(a)]),s("。")]),n("p",null,[s("最后，插件会调用 Esbuild 对 CSS 进行压缩，实现在 "),Hn,s(" 函数中，"),n("a",Tn,[s("点击查看实现"),t(a)]),s("。")]),An,n("ol",Bn,[Nn,n("li",null,[s("在 transform 钩子中返回记录下来的 import 内容，将 import 语句作为模块内容进行加载。也就是说，虽然 Vite 处理的是一个 HTML 文件，但最后进行打包的内容却是一段 JS 的内容，"),n("a",Fn,[s("点击查看具体实现"),t(a)]),s("。代码简化后如下所示:")])]),On,n("p",null,[s("最后，插件会调用用户插件中带有 "),Un,s(" 属性的 transformIndexHtml 钩子，对 HTML 进行进一步的处理。"),n("a",Wn,[s("点击查看具体实现"),t(a)]),s("。")]),Jn,n("p",null,[s("我们知道，在开发环境中，Vite 使用 Esbuild 将 Commonjs 转换为 ESM，而生产环境中，Vite 会直接使用 Rollup 的官方插件 "),n("a",$n,[s("@rollup/plugin-commonjs"),t(a)]),s("。")]),Dn,n("p",null,[n("a",zn,[s("点击查看实现"),t(a)]),s("。")]),Gn,n("p",null,[s("内部使用的是 Rollup 的官方插件 "),n("a",Yn,[s("@rollup/plugin-dynamic-import-vars"),t(a)]),s("。")]),Xn,n("p",null,[n("a",Kn,[s("点击查看具体实现"),t(a)])]),Qn,Zn,n("p",null,[s("对含有动态 import 的 chunk 而言，会在插件的"),ns,s("钩子中被添加这样一段工具代码用来进行模块预加载，逻辑并不复杂，你可以参考"),n("a",ss,[s("源码实现"),t(a)]),s("。关键代码简化后如下:")]),as,n("p",null,[s("我们知道，Vite 内置了 CSS 代码分割的能力，当一个模块通过动态 import 引入的时候，这个模块会被单独打包成一个 chunk，与此同时这个模块中的样式代码也会打包成单独的 CSS 文件。如果异步模块的 CSS 和 JS 同时进行预加载，那么在某些浏览器下(如 IE)就会出现 "),n("a",ts,[s("FOUC 问题"),t(a)]),s("，页面样式会闪烁，影响用户体验。但 Vite 通过监听 link 标签 "),es,s(" 事件的方式来保证 CSS 在 JS 之前加载完成，从而解决了 FOUC 问题。你可以注意下面这段关键代码:")]),ps,n("p",null,[s("从源码的"),os,s("钩子"),n("a",cs,[s("实现"),t(a)]),s("中，不难发现 Vite 会将动态 import 的代码进行转换，如下代码所示:")]),is,n("p",null,[s("其中，"),ls,s(" 会被加载为前文中的 "),us,s(" 工具函数，"),rs,s(" 会在 "),n("a",ds,[s("renderChunk"),t(a)]),s(" 中被替换成 true 或者 false，表示是否为 Modern 模式打包，而对于"),ks,s("，Vite 会在 "),n("a",vs,[s("generateBundle"),t(a)]),s(" 阶段，分析出 a 模块所有依赖文件(包括 CSS)，将依赖文件名的数组作为 preload 工具函数的第二个参数。")]),ms,n("p",null,[s("具体的实现在 "),n("a",bs,[s("transformImportGlob"),t(a)]),s(" 函数中，除了被该插件使用外，这个函数被还依赖预构建、开发环境 import 分析等核心流程使用，属于一类比较底层的逻辑，感兴趣的同学可以精读一下这部分的实现源码。")]),gs,hs,n("ul",null,[n("li",null,[n("p",null,[fs,s(" ("),n("a",_s,[s("点击查看实现"),t(a)]),s(")。在 renderChunk 阶段，调用 Esbuild 的 transform API，并指定 minify 参数，从而实现 JS 的压缩。")])]),n("li",null,[n("p",null,[ys,s("("),n("a",ws,[s("点击查看实现"),t(a)]),s(")。同样也在 renderChunk 阶段，Vite 会单独的 Worker 进程中调用 Terser 进行 JS 代码压缩。")])])]),xs,js,n("ul",null,[n("li",null,[Ss,s("("),n("a",qs,[s("点击查看实现"),t(a)]),s(")。提供打包后的各种资源文件及其关联信息，如下内容所示:")])]),Cs,n("ul",null,[n("li",null,[Vs,s("("),n("a",Ps,[s("点击查看实现"),t(a)]),s(")。提供每个模块与 chunk 之间的映射关系，方便 SSR 时期通过渲染的组件来确定哪些 chunk 会被使用，从而按需进行预加载。最后插件输出的内容如下:")])]),Rs,n("ul",null,[n("li",null,[Ms,s("("),n("a",Ls,[s("点击查看实现"),t(a)]),s(")。主要提供打包时的命令行构建日志:")])]),Is,n("p",null,[s("在开发环境中，Vite 会自动往 HTML 中注入一段 client 的脚本("),n("a",Es,[s("点击查看实现"),t(a)]),s("):")]),Hs,n("p",null,[s("这段脚本主要提供"),Ts,s("、"),As,s("、"),Bs,s("等功能，而我们这里要介绍的"),Ns,s("就是来完成时环境变量的注入，将 client 脚本中的"),Fs,s("、"),Os,s("、"),Us,s("等等字符串替换为运行时的变量，实现环境变量以及 HMR 相关上下文信息的注入，"),n("a",Ws,[s("点击查看插件实现"),t(a)]),s("。")]),Js,n("ul",null,[n("li",null,[n("p",null,[s("对于 HMR 的客户端 API，即 "),$s,s("，Vite 在识别到这样的 import 语句后，一方面会注入 i"),Ds,s("mport.meta.hot 的实现，因为浏览器原生并不具备这样的 API，"),n("a",zs,[s("点击查看注入代码"),t(a)]),s("；另一方面会识别 accept 方法，并判断 accept 是否为"),Gs,s("的类型(如果对 HMR 更新类型还不了解，可以回顾一下"),n("a",Ys,[s("第十三节"),t(a)]),s("的内容)，如果是，则标记为上"),Xs,s(" 的 flag，便于 HMR 在服务端进行更新时进行"),Ks,s("的查找。对于具体的查找过程，下一节会详细介绍。")])]),Qs]),Zs,n("ul",null,[n("li",null,[s("对于"),na,s("语法，Vite 同样会调用之前提到的"),sa,s(" 函数来进行语法转换，但与生产环境的处理不同，在转换之后，Vite 会将该模块通过 glob 导入的依赖模块记录在 server 实例上，以便于 HMR 更新的时候能得到更准确的模块依赖信息，"),n("a",aa,[s("点击查看实现"),t(a)]),s("。")])]),ta])}const ia=p(l,[["render",ea],["__file","di22zhang—chajianliushuixian：congzhengtidaojubu，lijieVitedehexinbianyinenli.html.vue"]]);export{ia as default};
