import{_ as p,r as o,o as c,c as i,b as s,d as n,e,a as t}from"./app-e6acbbcc.js";const l={},u=t(`<h1 id="ts-工程实践-构建工具-模块系统-编写类型声明文件" tabindex="-1"><a class="header-anchor" href="#ts-工程实践-构建工具-模块系统-编写类型声明文件" aria-hidden="true">#</a> TS 工程实践，构建工具，模块系统，编写类型声明文件</h1><p>随着前端应用越来越复杂，多人协作开发成为了一种常态，而模块化的开发方式也被广泛接受了。然而这却是一个渐进的过程，在这个过程中曾经诞生过许多的模块化解决方案，如：CommonJS、AMD、CMD 等等</p><p>经历了时间的沉淀，最终目前最常用的两种方案：一种是 ES6 的模块，一种是 CommonJS 的模块。</p><blockquote><p>TS 对这两种模块系统都有比较好的支持，接下来我们会先回顾下两个模块系统，然后对比它们之间的兼容性问题。</p></blockquote><h2 id="一、ts-基础环境搭建" tabindex="-1"><a class="header-anchor" href="#一、ts-基础环境搭建" aria-hidden="true">#</a> 一、TS 基础环境搭建</h2><p>在基础阶段，我们已经搭建配置过 TS 的基础环境了，这里我们再简单熟悉一下</p><blockquote><p>在 TS 的环境搭建中，预装软件只有两个：Node.js 和 VSCode</p></blockquote><h3 id="_1、创建项目和基础配置" tabindex="-1"><a class="header-anchor" href="#_1、创建项目和基础配置" aria-hidden="true">#</a> 1、创建项目和基础配置</h3><p>创建一个项目，文件夹名称为 <code>icoding-ts</code></p><p>使用 npm 命令初始化工程</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># npm 初始化生成 package.json 配置文件</span>
<span class="token function">npm</span> init <span class="token parameter variable">-y</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>全局安装 TypeScript</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 全局安装 TS，好处：在任何地方都可以使用 TS 的编译器 即：tsc</span>
<span class="token function">npm</span> i typescript <span class="token parameter variable">-g</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>安装好 TS 编译器后，就可以在命令行中使用 tsc 命令了</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看 TS 的版本</span>
tsc <span class="token parameter variable">-v</span>

<span class="token comment"># 查看 TS 的帮助信息，可以看到编译器有很多的配置项，大部分都可以通过配置文件来实现</span>
tsc <span class="token parameter variable">-h</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、创建-ts-的配置文件" tabindex="-1"><a class="header-anchor" href="#_2、创建-ts-的配置文件" aria-hidden="true">#</a> 2、创建 TS 的配置文件</h3><p>初始化 TS 配置文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>tsc <span class="token parameter variable">--init</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/image-20230803160103957.0f43410a.png" alt="image-20230803160103957"></p><h3 id="_3、编译-ts-文件" tabindex="-1"><a class="header-anchor" href="#_3、编译-ts-文件" aria-hidden="true">#</a> 3、编译 TS 文件</h3><p>在 VSCode 命令行终端中</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 通过 tsc 编译 .ts 文件</span>
tsc .<span class="token punctuation">\\</span>src<span class="token punctuation">\\</span>index.ts

<span class="token comment"># 运行编译后的 .js 文件</span>
<span class="token function">node</span> .<span class="token punctuation">\\</span>src<span class="token punctuation">\\</span>index.js

<span class="token comment"># 输出</span>
Hello TS <span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/image-20230803162131150.235d0666.png" alt="image-20230803162131150"></p><h2 id="二、配置构建工具" tabindex="-1"><a class="header-anchor" href="#二、配置构建工具" aria-hidden="true">#</a> 二、配置构建工具</h2><p>我们这里使用常见的 Webpack ，如果暂时不熟悉也没有关系，只是为了让 TS 的功能跑起来，同时作为体验。Webpack 只是一个工具而已。</p><h3 id="_1、webpack-配置安装" tabindex="-1"><a class="header-anchor" href="#_1、webpack-配置安装" aria-hidden="true">#</a> 1、Webpack 配置安装</h3><p>需要先安装三个包 <code>webpack</code>、<code>webpack-cli</code>、<code>webpack-dev-server</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i webpack webpack-cli webpack-dev-server <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在配置 Webpack 时，我们需要区分开发环境 和 生产环境，这两个环境的配置是不一样的，需要做不同的事情。</p><p>为了工程的可维护性，需要把开发环境的配置、生产环境的配置、公共配置分开来书写，最后通过插件来合并</p><blockquote><p>在项目根目录下先创建一个 build 文件目录（再创建 4 个配置文件），用来存放所有的配置文件的目录</p></blockquote><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>icoding-ts
├─ build
│ ├─ webpack.base.config.js # 公共环境的配置
│ ├─ webpack.config.js # 所有配置文件的入口
│ ├─ webpack.dev.config.js # 开发环境的配置
│ └─ webpack.pro.config.js # 生产环境的配置
├─ package.json
├─ src
│ ├─ index.js
│ └─ index.ts
└─ tsconfig.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、公共环境的配置" tabindex="-1"><a class="header-anchor" href="#_2、公共环境的配置" aria-hidden="true">#</a> 2、公共环境的配置</h3><p><code>build/webpack.base.config.js</code> 配置公共环境</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;html-webpack-plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 入口文件</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&quot;./src/index.ts&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// 输出文件，输出目录 dist（默认）</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;app.js&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 指定扩展名，分别为 .js 、.ts 、.tsx</span>
  <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;.js&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.ts&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.tsx&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 引入了新的文件 TypeScript，就需要安装相应的 loader，我们使用 ts-loader</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token comment">// ts-loader 的正则，以 ts 或 tsx 结尾的文件</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.tsx?$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token punctuation">{</span>
            <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&quot;ts-loader&quot;</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token comment">// 排除 node_modules 下的文件</span>
        <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 插件</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// HtmlWebpackPlugin 插件，作用：通过一个模板，帮助我们生成网站的首页，同时可以把输出文件自动嵌入到该文件中</span>
    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token comment">// 在 ./src/tpl/ 目录下创建 index.html 文件</span>
      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&quot;./src/tpl/index.html&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在命令终端中输入命令行，安装 <code>ts-loader</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i ts-loader typescript <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>注：安装 ts-loader 时，需要再次本地安装一下 typescript</p></blockquote><p>安装插件 <code>html-webpack-plugin</code></p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code>npm i html<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin <span class="token operator">-</span><span class="token constant">D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在 <code>src</code> 目录下新建 <code>tpl</code> 文件夹 -&gt; 新建 <code>index.html</code> 文件，项目目录结构如下</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>icoding-ts
├─ build
│  ├─ webpack.base.config.js
│  ├─ webpack.config.js
│  ├─ webpack.dev.config.js
│  └─ webpack.pro.config.js
├─ package.json
├─ README.md
├─ src
│  ├─ index.js
│  ├─ index.ts
│  └─ tpl
│     └─ index.html # 新建 index.html 文件
└─ tsconfig.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>/src/tpl/index.html</code> 中</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>TypeScript<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 定义一个 class=&quot;app&quot; 的 div --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、开发环境中的配置" tabindex="-1"><a class="header-anchor" href="#_3、开发环境中的配置" aria-hidden="true">#</a> 3、开发环境中的配置</h3><p><code>build/webpack.dev.config.js</code> 配置开发环境</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 在开发环境中开启 source-map，也是官方推荐的配置</span>
  <span class="token comment">// cheap 表示 source-map 会忽略文件的列信息，因为在调试时列信息是没有用的</span>
  <span class="token comment">// module 会定位到 TS 的源码，而不是经过 loader 转译后的 JS 源码</span>
  <span class="token comment">// eval-source-map 会将 source-map 以 dataURL 的形式打包到文件中，它的重编译速度是很快的，因此也不必担心性能问题</span>
  <span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token string">&quot;cheap-module-eval-source-map&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、生产环境中的配置" tabindex="-1"><a class="header-anchor" href="#_4、生产环境中的配置" aria-hidden="true">#</a> 4、生产环境中的配置</h3><p>在生产环境中需要安装一个插件 <code>clean-webpack-plugin</code></p><p><strong>作用：</strong> 是在每次成功构建之后，帮助我们清空 dist 目录。</p><blockquote><p>有的时候为了避免缓存，我们需要在文件后加入 Hash ，这样在多次构建后就会产生很多无用的文件。通过这个插件就可以帮助我们自动的清空 dist 目录。</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 本地安装 clean-webpack-plugin 插件</span>
<span class="token function">npm</span> i clean-webpack-plugin <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>build/webpack.pro.config.js</code> 配置生产环境</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;clean-webpack-plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、所有配置文件入口的配置" tabindex="-1"><a class="header-anchor" href="#_5、所有配置文件入口的配置" aria-hidden="true">#</a> 5、所有配置文件入口的配置</h3><p>需要用到 <code>webpack-merge</code> 插件，它的作用是将两个配置文件合并</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 本地安装 webpack-merge 插件</span>
<span class="token function">npm</span> i webpack-merge <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>build/webpack.config.js</code> 配置所有配置文件的入口</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack-merge 插件，它的作用是将两个配置文件合并</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> merge <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;webpack-merge&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 引入三个配置文件（公共环境配置、开发环境配置、生产环境配置）</span>
<span class="token keyword">const</span> baseConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./webpack.base.config&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> devConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./webpack.dev.config&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> proConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./webpack.pro.config&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 定义一个 config 变量</span>
<span class="token comment">// 判断当前的环境变量，如果是开发环境，就选用开发环境的配置，否则就选用生产环境的配置</span>
<span class="token keyword">let</span> config <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&quot;development&quot;</span> <span class="token operator">?</span> devConfig <span class="token operator">:</span> proConfig<span class="token punctuation">;</span>

<span class="token comment">// 将 baseConfig 和 config 合并</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>baseConfig<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>配置工作完成后，最后再修改 npm 的脚本</p></blockquote><h3 id="_6、修改-npm-的脚本" tabindex="-1"><a class="header-anchor" href="#_6、修改-npm-的脚本" aria-hidden="true">#</a> 6、修改 npm 的脚本</h3><p>打开 <code>package.json</code> 文件，更改入口 和 编写启动开发环境的命令</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;icoding-ts&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// 更改入口文件</span>
  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./src/index.ts&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 启动开发环境的命令</span>
    <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack-dev-server --mode=development --config ./build/webpack.config.js&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;keywords&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;license&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ISC&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：</p><ul><li>添加启动开发环境的命令 start 中需要用到 <code>webpack-dev-server</code></li><li>指定 <code>--mode</code> 参数为 <code>--mode=development</code> ，即：将当前环境变量设置为 <code>development</code></li><li>再指定配置文件 <code>--config</code> 为 <code>./build/webpack.config.js</code></li></ul><h3 id="_7、启动运行" tabindex="-1"><a class="header-anchor" href="#_7、启动运行" aria-hidden="true">#</a> 7、启动运行</h3><p>在控制台输入命令，启动运行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> start
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在浏览器地址栏中输入 <code>http://localhost:8080/</code> 即可看到页面</p><p><img src="https://www.arryblog.com/assets/img/image-20230803231903206.fb8116fd.png" alt="image-20230803231903206"></p><p>修改 <code>./src/index.ts</code> 文件</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">let</span> hello<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;Hello TS ！&quot;</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 将以上字符串插入到页面中</span>
document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&quot;.app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> hello<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/image-20230803232005127.3990fae4.png" alt="image-20230803232005127"></p><h3 id="_8、构建生产环境" tabindex="-1"><a class="header-anchor" href="#_8、构建生产环境" aria-hidden="true">#</a> 8、构建生产环境</h3><p>编写构建生产环境的脚本，新增 <code>build</code>。在 <code>package.json</code> 中 新增 <code>build</code> 选项</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;icoding-ts&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./src/index.ts&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack-dev-server --mode=development --config ./build/webpack.config.js&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// 新增</span>
    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack --mode=production --config ./build/webpack.config.js&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;keywords&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;license&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ISC&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;devDependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;clean-webpack-plugin&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^4.0.0&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;html-webpack-plugin&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^5.5.3&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;ts-loader&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^9.4.4&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;typescript&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^5.1.6&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;webpack&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^5.88.2&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;webpack-cli&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^5.1.4&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;webpack-dev-server&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^4.15.1&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;webpack-merge&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^5.9.0&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：</p><ul><li>构建生产环境的脚本，取名叫 <code>build</code></li><li>需要用到 <code>webpack</code> 命名，指定 <code>--mode</code>参数为 <code>--mode=production</code> 即：当前的环境变量</li><li>指定配置文件 <code>--config</code> 为 <code>./build/webpack.config.js</code></li></ul><h3 id="_9、运行构建命令" tabindex="-1"><a class="header-anchor" href="#_9、运行构建命令" aria-hidden="true">#</a> 9、运行构建命令</h3><p>在控制台输入如下命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> run build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/image-20230803234020312.187adbb9.png" alt="image-20230803234020312"></p><p>可以看到已经生成了一个 <code>dist</code> 目录，构建好的 <code>app.js</code> 也已经嵌入到了模板文件中</p><p><img src="https://www.arryblog.com/assets/img/image-20230803234434436.dde74c80.png" alt="image-20230803234434436"></p><h2 id="三、es6-与-commonjs-的模块系统" tabindex="-1"><a class="header-anchor" href="#三、es6-与-commonjs-的模块系统" aria-hidden="true">#</a> 三、ES6 与 CommonJS 的模块系统</h2><p>先简单回顾下 ES6 的模块化系统，在 <code>src</code> 文件夹下新建了一个 <code>es6</code> 文件，同时创建 3 个 TS 文件</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>icoding-ts
├─ build
│ ├─ webpack.base.config.js
│ ├─ webpack.config.js
│ ├─ webpack.dev.config.js
│ └─ webpack.pro.config.js
├─ dist
│ ├─ app.js
│ └─ index.html
├─ package-lock.json
├─ package.json
├─ src
│ ├─ es6 # 新建
│ │ ├─ a.ts
│ │ ├─ b.ts
│ │ └─ c.ts
│ ├─ index.ts
│ └─ tpl
│ └─ index.html
└─ tsconfig.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中有三个模块：分别是 <code>a.ts</code> 、<code>b.ts</code> 、<code>c.ts</code> ，它们之间的依赖关系是</p><ul><li><code>c.ts</code> 依赖了 <code>a.ts</code></li><li><code>a.ts</code> 依赖了 <code>b.ts</code></li></ul><p>为了看出最后的执行效果，我们在 <code>/src/index.ts</code> 中，将 es6 下 <code>c</code> 模块引入进来</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token string">&quot;./es6/c&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1、es6-模块的导出" tabindex="-1"><a class="header-anchor" href="#_1、es6-模块的导出" aria-hidden="true">#</a> 1、ES6 模块的导出</h3><p>ES6 的导出是通过 export 语句来实现</p><ul><li>单独导出一个变量</li><li>将多个变量放入一个对象中，批量导出</li><li>在 TS 中，ES6 也可以单独导出一个接口 或 导出一个函数</li><li>在导出时，可以给变量取一个别名</li><li>ES6 也有默认的导出 <code>export default</code> 默认导出时函数是不需要取名字的，如果取也可以，但在导入时时无效的</li><li>ES6 也可以引入外部的模块，然后重新导出</li></ul><p>在 <code>/src/es6/a.ts</code> 中</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// 单独导出</span>
<span class="token keyword">export</span> <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token comment">// 批量导出</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> b<span class="token punctuation">,</span> c <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 导出接口</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">P</span></span> <span class="token punctuation">{</span>
  x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 导出函数</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// 导出时起别名</span>
<span class="token keyword">function</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> g <span class="token keyword">as</span> <span class="token constant">G</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// G 为别名</span>

<span class="token comment">// 默认导出，无需函数名</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;I&#39;m default&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 引入外部模块，重新导出</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> str <span class="token keyword">as</span> hello <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./b&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>以上就是关于 ES6 模块的导出，接下来再来看导入</p></blockquote><h3 id="_2、es6-模块的导入" tabindex="-1"><a class="header-anchor" href="#_2、es6-模块的导入" aria-hidden="true">#</a> 2、ES6 模块的导入</h3><ul><li>使用 <code>{}</code> 的形式批量导入</li><li>导入接口</li><li>导入时起别名</li><li>导入模块中的所有成员，绑定在 All 上</li><li>不加 <code>{}</code>，导入默认</li></ul><p>在 <code>/src/es6/c.ts</code> 中</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./a&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 批量导入</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">P</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./a&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 导入接口</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> f <span class="token keyword">as</span> <span class="token constant">F</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./a&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 导入时起别名</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> All <span class="token keyword">from</span> <span class="token string">&quot;./a&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 导入模块中的所有成员，绑定在 All 上</span>
<span class="token keyword">import</span> myFunction <span class="token keyword">from</span> <span class="token string">&quot;./a&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 不加{}，导入默认</span>

<span class="token comment">// 打印输出，批量导入的变量值</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3</span>

<span class="token comment">// 导入一个接口，该接口就可以约束模块中的变量</span>
<span class="token keyword">let</span> p<span class="token operator">:</span> <span class="token constant">P</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  x<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  y<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 打印输出 All 变量，All 中包含了所有 a 模块中导出的变量</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>All<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 打印输出 默认导入</span>
<span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/image-20230804161351005.4b795ba5.png" alt="image-20230804161351005"></p><h3 id="_3、commonjs-模块" tabindex="-1"><a class="header-anchor" href="#_3、commonjs-模块" aria-hidden="true">#</a> 3、CommonJS 模块</h3><p>node 是 CommonJS 一种实现，在 <code>src</code> 下新建一个 <code>node</code> 文件夹，下面有三个模块</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>icoding-ts
├─ build
│ ├─ webpack.base.config.js
│ ├─ webpack.config.js
│ ├─ webpack.dev.config.js
│ └─ webpack.pro.config.js
├─ dist
│ ├─ app.js
│ └─ index.html
├─ package-lock.json
├─ package.json
├─ README.md
├─ src
│ ├─ es6
│ │ ├─ a.ts
│ │ ├─ b.ts
│ │ └─ c.ts
│ ├─ index.ts
│ ├─ node # 新增
│ │ ├─ a.node.ts
│ │ ├─ b.node.ts
│ │ └─ c.node.ts
│ └─ tpl
│ └─ index.html
└─ tsconfig.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：</p><p>其中有三个模块：分别是 <code>a.node.ts</code> 、<code>b.node.ts</code> 、<code>c.node.ts</code> ，它们之间的依赖关系是：<code>c.node.ts</code> 依赖了 <code>a.node.ts</code> 和 <code>b.node.ts</code></p><h3 id="_4、node-模块的导出" tabindex="-1"><a class="header-anchor" href="#_4、node-模块的导出" aria-hidden="true">#</a> 4、node 模块的导出</h3><p>node 模块的导出，可以把该模块中所有的变量作为一个整体导出。使用 <code>module.exports</code> 语法导出</p><p>在 <code>/src/node/a.node.ts</code> 中</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>
  x<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  y<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 整体导出</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> a<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以使用 <code>exports.</code> 的语法导出多个变量，其中 exports 本质上是 <code>module.exports</code> 的引用</p><p>在 <code>/src/node/b.node.ts</code> 中</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// exports === module.exports</span>

<span class="token comment">// exports  本质上是 module.exports 的引用</span>

<span class="token comment">// 导出多个变量</span>
<span class="token comment">// module.exports = {}</span>
exports<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>d <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、node-模块的导入" tabindex="-1"><a class="header-anchor" href="#_5、node-模块的导入" aria-hidden="true">#</a> 5、node 模块的导入</h3><p>使用 <code>require</code> 语句导入即可</p><p>在 <code>/src/node/c.node.ts</code> 中</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">let</span> c1 <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&quot;./a.node&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> c2 <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&quot;./b.node&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 打印输出导入的结果</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>由于以上编写的是 node 模块，因此我们会在 node 环境下运行（node.js 是默认寻找 JS 文件的，因此是需要将 TS 文件编译成 JS 文件后才能运行）</p></blockquote><p>需要安装一个工具才能实现，TS 编译成 JS 文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i ts-node <span class="token parameter variable">-g</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>编译执行 TS 文件（在控制台执行如下命令）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ts-node .<span class="token punctuation">\\</span>src<span class="token punctuation">\\</span>node<span class="token punctuation">\\</span>c.node.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/image-20230805150229638.f3f583d4.png" alt="image-20230805150229638"></p><h3 id="_6、总结" tabindex="-1"><a class="header-anchor" href="#_6、总结" aria-hidden="true">#</a> 6、总结</h3><p>以上我们对 ES6 与 CommonJS 的模块系统进行了简单的回顾，可以看到 TS 对这两个模块系统都有很好的支持。</p><blockquote><p>以上都是在开发环境下运行，在生产环境中这两个模块系统会被构建成什么样子呢 ？</p></blockquote><h3 id="_7、在生产环境中模块系统的构建" tabindex="-1"><a class="header-anchor" href="#_7、在生产环境中模块系统的构建" aria-hidden="true">#</a> 7、在生产环境中模块系统的构建</h3><p>我们来研究两个编译的选项，在 <code>tsconfig.json</code> 配置文件中</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// target：我们要编译成的目标语言是什么版本</span>
    <span class="token comment">// 在 TS 默认生成的 tsconfig.json 中，target 默认值 为 ES7，在命名终端中 tsc 的命令默认值是 ES3</span>
    <span class="token property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;es2016&quot;</span> <span class="token comment">/* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */</span><span class="token punctuation">,</span>
    <span class="token comment">// module：指定生成的模块代码</span>
    <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;commonjs&quot;</span> <span class="token comment">/* Specify what module code is generated. */</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置选项解读：</p><ul><li><code>target</code> 选项：是我们要编译成的目标语言是什么版本。在命名终端中 tsc 的命令默认值是 ES3</li><li>除了 <code>ES2016</code> 还可以选择 <code>ES3</code>、<code>ES5</code> 、<code>ES2015</code> 、<code>ES2017</code> 、<code>ES2018</code>、<code>ES2019</code>、or <code>ESNEXT</code></li><li><code>module</code> 选项：要把我们的代码编译成什么样的模块系统，无论是 <code>tsconfig.json</code> 还是在命令行中 module 的默认选项都是 <code>commonjs</code> 。除了 <code>commonjs</code> 之外还可以编译成其它的模块，如：<code>amd</code> 、<code>system</code> 、<code>umd</code> 、<code>ES2015</code> 等等 以及最新的 。</li></ul><h3 id="_7-1、编译-es6-的模块" tabindex="-1"><a class="header-anchor" href="#_7-1、编译-es6-的模块" aria-hidden="true">#</a> 7.1、编译 ES6 的模块</h3><p>在控制台中输入命令，编译 ES6 的 <code>/src/es6/a.ts</code> 模块</p><p><strong>注：</strong> 如果在命令行中指定了输入文件，那么 TS 就会自动忽略 <code>tsconfig.json</code> 配置文件，所有的配置只能在命令行中使用</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># target 简写 -t ，编译成 ES3</span>
tsc .<span class="token punctuation">\\</span>src<span class="token punctuation">\\</span>es6<span class="token punctuation">\\</span>a.ts <span class="token parameter variable">-t</span> es3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>执行以上命令行，会报错 ！因为在 TypeScript 5.5 中已经弃用 <code>target = ES3</code> 了</p></blockquote><p><img src="https://www.arryblog.com/assets/img/image-20230807162452029.fb07c968.png" alt="image-20230807162452029"></p><p>将 <code>/src/es6/a.ts</code> 模块编译成 ES5，在命令终端中输入如下命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>tsc .<span class="token punctuation">\\</span>src<span class="token punctuation">\\</span>es6<span class="token punctuation">\\</span>a.ts <span class="token parameter variable">-t</span> es5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/image-20230807162951556.127df41d.png" alt="image-20230807162951556"></p><p>注：</p><p>编译后，可以看到 <code>es6</code> 文件夹下多了 <code>a.js</code> 和 <code>b.js</code> 文件，因为 a 依赖了 b 中的模块。</p><p>同时，我们可以看到 <code>defineProperty</code> 属性，这是 ES5 的属性。也编译成了 CommonJS 模块 ！</p><p>将 <code>/src/es6/a.ts</code> 模块编译成 ES6，在命令终端中输入如下命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>tsc .<span class="token punctuation">\\</span>src<span class="token punctuation">\\</span>es6<span class="token punctuation">\\</span>a.ts <span class="token parameter variable">-t</span> es6
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/image-20230807164755810.fc524599.png" alt="image-20230807164755810"></p><p>注：</p><p>编译成 ES6 后，模块就默认指定为 ES6 模块了，在命令行中如果 target 是 ES5 的话，module 就默认指定为 ES6</p><p>不指定 target 选项，直接指定 module 选项为 <code>amd</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>tsc .<span class="token punctuation">\\</span>src<span class="token punctuation">\\</span>es6<span class="token punctuation">\\</span>a.ts <span class="token parameter variable">-m</span> amd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/image-20230807170316851.7dea7e58.png" alt="image-20230807170316851"></p><p>注：</p><p>以上编译后的代码，我们如果使用过 requireJS 的话，就会对以上代码看着很熟悉，这就是一个 amd 模块。</p><p>不指定 target 选项，直接指定 module 选项为 <code>umd</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>tsc .<span class="token punctuation">\\</span>src<span class="token punctuation">\\</span>es6<span class="token punctuation">\\</span>a.ts <span class="token parameter variable">-m</span> umd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/image-20230807181522329.ff4a9e7d.png" alt="image-20230807181522329"></p><p>注：</p><p>以上使用 umd 模块编译后的代码，这种类型的代码就是我们日常看到的类库的代码编写方式。</p><blockquote><p>通常情况下，我们会使用 tsc 的默认配置即可</p></blockquote><ul><li><code>target</code> 默认为 <code>es2016</code></li><li><code>module</code> 默认为 <code>commonjs</code></li></ul><p>这就引出了两个模块系统的兼容性问题，因为我们在编译时会默认把所有的模块都编译成 <code>commonjs</code> 模块。TS 在处理 ES6 模块的默认导出导入时就会做一些特殊的处理，接下来我们来研究是怎么处理的 ？</p><h3 id="_7-2、ts-模块系统的兼容性问题" tabindex="-1"><a class="header-anchor" href="#_7-2、ts-模块系统的兼容性问题" aria-hidden="true">#</a> 7.2、TS 模块系统的兼容性问题</h3><p>编译 ES6 模块下的 <code>./src/es6/c.ts</code> 模块</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>tsc .<span class="token punctuation">\\</span>src<span class="token punctuation">\\</span>es6<span class="token punctuation">\\</span>c.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/image-20230807213516598.61c92ebe.png" alt="image-20230807213516598"></p><p>注：</p><p>以上执行 tsc 命令后，3 个模块都被编译了</p><ul><li>在 a 模块中，本身默认导出的是一个函数，编译后该函数被指定了一个默认的名称叫 <code>default_1</code></li><li>最重要的改变是默认函数 <code>default_1</code> 被绑定在了 <code>exports.default</code> 属性上，也就是说这个默认的导出不再是整个模块的顶级属性了</li><li>在 <code>/src/es6/c.js</code> 中导入时，也需要通过 default 属性来调用这个函数</li></ul><blockquote><p>之所以这样处理，是因为两个模块系统（ES6 模块 和 node 模块）在处理顶级导入导出时是不兼容的。</p></blockquote><p>两个模块系统对比</p><ul><li>在 ES6 中，允许一个模块有一个顶级导出，即 <code>export default</code> 。同时也允许有自己的导出，即 <code>export</code> （如：<code>/src/es6/a.ts</code> 中）</li><li>在 CommonJS 中，只允许一个模块有一个顶级的导出，即 <code>module.exports</code>（如：<code>/src/node/a.node.ts</code> 中）</li></ul><p>如果一个模块中有自己的导出，以 <code>exports.</code> 的形式，是不会再有一个顶级的导出</p><p>在 <code>/src/b.node.ts</code> 中</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// exports === module.exports</span>

<span class="token comment">// module.exports = {}</span>

<span class="token comment">// 导出多个变量</span>
exports<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>d <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>

<span class="token comment">// 如果一个模块中有自己的导出，如以上 \`exports.\` 的形式，是不会再有一个顶级的导出</span>
<span class="token comment">// 我们定义一个顶级的导出，此时就会覆盖上面的 多个变量的导出（即便将以下代码放到最上边 同样也会覆盖）</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/image-20230807222627738.3e437733.png" alt="image-20230807222627738"></p><p>注：</p><p>运行后，可以看到 <code>module.exports = {}</code> 完全覆盖了 导出的多个变量定义的部分。由此就可以看到两个模块不兼容的地方</p><p>如果我们在程序中都使用 ES6 模块的话，是不会有问题的 ！因为 TS 在编译后的 <code>/src/es6/a.js</code> 中 <code>exports.default = default_1;</code> 添加上了 <code>.default</code> ，对于我们开发者来说是无感知的。</p><p>在调用时，在 <code>/src/es6/c.js</code> 中 <code>(0, a_2.default)();</code> 也会自动加上 <code>.default</code> 。</p><blockquote><p>但如果一个模块用 ES6 的方式做了默认的导出，另一个模块用非 ES6 的方式做了导入就会产生问题。（如下）</p></blockquote><h3 id="_7-3、在-node-模块中-导入-es6-模块" tabindex="-1"><a class="header-anchor" href="#_7-3、在-node-模块中-导入-es6-模块" aria-hidden="true">#</a> 7.3、在 node 模块中 导入 ES6 模块</h3><p>在 node 模块 <code>/src/node/c.node.ts</code> 中 导入 ES6 模块 <code>/src/es6/a.ts</code></p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">let</span> c1 <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&quot;./a.node&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> c2 <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&quot;./b.node&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 在 node 模块中 导入 ES6 模块</span>
<span class="token keyword">let</span> c3 <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&quot;../es6/a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 因为在 a 模块中会默认导出一个函数，所以我们自然的会认为 c3 也是一个函数</span>
<span class="token comment">// 执行会报错，c3 不是一个函数</span>
<span class="token function">c3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/image-20230810163807712.42932f83.png" alt="image-20230810163807712"></p><p>正确的调用方式是什么呢 ？先打印输出 c3 是什么样的一个结构 ！</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">let</span> c1 <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&quot;./a.node&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> c2 <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&quot;./b.node&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 在 node 模块中 导入 ES6 模块</span>
<span class="token keyword">let</span> c3 <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&quot;../es6/a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 因为在 a 模块中会默认导出一个函数，所以我们自然的会认为 c3 也是一个函数</span>
<span class="token comment">// 执行会报错，c3 不是一个函数</span>
<span class="token comment">// c3()</span>

<span class="token comment">// 正确的执行方式该是什么样的呢 ？</span>

<span class="token comment">// 打印输入 c3 的结构（在浏览器 或 命令终端中查看）</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c3<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在控制台中查看运行结果</p><p><img src="https://www.arryblog.com/assets/img/image-20230811005448956.18636576.png" alt="image-20230811005448956"></p><p>在浏览器中查看运行结果</p><p><img src="https://www.arryblog.com/assets/img/image-20230811012233129.f3617b71.png" alt="image-20230811012233129"></p><p>注：</p><p>可以看到打印输出的结果中，自动添加了一个 default 属性。所以我们要调用 a 模块的默认导出时，就只能通过 <code>c3.default()</code> 方式调用。</p><p><img src="https://www.arryblog.com/assets/img/image-20230811013311341.d20d82f2.png" alt="image-20230811013311341"></p><blockquote><p>此时，就正常输出了 ！不过，通过 <code>c3.default()</code>的方式访问是一件反直觉的事情，也很容易发生错误。</p></blockquote><h3 id="_7-4、如何处理两个模块系统之间的不兼容性问题" tabindex="-1"><a class="header-anchor" href="#_7-4、如何处理两个模块系统之间的不兼容性问题" aria-hidden="true">#</a> 7.4、如何处理两个模块系统之间的不兼容性问题</h3><p>如何处理两个模块系统（ES6 模块 和 node 模块）之间的不兼容性问题呢 ？有两个方案</p><ul><li>①、两个模块系统不要混用</li><li>②、如果你的 ES6 模块有一个顶级导出，而且可能会被 node 模块引用，TS 为我们提供了兼容性的语法 <code>export =</code> 的方式，编译后就是 <code>module.exports</code> 就相当于 CommonJS 中的顶级导出</li></ul><p>新建一个 ES6 模块 <code>/src/es6/d.ts</code></p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// export = 的方式，编译后就是 module.exports 就相当于 CommonJS 中的顶级导出</span>
<span class="token comment">// 将 function 函数作为顶级导出</span>
<span class="token function-variable function">export</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;I&#39;m default&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 同时也意味着该模块中不能有其它的导出了</span>

<span class="token comment">// 以下再次导出就会报错，如果需要导出其他的变量，建议将它们合并在一个对象中导出</span>
<span class="token comment">// export let a = 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>/src/node/c.node.ts</code> 中导入以上模块</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">let</span> c1 <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&quot;./a.node&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> c2 <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&quot;./b.node&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> c3 <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&quot;../es6/a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 将 d.ts 中 ES6 模块默认导出的函数导入进来</span>
<span class="token comment">// import c4 = require(&#39;../es6/d&#39;)</span>

<span class="token comment">// 也可以使用普通的 ES6 模块的方式导入</span>
<span class="token keyword">import</span> c4 <span class="token keyword">from</span> <span class="token string">&quot;../es6/d&quot;</span><span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// c3()</span>
<span class="token comment">// console.log(c3)</span>
c3<span class="token punctuation">.</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 直接执行 c4</span>
<span class="token function">c4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/image-20230811015041833.42c9cd66.png" alt="image-20230811015041833"></p><blockquote><p>以上两种方式导入都可，输出的结果都是一样的。</p></blockquote><p>在 <code>tsconfig.json</code> 配置文件中有一个配置项</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;esModuleInterop&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：</p><ul><li>如果以上配置项为开启状态，即为 <code>true</code> 时，既可以使用 <code>import c4 = require(&#39;../es6/d&#39;)</code> 方式导入，也可以用 <code>import c4 from &#39;../es6/d&#39;</code> 的方式导入。</li><li>如果将该项选项关闭掉，注释 或 置为 <code>fasle</code> 时，该 <code>import c4 from &#39;../es6/d&#39;</code> 方式导入就会报错。这就要求我们只能通过 <code>import c4 = require(&#39;../es6/d&#39;)</code> 的方式导入了。</li></ul><blockquote><p>以上就是 TS 对 ES6 模块 和 CommonJS 模块的兼容性处理了。</p></blockquote><h3 id="_8、总结" tabindex="-1"><a class="header-anchor" href="#_8、总结" aria-hidden="true">#</a> 8、总结</h3><p>我们复习了 ES6 模块 和 CommonJS 模块，TS 能够对这两种模块进行比较好的支持。</p><p>我们基本上可以沿袭之前的写法。但要注意两个模块系统最好不要混用，如果混用我们就要采用一些兼容性的处理方式。</p><h2 id="四、ts-的命名空间" tabindex="-1"><a class="header-anchor" href="#四、ts-的命名空间" aria-hidden="true">#</a> 四、TS 的命名空间</h2><p>namespace 是一种将相关代码组织在一起的方式，中文译为“命名空间”。</p><p>它出现在 ES 模块诞生之前，作为 TypeScript 自己的模块格式而发明的。但是，自从有了 ES 模块，官方已经不推荐使用 namespace 了。</p><p>在 JavaScript 中，命名空间能够有效的避免全局污染，在 ES6 引入了模块系统后，命名空间也就很少被提及了。但 TS 仍然实现了该特性，尽管在模块系统中我们完全不必考虑全局污染问题了。如果要使用全局的类库，命名空间仍然是一个比较好的解决方案。</p><h3 id="_1、ts-中命名空间的定义" tabindex="-1"><a class="header-anchor" href="#_1、ts-中命名空间的定义" aria-hidden="true">#</a> 1、TS 中命名空间的定义</h3><ul><li>命名空间用 <code>namespace</code> 关键字来声明</li><li>在命名空间内可以定义任意多的变量</li><li>这些变量只能在定义的命名空间内可见，如果需要这些变量在全局范围内可见就需要使用 <code>export</code> 关键字导出</li></ul><p>新建项目，目录结构如下</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>icoding-ts
├─ build
│ ├─ webpack.base.config.js
│ ├─ webpack.config.js
│ ├─ webpack.dev.config.js
│ └─ webpack.pro.config.js
├─ package-lock.json
├─ package.json
├─ README.md
├─ src
│ ├─ a.ts
│ ├─ b.ts
│ ├─ index.ts
│ └─ tpl
│ └─ index.html
└─ tsconfig.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>/src/a.ts</code> 中</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// 命名空间用 namespace 关键字来声明</span>
<span class="token keyword">namespace</span> Shape <span class="token punctuation">{</span>
  <span class="token comment">// 在命名空间内定义变量</span>
  <span class="token keyword">const</span> pi <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">;</span>
  <span class="token comment">// 使用 export 关键字导出，全局可见</span>
  <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">cricle</span><span class="token punctuation">(</span>r<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> pi <span class="token operator">*</span> r <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>随着程序的不断扩张，该命名空间会变得越来越大，命名空间也是可以拆分的。</p></blockquote><p>在 <code>/src/b.ts</code> 中也有一个同名的命名空间，该命名空间就分布在了两个文件中，它们之间是共享一个命名空间的。</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">namespace</span> Shape <span class="token punctuation">{</span>
  <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 命名空间的调用方法</span>

<span class="token comment">// 调用 a.ts 中的 cricle 方法</span>
Shape<span class="token punctuation">.</span><span class="token function">cricle</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 调用 b.ts 中的 square 方法</span>
Shape<span class="token punctuation">.</span><span class="token function">square</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如何看到效果，需要明确一个原则：命名空间和模块不要混用，不在一个模块中使用命名空间</p><blockquote><p>命名空间最好是在一个全局的环境中使用</p></blockquote><p><strong>正确的使用方法：</strong> 应该先将 <code>a.ts</code> 和 <code>b.ts</code> 这两个文件编译成 JS 文件。然后在 <code>/tpl/index.html</code> 中使用 <code>script</code> 标签来引入</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 将 编译成 JS 文件</span>
tsc .<span class="token punctuation">\\</span>src<span class="token punctuation">\\</span>b.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/image-20230812153223278.af068b26.png" alt="image-20230812153223278"></p><p>运行会有报错，因为不能调用 <code>cricle</code> 方法，该方法是在 <code>/src/a.ts</code> 中定义的，因此 <code>b.ts</code> 就构成了对 <code>a.ts</code> 的引用。就需要用到 <strong>三斜杠命令</strong></p><h3 id="_2、三斜杠命令" tabindex="-1"><a class="header-anchor" href="#_2、三斜杠命令" aria-hidden="true">#</a> 2、三斜杠命令</h3><p>三斜杠命令（<code>///</code>）是一个 TypeScript 编译器命令，用来指定编译器行为。它只能用在文件的头部，如果用在其他地方，会被当作普通的注释。另外，若一个文件中使用了三斜线命令，那么在三斜线命令之前只允许使用单行注释、多行注释和其他三斜线命令，否则三斜杠命令也会被当作普通的注释。</p><p>除了拆分类型声明文件，三斜杠命令也可以用于普通脚本加载类型声明文件。</p><blockquote><p>三斜杠命令主要包含三个参数，代表三种不同的命令。</p></blockquote><ul><li>path：必须指向一个存在的文件，若文件不存在会报错。且不允许指向当前文件</li><li>types：参数的值是类型库的名称，也就是安装到<code>node_modules/@types</code>目录中的子目录的名字。</li><li>lib：允许脚本文件显式包含内置 lib 库，等同于在<code>tsconfig.json</code>文件里面使用<code>lib</code>属性指定 lib 库</li></ul><h3 id="_3、-reference-path" tabindex="-1"><a class="header-anchor" href="#_3、-reference-path" aria-hidden="true">#</a> 3、<code>/// &lt;reference path=&quot;&quot; /&gt;</code></h3><p><code>/// &lt;reference path=&quot;&quot; /&gt;</code>是最常见的三斜杠命令，告诉编译器在编译时需要包括的文件，常用来声明当前脚本依赖的类型文件。</p><p>优化以上代码错误，在 <code>/src/b.ts</code> 中添加 <code>///</code> 三斜杠命令</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// path 为 b.ts 的引用，引用了 a.ts ，即 一个相对路径</span>
<span class="token comment">/// &lt;reference path=&quot;a.ts&quot; /&gt;</span>

<span class="token keyword">namespace</span> Shape <span class="token punctuation">{</span>
  <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 命名空间的调用方法</span>

<span class="token comment">// 调用 a.ts 中的 cricle 方法</span>
Shape<span class="token punctuation">.</span><span class="token function">cricle</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 调用 b.ts 中的 square 方法</span>
Shape<span class="token punctuation">.</span><span class="token function">square</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次在命令行终端中执行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 将 编译成 JS 文件</span>
tsc .<span class="token punctuation">\\</span>src<span class="token punctuation">\\</span>b.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/image-20230812161212982.d807a18e.png" alt="image-20230812161212982"></p><blockquote><p>此时，可以看到两个文件都被编译完成了，即：<code>a.js</code> 和 <code>b.js</code></p></blockquote><p><img src="https://www.arryblog.com/assets/img/image-20230812161916163.73a0eeaf.png" alt="image-20230812161916163"></p><p>从编译后的文件可以看到，命名空间被编译成了一个立即执行函数，该函数创建了一个闭包。在闭包之内有一些私有成员（即未导出的成员），导出的成员会被挂载在全局变量下，这种形式就是 <strong>命名空间的实现原理</strong> 。</p><h3 id="_4、使用命名空间" tabindex="-1"><a class="header-anchor" href="#_4、使用命名空间" aria-hidden="true">#</a> 4、使用命名空间</h3><p>在 <code>src/tpl/index.html</code> 中引入 <code>a.js</code> 和 <code>b.js</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>TypeScript<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- 在页面中使用 命名空间 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../a.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../b.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>/src/b.ts</code> 中打印输出调用 <code>cricle</code> 和 <code>square</code> 方法的结果</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">/// &lt;reference path=&quot;a.ts&quot; /&gt;</span>
<span class="token keyword">namespace</span> Shape <span class="token punctuation">{</span>
  <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 命名空间的调用方法</span>

<span class="token comment">// 调用 a.ts 中的 cricle 方法</span>
Shape<span class="token punctuation">.</span><span class="token function">cricle</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 打印输出结果</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Shape<span class="token punctuation">.</span><span class="token function">cricle</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 调用 b.ts 中的 square 方法</span>
Shape<span class="token punctuation">.</span><span class="token function">square</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 打印输出结果</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Shape<span class="token punctuation">.</span><span class="token function">square</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次编译 <code>b.ts</code> 文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 将 编译成 JS 文件</span>
tsc .<span class="token punctuation">\\</span>src<span class="token punctuation">\\</span>b.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>直接在浏览器中访问 <code>http://127.0.0.1:5500/src/tpl/index.html</code> 即可看到打印的结果</p><p><img src="https://www.arryblog.com/assets/img/image-20230814171343986.18826f4a.png" alt="image-20230814171343986"></p><h3 id="_5、命名空间成员的别名" tabindex="-1"><a class="header-anchor" href="#_5、命名空间成员的别名" aria-hidden="true">#</a> 5、命名空间成员的别名</h3><p>以上代码中，我们在访问命名空间成员时如： <code>Shape.cricle(1)</code> 都要加上 <code>Shape</code> 前缀，很多时候为了简便可以给 <code>cricle()</code> 函数取一个别名。这样访问起来就会更加快捷。</p><p>在 <code>/src/b.ts</code> 中添加</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">/// &lt;reference path=&quot;a.ts&quot; /&gt;</span>
<span class="token keyword">namespace</span> Shape <span class="token punctuation">{</span>
  <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Shape<span class="token punctuation">.</span><span class="token function">cricle</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Shape<span class="token punctuation">.</span><span class="token function">square</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 命名空间成员添加别名，使用 import 语法，这里注意：与模块中的 import 没有关系</span>
<span class="token keyword">import</span> cricle <span class="token operator">=</span> Shape<span class="token punctuation">.</span>cricle<span class="token punctuation">;</span>
<span class="token comment">// 这时，就可以直接执行 cricle 函数</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">cricle</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次编译 <code>b.ts</code> 文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 将 编译成 JS 文件</span>
tsc .<span class="token punctuation">\\</span>src<span class="token punctuation">\\</span>b.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>直接在浏览器中访问 <code>http://127.0.0.1:5500/src/tpl/index.html</code> 即可看到打印的结果</p><p><img src="https://www.arryblog.com/assets/img/image-20230814172826315.eec600e0.png" alt="image-20230814172826315"></p><h3 id="_6、总结-1" tabindex="-1"><a class="header-anchor" href="#_6、总结-1" aria-hidden="true">#</a> 6、总结</h3><p>在 TS 的早期版本中，命名空间也叫 “内部模块”。本质上它就是一个闭包，可以用于隔离作用域。</p><p>随着 ES6 模块的引入，内部模块这个名称已经不再就叫了。TS 包保留命名空间更多的考虑是对全局变量的时代的一种兼容。</p><blockquote><p>现在，在一个完全的模块化系统中，我们其实不必使用命名空间。</p></blockquote><h2 id="五、声明合并" tabindex="-1"><a class="header-anchor" href="#五、声明合并" aria-hidden="true">#</a> 五、声明合并</h2><p>在 TS 中有一个独特的概念，即：声明合并。</p><ul><li>声明合并：编译器会把程序多个地方具有相同名称的声明 合并为 一个声明。</li><li>好处：可以将程序中散落各处的同名声明合并再一起。</li></ul><p>如：在程序中多个地方定了同样名字的接口，那么在使用接口时就会对多处的定义同时具有感知能力。通过声明合并，就会避免对接口成员的遗漏</p><h3 id="_1、接口的声明合并" tabindex="-1"><a class="header-anchor" href="#_1、接口的声明合并" aria-hidden="true">#</a> 1、接口的声明合并</h3><p>这是 TS 中最常见的一种声明合并</p><p>在 <code>/src/merge.ts</code> 中定义接口</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// 定义一个接口 A</span>
<span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span>
  x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 再定义一个同名接口 A</span>
<span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span>
  y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 此时，两个接口就会合并成一个接口</span>

<span class="token comment">// 定义一个变量，变量的类型就是 接口 A，该变量就需要具备 以上两个接口 中的所有成员</span>
<span class="token keyword">let</span> a<span class="token operator">:</span> <span class="token constant">A</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  x<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  y<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：</p><p>如果我们在编写时，是一个全局模块，那么以上两个接口甚至可以不再一个接口中，也可以发生接口的合并。</p><blockquote><p>下面我们来关注接口的成员</p></blockquote><h3 id="_2、接口的成员" tabindex="-1"><a class="header-anchor" href="#_2、接口的成员" aria-hidden="true">#</a> 2、接口的成员</h3><p>对于接口中非函数的成员要求我们保证它的唯一性，如果不唯一它们的类型必须相同。</p><h3 id="_2-1、非函数成员" tabindex="-1"><a class="header-anchor" href="#_2-1、非函数成员" aria-hidden="true">#</a> 2.1、非函数成员</h3><p>在 <code>/src/merge.ts</code> 中</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span>
  x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token comment">// 定义一个成员 y，它的类型为 number，是没有问题的</span>
  <span class="token comment">// y: number;</span>

  <span class="token comment">// 如果将 y 的类型改为 string，就会报错</span>
  y<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span>
  y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> a<span class="token operator">:</span> <span class="token constant">A</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  x<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  y<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2、函数成员" tabindex="-1"><a class="header-anchor" href="#_2-2、函数成员" aria-hidden="true">#</a> 2.2、函数成员</h3><p>函数成员，每一个函数都会被声明为一个函数重载</p><p>在 <code>/src/merge.ts</code> 中</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span>
  x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token comment">// 在 A接口中定义一个函数</span>
  <span class="token function">foo</span><span class="token punctuation">(</span>bar<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span>
  y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token comment">// 在 第二个A接口中 也定义一个函数，类型改为 string</span>
  <span class="token function">foo</span><span class="token punctuation">(</span>bar<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token comment">// 在增加一个函数，类型为数字类型的数组</span>
  <span class="token function">foo</span><span class="token punctuation">(</span>bar<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 这样就实现了函数重载，在接口中定义的函数就是函数重载的列表</span>
<span class="token comment">// 在实现时，就需要指定一个更为宽泛的类型</span>
<span class="token keyword">let</span> a<span class="token operator">:</span> <span class="token constant">A</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  x<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  y<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token comment">// 函数的实现</span>
  <span class="token function">foo</span><span class="token punctuation">(</span>bar<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> bar<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：</p><p>以上函数重载就实现了，在前面的课程中我们学习过函数重载时，需要注意函数声明的顺序，因为编译器会按顺序进行匹配。</p><blockquote><p>在接口合并时，这些顺序是如何确定的呢 ？原则如下：</p></blockquote><ul><li>在接口内部，按书写的顺序来确定</li><li>在接口之间，后边的接口会排在前面</li></ul><blockquote><p>函数声明的列表顺序如下</p></blockquote><p>在 <code>/src/merge.ts</code> 中</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span>
  x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token function">foo</span><span class="token punctuation">(</span>bar<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span>
  y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token function">foo</span><span class="token punctuation">(</span>bar<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// 函数声明的列表顺序 1</span>
  <span class="token function">foo</span><span class="token punctuation">(</span>bar<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> a<span class="token operator">:</span> <span class="token constant">A</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  x<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  y<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token function">foo</span><span class="token punctuation">(</span>bar<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> bar<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也有一个例外，如果函数的参数是一个字符串字面量的，那么这个声明就会被提升到整个函数声明的最顶端。</p><blockquote><p>再增加一个函数的定义</p></blockquote><p>在 <code>/src/merge.ts</code> 中</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span>
  x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token function">foo</span><span class="token punctuation">(</span>bar<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>
  <span class="token comment">// 增加一个函数的定义，参数是一个字符串字面量</span>
  <span class="token function">foo</span><span class="token punctuation">(</span>bar<span class="token operator">:</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span>
  y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token function">foo</span><span class="token punctuation">(</span>bar<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
  <span class="token function">foo</span><span class="token punctuation">(</span>bar<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>
  <span class="token comment">// 增加一个函数的定义，参数是一个字符串字面量</span>
  <span class="token function">foo</span><span class="token punctuation">(</span>bar<span class="token operator">:</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token punctuation">}</span>

<span class="token comment">// 函数声明的顺序会变成：拥有字符串字面量参数的函数 会排在第一位（顺序如上）</span>

<span class="token keyword">let</span> a<span class="token operator">:</span> <span class="token constant">A</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  x<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  y<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token function">foo</span><span class="token punctuation">(</span>bar<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> bar<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、命名空间之间的合并" tabindex="-1"><a class="header-anchor" href="#_3、命名空间之间的合并" aria-hidden="true">#</a> 3、命名空间之间的合并</h3><p>在前面学习命名空间时，我们有接触到</p><p>在 <code>/src/a.ts</code> 中</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// 命名空间用 namespace 关键字来声明</span>
<span class="token keyword">namespace</span> Shape <span class="token punctuation">{</span>
  <span class="token keyword">const</span> pi <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">;</span>
  <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">cricle</span><span class="token punctuation">(</span>r<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> pi <span class="token operator">*</span> r <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>/src/b.ts</code> 中</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">namespace</span> Shape <span class="token punctuation">{</span>
  <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：</p><p>在以上两个文件中，分别定义了 Shape 两个同名的命名空间，这时两个命名空间就会发生合并。</p><blockquote><p>注意：在命名空间中导出的成员是不可以重复定义的。</p></blockquote><p>将 <code>b.ts</code> 中的导出函数 放入 <code>a.ts</code> 的命名空间中就会提示函数实现重复。</p><blockquote><p>这与接口之间的声明与合并就有区别，接口之间是可以重复定义的。但在命名空间中不可以 ！</p></blockquote><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">namespace</span> Shape <span class="token punctuation">{</span>
  <span class="token keyword">const</span> pi <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">;</span>
  <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">cricle</span><span class="token punctuation">(</span>r<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> pi <span class="token operator">*</span> r <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 函数实现重复（报错）</span>
  <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/image-20230815175300595.00d37a18.png" alt="image-20230815175300595"></p><h3 id="_4、命名空间和函数的合并" tabindex="-1"><a class="header-anchor" href="#_4、命名空间和函数的合并" aria-hidden="true">#</a> 4、命名空间和函数的合并</h3><p>在 <code>/src/merge.ts</code> 中，定义一个函数</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// 定义一个函数</span>
<span class="token keyword">function</span> <span class="token function">Lib</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// 再定义一个同名的命名空间</span>
<span class="token keyword">namespace</span> Lib <span class="token punctuation">{</span>
  <span class="token comment">// 在命名空间中导出一个变量</span>
  <span class="token keyword">export</span> <span class="token keyword">let</span> version <span class="token operator">=</span> <span class="token string">&quot;1.0&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 以上就相当于给函数 Lib 增加了一个属性</span>
<span class="token comment">// 在 JS 中，创建一个函数然后给它增加一些属性是很常见的一个模式</span>
<span class="token comment">// 通过命名空间 和 函数的声明合并也可以实现这个模式</span>

<span class="token comment">// 打印输出变量的值</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Lib<span class="token punctuation">.</span>version<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1.0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/image-20230815210238090.0f1f0e23.png" alt="image-20230815210238090"></p><h3 id="_5、命名空间-和-类声明合并" tabindex="-1"><a class="header-anchor" href="#_5、命名空间-和-类声明合并" aria-hidden="true">#</a> 5、命名空间 和 类声明合并</h3><p>在 <code>/src/merge.ts</code> 中，定义一个类</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// 声明一个类</span>
<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// 定义一个同名的命名空间</span>
<span class="token keyword">namespace</span> <span class="token constant">A</span> <span class="token punctuation">{</span>
  <span class="token comment">// 在命名空间中导出一个变量</span>
  <span class="token keyword">export</span> <span class="token keyword">let</span> state <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 以上就相当于给 类 添加了一些静态属性</span>

<span class="token comment">// 打印输出类的属性值</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/image-20230815210800952.014bc2f7.png" alt="image-20230815210800952"></p><h3 id="_6、命名空间-和-枚举的合并" tabindex="-1"><a class="header-anchor" href="#_6、命名空间-和-枚举的合并" aria-hidden="true">#</a> 6、命名空间 和 枚举的合并</h3><p>在 <code>/src/merge.ts</code> 中，定义一个枚举类型</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// 定义一个枚举</span>
<span class="token keyword">enum</span> Color <span class="token punctuation">{</span>
  Red<span class="token punctuation">,</span>
  Yellow<span class="token punctuation">,</span>
  Blue<span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token comment">// 再定义一个同名的命名空间</span>
<span class="token keyword">namespace</span> Color <span class="token punctuation">{</span>
  <span class="token comment">// 在命名空间中导出一个函数</span>
  <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">mix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 以上就相当于给 枚举类型增加了一个方法</span>

<span class="token comment">// 打印输出 Color，其中增加了一个 mix 方法</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://www.arryblog.com/assets/img/image-20230815211820764.59a15e72.png" alt="image-20230815211820764"></p><p>注：</p><p>命名空间在与函数进行声明合并 或 与类声明合并时，一定要放在函数定义的后面 或 类定义的后面。</p><blockquote><p>枚举 与 命名空间的位置是没有要求，前后都行 ！</p></blockquote><ul><li>在我们的程序中，如果有多处的同名的声明，其实并不是一个好的模式，最好还是把它们封装在一个模块之内。</li><li>TS 具有这种特性就是为了照顾一些旧的开发模式，这使得在我们的工程中如果引入了 TS 仍然能与老的代码共存。并且还可能发现其中的一些设计缺陷 ！</li></ul><h2 id="六、编写声明文件" tabindex="-1"><a class="header-anchor" href="#六、编写声明文件" aria-hidden="true">#</a> 六、编写声明文件</h2><p>本节开始学习如何在 TS 中引入外部类库，以及如何为它们编写声明文件</p><blockquote><p>类库一般分为三类：</p></blockquote><ul><li>全局类库</li><li>模块类库</li><li>UMD 类库</li></ul><h3 id="_1、ts-中引入外部类库" tabindex="-1"><a class="header-anchor" href="#_1、ts-中引入外部类库" aria-hidden="true">#</a> 1、TS 中引入外部类库</h3><p>以 jQuery 为例，在使用它之前先安装</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 在命令行终端中输入</span>
<span class="token function">npm</span> i jquery
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>jQuery 属于 UMD 库，也就说：既可以通过全局的方式来引用（通常需要配合 Webpack 的一些插件来实现），也可以通过模块化的方式来引用。</p><blockquote><p>以下采用模块化的方式来引用</p></blockquote><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>// 项目目录结构
icoding-ts
├─ build
│ ├─ webpack.base.config.js
│ ├─ webpack.config.js
│ ├─ webpack.dev.config.js
│ └─ webpack.pro.config.js
├─ package-lock.json
├─ package.json
├─ src
│ ├─ index.ts
│ ├─ libs
│ │ └─ index.ts
│ └─ tpl
│ └─ index.html
└─ tsconfig.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>/src/libs/index.ts</code> 中</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> $ <span class="token keyword">from</span> <span class="token string">&quot;jquery&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>导入提示报错：“无法找到模块 jQuery 的声明文件”</p><p><img src="https://www.arryblog.com/assets/img/image-20230815220229799.69569444.png" alt="image-20230815220229799"></p><p>报错原因：</p><p>JQuery 是用 JavaScript 编写的，我们在使用非 TS 编写的类库时必须为这个类库编写一个声明文件，并对外暴露它的 API 。</p><p>有时这些类库的声明文件是包含在源码中的，但有时候是单独提供的需要额外的安装。jQuery 就是这样的 ！</p><blockquote><p>幸运的是，大多数类库的声明文件社区已经为我们编写好了。使用的方法需要安装一个类型声明包 ！</p></blockquote><p>在命令行终端中，安装 jQuery 的类型声明包</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 以 @types/ 开头 加上 包的名称，-D 开发依赖</span>
<span class="token function">npm</span> i @types/jquery <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>安装完成后，<code>import $ from &#39;jquery&#39;</code> 导入 jQuery 就不会报错了 ！</p><p>在 <code>/src/libs/index.ts</code> 中</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> $ <span class="token keyword">from</span> <span class="token string">&quot;jquery&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 更改首页的文字颜色</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">&quot;color&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>/src/index.ts</code> 中导入以上文件</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// 导入</span>
<span class="token keyword">import</span> <span class="token string">&quot;./libs/index&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> hello<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;Hello TS ！&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// console.log(hello)</span>
<span class="token comment">// 将以上字符串插入到页面中</span>
document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&quot;.app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> hello<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动运行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> run start
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在浏览器中预览</p><p><img src="https://www.arryblog.com/assets/img/image-20230815222717241.1cc12385.png" alt="image-20230815222717241"></p><p>注：</p>`,357),d={href:"https://www.npmjs.com/",target:"_blank",rel:"noopener noreferrer"},r=s("code",null,"@types/类库名称",-1),k=s("code",null,"@types/lodash",-1),m={href:"https://www.npmjs.com/package/@types/lodash",target:"_blank",rel:"noopener noreferrer"},v=t(`<p>如果 npm 上没有对应的包，就需要我们自己去写一个，也是我们贡献社区的好机会（具体方法之前有讲过的）。当然在这之前我们需要学会如何编写一个类库声明文件 ！</p><h3 id="_2、三种类库声明文件的写法" tabindex="-1"><a class="header-anchor" href="#_2、三种类库声明文件的写法" aria-hidden="true">#</a> 2、三种类库声明文件的写法</h3><p>在 <code>/src/libs</code> 文件夹下，有三个类库：</p><ul><li>全局库（<code>global-lib.js</code>）</li><li>模块库（<code>module-lib.js</code>）</li><li>UMD 库（<code>umd-lib.js</code>）</li></ul><h3 id="_2-1、全局类库" tabindex="-1"><a class="header-anchor" href="#_2-1、全局类库" aria-hidden="true">#</a> 2.1、全局类库</h3><p>在 <code>src/libs/global-lib.js</code> 中</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 定义全局方法</span>
<span class="token keyword">function</span> <span class="token function">globalLib</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 以下给全局方法添加了两个属性</span>

<span class="token comment">// 在方法上挂载 version 属性</span>
globalLib<span class="token punctuation">.</span>version <span class="token operator">=</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 在方法上挂载 doSomething 方法</span>
globalLib<span class="token punctuation">.</span><span class="token function-variable function">doSomething</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;globalLib do something&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>以上是典型的全局类库的模式，如果要使用这个全局库呢 ？</p></blockquote><p>在 <code>/src/tpl/index.html</code> 中使用 <code>&lt;script&gt;</code> 标签引入进来</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>TypeScript<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 引入全局类库 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/src/libs/global-lib.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>/src/libs/index.ts</code> 中调用全局库中的方法</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> $ <span class="token keyword">from</span> <span class="token string">&quot;jquery&quot;</span><span class="token punctuation">;</span>

<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">&quot;color&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 调用 全局库中的属性</span>
<span class="token function">globalLib</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接调用会报错，找不到 <code>globalLib</code> 类库方法</p><p><img src="https://www.arryblog.com/assets/img/image-20230816180955812.867b7064.png" alt="image-20230816180955812"></p><p>因为我们没有为 <code>/src/libs/global-lib.js</code> 该 JS 类库编写一个 声明文件</p><p>在 <code>/src/libs</code> 文件夹下编写一个 <code>global-lib.d.ts</code>（名称一样，但需要添加 <code>d.ts</code> 后缀名） 的声明文件</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// declare 关键字，它可以为一个外部变量提供类型声明</span>
<span class="token comment">// 参数为 options 为一个对象，用到了一个接口来约束对象的结构（接口放在了命名空间中）</span>
<span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">globalLib</span><span class="token punctuation">(</span>options<span class="token operator">:</span> globalLib<span class="token punctuation">.</span>Options<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>

<span class="token comment">// 使用 declare 关键字声明一个 命名空间</span>
<span class="token keyword">declare</span> <span class="token keyword">namespace</span> globalLib <span class="token punctuation">{</span>
  <span class="token comment">// 在命名空间中定义了 两个成员 version 和 doSomething</span>
  <span class="token keyword">const</span> version<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token comment">// 可索引类型的接口，可接收任意类型的字符串属性，返回值为 any</span>
  <span class="token comment">// 当然，该接口也可以放到全局的（放到与命名空间平级的位置），这样该接口就对全局暴露了出来，如果不想暴露就放到命名空间中</span>
  <span class="token keyword">interface</span> <span class="token class-name">Options</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对比 <code>global-lib</code> 类库的源码 和 声明文件</p><p><img src="https://www.arryblog.com/assets/img/image-20230816181824833.2e632996.png" alt="image-20230816181824833"></p><p>注：</p><ul><li>在 TS 声明文件中用到了 <code>declare</code> 关键字，它可以为一个外部变量提供类型声明</li><li>在 JS 类库源码中有一个 全局的 <code>globalLib</code> 函数，在 <code>global-lib.d.ts</code> 中也提供了一个全局的声明 <code>declare function globalLib()</code> 它的参数为 <code>options</code> 为一个对象。 用接口来约束对象的结构，<code>Options</code> 接口放在了命名空间中。接口为可索引类型的接口（可接收任意类型的字符串属性，返回值为 any）</li><li>在 JS 类库源码中，<code>globalLib</code> 函数上挂载了 <code>version</code> 属性 和 <code>doSomething</code> 方法</li><li>同时就需要在 TS 声明文件中 <code>declare</code> 一个命名空间，在命名空间中有两个成员 <code>version</code> 和 <code>doSomething</code> 。这就用到了前面学到了声明合并，即：函数和命名空间的声明合并。相当于为该函数添加了一些属性 ！</li><li>注意：<code>interface</code> 接口是可以放在全局的（放到与命名空间平级的位置），这样该接口就对全局暴露了出来，如果不想暴露就放到命名空间中</li></ul><blockquote><p>此时，程序也不会有报错了 ！</p></blockquote><p>在 <code>/src/libs/index.ts</code> 中，调用全局类库的方法</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> $ <span class="token keyword">from</span> <span class="token string">&quot;jquery&quot;</span><span class="token punctuation">;</span>

<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">&quot;color&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 调用 全局库中的属性</span>
<span class="token function">globalLib</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 调用 全局类库中的方法</span>
globalLib<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动运行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> run start
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在浏览器中，看下运行效果</p><p><img src="https://www.arryblog.com/assets/img/image-20230817180022297.c154217c.png" alt="image-20230817180022297"></p><p>报错原因：</p>`,29),b={href:"https://www.npmjs.com/package/copy-webpack-plugin",target:"_blank",rel:"noopener noreferrer"},g=t(`<p>在命名行终端安装</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i copy-webpack-plugin <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在 <code>/build/webpack.base.config.js</code> 中添加配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导入 copy-webpack-plugin 插件</span>
<span class="token keyword">const</span> CopyPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;copy-webpack-plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">patterns</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">from</span><span class="token operator">:</span> <span class="token string">&quot;./src/libs/global-lib.js&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>/src/tpl/index.html</code> 中引入全局类库的 JS 文件</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>TypeScript<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- 引入全局类库 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>global-lib.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次启动运行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> run start
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在浏览器中查看运行结果</p><p><img src="https://www.arryblog.com/assets/img/image-20230817184123511.31986d37.png" alt="image-20230817184123511"></p><p>以上全局类库项目结构</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>icoding-ts
├─ build
│ ├─ webpack.base.config.js
│ ├─ webpack.config.js
│ ├─ webpack.dev.config.js
│ └─ webpack.pro.config.js
├─ package-lock.json
├─ package.json
├─ README.md
├─ src
│ ├─ index.ts
│ ├─ libs
│ │ ├─ global-lib.d.ts
│ │ ├─ global-lib.js
│ │ ├─ index.ts
│ │ ├─ module-lib.js
│ │ └─ umd-lib.js
│ └─ tpl
│ └─ index.html
└─ tsconfig.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2、模块类库" tabindex="-1"><a class="header-anchor" href="#_2-2、模块类库" aria-hidden="true">#</a> 2.2、模块类库</h3><p>新建 <code>/src/libs/module-lib.js</code> 模块类库文件，为一个 CommonJS 的模块</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> version <span class="token operator">=</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;moduleLib do something&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">moduleLib</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 在 moduleLib 上挂载了 version 属性 和 doSomething 方法</span>
moduleLib<span class="token punctuation">.</span>version <span class="token operator">=</span> version<span class="token punctuation">;</span>
moduleLib<span class="token punctuation">.</span>doSomething <span class="token operator">=</span> doSomething<span class="token punctuation">;</span>

<span class="token comment">// 向外导出一个顶级的 moduleLib 函数</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> moduleLib<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将 <code>module-lib.js</code> 引入到 <code>/src/libs/index.ts</code> 中</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> $ <span class="token keyword">from</span> <span class="token string">&quot;jquery&quot;</span><span class="token punctuation">;</span>

<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">&quot;color&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 调用 全局库中的属性</span>
<span class="token function">globalLib</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 调用 全局类库中的方法</span>
globalLib<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 将 module-lib.js 引入 index.ts 中</span>
<span class="token keyword">import</span> moduleLib <span class="token keyword">from</span> <span class="token string">&quot;./module-lib&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>报错，无法找到模块对应的声明文件</p><p><img src="https://www.arryblog.com/assets/img/image-20230817200627234.00dbd19f.png" alt="image-20230817200627234"></p><p>新建 <code>/src/libs/module-lib.d.ts</code> 模块声明文件</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// 使用 declare 关键字声明了 moduleLib</span>
<span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">moduleLib</span><span class="token punctuation">(</span>options<span class="token operator">:</span> Options<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">Options</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用 declare 定义了 命名空间</span>
<span class="token keyword">declare</span> <span class="token keyword">namespace</span> moduleLib <span class="token punctuation">{</span>
  <span class="token keyword">const</span> version<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token operator">=</span> moduleLib<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>此时，有了模块声明文件后，就不会报错了 ！</p></blockquote><p>在 <code>/src/libs/index.ts</code> 中，调用模块类库的方法</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> $ <span class="token keyword">from</span> <span class="token string">&quot;jquery&quot;</span><span class="token punctuation">;</span>

<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">&quot;color&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 调用 全局库中的属性</span>
<span class="token function">globalLib</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 调用 全局类库中的方法</span>
globalLib<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 将 module-lib.js 引入 index.ts 中</span>
<span class="token keyword">import</span> moduleLib <span class="token keyword">from</span> <span class="token string">&quot;./module-lib&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 调用 模块类库中的方法</span>
moduleLib<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次启动运行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> run start
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在浏览器中查看运行结果</p><p><img src="https://www.arryblog.com/assets/img/image-20230817204332832.0353e78f.png" alt="image-20230817204332832"></p><h3 id="_2-3、umd-类库" tabindex="-1"><a class="header-anchor" href="#_2-3、umd-类库" aria-hidden="true">#</a> 2.3、UMD 类库</h3><p>新建 <code>/src/libs/umd-lib.js</code> UMD 类库文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> factory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> define <span class="token operator">===</span> <span class="token string">&quot;function&quot;</span> <span class="token operator">&amp;&amp;</span> define<span class="token punctuation">.</span>amd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">define</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> module <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span> <span class="token operator">&amp;&amp;</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    root<span class="token punctuation">.</span>umdLib <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">version</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span>
    <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;umdLib do something&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将 <code>umd-lib.js</code> 引入到 <code>/src/libs/index.ts</code> 中</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> $ <span class="token keyword">from</span> <span class="token string">&quot;jquery&quot;</span><span class="token punctuation">;</span>

<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">&quot;color&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 调用 全局库中的属性</span>
<span class="token function">globalLib</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 调用 全局类库中的方法</span>
globalLib<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 将 module-lib.js 引入 index.ts 中</span>
<span class="token keyword">import</span> moduleLib <span class="token keyword">from</span> <span class="token string">&quot;./module-lib&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 调用 模块类库中的方法</span>
moduleLib<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 引入 UMD 类库</span>
<span class="token keyword">import</span> umdLib <span class="token keyword">from</span> <span class="token string">&quot;./umd-lib&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>报错，无法找到 UMD 类库对应的声明文件</p><p><img src="https://www.arryblog.com/assets/img/image-20230817215509364.6aaa1a3c.png" alt="image-20230817215509364"></p><p>新建 <code>/src/libs/umd-lib.d.ts</code> UMD 类库的声明文件</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">declare</span> <span class="token keyword">namespace</span> umdLib <span class="token punctuation">{</span>
  <span class="token keyword">const</span> version<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 专门为 UMD 类库设计的语句（如果要编写一个 UMD 库这条语句是不可缺少的）</span>
<span class="token keyword">export</span> <span class="token keyword">as</span> <span class="token keyword">namespace</span> umdLib<span class="token punctuation">;</span>

<span class="token comment">// export 默认导出</span>
<span class="token keyword">export</span> <span class="token operator">=</span> umdLib<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>此时，有了 UMD 类库声明的文件后，就不会报错了 ！</p></blockquote><p>在 <code>/src/libs/index.ts</code> 中，调用 UMD 类库的方法</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> $ <span class="token keyword">from</span> <span class="token string">&quot;jquery&quot;</span><span class="token punctuation">;</span>

<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">&quot;color&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 调用 全局库中的属性</span>
<span class="token function">globalLib</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 调用 全局类库中的方法</span>
globalLib<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 将 module-lib.js 引入 index.ts 中</span>
<span class="token keyword">import</span> moduleLib <span class="token keyword">from</span> <span class="token string">&quot;./module-lib&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 调用 模块类库中的方法</span>
moduleLib<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 引入 UMD 类库</span>
<span class="token keyword">import</span> umdLib <span class="token keyword">from</span> <span class="token string">&quot;./umd-lib&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 调用 UMD 类库中的方法</span>
umdLib<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次启动运行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> run start
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在浏览器中查看运行结果</p><p><img src="https://www.arryblog.com/assets/img/image-20230818010112674.4698741c.png" alt="image-20230818010112674"></p><h3 id="_2-4、umd-库的全局引用" tabindex="-1"><a class="header-anchor" href="#_2-4、umd-库的全局引用" aria-hidden="true">#</a> 2.4、UMD 库的全局引用</h3><p>UMD 库是可以通过全局的方式来引用的 和 <code>globalLib</code> 是一样的</p><p>在 <code>/src/tpl/index.html</code> 中</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>TypeScript<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 引入全局类库 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>global-lib.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- 引入 UMD 类库 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>umd-lib.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>/build/webpack.base.config.js</code> 配置文件中加入配置</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>const CopyPlugin = require(<span class="token string">&quot;copy-webpack-plugin&quot;</span>);

module.exports = <span class="token punctuation">{</span>
    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
        new CopyPlugin(<span class="token punctuation">{</span>
            patterns<span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token punctuation">{</span> from<span class="token operator">:</span> <span class="token string">&quot;./src/libs/global-lib.js&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token comment">// 导入 UMD 类库文件</span>
                <span class="token punctuation">{</span> from<span class="token operator">:</span> <span class="token string">&quot;./src/libs/umd-lib.js&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>)<span class="token punctuation">,</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过全局的方式引入 umd 类库，需去掉 <code>/src/libs/index.ts</code> 文件中导入的 <code>umdLib</code></p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> $ <span class="token keyword">from</span> <span class="token string">&quot;jquery&quot;</span><span class="token punctuation">;</span>

<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">&quot;color&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 调用 全局库中的属性</span>
<span class="token function">globalLib</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 调用 全局类库中的方法</span>
globalLib<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 将 module-lib.js 引入 index.ts 中</span>
<span class="token keyword">import</span> moduleLib <span class="token keyword">from</span> <span class="token string">&quot;./module-lib&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 调用 模块类库中的方法</span>
moduleLib<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 引入 UMD 类库 （）</span>
<span class="token comment">// import umdLib from &#39;./umd-lib&#39;</span>

<span class="token comment">// 调用 UMD 类库中的方法</span>
umdLib<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>报错，<code>umdLib</code> 是一个 UMD 库，不建议在模块中通过全局的方式来引用</p><p><img src="https://www.arryblog.com/assets/img/image-20230818205948250.0eaadc20.png" alt="image-20230818205948250"></p><p>在 <code>tsconfig.json</code> 配置文件中，有一个配置项可以关闭这个错误提示</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 开启该配置项</span>
    <span class="token property">&quot;allowUmdGlobalAccess&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：</p><p>此时，就没有报错了 ！现在就可以在一个模块中通过全局的方式来引用 UMD 类库了。</p><p>如果我们想要在一个全局的环境中调用 UMD 库，就需要在一个非模块的文件中去调用，这就回到了最传统的开发模式。</p><h3 id="_3、两种插件" tabindex="-1"><a class="header-anchor" href="#_3、两种插件" aria-hidden="true">#</a> 3、两种插件</h3><p>模块化插件 和 全局插件，即：有时候我们想给一个类库添加自定义的方法</p><h3 id="_3-1、模块化插件" tabindex="-1"><a class="header-anchor" href="#_3-1、模块化插件" aria-hidden="true">#</a> 3.1、模块化插件</h3><p>如：我们希望为 <code>moment</code> 类库增加一些自定义的方法</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 安装时间类库 moment</span>
<span class="token function">npm</span> i moment
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>/src/libs/index.ts</code> 中</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> $ <span class="token keyword">from</span> <span class="token string">&quot;jquery&quot;</span><span class="token punctuation">;</span>

<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">&quot;color&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 调用 全局库中的属性</span>
<span class="token function">globalLib</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 调用 全局类库中的方法</span>
globalLib<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 将 module-lib.js 引入 index.ts 中</span>
<span class="token keyword">import</span> moduleLib <span class="token keyword">from</span> <span class="token string">&quot;./module-lib&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 调用 模块类库中的方法</span>
moduleLib<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 引入 UMD 类库</span>
<span class="token comment">// import umdLib from &#39;./umd-lib&#39;</span>

<span class="token comment">// 调用 UMD 类库中的方法</span>
umdLib<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ------------------------------------------</span>

<span class="token comment">// 导入 moment</span>
<span class="token keyword">import</span> m <span class="token keyword">from</span> <span class="token string">&quot;moment&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 给 moment 自定义一些方法（报错：moment 不存在该属性）</span>
m<span class="token punctuation">.</span><span class="token function-variable function">myFunction</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 使用 declare 关键字来为外部的类库增加了自定义的方法</span>
<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&quot;moment&quot;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 导出自定义的方法</span>
  <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2、全局插件" tabindex="-1"><a class="header-anchor" href="#_3-2、全局插件" aria-hidden="true">#</a> 3.2、全局插件</h3><p>给全局变量添加一些方法</p><p>在 <code>/src/libs/index.ts</code> 中</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> $ <span class="token keyword">from</span> <span class="token string">&quot;jquery&quot;</span><span class="token punctuation">;</span>

<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">&quot;color&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 调用 全局库中的属性</span>
<span class="token function">globalLib</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 调用 全局类库中的方法</span>
globalLib<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 将 module-lib.js 引入 index.ts 中</span>
<span class="token keyword">import</span> moduleLib <span class="token keyword">from</span> <span class="token string">&quot;./module-lib&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 调用 模块类库中的方法</span>
moduleLib<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 引入 UMD 类库</span>
<span class="token comment">// import umdLib from &#39;./umd-lib&#39;</span>

<span class="token comment">// 调用 UMD 类库中的方法</span>
umdLib<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 导入 moment</span>
<span class="token keyword">import</span> m <span class="token keyword">from</span> <span class="token string">&quot;moment&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 给 moment 自定义一些方法（报错：moment 不存在该属性）</span>
m<span class="token punctuation">.</span><span class="token function-variable function">myFunction</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 使用 declare 关键字来为外部的类库增加了自定义的方法</span>
<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&quot;moment&quot;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 导出自定义的方法</span>
  <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// -----------------------</span>

<span class="token comment">// 使用 declare 关键字，给全局变量定义方法</span>
<span class="token keyword">declare</span> global <span class="token punctuation">{</span>
  <span class="token comment">// 添加自定义方法</span>
  <span class="token keyword">namespace</span> globalLib <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">doAnything</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 给 globalLib 添加一个 doAnything 方法</span>
globalLib<span class="token punctuation">.</span><span class="token function-variable function">doAnything</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>以上方式，对全局命名空间造成了污染，所以一般不建议这样做。</p></blockquote><h3 id="_3-3、声明文件的依赖" tabindex="-1"><a class="header-anchor" href="#_3-3、声明文件的依赖" aria-hidden="true">#</a> 3.3、声明文件的依赖</h3><p>如果一个文件比较大，它的声明文件就会很长。一般就会按照模块划分，这些声明文件之间就会存在一定的依赖关系。</p><p>以 jQuery 为例，查看 <code>/node_modules/@types/jquery</code> 文件夹下的文件</p><p><img src="https://www.arryblog.com/assets/img/image-20230819170438649.f25f9118.png" alt="image-20230819170438649"></p><p>其中 <code>&quot;types&quot;: &quot;index.d.ts&quot;,</code> 字段会代表声明文件的入口</p><p><img src="https://www.arryblog.com/assets/img/image-20230819183524719.e777e3f0.png" alt="image-20230819183524719"></p><p>注：</p><p>如果编写一个声明文件很困难 或 官方的案例看不明白，一个好的方法就是研究知名类库的声明文件是如何编写的。从中找到启发 ！</p>`,79);function h(q,w){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,s("p",null,[n("在 TS 中使用外部类库时，首先要考虑的是它是不是有这个声明文件，可以在 "),s("a",d,[n("npm 官网 (opens new window)"),e(a)]),n("上搜索 "),r,n(" 即可。")]),s("blockquote",null,[s("p",null,[n("如："),k,n(" 包，npm 链接 "),s("a",m,[n("https://www.npmjs.com/package/@types/lodash(opens new window)"),e(a)])])]),v,s("p",null,[n("Webpack 版本问题 ！在 Webpack5 以上的版本，需要 "),s("a",b,[n("copy-webpack-plugin (opens new window)"),e(a)]),n("这个插件（将已存在的单个文件或整个目录复制到生成目录），并在配置文件中配置对应的路径")]),g])}const y=p(l,[["render",h],["__file","TS gongchengshijian，goujiangongju，mokuaixitong，bianxieleixingshengmingwenjian.html.vue"]]);export{y as default};
