import{_ as p,r as o,o as c,c as i,b as s,d as n,e,a as t}from"./app-48690364.js";const l={},r=t(`<p>静态资源处理是前端工程经常遇到的问题，在真实的工程中不仅仅包含了动态执行的代码，也不可避免地要引入各种静态资源，如<code>图片</code>、<code>JSON</code>、<code>Worker 文件</code>、<code>Web Assembly 文件</code>等等。</p><p>而静态资源本身并不是标准意义上的模块，因此对它们的处理和普通的代码是需要区别对待的。一方面我们需要解决<strong>资源加载</strong>的问题，对 Vite 来说就是如何将静态资源解析并加载为一个 ES 模块的问题；另一方面在<strong>生产环境</strong>下我们还需要考虑静态资源的部署问题、体积问题、网络性能问题，并采取相应的方案来进行优化。</p><p>在本小节，我将与你就这两方面的问题展开探讨，结合 Vite 自身的能力及其生态，来解决项目中静态资源处理的各个疑难点，同时也能继续完善目前的 Vite 脚手架工程。</p><h2 id="图片加载" tabindex="-1"><a class="header-anchor" href="#图片加载" aria-hidden="true">#</a> 图片加载</h2><p>图片是项目中最常用的静态资源之一，本身包括了非常多的格式，诸如 png、jpeg、webp、avif、gif，当然，也包括经常用作图标的 svg 格式。这一部分我们主要讨论的是如何加载图片，也就是说怎么让图片在页面中<strong>正常显示</strong>。</p><h3 id="_1-使用场景" tabindex="-1"><a class="header-anchor" href="#_1-使用场景" aria-hidden="true">#</a> 1. 使用场景</h3><p>在日常的项目开发过程中，我们一般会遇到三种加载图片的场景:</p><ol><li>在 HTML 或者 JSX 中，通过 img 标签来加载图片，如:</li></ol><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../../assets/a.png<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>img</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>在 CSS 中通过 background 属性加载图片，如:</li></ol><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">&#39;../../assets/b.png&#39;</span><span class="token punctuation">)</span></span> norepeat<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>在 JavaScript 中，通过脚本的方式动态指定图片的<code>src</code>属性，如:</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;hero-img&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&#39;../../assets/c.png&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当然，大家一般还会有别名路径的需求，比如地址前缀直接换成<code>@assets</code>，这样就不用开发人员手动寻址，降低开发时的心智负担。</p><h3 id="_2-在-vite-中使用" tabindex="-1"><a class="header-anchor" href="#_2-在-vite-中使用" aria-hidden="true">#</a> 2. 在 Vite 中使用</h3><p>接下来让我们在目前的脚手架项目来进行实际的编码，你可以在 Vite 的配置文件中配置一下别名，方便后续的图片引入:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// vite.config.ts</span>
<span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">&#39;path&#39;</span><span class="token punctuation">;</span>

<span class="token punctuation">{</span>
  resolve<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 别名配置</span>
    alias<span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&#39;@assets&#39;</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;src/assets&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样 Vite 在遇到<code>@assets</code>路径的时候，会自动帮我们定位至根目录下的<code>src/assets</code>目录。值得注意的是，alias 别名配置不仅在 JavaScript 的 import 语句中生效，在 CSS 代码的 <code>@import</code> 和 <code>url</code>导入语句中也同样生效。</p><p>现在 <code>src/assets</code> 目录的内容如下:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">.</span>
├── icons
│   ├── favicon.svg
│   ├── logo-1.svg
│   ├── logo-2.svg
│   ├── logo-3.svg
│   ├── logo-4.svg
│   ├── logo-5.svg
│   └── logo.svg
└── imgs
    ├── background.png
    └── vite.png
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们在 Header 组件中引入 <code>vite.png</code>这张图片:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// Header/index.tsx</span>
<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> devDependencies <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../../../package.json&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">&#39;./index.module.scss&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 1. 导入图片</span>
<span class="token keyword">import</span> logoSrc <span class="token keyword">from</span> <span class="token string">&#39;@assets/imgs/vite.png&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 方式一</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">p-20px text-center </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>styles<span class="token punctuation">.</span>header<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 省略前面的组件内容 <span class="token operator">--</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 使用图片 <span class="token operator">--</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>img className<span class="token operator">=</span><span class="token string">&quot;m-auto mb-4&quot;</span> src<span class="token operator">=</span><span class="token punctuation">{</span>logoSrc<span class="token punctuation">}</span> alt<span class="token operator">=</span><span class="token string">&quot;&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 方式二</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;logo&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> HTMLImageElement<span class="token punctuation">;</span>
    img<span class="token punctuation">.</span>src <span class="token operator">=</span> logoSrc<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">p-20px text-center </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>styles<span class="token punctuation">.</span>header<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 省略前面的组件内容 <span class="token operator">--</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 使用图片 <span class="token operator">--</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>img id<span class="token operator">=</span><span class="token string">&quot;logo&quot;</span> className<span class="token operator">=</span><span class="token string">&quot;m-auto mb-4&quot;</span> alt<span class="token operator">=</span><span class="token string">&quot;&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现图片能够正常显示:</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/66e4e71a894d4cb4ab8b6e5faca557a9~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>而图片路径也被解析为了正确的格式(<code>/</code>表示项目根路径):</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e338e4912cf04f03a796a16dd6f3268c~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>OK，现在让我们进入 Header 组件的样式文件中添加<code>background</code>属性:</p><div class="language-scss line-numbers-mode" data-ext="scss"><pre class="language-scss"><code><span class="token selector">.header </span><span class="token punctuation">{</span>
  <span class="token comment">// 前面的样式代码省略</span>
  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url</span><span class="token punctuation">(</span><span class="token string">&#39;@assets/imgs/background.png&#39;</span><span class="token punctuation">)</span> no-repeat<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次回到浏览器，可以看到生效后的背景如下:</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dac9bddf83e345fc8369e6ae821d83f2~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="_3-svg-组件方式加载" tabindex="-1"><a class="header-anchor" href="#_3-svg-组件方式加载" aria-hidden="true">#</a> 3. SVG 组件方式加载</h3><p>刚才我们成功地在 Vite 中实现了图片的加载，上述这些加载的方式对于 svg 格式来说依然是适用的。不过，我们通常也希望能将 svg 当做一个组件来引入，这样我们可以很方便地修改 svg 的各种属性，而且比 img 标签的引入方式更加优雅。</p><p>SVG 组件加载在不同的前端框架中的实现不太相同，社区中也已经了有了对应的插件支持:</p>`,33),u={href:"https://github.com/pakholeung37/vite-plugin-vue2-svg",target:"_blank",rel:"noopener noreferrer"},d={href:"https://github.com/jpkleemans/vite-svg-loader",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/pd4d10/vite-plugin-svgr",target:"_blank",rel:"noopener noreferrer"},v=t(`<p>现在让我们在 React 脚手架项目中安装对应的依赖:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>pnpm i vite<span class="token operator">-</span>plugin<span class="token operator">-</span>svgr <span class="token operator">-</span><span class="token constant">D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后需要在 vite 配置文件添加这个插件:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// vite.config.ts</span>
<span class="token keyword">import</span> svgr <span class="token keyword">from</span> <span class="token string">&#39;vite-plugin-svgr&#39;</span><span class="token punctuation">;</span>

<span class="token punctuation">{</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// 其它插件省略</span>
    <span class="token function">svgr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>随后注意要在 <code>tsconfig.json</code> 添加如下配置，否则会有类型错误:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 省略其它配置</span>
    <span class="token property">&quot;types&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;vite-plugin-svgr/client&quot;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来让我们在项目中使用 svg 组件:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ReactComponent <span class="token keyword">as</span> ReactLogo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@assets/icons/logo.svg&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token comment">// 其他组件内容省略</span>
     <span class="token operator">&lt;</span>ReactLogo <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>回到浏览器中，你可以看到 svg 已经成功渲染:</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/795c22c495e74aebb7deea37e36e48ea~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h2 id="json-加载" tabindex="-1"><a class="header-anchor" href="#json-加载" aria-hidden="true">#</a> JSON 加载</h2><p>Vite 中已经内置了对于 JSON 文件的解析，底层使用<code>@rollup/pluginutils</code> 的 <code>dataToEsm</code> 方法将 JSON 对象转换为一个包含各种具名导出的 ES 模块，使用姿势如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> version <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../../../package.json&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>不过你也可以在配置文件禁用按名导入的方式:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// vite.config.ts</span>

<span class="token punctuation">{</span>
  json<span class="token operator">:</span> <span class="token punctuation">{</span>
    stringify<span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样会将 JSON 的内容解析为<code>export default JSON.parse(&quot;xxx&quot;)</code>，这样会失去<code>按名导出</code>的能力，不过在 JSON 数据量比较大的时候，可以优化解析性能。</p><h2 id="web-worker-脚本" tabindex="-1"><a class="header-anchor" href="#web-worker-脚本" aria-hidden="true">#</a> Web Worker 脚本</h2><p>Vite 中使用 Web Worker 也非常简单，我们可以在新建<code>Header/example.js</code>文件:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">start</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 给主线程传值</span>
    <span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token operator">++</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在 Header 组件中引入，引入的时候注意加上<code>?worker</code>后缀，相当于告诉 Vite 这是一个 Web Worker 脚本文件:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> Worker <span class="token keyword">from</span> <span class="token string">&#39;./example.js?worker&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 1. 初始化 Worker 实例</span>
<span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 2. 主线程监听 worker 的信息</span>
worker<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打开浏览器的控制面板，你可以看到 Worker 传给主线程的信息已经成功打印:</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5fe5b95939c74d8cba5a43826eab31c9~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>说明 Web Worker 脚本已经成功执行，也能与主线程正常通信。</p><h3 id="web-assembly-文件" tabindex="-1"><a class="header-anchor" href="#web-assembly-文件" aria-hidden="true">#</a> Web Assembly 文件</h3>`,25),m=s("code",null,".wasm",-1),g=s("code",null,".wasm",-1),b={href:"https://github.com/sanyuan0704/juejin-book-vite/tree/main/4~7-vite-project-framework/src/components/Header",target:"_blank",rel:"noopener noreferrer"},f=t(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> t <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
      a <span class="token operator">=</span> b<span class="token punctuation">;</span>
      b <span class="token operator">=</span> t<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> b<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们在组件中导入<code>fib.wasm</code>文件:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// Header/index.tsx</span>
<span class="token keyword">import</span> init <span class="token keyword">from</span> <span class="token string">&#39;./fib.wasm?init&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">FibFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span>num<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">number</span><span class="token punctuation">;</span>

<span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> fibFunc <span class="token operator">=</span> instance<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>fib <span class="token keyword">as</span> FibFunc<span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Fib result:&#39;</span><span class="token punctuation">,</span> <span class="token function">fibFunc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Vite 会对<code>.wasm</code>文件的内容进行封装，默认导出为 init 函数，这个函数返回一个 Promise，因此我们可以在其 then 方法中拿到其导出的成员——<code>fib</code>方法。</p><p>回到浏览器，我们可以查看到计算结果，说明 .wasm 文件已经被成功执行:</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7478ef95b7a847fca740218262b411cd~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="其它静态资源" tabindex="-1"><a class="header-anchor" href="#其它静态资源" aria-hidden="true">#</a> 其它静态资源</h3><p>除了上述的一些资源格式，Vite 也对下面几类格式提供了内置的支持:</p><ul><li>媒体类文件，包括<code>mp4</code>、<code>webm</code>、<code>ogg</code>、<code>mp3</code>、<code>wav</code>、<code>flac</code>和<code>aac</code>。</li><li>字体类文件。包括<code>woff</code>、<code>woff2</code>、<code>eot</code>、<code>ttf</code> 和 <code>otf</code>。</li><li>文本类。包括<code>webmanifest</code>、<code>pdf</code>和<code>txt</code>。</li></ul><p>也就是说，你可以在 Vite 将这些类型的文件当做一个 ES 模块来导入使用。如果你的项目中还存在其它格式的静态资源，你可以通过<code>assetsInclude</code>配置让 Vite 来支持加载:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// vite.config.ts</span>

<span class="token punctuation">{</span>
  assetsInclude<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;.gltf&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="特殊资源后缀" tabindex="-1"><a class="header-anchor" href="#特殊资源后缀" aria-hidden="true">#</a> 特殊资源后缀</h3><p>Vite 中引入静态资源时，也支持在路径最后加上一些特殊的 query 后缀，包括:</p><ul><li><code>?url</code>: 表示获取资源的路径，这在只想获取文件路径而不是内容的场景将会很有用。</li><li><code>?raw</code>: 表示获取资源的字符串内容，如果你只想拿到资源的原始内容，可以使用这个后缀。</li><li><code>?inline</code>: 表示资源强制内联，而不是打包成单独的文件。</li></ul><h2 id="生产环境处理" tabindex="-1"><a class="header-anchor" href="#生产环境处理" aria-hidden="true">#</a> 生产环境处理</h2><p>在前面的内容中，我们围绕着如何加载静态资源这个问题，在 Vite 中进行具体的编码实践，相信对于 Vite 中各种静态资源的使用你已经比较熟悉了。但另一方面，在生产环境下，我们又面临着一些新的问题。</p><ul><li>部署域名怎么配置？</li><li>资源打包成单文件还是作为 Base64 格式内联?</li><li>图片太大了怎么压缩？</li><li>svg 请求数量太多了怎么优化？</li></ul><h3 id="_1-自定义部署域名" tabindex="-1"><a class="header-anchor" href="#_1-自定义部署域名" aria-hidden="true">#</a> 1. 自定义部署域名</h3><p>一般在我们访问线上的站点时，站点里面一些静态资源的地址都包含了相应域名的前缀，如:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://sanyuan.cos.ap-beijing.myqcloud.com/logo.png<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以上面这个地址例子，<code>https://sanyuan.cos.ap-beijing.myqcloud.com</code>是 CDN 地址前缀，<code>/logo.png</code>则是我们开发阶段使用的路径。那么，我们是不是需要在上线前把图片先上传到 CDN，然后将代码中的地址手动替换成线上地址呢？这样就太麻烦了！</p><p>在 Vite 中我们可以有更加自动化的方式来实现地址的替换，只需要在配置文件中指定<code>base</code>参数即可:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// vite.config.ts</span>
<span class="token comment">// 是否为生产环境，在生产环境一般会注入 NODE_ENV 这个环境变量，见下面的环境变量文件配置</span>
<span class="token keyword">const</span> isProduction <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 填入项目的 CDN 域名地址</span>
<span class="token keyword">const</span> <span class="token constant">CDN_URL</span> <span class="token operator">=</span> <span class="token string">&#39;xxxxxx&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 具体配置</span>
<span class="token punctuation">{</span>
  base<span class="token operator">:</span> isProduction <span class="token operator">?</span> <span class="token constant">CDN_URL</span><span class="token operator">:</span> <span class="token string">&#39;/&#39;</span>
<span class="token punctuation">}</span>

<span class="token comment">// .env.development</span>
<span class="token constant">NODE_ENV</span><span class="token operator">=</span>development

<span class="token comment">// .env.production</span>
<span class="token constant">NODE_ENV</span><span class="token operator">=</span>production
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意在项目根目录新增的两个环境变量文件<code>.env.development</code>和<code>.env.production</code>，顾名思义，即分别在开发环境和生产环境注入一些环境变量，这里为了区分不同环境我们加上了<code>NODE_ENV</code>，你也可以根据需要添加别的环境变量。</p><blockquote><p>打包的时候 Vite 会自动将这些环境变量替换为相应的字符串。</p></blockquote><p>接着执行<code>pnpm run build</code>，可以发现产物中的静态资源地址已经自动加上了 CDN 地址前缀:</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2d910210d0b5484d8ebc4407b732b140~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>当然，HTML 中的一些 JS、CSS 资源链接也一起加上了 CDN 地址前缀:</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/15adeface82d4320b330b440c049f3ab~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>当然，有时候可能项目中的某些图片需要存放到另外的存储服务，一种直接的方案是将完整地址写死到 src 属性中，如:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">&quot;https://my-image-cdn.com/logo.png&quot;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样做显然是不太优雅的，我们可以通过定义环境变量的方式来解决这个问题，在项目根目录新增<code>.env</code>文件:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 开发环境优先级: .env.development &gt; .env</span>
<span class="token comment">// 生产环境优先级: .env.production &gt; .env</span>
<span class="token comment">// .env 文件</span>
<span class="token constant">VITE_IMG_BASE_URL</span><span class="token operator">=</span>https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>my<span class="token operator">-</span>image<span class="token operator">-</span>cdn<span class="token punctuation">.</span>com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后进入 <code>src/vite-env.d.ts</code>增加类型声明:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/// &lt;reference types=&quot;vite/client&quot; /&gt;</span>

<span class="token keyword">interface</span> <span class="token class-name">ImportMetaEnv</span> <span class="token punctuation">{</span>
  <span class="token keyword">readonly</span> <span class="token constant">VITE_APP_TITLE</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token comment">// 自定义的环境变量</span>
  <span class="token keyword">readonly</span> <span class="token constant">VITE_IMG_BASE_URL</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">ImportMeta</span> <span class="token punctuation">{</span>
  <span class="token keyword">readonly</span> env<span class="token operator">:</span> ImportMetaEnv<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>值得注意的是，如果某个环境变量要在 Vite 中通过 <code>i<wbr>mport.meta.env</code> 访问，那么它必须以<code>VITE_</code>开头，如<code>VITE_IMG_BASE_URL</code>。接下来我们在组件中来使用这个环境变量:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>&lt;img src={new URL(&#39;./logo.png&#39;, i<wbr>mport.meta.env.VITE_IMG_BASE_URL).href} /&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来在<code>开发环境</code>启动项目或者<code>生产环境</code>打包后可以看到环境变量已经被替换，地址能够正常显示:</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/40484ed4df404b87b40b104cf2b9fdee~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b6c4637475bb49818c9c5dd09001bb66~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>至此，我们就彻底解决了图片资源生产环境域名替换的问题。</p><h3 id="_2-单文件-or-内联" tabindex="-1"><a class="header-anchor" href="#_2-单文件-or-内联" aria-hidden="true">#</a> 2. 单文件 or 内联？</h3><p>在 Vite 中，所有的静态资源都有两种构建方式，一种是打包成一个单文件，另一种是通过 base64 编码的格式内嵌到代码中。</p><p>这两种方案到底应该如何来选择呢？</p><p>对于比较小的资源，适合内联到代码中，一方面对<code>代码体积</code>的影响很小，另一方面可以减少不必要的网络请求，<code>优化网络性能</code>。而对于比较大的资源，就推荐单独打包成一个文件，而不是内联了，否则可能导致上 MB 的 base64 字符串内嵌到代码中，导致代码体积瞬间庞大，页面加载性能直线下降。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0fb28454267d473aa02e8e0e486f2e9e~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>Vite 中内置的优化方案是下面这样的:</p><ul><li>如果静态资源体积 &gt;= 4KB，则提取成单独的文件</li><li>如果静态资源体积 &lt; 4KB，则作为 base64 格式的字符串内联</li></ul><p>上述的<code>4 KB</code>即为提取成单文件的临界值，当然，这个临界值你可以通过<code>build.assetsInlineLimit</code>自行配置，如下代码所示:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// vite.config.ts</span>
<span class="token punctuation">{</span>
  build<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 8 KB</span>
    assetsInlineLimit<span class="token operator">:</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">1024</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>svg 格式的文件不受这个临时值的影响，始终会打包成单独的文件，因为它和普通格式的图片不一样，需要动态设置一些属性</p></blockquote><h3 id="_3-图片压缩" tabindex="-1"><a class="header-anchor" href="#_3-图片压缩" aria-hidden="true">#</a> 3. 图片压缩</h3>`,52),h={href:"https://www.npmjs.com/package/imagemin",target:"_blank",rel:"noopener noreferrer"},y=s("code",null,"image-webpack-loader",-1),w=s("code",null,"vite-plugin-imagemin",-1),x=t(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>pnpm i vite<span class="token operator">-</span>plugin<span class="token operator">-</span>imagemin <span class="token operator">-</span><span class="token constant">D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>随后在 Vite 配置文件中引入:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">//vite.config.ts</span>
<span class="token keyword">import</span> viteImagemin <span class="token keyword">from</span> <span class="token string">&#39;vite-plugin-imagemin&#39;</span><span class="token punctuation">;</span>

<span class="token punctuation">{</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// 忽略前面的插件</span>
    <span class="token function">viteImagemin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token comment">// 无损压缩配置，无损压缩下图片质量不会变差</span>
      optipng<span class="token operator">:</span> <span class="token punctuation">{</span>
        optimizationLevel<span class="token operator">:</span> <span class="token number">7</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token comment">// 有损压缩配置，有损压缩下图片质量可能会变差</span>
      pngquant<span class="token operator">:</span> <span class="token punctuation">{</span>
        quality<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0.8</span><span class="token punctuation">,</span> <span class="token number">0.9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token comment">// svg 优化</span>
      svgo<span class="token operator">:</span> <span class="token punctuation">{</span>
        plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token punctuation">{</span>
            name<span class="token operator">:</span> <span class="token string">&#39;removeViewBox&#39;</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">{</span>
            name<span class="token operator">:</span> <span class="token string">&#39;removeEmptyAttrs&#39;</span><span class="token punctuation">,</span>
            active<span class="token operator">:</span> <span class="token boolean">false</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">]</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们可以尝试执行<code>pnpm run build</code>进行打包:</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7cd29e4dcbaa416985b9187b1786d37c~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>Vite 插件已经自动帮助我们调用 <code>imagemin</code> 进行项目图片的压缩，可以看到压缩的效果非常明显，强烈推荐大家在项目中使用。</p><h3 id="_4-雪碧图优化" tabindex="-1"><a class="header-anchor" href="#_4-雪碧图优化" aria-hidden="true">#</a> 4. 雪碧图优化</h3><p>在实际的项目中我们还会经常用到各种各样的 svg 图标，虽然 svg 文件一般体积不大，但 Vite 中对于 svg 文件会始终打包成单文件，大量的图标引入之后会导致网络请求增加，大量的 HTTP 请求会导致网络解析耗时变长，页面加载性能直接受到影响。这个问题怎么解决呢？</p><blockquote><p>HTTP2 的多路复用设计可以解决大量 HTTP 的请求导致的网络加载性能问题，因此雪碧图技术在 HTTP2 并没有明显的优化效果，这个技术更适合在传统的 HTTP 1.1 场景下使用(比如本地的 Dev Server)。</p></blockquote><p>比如在 Header 中分别引入 5 个 svg 文件:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> Logo1 <span class="token keyword">from</span> <span class="token string">&#39;@assets/icons/logo-1.svg&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Logo2 <span class="token keyword">from</span> <span class="token string">&#39;@assets/icons/logo-2.svg&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Logo3 <span class="token keyword">from</span> <span class="token string">&#39;@assets/icons/logo-3.svg&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Logo4 <span class="token keyword">from</span> <span class="token string">&#39;@assets/icons/logo-4.svg&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Logo5 <span class="token keyword">from</span> <span class="token string">&#39;@assets/icons/logo-5.svg&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里顺便说一句，Vite 中提供了<code>i<wbr>mport.meta.glob</code>的语法糖来解决这种<strong>批量导入</strong>的问题，如上述的 import 语句可以写成下面这样:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> icons <span class="token operator">=</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span><span class="token function">glob</span><span class="token punctuation">(</span><span class="token string">&#39;../../assets/icons/logo-*.svg&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果如下:</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bb4489676ca341689048f9595a8f0fae~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>可以看到对象的 value 都是动态 import，适合按需加载的场景。在这里我们只需要同步加载即可，可以使用 <code>i<wbr>mport.meta.globEager</code>来完成:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> icons <span class="token operator">=</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span><span class="token function">globEager</span><span class="token punctuation">(</span><span class="token string">&#39;../../assets/icons/logo-*.svg&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>icons</code>的结果打印如下: <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/038367c43dad4c399e3d00597ae852e3~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>接下来我们稍作解析，然后将 svg 应用到组件当中:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// Header/index.tsx</span>
<span class="token keyword">const</span> iconUrls <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>icons<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>mod <span class="token operator">=&gt;</span> mod<span class="token punctuation">.</span>default<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 组件返回内容添加如下</span>
<span class="token punctuation">{</span>iconUrls<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span> key<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span> width<span class="token operator">=</span><span class="token string">&quot;50&quot;</span> alt<span class="token operator">=</span><span class="token string">&quot;&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>回到页面中，我们发现浏览器分别发出了 5 个 svg 的请求:</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3646903dde814c6c8cb7097b93f98667~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>假设页面有 100 个 svg 图标，将会多出 100 个 HTTP 请求，依此类推。我们能不能把这些 svg 合并到一起，从而大幅减少网络请求呢？</p><p>答案是可以的。这种合并图标的方案也叫<code>雪碧图</code>，我们可以通过<code>vite-plugin-svg-icons</code>来实现这个方案，首先安装一下这个插件:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>pnpm i vite<span class="token operator">-</span>plugin<span class="token operator">-</span>svg<span class="token operator">-</span>icons <span class="token operator">-</span><span class="token constant">D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接着在 Vite 配置文件中增加如下内容:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// vite.config.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createSvgIconsPlugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite-plugin-svg-icons&#39;</span><span class="token punctuation">;</span>

<span class="token punctuation">{</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// 省略其它插件</span>
    <span class="token function">createSvgIconsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      iconDirs<span class="token operator">:</span> <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;src/assets/icons&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>src/components</code>目录下新建<code>SvgIcon</code>组件:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// SvgIcon/index.tsx</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">SvgIconProps</span> <span class="token punctuation">{</span>
  name<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  prefix<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  color<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">SvgIcon</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  name<span class="token punctuation">,</span>
  prefix <span class="token operator">=</span> <span class="token string">&#39;icon&#39;</span><span class="token punctuation">,</span>
  color <span class="token operator">=</span> <span class="token string">&#39;#333&#39;</span><span class="token punctuation">,</span>
  <span class="token operator">...</span>props
<span class="token punctuation">}</span><span class="token operator">:</span> SvgIconProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> symbolId <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">#</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>prefix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>svg <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span> aria<span class="token operator">-</span>hidden<span class="token operator">=</span><span class="token string">&quot;true&quot;</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>use href<span class="token operator">=</span><span class="token punctuation">{</span>symbolId<span class="token punctuation">}</span> fill<span class="token operator">=</span><span class="token punctuation">{</span>color<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>svg<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们回到 Header 组件中，稍作修改:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// index.tsx</span>
<span class="token keyword">const</span> icons <span class="token operator">=</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span><span class="token function">globEager</span><span class="token punctuation">(</span><span class="token string">&#39;../../assets/icons/logo-*.svg&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> iconUrls <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>icons<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mod<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 如 ../../assets/icons/logo-1.svg -&gt; logo-1</span>
  <span class="token keyword">const</span> fileName <span class="token operator">=</span> mod<span class="token punctuation">.</span>default<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>svgName<span class="token punctuation">]</span> <span class="token operator">=</span> fileName<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> svgName<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 渲染 svg 组件</span>
<span class="token punctuation">{</span>iconUrls<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>SvgIcon name<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span> key<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span> width<span class="token operator">=</span><span class="token string">&quot;50&quot;</span> height<span class="token operator">=</span><span class="token string">&quot;50&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后在<code>src/main.tsx</code>文件中添加一行代码:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token string">&#39;virtual:svg-icons-register&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在回到浏览器的页面中，发现雪碧图已经生成:</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/37cb9d4403594a35a1c8c999d536d80c~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>雪碧图包含了所有图标的具体内容，而对于页面每个具体的图标，则通过 <code>use</code> 属性来引用雪碧图的对应内容:</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/17497a3a9abe40d2a5145bca8d2041f6~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>如此一来，我们就能将所有的 svg 内容都内联到 HTML 中，省去了大量 svg 的网络请求。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>恭喜你，学习完了本节的内容。在这一节，你需要重点掌握在<strong>Vite 如何加载静态资源</strong>和<strong>如何在生产环境中对静态资源进行优化</strong>。</p><p>首先是如何加载各种静态资源，如图片、svg(组件形式)、JSON、Web Worker 脚本、Web Asssembly 文件等等格式，并通过一些示例带大家进行实际的操作。</p><p>其次，我们会把关注点放到<strong>生产环境</strong>，对<code>自定义部署域名</code>、<code>是否应该内联</code>、<code>图片压缩</code>、<code>svg 雪碧图</code>等问题进行了详细的探讨和实践，对于如何解决这些问题，相信你也有了自己的答案。</p><p>当然，在编码实操的过程当中，我也给你穿插了一些 Vite 其他的知识点，比如如何<code>定义环境变量文件</code>、<code>如何使用 Glob 导入</code>的语法糖。相信在学习本节的过程中你能更加体会到 Vite 给项目开发带来的便利，同时也对 Vite 的掌握更深入了一步。</p><p>本节的内容就到这里了，感谢你的阅读，我们下一节再见👋🏻！</p>`,44);function _(j,V){const a=o("ExternalLinkIcon");return c(),i("div",null,[r,s("ul",null,[s("li",null,[n("Vue2 项目中可以使用 "),s("a",u,[n("vite-plugin-vue2-svg"),e(a)]),n("插件。")]),s("li",null,[n("Vue3 项目中可以引入 "),s("a",d,[n("vite-svg-loader"),e(a)]),n("。")]),s("li",null,[n("React 项目使用 "),s("a",k,[n("vite-plugin-svgr"),e(a)]),n("插件。")])]),v,s("p",null,[n("Vite 对于 "),m,n(" 文件也提供了开箱即用的支持，我们拿一个斐波拉契的 "),g,n(" 文件(原文件已经放到"),s("a",b,[n("Github 仓库"),e(a)]),n("中)来进行一下实际操作，对应的 JavaScript 原文件如下:")]),f,s("p",null,[n("图片资源的体积往往是项目产物体积的大头，如果能尽可能精简图片的体积，那么对项目整体打包产物体积的优化将会是非常明显的。在 JavaScript 领域有一个非常知名的图片压缩库"),s("a",h,[n("imagemin"),e(a)]),n("，作为一个底层的压缩工具，前端的项目中经常基于它来进行图片压缩，比如 Webpack 中大名鼎鼎的"),y,n("。社区当中也已经有了开箱即用的 Vite 插件——"),w,n("，首先让我们来安装它:")]),x])}const S=p(l,[["render",_],["__file","di06zhang—jingtaiziyuan：ruhezaiVitezhongchuligezhongjingtaiziyuan.html.vue"]]);export{S as default};
