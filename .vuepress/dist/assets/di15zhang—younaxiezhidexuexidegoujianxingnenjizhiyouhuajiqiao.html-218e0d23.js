import{_ as p,r as t,o as c,c as l,b as s,d as n,e,a as o}from"./app-48690364.js";const i={},r=o('<p>前面章节我们已经详细探讨 Webpack 中如何借助若干工具分析构建性能，以及如何使用缓存与多进程能力提升构建性能的基本方法与实现原理，这两种方法都能通过简单的配置，极大提升大型项目的编译效率。</p><p>除此之外，还可以通过一些普适、细碎的最佳实践，减少编译范围、编译步骤提升性能，包括：</p><ul><li>使用最新版本 Webpack、Node；</li><li>配置 <code>resolve</code> 控制资源搜索范围；</li><li>针对 npm 包设置 <code>module.noParse</code> 跳过编译步骤；</li><li>等等。</li></ul><p>下面我们一一展开，解释每条最佳实践以及背后的逻辑。</p><h2 id="使用最新版本" tabindex="-1"><a class="header-anchor" href="#使用最新版本" aria-hidden="true">#</a> 使用最新版本</h2><p>始终使用最新 Webpack 版本，这算的上是性价比最高的优化手段之一了！从 Webpack V3，到 V4，再到最新的 V5 版本，虽然构建功能在不断叠加增强，但性能反而不断得到优化提升，这得益于 Webpack 开发团队始终重视构建性能，在各个大版本之间不厌其烦地重构核心实现，例如：</p><ul><li>V3 到 V4 重写 Chunk 依赖逻辑，将原来的父子树状关系调整为 <code>ChunkGroup</code> 表达的有序图关系，提升代码分包效率；</li><li>V4 到 V5 引入 <code>cache</code> 功能，支持将模块、模块关系图、产物等核心要素持久化缓存到硬盘，减少重复工作。</li></ul>',7),d={href:"https://webpack.js.org/configuration/cache/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://webpack.js.org/configuration/experiments/#experimentslazycompilation",target:"_blank",rel:"noopener noreferrer"},k=s("h2",{id:"使用-lazycompilation",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#使用-lazycompilation","aria-hidden":"true"},"#"),n(" 使用 "),s("code",null,"lazyCompilation")],-1),v={href:"https://webpack.js.org/configuration/experiments/#experimentslazycompilation",target:"_blank",rel:"noopener noreferrer"},m=s("code",null,"entry",-1),b=s("strong",null,"按需编译",-1),g=o(`<p>试想一个场景，你的项目中有一个入口（<code>entry</code>）文件及若干按路由划分的异步模块，Webpack 启动后会立即将这些入口与异步模块全部一次性构建好 —— 即使页面启动后实际上只是访问了其中一两个异步模块， 这些花在异步模块构建的时间着实是一种浪费！<code>lazyCompilation</code> 的出现正是为了解决这一问题。用法很简单：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">experiments</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">lazyCompilation</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动 <code>lazyCompilation</code> 后，代码中通过异步引用语句如 <code>import(&#39;./xxx&#39;)</code> 导入的模块（以及未被访问到的 <code>entry</code>）都不会被立即编译，而是直到页面正式请求该模块资源（例如切换到该路由）时才开始构建，效果与 Vite 相似，能够极大提升冷启速度。</p><p>此外，<code>lazyCompilation</code> 支持如下参数：</p><ul><li><code>backend</code>： 设置后端服务信息，一般保持默认值即可；</li><li><code>entries</code>：设置是否对 <code>entry</code> 启动按需编译特性；</li><li><code>imports</code>：设置是否对异步模块启动按需编译特性；</li><li><code>test</code>：支持正则表达式，用于声明对那些异步模块启动按需编译特性。</li></ul><p>不过，<code>lazyCompilation</code> 还处于实验阶段，无法保证稳定性，接口形态也可能发生变更，建议只在开发环境使用。</p><h2 id="约束-loader-执行范围" tabindex="-1"><a class="header-anchor" href="#约束-loader-执行范围" aria-hidden="true">#</a> 约束 Loader 执行范围</h2><p>Loader 组件用于将各式文件资源转换为可被 Webpack 理解、构建的标准 JavaScript 代码，正是这一特性支撑起 Webpack 强大的资源处理能力。不过，Loader 在执行内容转换的过程中可能需要比较密集的 CPU 运算，如 <code>babel-loader</code>、<code>eslint-loader</code>、<code>vue-loader</code> 等，需要反复执行代码到 AST，AST 到代码的转换。</p><p>因此开发者可以根据实际场景，使用 <code>module.rules.include</code>、<code>module.rules.exclude</code> 等配置项，限定 Loader 的执行范围 —— 通常可以排除 <code>node_module</code> 文件夹，如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;babel-loader&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;eslint-loader&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置 <code>exclude: /node_modules/</code> 属性后，Webpack 在处理 <code>node_modules</code> 中的 js 文件时会直接跳过这个 <code>rule</code> 项，不会为这些文件执行 Loader 逻辑。</p><p>此外，<code>exclude</code> 与 <code>include</code> 还支持类似 MongoDB 参数风格的值，也就是通过 <code>and/not/or</code> 属性配置组合过滤逻辑，如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
      <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">and</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">not</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules\\/lodash</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;babel-loader&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;eslint-loader&quot;</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),h={href:"https://webpack.js.org/configuration/module/#condition",target:"_blank",rel:"noopener noreferrer"},x=o(`<p>上述配置的逻辑是：过滤 <code>node_modules</code> 文件夹中除 <code>lodash</code> 外的所有文件。使用这种能力，我们可以适当将部分需要转译处理的 NPM 包（例如代码中包含 ES6 语法）纳入 Loader 处理范围中。</p><h2 id="使用-noparse-跳过文件编译" tabindex="-1"><a class="header-anchor" href="#使用-noparse-跳过文件编译" aria-hidden="true">#</a> 使用 <code>noParse</code> 跳过文件编译</h2><p>有不少 NPM 库已经提前做好打包处理（文件合并、Polyfill、ESM 转 CJS 等），不需要二次编译就可以直接放在浏览器上运行，例如：</p><ul><li>Vue2 的 <code>node_modules/vue/dist/vue.runtime.esm.js</code> 文件；</li><li>React 的 <code>node_modules/react/umd/react.production.min.js</code> 文件；</li><li>Lodash 的 <code>node_modules/lodash/lodash.js</code> 文件。</li></ul><p>对我们来说，这些资源文件都是独立、内聚的代码片段，没必要重复做代码解析、依赖分析、转译等操作，此时可以使用 <code>module.noParse</code> 配置项跳过这些资源，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">noParse</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">lodash|react</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),y=s("code",null,"noParse",-1),_={href:"https://webpack.js.org/configuration/module/#modulenoparse",target:"_blank",rel:"noopener noreferrer"},j=o(`<p>配置后，所有匹配该正则的文件都会跳过前置的构建、分析动作，直接将内容合并进 Chunk，从而提升构建速度。不过，使用 <code>noParse</code> 时需要注意：</p><ul><li>由于跳过了前置的 AST 分析动作，构建过程无法发现文件中可能存在的语法错误，需要到运行（或 Terser 做压缩）时才能发现问题，所以必须确保 <code>noParse</code> 的文件内容正确性；</li><li>由于跳过了依赖分析的过程，所以文件中，建议不要包含 <code>import/export/require/define</code> 等模块导入导出语句 —— 换句话说，<code>noParse</code> 文件不能存在对其它文件的依赖，除非运行环境支持这种模块化方案；</li><li>由于跳过了内容分析过程，Webpack 无法标记该文件的导出值，也就无法实现 Tree-shaking。</li></ul><p>综上，建议在使用 <code>noParse</code> 配置 NPM 库前，先检查 NPM 库默认导出的资源满足要求，例如 React@18 默认定义的导出文件是 <code>index.js</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// react package.json</span>
<span class="token punctuation">{</span>
  <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// ...</span>
  <span class="token string-property property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;index.js&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但 <code>node_module/react/index.js</code> 文件包含了模块导入语句 <code>require</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// node_module/react/index.js</span>
<span class="token string">&#39;use strict&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./cjs/react.production.min.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./cjs/react.development.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),f=s("code",null,"react.development.js",-1),w=s("code",null,"react.production.min.js",-1),q=s("code",null,"index.js",-1),W={href:"https://webpack.js.org/configuration/resolve/#resolvealias",target:"_blank",rel:"noopener noreferrer"},P=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">noParse</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">react|lodash</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">react</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>
        __dirname<span class="token punctuation">,</span>
        process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&quot;production&quot;</span>
          <span class="token operator">?</span> <span class="token string">&quot;./node_modules/react/cjs/react.production.min.js&quot;</span>
          <span class="token operator">:</span> <span class="token string">&quot;./node_modules/react/cjs/react.development.js&quot;</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),S={href:"https://webpack.js.org/configuration/externals/",target:"_blank",rel:"noopener noreferrer"},z=s("code",null,"noParse",-1),C={href:"https://webpack.js.org/configuration/externals/",target:"_blank",rel:"noopener noreferrer"},E=o(`<h2 id="开发模式禁用产物优化" tabindex="-1"><a class="header-anchor" href="#开发模式禁用产物优化" aria-hidden="true">#</a> 开发模式禁用产物优化</h2><p>Webpack 提供了许多产物优化功能，例如：Tree-Shaking、SplitChunks、Minimizer 等，这些能力能够有效减少最终产物的尺寸，提升生产环境下的运行性能，但这些优化在开发环境中意义不大，反而会增加构建器的负担(都是性能大户)。</p><p>因此，开发模式下建议关闭这一类优化功能，具体措施：</p><ul><li>确保 <code>mode=&#39;development&#39;</code> 或 <code>mode = &#39;none&#39;</code>，关闭默认优化策略；</li><li><code>optimization.minimize</code> 保持默认值或 <code>false</code>，关闭代码压缩；</li><li><code>optimization.concatenateModules</code> 保持默认值或 <code>false</code>，关闭模块合并；</li><li><code>optimization.splitChunks</code> 保持默认值或 <code>false</code>，关闭代码分包；</li><li><code>optimization.usedExports</code> 保持默认值或 <code>false</code>，关闭 Tree-shaking 功能；</li><li>……</li></ul><p>最终，建议开发环境配置如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&quot;development&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">removeAvailableModules</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token literal-property property">removeEmptyChunks</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token literal-property property">splitChunks</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token literal-property property">minimize</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token literal-property property">concatenateModules</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token literal-property property">usedExports</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="最小化-watch-监控范围" tabindex="-1"><a class="header-anchor" href="#最小化-watch-监控范围" aria-hidden="true">#</a> 最小化 <code>watch</code> 监控范围</h2><p>在 <code>watch</code> 模式下（通过 <code>npx webpack --watch</code> 命令启动），Webpack 会持续监听项目目录中所有代码文件，发生变化时执行 <code>rebuild</code> 命令。</p><p>不过，通常情况下前端项目中部分资源并不会频繁更新，例如 <code>node_modules</code> ，此时可以设置 <code>watchOptions.ignored</code> 属性忽略这些文件，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>
  <span class="token literal-property property">watchOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">ignored</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="跳过-ts-类型检查" tabindex="-1"><a class="header-anchor" href="#跳过-ts-类型检查" aria-hidden="true">#</a> 跳过 TS 类型检查</h2><p>JavaScript 本身是一门弱类型语言，这在多人协作项目中经常会引起一些不必要的类型错误，影响开发效率。随前端能力与职能范围的不断扩展，前端项目的复杂性与协作难度也在不断上升，TypeScript 所提供的静态类型检查能力也就被越来越多人所采纳。</p><p>不过，类型检查涉及 AST 解析、遍历以及其它非常消耗 CPU 的操作，会给工程化流程带来比较大的性能负担，因此我们可以选择关闭 <code>ts-loader</code> 的类型检查功能：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
      <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.ts$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;ts-loader&#39;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token comment">// 设置为“仅编译”，关闭类型检查</span>
            <span class="token literal-property property">transpileOnly</span><span class="token operator">:</span> <span class="token boolean">true</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有同学可能会问：“没有类型检查，那还用 TypeScript 干嘛？”，很简单，我们可以：</p><ol><li>可以借助编辑器的 TypeScript 插件实现代码检查；</li><li>使用 <code>fork-ts-checker-webpack-plugin</code> 插件将类型检查能力剥离到 <strong>子进程</strong> 执行，例如：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> ForkTsCheckerWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fork-ts-checker-webpack-plugin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
      <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.ts$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;ts-loader&#39;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">transpileOnly</span><span class="token operator">:</span> <span class="token boolean">true</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span><span class="token punctuation">[</span>
    <span class="token comment">// fork 出子进程，专门用于执行类型检查</span>
    <span class="token keyword">new</span> <span class="token class-name">ForkTsCheckerWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，既可以获得 Typescript 静态类型检查能力，又能提升整体编译速度。</p><h2 id="优化-eslint-性能" tabindex="-1"><a class="header-anchor" href="#优化-eslint-性能" aria-hidden="true">#</a> 优化 ESLint 性能</h2><p>ESLint 能帮助我们极低成本发现代码风格问题，维护代码质量，但若使用不当 —— 例如在开发模式下使用 <code>eslint-loader</code> 实现实时代码检查，会带来比较高昂且不必要的性能成本，我们可以选择其它更聪明的方式接入 ESLint。</p>`,20),N={href:"https://www.npmjs.com/package/eslint-webpack-plugin",target:"_blank",rel:"noopener noreferrer"},L=s("code",null,"eslint-loader",-1),T=s("code",null,"eslint-webpack-plugin",-1),M=s("code",null,"compilation.hooks.succeedModule",-1),V=o(`<ol><li>安装依赖：</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yarn add -D eslint-webpack-plugin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>添加插件：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> ESLintPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;eslint-webpack-plugin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">ESLintPlugin</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者，可以选择在特定条件、场景下执行 ESLint，减少对构建流程的影响，如：</p>`,5),O={href:"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint",target:"_blank",rel:"noopener noreferrer"},F=s("li",null,[n("使用 "),s("code",null,"husky"),n("，仅在代码提交前执行 ESLint 代码检查；")],-1),A=s("li",null,[n("仅在 "),s("code",null,"production"),n(" 构建中使用 ESLint，能够有效提高开发阶段的构建效率。")],-1),D=o(`<h2 id="慎用-source-map" tabindex="-1"><a class="header-anchor" href="#慎用-source-map" aria-hidden="true">#</a> 慎用 <code>source-map</code></h2><p><code>source-map</code> 是一种将经过编译、压缩、混淆的代码映射回源码的技术，它能够帮助开发者迅速定位到更有意义、更结构化的源码中，方便调试。不过，<code>source-map</code> 操作本身也有很大构建性能开销，建议读者根据实际场景慎重选择最合适的 <code>source-map</code> 方案。</p><p>针对 <code>source-map</code> 功能，Webpack 提供了 <code>devtool</code> 选项，可以配置 <code>eval</code>、<code>source-map</code>、<code>cheap-source-map</code> 等值，不考虑其它因素的情况下，最佳实践：</p><ul><li>开发环境使用 <code>eval</code> ，确保最佳编译速度；</li></ul><ul><li>生产环境使用 <code>source-map</code>，获取最高质量。</li></ul><blockquote><p>参考：https://webpack.js.org/configuration/devtool/</p></blockquote><h2 id="设置-resolve-缩小搜索范围" tabindex="-1"><a class="header-anchor" href="#设置-resolve-缩小搜索范围" aria-hidden="true">#</a> 设置 <code>resolve</code> 缩小搜索范围</h2><p>Webpack 默认提供了一套同时兼容 CMD、AMD、ESM 等模块化方案的资源搜索规则 —— <code>enhanced-resolve</code>，它能将各种模块导入语句准确定位到模块对应的物理资源路径。例如：</p><ul><li><code>import &#39;lodash&#39;</code> 这一类引入 NPM 包的语句会被 <code>enhanced-resolve</code> 定位到对应包体文件路径 <code>node_modules/lodash/index.js</code> ；</li><li><code>import &#39;./a&#39;</code> 这类不带文件后缀名的语句，则可能被定位到 <code>./a.js</code> 文件；</li><li><code>import &#39;@/a&#39;</code> 这类化名路径的引用，则可能被定位到 <code>$PROJECT_ROOT/src/a.js</code> 文件。</li></ul><p>需要注意，这类增强资源搜索体验的特性背后涉及许多 IO 操作，本身可能引起较大的性能消耗，开发者可根据实际情况调整 <code>resolve</code> 配置，缩小资源搜索范围，包括：</p><p><strong>1. <code>resolve.extensions</code> 配置：</strong></p><p>例如，当模块导入语句未携带文件后缀时，如 <code>import &#39;./a&#39;</code> ，Webpack 会遍历 <code>resolve.extensions</code> 项定义的后缀名列表，尝试在 <code>&#39;./a&#39;</code> 路径追加后缀名，搜索对应物理文件。</p><p>在 Webpack5 中，<code>resolve.extensions</code> 默认值为 <code>[&#39;.js&#39;, &#39;.json&#39;, &#39;.wasm&#39;]</code> ，这意味着 Webpack 在针对不带后缀名的引入语句时，可能需要执行三次判断逻辑才能完成文件搜索，针对这种情况，可行的优化措施包括：</p><ul><li>修改 <code>resolve.extensions</code> 配置项，减少匹配次数；</li></ul><ul><li>代码中尽量补齐文件后缀名；</li><li>设置 <code>resolve.enforceExtension = true</code> ，强制要求开发者提供明确的模块后缀名，不过这种做法侵入性太强，不太推荐。</li></ul><p><strong>2. <code>resolve.modules</code> 配置：</strong></p><p>类似于 Node 模块搜索逻辑，当 Webpack 遇到 <code>import &#39;lodash&#39;</code> 这样的 npm 包导入语句时，会先尝试在当前项目 <code>node_modules</code> 目录搜索资源，如果找不到，则按目录层级尝试逐级向上查找 <code>node_modules</code> 目录，如果依然找不到，则最终尝试在全局 <code>node_modules</code> 中搜索。</p><p>在一个依赖管理良好的系统中，我们通常会尽量将 NPM 包安装在有限层级内，因此 Webpack 这一逐层查找的逻辑大多数情况下实用性并不高，开发者可以通过修改 <code>resolve.modules</code> 配置项，主动关闭逐层搜索功能，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>
  <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;node_modules&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3. <code>resolve.mainFiles</code> 配置：</strong></p><p>与 <code>resolve.extensions</code> 类似，<code>resolve.mainFiles</code> 配置项用于定义文件夹默认文件名，例如对于 <code>import &#39;./dir&#39;</code> 请求，假设 <code>resolve.mainFiles = [&#39;index&#39;, &#39;home&#39;]</code> ，Webpack 会按依次测试 <code>./dir/index</code> 与 <code>./dir/home</code> 文件是否存在。</p><p>因此，实际项目中应控制 <code>resolve.mainFiles</code> 数组数量，减少匹配次数。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>Webpack 在应对大型项目场景时通常会面临比较大的性能挑战，也因此非常值得我们投入精力去学习如何分析、优化构建性能，除了缓存、多进程构建这一类大杀器之外，还可以通过控制构建范围、能力等方式尽可能减少各个环节的耗时，包括文中介绍的：</p><ul><li>使用最新 Webpack、Node 版本；</li><li>约束 Loader 执行范围；</li><li>使用 <code>noParse</code> 跳过文件编译等。</li></ul><p>如果下次再遇到性能问题，建议可以先试着分析哪些环节占用时长更多，然后有针对性的实施各项优化。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题" aria-hidden="true">#</a> 思考题</h2><p>除了上述各项优化外，还存在哪些有效措施？可以往 Webpack 的构建流程、组件等方向思考。</p>`,28);function R($,B){const a=t("ExternalLinkIcon");return c(),l("div",null,[r,s("p",null,[n("其次，新版本通常还会引入更多性能工具，例如 Webpack5 的 "),s("a",d,[n("cache"),e(a)]),n("(持久化缓存)、"),s("a",u,[n("lazyCompilation"),e(a)]),n("（按需编译，下面展开介绍） 等。因此，开发者应该保持时刻更新 Webpack 以及 Node、NPM or Yarn 等基础环境，尽量使用最新稳定版本完成构建工作。")]),k,s("p",null,[n("Webpack 5.17.0 之后引入实验特性 "),s("a",v,[n("lazyCompilation"),e(a)]),n("，用于实现 "),m,n(" 或异步引用模块的"),b,n("，这是一个非常实用的新特性！")]),g,s("blockquote",null,[s("p",null,[n("提示：详情可查阅 "),s("a",h,[n("官网"),e(a)]),n("。")])]),x,s("blockquote",null,[s("p",null,[n("提示： "),y,n(" 支持正则、函数、字符串、字符串数组等参数形式，具体可查阅"),s("a",_,[n("官网"),e(a)]),n("。")])]),j,s("p",null,[n("此时，真正有效的代码被包含在 "),f,n("（或 "),w,n("）中，但 Webpack 只会打包这段 "),q,n(" 内容，也就造成了产物中实际上并没有真正包含 React。针对这个问题，我们可以先找到适用的代码文件，然后用 "),s("a",W,[n("resolve.alias"),e(a)]),n(" 配置项重定向到该文件：")]),P,s("blockquote",null,[s("p",null,[n("提示：使用 "),s("a",S,[n("externals"),e(a)]),n(" 也能将部分依赖放到构建体系之外，实现与 "),z,n(" 类似的效果，详情可查阅"),s("a",C,[n("官网"),e(a)]),n("。")])]),E,s("p",null,[n("例如，使用新版本组件 "),s("a",N,[n("eslint-webpack-plugin"),e(a)]),n(" 替代旧版 "),L,n("，两者差异在于，"),T,n(" 在模块构建完毕（"),M,n(" 钩子）后执行检查，不会阻断文件加载流程，性能更优，用法：")]),V,s("ul",null,[s("li",null,[n("使用编辑器插件完成 ESLint 检查、错误提示、自动 Fix，如 VS Code 的 "),s("a",O,[n("dbaeumer.vscode-eslint"),e(a)]),n(" 插件；")]),F,A]),D])}const I=p(i,[["render",R],["__file","di15zhang—younaxiezhidexuexidegoujianxingnenjizhiyouhuajiqiao.html.vue"]]);export{I as default};
