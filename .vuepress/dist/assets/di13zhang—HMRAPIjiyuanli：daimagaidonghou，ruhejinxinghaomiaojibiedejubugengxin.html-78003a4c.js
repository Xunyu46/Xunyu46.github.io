import{_ as p,r as o,o as c,c as i,b as s,d as n,e as t,a}from"./app-48690364.js";const l={},d=a('<p>在开始今天的课程之前，我想先问你一个日常开发中的问题：在代码变更之后，如何实时看到更新后的页面效果呢？</p><p>很久之前，我们是通过 live reload 也就是自动刷新页面的方式来解决的。不过随着前端工程的日益庞大，开发场景也越来越复杂，这种<code>live reload</code>的方式在诸多的场景下却显得十分鸡肋，简单来说就是<code>模块局部更新</code>+<code>状态保存</code>的需求在<code>live reload</code>的方案没有得到满足，从而导致开发体验欠佳。当然，针对部分场景也有一些临时的解决方案，比如状态存储到浏览器的本地缓存(localStorage 对象)中，或者直接 mock 一些数据。但这些方式未免过于粗糙，无法满足通用的开发场景，且实现上也不够优雅。</p><p>那么，如果在改动代码后，想要进行模块级别的局部更新该怎么做呢？业界一般使用 HMR 技术来解决这个问题，像 Webpack、Parcel 这些传统的打包工具底层都实现了一套 HMR API，而我们今天要讲的就是 Vite 自己所实现的 HMR API。相比于传统的打包工具，Vite 的 HMR API 基于 ESM 模块规范来实现，可以达到毫秒级别的更新速度，性能非常强悍。</p><p>接下来，我们就一起来谈谈，Vite 中这一套 HMR 相关的 API 是如何设计的，以及我们可以通过这些 API 实现哪些功能。</p><h2 id="hmr-简介" tabindex="-1"><a class="header-anchor" href="#hmr-简介" aria-hidden="true">#</a> HMR 简介</h2><p>HMR 的全称叫做<code>Hot Module Replacement</code>，即<code>模块热替换</code>或者<code>模块热更新</code>。在计算机领域当中也有一个类似的概念叫<code>热插拔</code>，我们经常使用的 USB 设备就是一个典型的代表，当我们插入 U 盘的时候，系统驱动会加载在新增的 U 盘内容，不会重启系统，也不会修改系统其它模块的内容。HMR 的作用其实一样，就是在页面模块更新的时候，直接把<strong>页面中发生变化的模块替换为新的模块</strong>，同时不会影响其它模块的正常运作。具体来说，你可以观察下面这个实现 HMR 的例子。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9e87c4aeb83945bb8a5c6a19a5980835~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>在这里，我改变了页面的一个状态<code>count</code>，当我对页面再次进行调整的时候，比如把最上面的 Logo 图片去掉，这个时候大家可以实时地看到图片消失了，但其他的部分并没有发生改变，包括组件此时的一些数据。</p><p>如此一来，通过 HMR 的技术我们就可以实现<code>局部刷新</code>和<code>状态保存</code>，从而解决之前提到的种种问题。</p><h2 id="深入-hmr-api" tabindex="-1"><a class="header-anchor" href="#深入-hmr-api" aria-hidden="true">#</a> 深入 HMR API</h2><p>Vite 作为一个完整的构建工具，本身实现了一套 HMR 系统，值得注意的是，这套 HMR 系统基于原生的 ESM 模块规范来实现，在文件发生改变时 Vite 会侦测到相应 ES 模块的变化，从而触发相应的 API，实现局部的更新。</p>',11),u={href:"https://github.com/withastro/esm-hmr",target:"_blank",rel:"noopener noreferrer"},r=a(`<p>我们可以直观地来看一看 HMR API 的类型定义:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">ImportMeta</span> <span class="token punctuation">{</span>
  <span class="token keyword">readonly</span> hot<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token keyword">readonly</span> data<span class="token operator">:</span> <span class="token builtin">any</span>
    <span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
    <span class="token function">accept</span><span class="token punctuation">(</span><span class="token function-variable function">cb</span><span class="token operator">:</span> <span class="token punctuation">(</span>mod<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
    <span class="token function">accept</span><span class="token punctuation">(</span>dep<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token function-variable function">cb</span><span class="token operator">:</span> <span class="token punctuation">(</span>mod<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
    <span class="token function">accept</span><span class="token punctuation">(</span>deps<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function-variable function">cb</span><span class="token operator">:</span> <span class="token punctuation">(</span>mods<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
    <span class="token function">prune</span><span class="token punctuation">(</span><span class="token function-variable function">cb</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
    <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token function-variable function">cb</span><span class="token operator">:</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
    <span class="token function">decline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
    <span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
    <span class="token function">on</span><span class="token punctuation">(</span>event<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token function-variable function">cb</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里稍微解释一下，<code>i<wbr>mport.meta</code>对象为现代浏览器原生的一个内置对象，Vite 所做的事情就是在这个对象上的 <code>hot</code> 属性中定义了一套完整的属性和方法。因此，在 Vite 当中，你就可以通过<code>i<wbr>mport.meta.hot</code>来访问关于 HMR 的这些属性和方法，比如<code>i<wbr>mport.meta.hot.accept()</code>。接下来，我们就来一一熟悉这些 API 的使用方式。</p><h3 id="模块更新时逻辑-hot-accept" tabindex="-1"><a class="header-anchor" href="#模块更新时逻辑-hot-accept" aria-hidden="true">#</a> 模块更新时逻辑: hot.accept</h3><p>在 <code>i<wbr>mport.meta.hot</code> 对象上有一个非常关键的方法<code>accept</code>，因为它决定了 Vite 进行热更新的边界，那么如何来理解这个<code>accept</code>的含义呢？</p><p>从字面上来看，它表示接受的意思。没错，它就是用来<strong>接受模块更新</strong>的。 一旦 Vite 接受了这个更新，当前模块就会被认为是 HMR 的边界。那么，Vite 接受谁的更新呢？这里会有三种情况：</p><ul><li>接受<strong>自身模块</strong>的更新</li><li>接受<strong>某个子模块</strong>的更新</li><li>接受<strong>多个子模块</strong>的更新</li></ul><p>这三种情况分别对应 accept 方法三种不同的使用方式，下面我们就一起来分析一下。</p><h4 id="_1-接受自身更新" tabindex="-1"><a class="header-anchor" href="#_1-接受自身更新" aria-hidden="true">#</a> <strong>1. 接受自身更新</strong></h4><p>当模块接受自身的更新时，则当前模块会被认为 HMR 的边界。也就是说，除了当前模块，其他的模块均未受到任何影响。下面是我准备的一张示例图，你可以参考一下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2b518a7964444dbe8d12c177b3ed59c6~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p>`,11),k={href:"https://github.com/sanyuan0704/juejin-book-vite/tree/main/13-hmr-api",target:"_blank",rel:"noopener noreferrer"},m=a(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>.
├── favicon.svg
├── index.html
├── node_modules
│   └── ...
├── package.json
├── src
│   ├── main.ts
│   ├── render.ts
│   ├── state.ts
│   ├── style.css
│   └── vite-env.d.ts
└── tsconfig.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我放出一些关键文件的内容，如下面的 <code>index.html</code>：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>icon<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>image/svg+xml<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>favicon.svg<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Vite App<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
      count: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>count<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/src/main.ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>里面的 DOM 结构比较简单，同时引入了 <code>/src/main.ts</code> 这个文件，内容如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> render <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./render&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> initState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./state&#39;</span><span class="token punctuation">;</span>
<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>文件依赖了<code>render.ts</code>和<code>state.ts</code>，前者负责渲染文本内容，而后者负责记录当前的页面状态:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/render.ts</span>
<span class="token comment">// 负责渲染文本内容</span>
<span class="token keyword">import</span> <span class="token string">&#39;./style.css&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> app <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">querySelector</span><span class="token generic class-name"><span class="token operator">&lt;</span>HTMLDivElement<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token operator">!</span>
  app<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
    &lt;h1&gt;Hello Vite!&lt;/h1&gt;
    &lt;p target=&quot;_blank&quot;&gt;This is hmr test.123&lt;/p&gt;
  </span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span>
<span class="token comment">// src/state.ts</span>
<span class="token comment">// 负责记录当前的页面状态</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> countEle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;count&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    countEle<span class="token operator">!</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span>  <span class="token operator">++</span>count <span class="token operator">+</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>好了，仓库当中关键的代码就目前这些了。现在，你可以执行<code>pnpm i</code>安装依赖，然后<code>npm run dev</code>启动项目，在浏览器访问可以看到这样的内容:</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5a3165aa161147fabcd3a41a5cda1a1c~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>同时，每隔一秒钟，你可以看到这里的<code>count</code>值会加一。OK，现在你可以试着改动一下 <code>render.ts</code> 的渲染内容，比如增加一些文本:</p><div class="language-diff line-numbers-mode" data-ext="diff"><pre class="language-diff"><code>// render.ts
export const render = () =&gt; {
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const app = document.querySelector&lt;HTMLDivElement&gt;(&#39;#app&#39;)!
</span><span class="token prefix unchanged"> </span><span class="token line"> app.innerHTML = \`
</span><span class="token prefix unchanged"> </span><span class="token line">   &lt;h1&gt;Hello Vite!&lt;/h1&gt;
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   &lt;p target=&quot;_blank&quot;&gt;This is hmr test.123 这是增加的文本&lt;/p&gt;
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> \`
</span></span>}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果如下所示:</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9bd3ce3fb51d4c47b1f157075c6fc141~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>页面的渲染内容是更新了，但不知道你有没有注意到最下面的<code>count</code>值瞬间被置零了，并且查看控制台，也有这样的 log：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[vite] page reload src/render.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>很明显，当 <code>render.ts</code> 模块发生变更时，Vite 发现并没有 HMR 相关的处理，然后直接刷新页面了。</p><p>现在让我们在<code>render.ts</code>中加上如下的代码:</p><div class="language-diff line-numbers-mode" data-ext="diff"><pre class="language-diff"><code>// 条件守卫
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> if (i<wbr>mport.meta.hot) {
</span><span class="token prefix inserted">+</span><span class="token line">  i<wbr>mport.meta.hot.accept((mod) =&gt; mod.render())
</span><span class="token prefix inserted">+</span><span class="token line"> }
</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>i<wbr>mport.meta.hot</code>对象只有在开发阶段才会被注入到全局，生产环境是访问不到的，另外增加条件守卫之后，打包时识别到 if 条件不成立，会自动把这部分代码从打包产物中移除，来优化资源体积。因此，我们需要增加这个条件守卫语句。</p><p>接下来，可以注意到我们对于 <code>i<wbr>mport.meta.hot.accept</code>的使用:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>i<wbr>mport.meta.hot.accept((mod) =&gt; mod.render())
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里我们传入了一个回调函数作为参数，入参即为 Vite 给我们提供的更新后的模块内容，在浏览器中打印<code>mod</code>内容如下，正好是<code>render</code>模块最新的内容:</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6142727d2162489c9e613341f5e4ca5d~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>我们在回调中调用了一下 <code>mod.render</code> 方法，也就是当模块变动后，每次都重新渲染一遍内容。这时你可以试着改动一下渲染的内容，然后到浏览器中注意一下<code>count</code>的情况，并没有被重新置零，而是保留了原有的状态:</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/51fbe46db84f4d82ba073d8d8f0ec2fd~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>没错，现在 <code>render</code> 模块更新后，只会重新渲染这个模块的内容，而对于 state 模块的内容并没有影响，并且控制台的 log 也发生了变化:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[vite] hmr update /src/render.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在我们算是实现了初步的 HMR，也在实际的代码中体会到了 accept 方法的用途。当然，在这个例子中我们传入了一个回调函数来手动调用 render 逻辑，但事实上你也可以什么参数都不传，这样 Vite 只会把 <code>render</code>模块的最新内容执行一遍，但 <code>render</code> 模块内部只声明了一个函数，因此直接调用<code>i<wbr>mport.meta.hot.accept()</code>并不会重新渲染页面。</p><h4 id="_2-接受依赖模块的更新" tabindex="-1"><a class="header-anchor" href="#_2-接受依赖模块的更新" aria-hidden="true">#</a> <strong>2. 接受依赖模块的更新</strong></h4><p>上面介绍了<code>接受自身模块更新</code>的情况，现在来分析一下<code>接受依赖模块更新</code>是如何做到的。先给大家放一张原理图，直观地感受一下:</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2309dff1019c40a1a1e5d072f3ed0dd3~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>还是拿示例项目来举例，<code>main</code>模块依赖<code>render</code> 模块，也就是说，<code>main</code>模块是<code>render</code>父模块，那么我们也可以在 <code>main</code> 模块中接受<code>render</code>模块的更新，此时 HMR 边界就是<code>main</code>模块了。</p><p>我们将 <code>render</code>模块的 accept 相关代码先删除:</p><div class="language-diff line-numbers-mode" data-ext="diff"><pre class="language-diff"><code>// render.ts
<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> if (i<wbr>mport.meta.hot) {
</span><span class="token prefix deleted">-</span><span class="token line">   i<wbr>mport.meta.hot.accept((mod) =&gt; mod.render())
</span><span class="token prefix deleted">-</span><span class="token line"> }
</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后再<code>main</code>模块增加如下代码:</p><div class="language-diff line-numbers-mode" data-ext="diff"><pre class="language-diff"><code>// main.ts
import { render } from &#39;./render&#39;;
import &#39;./state&#39;;
render();
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">if (i<wbr>mport.meta.hot) {
</span><span class="token prefix inserted">+</span><span class="token line">  i<wbr>mport.meta.hot.accept(&#39;./render.ts&#39;, (newModule) =&gt; {
</span><span class="token prefix inserted">+</span><span class="token line">    newModule.render();
</span><span class="token prefix inserted">+</span><span class="token line">  })
</span><span class="token prefix inserted">+</span><span class="token line">}
</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里我们同样是调用 accept 方法，与之前不同的是，第一个参数传入一个依赖的路径，也就是<code>render</code>模块的路径，这就相当于告诉 Vite: 我监听了 <code>render</code> 模块的更新，当它的内容更新的时候，请把最新的内容传给我。同样的，第二个参数中定义了模块变化后的回调函数，这里拿到了 <code>render</code> 模块最新的内容，然后执行其中的渲染逻辑，让页面展示最新的内容。</p><p>通过接受一个依赖模块的更新，我们同样又实现了 HMR 功能，你可以试着改动 <code>render</code>模块的内容，可以发现页面内容正常更新，并且状态依然保持着原样。</p><h4 id="_3-接受多个子模块的更新" tabindex="-1"><a class="header-anchor" href="#_3-接受多个子模块的更新" aria-hidden="true">#</a> <strong>3. 接受多个子模块的更新</strong></h4><p>接下来是最后一种 accept 的情况——接受多个子模块的更新。有了上面两种情况的铺垫，这里再来理解第三种情况就容易多了，我依然先给出原理示意图:</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3449473d985b42668d8628a726ae871a~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>这里的意思是<strong>父模块可以接受多个子模块的更新，当其中任何一个子模块更新之后，父模块会成为 HMR 边界</strong>。还是拿之前的例子来演示，现在我们更改<code>main</code>模块代码:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// main.ts
import { render } from &#39;./render&#39;;
import { initState } from &#39;./state&#39;;
render();
initState();
+if (i<wbr>mport.meta.hot) {
+  i<wbr>mport.meta.hot.accept([&#39;./render.ts&#39;, &#39;./state.ts&#39;], (modules) =&gt; {
+    console.log(modules);
+  })
+}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在代码中我们通过 accept 方法接受了<code>render</code>和<code>state</code>两个模块的更新，接着让我们手动改动一下某一个模块的代码，观察一下回调中<code>modules</code>的打印内容。例如当我改动 <code>state</code>模块的内容时，回调中拿到的 modules 是这样的:</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c7e66edd02b3456fa45c47fd44bc2eb3~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>可以看到 Vite 给我们的回调传来的参数<code>modules</code>其实是一个数组，和我们第一个参数声明的子模块数组一一对应。因此<code>modules</code>数组第一个元素是 <code>undefined</code>，表示<code>render</code>模块并没有发生变化，第二个元素为一个 Module 对象，也就是经过变动后<code>state</code>模块的最新内容。于是在这里，我们根据 <code>modules</code> 进行自定义的更新，修改 <code>main.ts</code>:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// main.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> render <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./render&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> initState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./state&#39;</span><span class="token punctuation">;</span>
<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;./render.ts&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;./state.ts&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>modules<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 自定义更新</span>
    <span class="token keyword">const</span> <span class="token punctuation">[</span>renderModule<span class="token punctuation">,</span> stateModule<span class="token punctuation">]</span> <span class="token operator">=</span> modules<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>renderModule<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      renderModule<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>stateModule<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      stateModule<span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，你可以改动两个模块的内容，可以发现，页面的相应模块会更新，并且对其它的模块没有影响。但实际上你会发现另外一个问题，当改动了<code>state</code>模块的内容之后，页面的内容会变得错乱:</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1628e31f424d4089ad9c891c8e739ebe~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>这是为什么呢？</p><p>我们快速回顾一下 <code>state</code>模块的内容:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// state.ts</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> countEle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;count&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    countEle<span class="token operator">!</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span>  <span class="token operator">++</span>count <span class="token operator">+</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中设置了一个定时器，但当模块更改之后，这个定时器并没有被销毁，紧接着我们在 accept 方法调用 <code>initState</code> 方法又创建了一个新的定时器，导致 count 的值错乱。那如何来解决这个问题呢？这就涉及到新的 HMR 方法——<code>dispose</code>方法了。</p><h3 id="模块销毁时逻辑-hot-dispose" tabindex="-1"><a class="header-anchor" href="#模块销毁时逻辑-hot-dispose" aria-hidden="true">#</a> 模块销毁时逻辑: hot.dispose</h3><p>这个方法相较而言就好理解多了，代表在模块更新、旧模块需要销毁时需要做的一些事情，拿刚刚的场景来说，我们可以通过在<code>state</code>模块中调用 dispose 方法来轻松解决定时器共存的问题，代码改动如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// state.ts</span>
<span class="token keyword">let</span> timer<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> countEle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;count&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    countEle<span class="token operator">!</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span>  <span class="token operator">++</span>count <span class="token operator">+</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，我们再来到浏览器观察一下 HMR 的效果:</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/206543cbd39241aabea49c189740ec7e~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>可以看到，当我稍稍改动一下<code>state</code>模块的内容(比如加个空格)，页面确实会更新，而且也没有状态错乱的问题，说明我们在模块销毁前清除定时器的操作是生效的。但你又可以很明显地看到一个新的问题: 原来的状态丢失了，<code>count</code>的内容从<code>64</code>突然变成<code>1</code>。这又是为什么呢？</p><p>让我们来重新梳理一遍热更新的逻辑:</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6c72ca8f5cff463ba75a862f4a14f5e9~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>当我们改动了<code>state</code>模块的代码，<code>main</code>模块接受更新，执行 accept 方法中的回调，接着会执行 <code>state</code> 模块的<code>initState</code>方法。注意了，此时新建的 <code>initState</code> 方法的确会初始化定时器，但同时也会初始化 count 变量，也就是<code>count</code>从 0 开始计数了！</p><p>这显然是不符合预期的，我们期望的是每次改动<code>state</code>模块，之前的状态都保存下来。怎么来实现呢？</p><h3 id="共享数据-hot-data-属性" tabindex="-1"><a class="header-anchor" href="#共享数据-hot-data-属性" aria-hidden="true">#</a> 共享数据: hot.data 属性</h3><p>这就不得不提到 hot 对象上的 data 属性了，这个属性用来在不同的模块实例间共享一些数据。使用上也非常简单，让我们来重构一下 <code>state</code> 模块:</p><div class="language-diff line-numbers-mode" data-ext="diff"><pre class="language-diff"><code>let timer: number | undefined;
if (i<wbr>mport.meta.hot) {
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  // 初始化 count
</span><span class="token prefix inserted">+</span><span class="token line">  if (!i<wbr>mport.meta.hot.data.count) {
</span><span class="token prefix inserted">+</span><span class="token line">    i<wbr>mport.meta.hot.data.count = 0;
</span><span class="token prefix inserted">+</span><span class="token line">  }
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> i<wbr>mport.meta.hot.dispose(() =&gt; {
</span><span class="token prefix unchanged"> </span><span class="token line">   if (timer) {
</span><span class="token prefix unchanged"> </span><span class="token line">     clearInterval(timer);
</span><span class="token prefix unchanged"> </span><span class="token line">   }
</span><span class="token prefix unchanged"> </span><span class="token line"> })
</span></span>}
export function initState() {
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  const getAndIncCount = () =&gt; {
</span><span class="token prefix inserted">+</span><span class="token line">    const data = i<wbr>mport.meta.hot?.data || {
</span><span class="token prefix inserted">+</span><span class="token line">      count: 0
</span><span class="token prefix inserted">+</span><span class="token line">    };
</span><span class="token prefix inserted">+</span><span class="token line">    data.count = data.count + 1;
</span><span class="token prefix inserted">+</span><span class="token line">    return data.count;
</span><span class="token prefix inserted">+</span><span class="token line">  };
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> timer = setInterval(() =&gt; {
</span><span class="token prefix unchanged"> </span><span class="token line">   let countEle = document.getElementById(&#39;count&#39;);
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    countEle!.innerText =  getAndIncCount() + &#39;&#39;;
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> }, 1000);
</span></span>}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在 <code>i<wbr>mport.meta.hot.data</code> 对象上挂载了一个<code>count</code> 属性，在二次执行<code>initState</code>的时候便会复用 <code>i<wbr>mport.meta.hot.data</code> 上记录的 count 值，从而实现状态的保存。</p><p>此时，我们终于大功告成，基本实现了这个示例应用的 HMR 的功能。在这个过程中，我们用到了核心的<code>accept</code>、<code>dispose</code> 和<code>data</code>属性和方法。当然还有一些方法将会给大家进行介绍，但相较而言就比较简单了，而且用的也不多，大家只需要留下初步的印象，知道这些方法的用途是什么，需要用到的时候再来查阅即可。</p><h3 id="其它方法" tabindex="-1"><a class="header-anchor" href="#其它方法" aria-hidden="true">#</a> 其它方法</h3><p><strong>1. i<wbr>mport.meta.hot.decline()</strong></p><p>这个方法调用之后，相当于表示此模块不可热更新，当模块更新时会强制进行页面刷新。感兴趣的同学可以继续拿上面的例子来尝试一下。</p><p><strong>2. i<wbr>mport.meta.hot.invalidate()</strong></p><p>这个方法就更简单了，只是用来强制刷新页面。</p><p><strong>3. 自定义事件</strong></p><p>你还可以通过 <code>i<wbr>mport.meta.hot.on</code> 来监听 HMR 的自定义事件，内部有这么几个事件会自动触发:</p><ul><li><code>vite:beforeUpdate</code> 当模块更新时触发；</li><li><code>vite:beforeFullReload</code> 当即将重新刷新页面时触发；</li><li><code>vite:beforePrune</code> 当不再需要的模块即将被剔除时触发；</li><li><code>vite:error</code> 当发生错误时（例如，语法错误）触发。</li></ul><p>如果你想自定义事件可以通过上节中提到的 <code>handleHotUpdate</code> 这个插件 Hook 来进行触发:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 插件 Hook</span>
<span class="token function">handleHotUpdate</span><span class="token punctuation">(</span><span class="token punctuation">{</span> server <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  server<span class="token punctuation">.</span>ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    type<span class="token operator">:</span> <span class="token string">&#39;custom&#39;</span><span class="token punctuation">,</span>
    event<span class="token operator">:</span> <span class="token string">&#39;custom-update&#39;</span><span class="token punctuation">,</span>
    data<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token comment">// 前端代码</span>
<span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;custom-update&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 自定义更新逻辑</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>本篇的正文内容到这里就接近尾声了，在这一节中，你需要重点掌握 <strong>HMR 的概念</strong>、<strong>Vite HMR API 的使用</strong>以及<strong>HMR 的更新原理</strong>。</p><p>首先，我们认识了 HMR 这个概念，了解它相比于传统的 live reload 所解决的问题：<code>模块局部更新</code>和<code>状态保存</code>。</p><p>然后，我带你熟悉了 Vite HMR 中的各种 API，尤其是 accept 方法，根据 accept 的不同用法，我们分了三种情况来讨论 Vite 接受更新的策略: <code>接受自身更新</code>、<code>接受依赖模块的更新</code>和<code>接受多个子模块的更新</code>，并通过具体的示例演示了这三种情况的代码。可以看到，在代码发生变动的时候，Vite 会定位到发生变化的局部模块，也就是找到对应的 HMR 边界，然后基于这个边界进行更新，其他的模块并没有受到影响，这也是 Vite 中热更新的时间能达到毫秒级别的重要原因。</p><p>在 Vite 中，HMR 是一套比较复杂的系统，不过一旦理解了本文提到的<code>HMR 边界</code>的作用原理，后面解读 Vite HMR 源码的时候将会倍感轻松。大家加油吧！</p>`,83);function v(b,g){const e=o("ExternalLinkIcon");return c(),i("div",null,[d,s("p",null,[n("Vite 的 HMR API 设计也并非空穴来风，它基于一套完整的 "),s("a",u,[n("ESM HMR 规范"),t(e)]),n("来实现，这个规范由同时期的 no-bundle 构建工具 Snowpack、WMR 与 Vite 一起制定，是一个比较通用的规范。")]),r,s("p",null,[n("为了加深你的理解，这里我们以一个实际的例子来操练一下。这个例子已经放到了 "),s("a",k,[n("Github 仓库"),t(e)]),n(" 中，你可以把这个链接克隆到本地，然后跟着我一步步添加内容。首先展示一下整体的目录结构:")]),m])}const h=p(l,[["render",v],["__file","di13zhang—HMRAPIjiyuanli：daimagaidonghou，ruhejinxinghaomiaojibiedejubugengxin.html.vue"]]);export{h as default};
