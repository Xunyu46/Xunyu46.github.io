import{_ as e,r as o,o as c,c as i,b as s,d as n,e as p,a}from"./app-48690364.js";const l={},u=a('<p>在上一章中，我们一起系统学习了 Vite 的实现源码，从配置解析、依赖预构建、插件流水线和 HMR 这几个方面带你完整的梳理了 Vite 的底层原理，那么，在本小节中，我们将进一步，用实际的代码来写一个迷你版的 Vite，主要实现 Vite 最核心的 no-bundle 构建服务。在学完本节之后，你不仅能够复习之前所介绍的各种原理，也能深入地理解代码层面的实现细节，拥有独立开发一个 no-bundle 构建工具的能力。</p><h2 id="实战概览" tabindex="-1"><a class="header-anchor" href="#实战概览" aria-hidden="true">#</a> 实战概览</h2><p>相较于前面的小节，本小节(以及下一小节)的内容会比较难，手写的代码量也比较多(总共近一千行)。因此，在开始代码实战之前，我先给大家梳理一下需要完成的模块和功能，让大家有一个整体的认知:</p><ol><li><p>首先，我们会进行开发环境的搭建，安装必要的依赖，并搭建项目的构建脚本，同时完成 cli 工具的初始化代码。</p></li><li><p>然后我们正式开始实现<code>依赖预构建</code>的功能，通过 Esbuild 实现依赖扫描和依赖构建的功能。</p></li><li><p>接着开始搭建 Vite 的插件机制，也就是开发 <code>PluginContainer</code> 和 <code>PluginContext</code> 两个主要的对象。</p></li><li><p>搭建完插件机制之后，我们将会开发一系列的插件来实现 no-bundle 服务的编译构建能力，包括入口 HTML 处理、 TS/TSX/JS/TSX 编译、CSS 编译和静态资源处理。</p></li><li><p>最后，我们会实现一套系统化的模块热更新的能力，从搭建模块依赖图开始，逐步实现 HMR 服务端和客户端的开发。</p></li></ol><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/97c40a3172e54cc493db001f1879e025~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h2 id="搭建开发环境" tabindex="-1"><a class="header-anchor" href="#搭建开发环境" aria-hidden="true">#</a> 搭建开发环境</h2>',6),r={href:"https://github.com/sanyuan0704/juejin-book-vite/tree/main/mini-vite",target:"_blank",rel:"noopener noreferrer"},k=a(`<p>首先，你可以执行<code>pnpm init -y</code>来初始化项目，然后安装一些必要的依赖，执行命令如下:</p><blockquote><p>对于各个依赖的具体作用，大家先不用纠结，我将会在后面使用到依赖的时候介绍。</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 运行时依赖</span>
pnpm i cac chokidar connect debug es<span class="token operator">-</span>module<span class="token operator">-</span>lexer esbuild fs<span class="token operator">-</span>extra magic<span class="token operator">-</span><span class="token builtin">string</span> picocolors resolve rollup sirv ws <span class="token operator">-</span><span class="token constant">S</span>

<span class="token comment">// 开发环境依赖</span>
pnpm i <span class="token decorator"><span class="token at operator">@</span><span class="token function">types</span></span><span class="token operator">/</span>connect <span class="token decorator"><span class="token at operator">@</span><span class="token function">types</span></span><span class="token operator">/</span>debug <span class="token decorator"><span class="token at operator">@</span><span class="token function">types</span></span><span class="token operator">/</span>fs<span class="token operator">-</span>extra <span class="token decorator"><span class="token at operator">@</span><span class="token function">types</span></span><span class="token operator">/</span>resolve <span class="token decorator"><span class="token at operator">@</span><span class="token function">types</span></span><span class="token operator">/</span>ws tsup
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Vite 本身使用的是 Rollup 进行自身的打包，但之前给大家介绍的 tsup 也能够实现库打包的功能，并且内置 esbuild 进行提速，性能上更加强悍，因此在这里我们使用 tsup 进行项目的构建。</p><p>为了接入 tsup 打包功能，你需要在 package.json 中加入这些命令:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token string-property property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token string">&quot;tsup --watch&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;tsup --minify&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时，你需要在项目根目录新建<code>tsconfig.json</code>和<code>tsup.config.ts</code>这两份配置文件，内容分别如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// tsconfig.json</span>
<span class="token punctuation">{</span>
  <span class="token string-property property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 支持 commonjs 模块的 default import，如 import path from &#39;path&#39;</span>
    <span class="token comment">// 否则只能通过 import * as path from &#39;path&#39; 进行导入</span>
    <span class="token string-property property">&quot;esModuleInterop&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ES2020&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;moduleResolution&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ES2020&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;strict&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// tsup.config.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;tsup&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 后续会增加 entry</span>
  entry<span class="token operator">:</span> <span class="token punctuation">{</span>
    index<span class="token operator">:</span> <span class="token string">&quot;src/node/cli.ts&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 产物格式，包含 esm 和 cjs 格式</span>
  format<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;esm&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cjs&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// 目标语法</span>
  target<span class="token operator">:</span> <span class="token string">&quot;es2020&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// 生成 sourcemap</span>
  sourcemap<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token comment">// 没有拆包的需求，关闭拆包能力</span>
  splitting<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着新建 <code>src/node/cli.ts</code>文件，我们进行 cli 的初始化:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/node/cli.ts</span>
<span class="token keyword">import</span> cac <span class="token keyword">from</span> <span class="token string">&quot;cac&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> cli <span class="token operator">=</span> <span class="token function">cac</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// [] 中的内容为可选参数，也就是说仅输入 \`vite\` 命令下会执行下面的逻辑</span>
cli
  <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">&quot;[root]&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Run the development server&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">alias</span><span class="token punctuation">(</span><span class="token string">&quot;serve&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">alias</span><span class="token punctuation">(</span><span class="token string">&quot;dev&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;测试 cli~&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

cli<span class="token punctuation">.</span><span class="token function">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

cli<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在你可以执行 <code>pnpm start</code> 来编译这个<code>mini-vite</code>项目，tsup 会生成产物目录<code>dist</code>，然后你可以新建<code>bin/mini-vite</code>文件来引用产物:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token hashbang comment">#!/usr/bin/env node</span>

<span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&quot;../dist/index.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时，你需要在 package.json 中注册<code>mini-vite</code>命令，配置如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;bin&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;mini-vite&quot;</span><span class="token operator">:</span> <span class="token string">&quot;bin/mini-vite&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),d=s("code",null,"mini-vite",-1),v=s("code",null,"playground",-1),m={href:"https://github.com/sanyuan0704/juejin-book-vite/tree/main/mini-vite/playground",target:"_blank",rel:"noopener noreferrer"},b=a(`<p>将 <code>playground</code> 项目放在 <code>mini-vite</code> 目录中，然后执行 <code>pnpm i</code>，由于项目的<code>dependencies</code>中已经声明了<code>mini-vite</code>:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;devDependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;mini-vite&quot;</span><span class="token operator">:</span> <span class="token string">&#39;../&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么<code>mini-vite</code>命令会自动安装到测试项目的<code>node_modules/.bin</code>目录中:</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6fbe7e6ef1634e78803f28a6d1f90b7d~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>接着我们在<code>playground</code>项目中执行<code>pnpm dev</code>命令(内部执行<code>mini-vite</code>)，可以看到如下的 log 信息:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>测试 cli~
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接着，我们把<code>console.log</code>语句换成服务启动的逻辑:</p><div class="language-diff line-numbers-mode" data-ext="diff"><pre class="language-diff"><code>import cac from &quot;cac&quot;;
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> import { startDevServer } from &quot;./server&quot;;
</span></span>
const cli = cac();

cli
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> .command(&quot;[root]&quot;, &quot;Run the development server&quot;)
</span><span class="token prefix unchanged"> </span><span class="token line"> .alias(&quot;serve&quot;)
</span><span class="token prefix unchanged"> </span><span class="token line"> .alias(&quot;dev&quot;)
</span><span class="token prefix unchanged"> </span><span class="token line"> .action(async () =&gt; {
</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">    console.log(&#39;测试 cli~&#39;);
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    await startDevServer();
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> });
</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在你需要新建<code>src/node/server/index.ts</code>，内容如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// connect 是一个具有中间件机制的轻量级 Node.js 框架。</span>
<span class="token comment">// 既可以单独作为服务器，也可以接入到任何具有中间件机制的框架中，如 Koa、Express</span>
<span class="token keyword">import</span> connect <span class="token keyword">from</span> <span class="token string">&quot;connect&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// picocolors 是一个用来在命令行显示不同颜色文本的工具</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> blue<span class="token punctuation">,</span> green <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;picocolors&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">startDevServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> root <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> startTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
      <span class="token function">green</span><span class="token punctuation">(</span><span class="token string">&quot;🚀 No-Bundle 服务已经成功启动!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">耗时: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">ms</span><span class="token template-punctuation string">\`</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&gt; 本地访问路径: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">blue</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost:3000&quot;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次执行<code>pnpm dev</code>，你可以发现终端出现如下的启动日志:</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/49e6e563b19041acab43f5246e1b5209~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>OK，<code>mini-vite</code> 的 cli 功能和服务启动的逻辑目前就已经成功搭建起来了。</p><h2 id="依赖预构建" tabindex="-1"><a class="header-anchor" href="#依赖预构建" aria-hidden="true">#</a> 依赖预构建</h2><p>现在我们来进入依赖预构建阶段的开发。</p><p>首先我们新建<code>src/node/optimizer/index.ts</code>来存放依赖预构建的逻辑:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">optimize</span><span class="token punctuation">(</span>root<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 1. 确定入口</span>
  <span class="token comment">// 2. 从入口处扫描依赖</span>
  <span class="token comment">// 3. 预构建依赖</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在服务入口中引入预构建的逻辑:</p><div class="language-diff line-numbers-mode" data-ext="diff"><pre class="language-diff"><code>// src/node/server/index.ts
import connect from &quot;connect&quot;;
import { blue, green } from &quot;picocolors&quot;;
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> import { optimize } from &quot;../optimizer/index&quot;;
</span></span>
export async function startDevServer() {
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const app = connect();
</span><span class="token prefix unchanged"> </span><span class="token line"> const root = process.cwd();
</span><span class="token prefix unchanged"> </span><span class="token line"> const startTime = Date.now();
</span><span class="token prefix unchanged"> </span><span class="token line"> app.listen(3000, async () =&gt; {
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   await optimize(root);
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   console.log(
</span><span class="token prefix unchanged"> </span><span class="token line">     green(&quot;🚀 No-Bundle 服务已经成功启动!&quot;),
</span><span class="token prefix unchanged"> </span><span class="token line">     \`耗时: \${Date.now() - startTime}ms\`
</span><span class="token prefix unchanged"> </span><span class="token line">   );
</span><span class="token prefix unchanged"> </span><span class="token line">   console.log(\`&gt; 本地访问路径: \${blue(&quot;http://localhost:3000&quot;)}\`);
</span><span class="token prefix unchanged"> </span><span class="token line"> });
</span></span>}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们来开发依赖预构建的功能，从上面的代码注释你也可以看出，我们需要完成三部分的逻辑:</p><ul><li>确定预构建入口</li><li>从入口开始扫描出用到的依赖</li><li>对依赖进行预构建</li></ul><p>首先是确定入口，为了方便理解，这里我直接约定为 src 目录下的<code>main.tsx</code>文件:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 需要引入的依赖</span>
<span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">&quot;path&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 1. 确定入口</span>
<span class="token keyword">const</span> entry <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token string">&quot;src/main.tsx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二步是扫描依赖:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 需要引入的依赖 </span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> build <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;esbuild&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> green <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;picocolors&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> scanPlugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./scanPlugin&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 2. 从入口处扫描依赖</span>
<span class="token keyword">const</span> deps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  entryPoints<span class="token operator">:</span> <span class="token punctuation">[</span>entry<span class="token punctuation">]</span><span class="token punctuation">,</span>
  bundle<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  write<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">scanPlugin</span><span class="token punctuation">(</span>deps<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">green</span><span class="token punctuation">(</span><span class="token string">&quot;需要预构建的依赖&quot;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:\\n</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token punctuation">[</span><span class="token operator">...</span>deps<span class="token punctuation">]</span>
  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>green<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>依赖扫描需要我们借助 Esbuild 插件来完成，最后会记录到 deps 这个集合中。接下来我们来着眼于 Esbuild 依赖扫描插件的开发，你需要在<code>optimzier</code>目录中新建<code>scanPlguin.ts</code>文件，内容如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/node/optimizer/scanPlugin.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Plugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;esbuild&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">BARE_IMPORT_RE</span><span class="token punctuation">,</span> <span class="token constant">EXTERNAL_TYPES</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../constants&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">scanPlugin</span><span class="token punctuation">(</span>deps<span class="token operator">:</span> Set<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> Plugin <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">&quot;esbuild:scan-deps&quot;</span><span class="token punctuation">,</span>
    <span class="token function">setup</span><span class="token punctuation">(</span>build<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 忽略的文件类型</span>
      build<span class="token punctuation">.</span><span class="token function">onResolve</span><span class="token punctuation">(</span>
        <span class="token punctuation">{</span> filter<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">\\\\.(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">EXTERNAL_TYPES</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;|&quot;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)$</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">(</span>resolveInfo<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">{</span>
            path<span class="token operator">:</span> resolveInfo<span class="token punctuation">.</span>path<span class="token punctuation">,</span>
            <span class="token comment">// 打上 external 标记</span>
            external<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 记录依赖</span>
      build<span class="token punctuation">.</span><span class="token function">onResolve</span><span class="token punctuation">(</span>
        <span class="token punctuation">{</span>
          filter<span class="token operator">:</span> <span class="token constant">BARE_IMPORT_RE</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">(</span>resolveInfo<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> <span class="token punctuation">{</span> path<span class="token operator">:</span> id <span class="token punctuation">}</span> <span class="token operator">=</span> resolveInfo<span class="token punctuation">;</span>
          <span class="token comment">// 推入 deps 集合中</span>
          deps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">return</span> <span class="token punctuation">{</span>
            path<span class="token operator">:</span> id<span class="token punctuation">,</span>
            external<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要说明的是，文件中用到了一些常量，在<code>src/node/constants.ts</code>中定义，内容如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">EXTERNAL_TYPES</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token string">&quot;css&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;less&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;sass&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;scss&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;styl&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;stylus&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;pcss&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;postcss&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;vue&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;svelte&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;marko&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;astro&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;png&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;jpe?g&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;gif&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;svg&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;ico&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;webp&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;avif&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">BARE_IMPORT_RE</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[\\w@][^:]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>插件的逻辑非常简单，即把一些无关的资源进行 external，不让 esbuild 处理，防止 Esbuild 报错，同时将<code>bare import</code>的路径视作第三方包，推入 deps 集合中。</p><p>现在，我们在<code>playground</code>项目根路径中执行<code>pnpm dev</code>，可以发现依赖扫描已经成功执行:</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0a870441e5f3431c94cb5789a92791df~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>当我们收集到所有的依赖信息之后，就可以对每个依赖进行打包，完成依赖预构建了:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/node/optimizer/index.ts</span>
<span class="token comment">// 需要引入的依赖</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> preBundlePlugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./preBundlePlugin&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">PRE_BUNDLE_DIR</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../constants&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 3. 预构建依赖</span>
<span class="token keyword">await</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  entryPoints<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>deps<span class="token punctuation">]</span><span class="token punctuation">,</span>
  write<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  bundle<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  format<span class="token operator">:</span> <span class="token string">&quot;esm&quot;</span><span class="token punctuation">,</span>
  splitting<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  outdir<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token constant">PRE_BUNDLE_DIR</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">preBundlePlugin</span><span class="token punctuation">(</span>deps<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在此，我们引入了一个新的常量<code>PRE_BUNDLE_DIR</code>，定义如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/node/constants.ts</span>
<span class="token comment">// 增加如下代码</span>
<span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">&quot;path&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 预构建产物默认存放在 node_modules 中的 .m-vite 目录中</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">PRE_BUNDLE_DIR</span> <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;node_modules&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.m-vite&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着，我们继续开发预构建的 Esbuild 插件。首先，考虑到兼容 Windows 系统，我们先加入一段工具函数的代码:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/node/utils.ts</span>
<span class="token keyword">import</span> os <span class="token keyword">from</span> <span class="token string">&quot;os&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">slash</span><span class="token punctuation">(</span>p<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> p<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\\\</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> isWindows <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">platform</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&quot;win32&quot;</span><span class="token punctuation">;</span>


<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">normalizePath</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> path<span class="token punctuation">.</span>posix<span class="token punctuation">.</span><span class="token function">normalize</span><span class="token punctuation">(</span>isWindows <span class="token operator">?</span> <span class="token function">slash</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">:</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后完善预构建的代码:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Loader<span class="token punctuation">,</span> Plugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;esbuild&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">BARE_IMPORT_RE</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../constants&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 用来分析 es 模块 import/export 语句的库</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> init<span class="token punctuation">,</span> parse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;es-module-lexer&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">&quot;path&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 一个实现了 node 路径解析算法的库</span>
<span class="token keyword">import</span> resolve <span class="token keyword">from</span> <span class="token string">&quot;resolve&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 一个更加好用的文件操作库</span>
<span class="token keyword">import</span> fs <span class="token keyword">from</span> <span class="token string">&quot;fs-extra&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 用来开发打印 debug 日志的库</span>
<span class="token keyword">import</span> createDebug <span class="token keyword">from</span> <span class="token string">&quot;debug&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> normalizePath <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../utils&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> debug <span class="token operator">=</span> <span class="token function">createDebug</span><span class="token punctuation">(</span><span class="token string">&quot;dev&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">preBundlePlugin</span><span class="token punctuation">(</span>deps<span class="token operator">:</span> Set<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> Plugin <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">&quot;esbuild:pre-bundle&quot;</span><span class="token punctuation">,</span>
    <span class="token function">setup</span><span class="token punctuation">(</span>build<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      build<span class="token punctuation">.</span><span class="token function">onResolve</span><span class="token punctuation">(</span>
        <span class="token punctuation">{</span>
          filter<span class="token operator">:</span> <span class="token constant">BARE_IMPORT_RE</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">(</span>resolveInfo<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> <span class="token punctuation">{</span> path<span class="token operator">:</span> id<span class="token punctuation">,</span> importer <span class="token punctuation">}</span> <span class="token operator">=</span> resolveInfo<span class="token punctuation">;</span>
          <span class="token keyword">const</span> isEntry <span class="token operator">=</span> <span class="token operator">!</span>importer<span class="token punctuation">;</span>
          <span class="token comment">// 命中需要预编译的依赖</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>deps<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 若为入口，则标记 dep 的 namespace</span>
            <span class="token keyword">return</span> isEntry
              <span class="token operator">?</span> <span class="token punctuation">{</span>
                  path<span class="token operator">:</span> id<span class="token punctuation">,</span>
                  namespace<span class="token operator">:</span> <span class="token string">&quot;dep&quot;</span><span class="token punctuation">,</span>
                <span class="token punctuation">}</span>
              <span class="token operator">:</span> <span class="token punctuation">{</span>
                  <span class="token comment">// 因为走到 onResolve 了，所以这里的 path 就是绝对路径了</span>
                  path<span class="token operator">:</span> resolve<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token punctuation">{</span> basedir<span class="token operator">:</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token punctuation">}</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// 拿到标记后的依赖，构造代理模块，交给 esbuild 打包</span>
      build<span class="token punctuation">.</span><span class="token function">onLoad</span><span class="token punctuation">(</span>
        <span class="token punctuation">{</span>
          filter<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
          namespace<span class="token operator">:</span> <span class="token string">&quot;dep&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token keyword">async</span> <span class="token punctuation">(</span>loadInfo<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">await</span> init<span class="token punctuation">;</span>
          <span class="token keyword">const</span> id <span class="token operator">=</span> loadInfo<span class="token punctuation">.</span>path<span class="token punctuation">;</span>
          <span class="token keyword">const</span> root <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">const</span> entryPath <span class="token operator">=</span> <span class="token function">normalizePath</span><span class="token punctuation">(</span>resolve<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token punctuation">{</span> basedir<span class="token operator">:</span> root <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">const</span> code <span class="token operator">=</span> <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>entryPath<span class="token punctuation">,</span> <span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">const</span> <span class="token punctuation">[</span>imports<span class="token punctuation">,</span> exports<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">parse</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">let</span> proxyModule <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
          <span class="token comment">// cjs</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>imports<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>exports<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 构造代理模块</span>
            <span class="token comment">// 下面的代码后面会解释</span>
            <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span>entryPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">const</span> specifiers <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
            proxyModule<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>
              <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">export { </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>specifiers<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> } from &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>entryPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
              <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">export default require(&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>entryPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;)</span><span class="token template-punctuation string">\`</span></span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// esm 格式比较好处理，export * 或者 export default 即可</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>exports<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&quot;default&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              proxyModule<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">import d from &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>entryPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;;export default d</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            proxyModule<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">export * from &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>entryPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;代理模块内容: %o&quot;</span><span class="token punctuation">,</span> proxyModule<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">const</span> loader <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>entryPath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">return</span> <span class="token punctuation">{</span>
            loader<span class="token operator">:</span> loader <span class="token keyword">as</span> Loader<span class="token punctuation">,</span>
            contents<span class="token operator">:</span> proxyModule<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            resolveDir<span class="token operator">:</span> root<span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>值得一提的是，对于 CommonJS 格式的依赖，单纯用 <code>export default require(&#39;入口路径&#39;)</code> 是有局限性的，比如对于 React 而言，用这样的方式生成的产物最后只有 default 导出:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// esbuild 的打包产物</span>
<span class="token comment">// 省略大部分代码</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> react_default<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么用户在使用这个依赖的时候，必须这么使用:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// ✅ 正确</span>
<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token operator">=</span> React<span class="token punctuation">;</span>

<span class="token comment">// ❌ 报错</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那为什么上述会报错的语法在 Vite 是可以正常使用的呢？原因是 Vite 在做 import 语句分析的时候，自动将你的代码进行改写了:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 原来的写法</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// Vite 的 importAnalysis 插件转换后的写法类似下面这样</span>
<span class="token keyword">import</span> react_default <span class="token keyword">from</span> <span class="token string">&#39;/node_modules/.vite/react.js&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token operator">=</span> react_default<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么，还有没有别的方案来解决这个问题？没错，上述的插件代码中已经用另一个方案解决了这个问题，我们不妨把目光集中在下面这段代码中:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>imports<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>exports<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 构造代理模块</span>
    <span class="token comment">// 通过 require 拿到模块的导出对象</span>
    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span>entryPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 用 Object.keys 拿到所有的具名导出</span>
    <span class="token keyword">const</span> specifiers <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 构造 export 语句交给 Esbuild 打包</span>
    proxyModule<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>
      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">export { </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>specifiers<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> } from &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>entryPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">export default require(&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>entryPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;)</span><span class="token template-punctuation string">\`</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如此一来，Esbuild 预构建的产物中便会包含 CommonJS 模块中所有的导出信息:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 预构建产物导出代码</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span>
  react_default <span class="token keyword">as</span> <span class="token keyword">default</span><span class="token punctuation">,</span>
  useState<span class="token punctuation">,</span>
  useEffect<span class="token punctuation">,</span>
  <span class="token comment">// 省略其它导出</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>OK，接下来让我们来测试一下预构建整体的功能。在 <code>playground</code> 项目中执行 <code>pnpm dev</code>，接着去项目的 <code>node_modules</code> 目录中，可以发现新增了<code>.m-vite</code> 目录及<code>react</code>、<code>react-dom</code>的预构建产物:</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c4a1fbb12ead4bb4a7b5b75001949da6~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h2 id="插件机制开发" tabindex="-1"><a class="header-anchor" href="#插件机制开发" aria-hidden="true">#</a> 插件机制开发</h2><p>在完成了依赖预构建的功能之后，我们开始搭建 Vite 的插件机制，实现插件容器和插件上下文对象。</p><p>首先，你可以新建<code>src/node/pluginContainer.ts</code>文件，增加如下的类型定义:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span>
  LoadResult<span class="token punctuation">,</span>
  PartialResolvedId<span class="token punctuation">,</span>
  SourceDescription<span class="token punctuation">,</span>
  PluginContext <span class="token keyword">as</span> RollupPluginContext<span class="token punctuation">,</span>
  ResolvedId<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;rollup&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">PluginContainer</span> <span class="token punctuation">{</span>
  <span class="token function">resolveId</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> importer<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>PartialResolvedId <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
  <span class="token function">load</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>LoadResult <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
  <span class="token function">transform</span><span class="token punctuation">(</span>code<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>SourceDescription <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，由于插件容器需要接收 Vite 插件作为初始化参数，因此我们需要提前声明插件的类型，你可以继续新建<code>src/node/plugin.ts</code>来声明如下的插件类型:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> LoadResult<span class="token punctuation">,</span> PartialResolvedId<span class="token punctuation">,</span> SourceDescription <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;rollup&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ServerContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./server&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">ServerHook</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
  server<span class="token operator">:</span> ServerContext
<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">void</span> <span class="token operator">|</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token comment">// 只实现以下这几个钩子</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Plugin</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  configureServer<span class="token operator">?</span><span class="token operator">:</span> ServerHook<span class="token punctuation">;</span>
  resolveId<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>
    id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
    importer<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>PartialResolvedId <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span> <span class="token operator">|</span> PartialResolvedId <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  load<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>LoadResult <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span> <span class="token operator">|</span> LoadResult <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  transform<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>
    code<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
    id<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>SourceDescription <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span> <span class="token operator">|</span> SourceDescription <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  transformIndexHtml<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>raw<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于其中的 ServerContext，你暂时不用过于关心，只需要在<code>server/index.ts</code>中简单声明一下类型即可:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/node/server/index.ts</span>
<span class="token comment">// 增加如下类型声明</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ServerContext</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着，我们来实现插件机制的具体逻辑，主要集中在<code>createPluginContainer</code>函数中:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/node/pluginContainer.ts</span>
<span class="token comment">// 模拟 Rollup 的插件机制</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> createPluginContainer <span class="token operator">=</span> <span class="token punctuation">(</span>plugins<span class="token operator">:</span> Plugin<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> PluginContainer <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 插件上下文对象</span>
  <span class="token comment">// @ts-ignore 这里仅实现上下文对象的 resolve 方法</span>
  <span class="token keyword">class</span> <span class="token class-name">Context</span> <span class="token keyword">implements</span> <span class="token class-name">RollupPluginContext</span> <span class="token punctuation">{</span>
    <span class="token keyword">async</span> <span class="token function">resolve</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> importer<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> out <span class="token operator">=</span> <span class="token keyword">await</span> pluginContainer<span class="token punctuation">.</span><span class="token function">resolveId</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> importer<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> out <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span> out <span class="token operator">=</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> out <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> out <span class="token keyword">as</span> ResolvedId <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 插件容器</span>
  <span class="token keyword">const</span> pluginContainer<span class="token operator">:</span> PluginContainer <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token keyword">async</span> <span class="token function">resolveId</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> importer<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> plugin <span class="token keyword">of</span> plugins<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>plugin<span class="token punctuation">.</span>resolveId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> newId <span class="token operator">=</span> <span class="token keyword">await</span> plugin<span class="token punctuation">.</span><span class="token function">resolveId</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>ctx <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> importer<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>newId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            id <span class="token operator">=</span> <span class="token keyword">typeof</span> newId <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span> <span class="token operator">?</span> newId <span class="token operator">:</span> newId<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token punctuation">{</span> id <span class="token punctuation">}</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">async</span> <span class="token function">load</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> plugin <span class="token keyword">of</span> plugins<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>plugin<span class="token punctuation">.</span>load<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> plugin<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> result<span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">async</span> <span class="token function">transform</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> plugin <span class="token keyword">of</span> plugins<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>plugin<span class="token punctuation">.</span>transform<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> plugin<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> code<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> result <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            code <span class="token operator">=</span> result<span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            code <span class="token operator">=</span> result<span class="token punctuation">.</span>code<span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> code <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> pluginContainer<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码比较容易理解，并且关于插件钩子的执行原理和插件上下文对象的作用，在小册第 22 节中也有详细的分析，这里就不再赘述了。</p><p>接着，我们来完善一下之前的服务器逻辑:</p><div class="language-diff line-numbers-mode" data-ext="diff"><pre class="language-diff"><code>// src/node/server/index.ts
import connect from &quot;connect&quot;;
import { blue, green } from &quot;picocolors&quot;;
import { optimize } from &quot;../optimizer/index&quot;;
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> import { resolvePlugins } from &quot;../plugins&quot;;
</span><span class="token prefix inserted">+</span><span class="token line"> import { createPluginContainer, PluginContainer } from &quot;../pluginContainer&quot;;
</span></span>
export interface ServerContext {
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  root: string;
</span><span class="token prefix inserted">+</span><span class="token line">  pluginContainer: PluginContainer;
</span><span class="token prefix inserted">+</span><span class="token line">  app: connect.Server;
</span><span class="token prefix inserted">+</span><span class="token line">  plugins: Plugin[];
</span></span>}

export async function startDevServer() {
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const app = connect();
</span><span class="token prefix unchanged"> </span><span class="token line"> const root = process.cwd();
</span><span class="token prefix unchanged"> </span><span class="token line"> const startTime = Date.now();
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  const plugins = resolvePlugins();
</span><span class="token prefix inserted">+</span><span class="token line">  const pluginContainer = createPluginContainer(plugins);
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  const serverContext: ServerContext = {
</span><span class="token prefix inserted">+</span><span class="token line">    root: process.cwd(),
</span><span class="token prefix inserted">+</span><span class="token line">    app,
</span><span class="token prefix inserted">+</span><span class="token line">    pluginContainer,
</span><span class="token prefix inserted">+</span><span class="token line">    plugins,
</span><span class="token prefix inserted">+</span><span class="token line">  };
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  for (const plugin of plugins) {
</span><span class="token prefix inserted">+</span><span class="token line">    if (plugin.configureServer) {
</span><span class="token prefix inserted">+</span><span class="token line">      await plugin.configureServer(serverContext);
</span><span class="token prefix inserted">+</span><span class="token line">    }
</span><span class="token prefix inserted">+</span><span class="token line">  }
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> app.listen(3000, async () =&gt; {
</span><span class="token prefix unchanged"> </span><span class="token line">   await optimize(root);
</span><span class="token prefix unchanged"> </span><span class="token line">   console.log(
</span><span class="token prefix unchanged"> </span><span class="token line">     green(&quot;🚀 No-Bundle 服务已经成功启动!&quot;),
</span><span class="token prefix unchanged"> </span><span class="token line">     \`耗时: \${Date.now() - startTime}ms\`
</span><span class="token prefix unchanged"> </span><span class="token line">   );
</span><span class="token prefix unchanged"> </span><span class="token line">   console.log(\`&gt; 本地访问路径: \${blue(&quot;http://localhost:3000&quot;)}\`);
</span><span class="token prefix unchanged"> </span><span class="token line"> });
</span></span>}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>resolvePlugins</code> 方法我们还未定义，你可以新建<code>src/node/plugins/index.ts</code> 文件，内容如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Plugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../plugin&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">resolvePlugins</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Plugin<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token comment">// 下一部分会逐个补充插件逻辑</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="入口-html-加载" tabindex="-1"><a class="header-anchor" href="#入口-html-加载" aria-hidden="true">#</a> 入口 HTML 加载</h2><p>现在我们基于如上的插件机制，来实现 Vite 的核心编译能力。</p><p>首先要考虑的就是入口 HTML 如何编译和加载的问题，这里我们可以通过一个服务中间件，配合插件机制来实现。具体而言，你可以新建<code>src/node/server/middlewares/indexHtml.ts</code>，内容如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> NextHandleFunction <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;connect&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ServerContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../index&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">&quot;path&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> pathExists<span class="token punctuation">,</span> readFile <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;fs-extra&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">indexHtmlMiddware</span><span class="token punctuation">(</span>
  serverContext<span class="token operator">:</span> ServerContext
<span class="token punctuation">)</span><span class="token operator">:</span> NextHandleFunction <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> root <span class="token punctuation">}</span> <span class="token operator">=</span> serverContext<span class="token punctuation">;</span>
      <span class="token comment">// 默认使用项目根目录下的 index.html</span>
      <span class="token keyword">const</span> indexHtmlPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token string">&quot;index.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">pathExists</span><span class="token punctuation">(</span>indexHtmlPath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> rawHtml <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readFile</span><span class="token punctuation">(</span>indexHtmlPath<span class="token punctuation">,</span> <span class="token string">&quot;utf8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> html <span class="token operator">=</span> rawHtml<span class="token punctuation">;</span>
        <span class="token comment">// 通过执行插件的 transformIndexHtml 方法来对 HTML 进行自定义的修改</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> plugin <span class="token keyword">of</span> serverContext<span class="token punctuation">.</span>plugins<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>plugin<span class="token punctuation">.</span>transformIndexHtml<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            html <span class="token operator">=</span> <span class="token keyword">await</span> plugin<span class="token punctuation">.</span><span class="token function">transformIndexHtml</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        res<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
        res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在服务中应用这个中间件:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/node/server/index.ts</span>
<span class="token comment">// 需要增加的引入语句</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> indexHtmlMiddware <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./middlewares/indexHtml&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 省略中间的代码</span>

<span class="token comment">// 处理入口 HTML 资源</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">indexHtmlMiddware</span><span class="token punctuation">(</span>serverContext<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 省略</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来通过<code>pnpm dev</code>启动项目，然后访问<code>http://localhost:3000</code>，从网络面板中你可以查看到 HTML 的内容已经成功返回:</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/24a244087a64467abcb94ae4ddd70c3e~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>不过当前的页面并没有任何内容，因为 HTML 中引入的 TSX 文件并没有被正确编译。接下来，我们就来处理 TSX 文件的编译工作。</p><h2 id="js-ts-jsx-tsx-编译能力" tabindex="-1"><a class="header-anchor" href="#js-ts-jsx-tsx-编译能力" aria-hidden="true">#</a> JS/TS/JSX/TSX 编译能力</h2><p>首先新增一个中间件<code>src/node/server/middlewares/transform.ts</code>，内容如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> NextHandleFunction <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;connect&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>
  isJSRequest<span class="token punctuation">,</span>
  cleanUrl<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../../utils&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ServerContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../index&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> createDebug <span class="token keyword">from</span> <span class="token string">&quot;debug&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> debug <span class="token operator">=</span> <span class="token function">createDebug</span><span class="token punctuation">(</span><span class="token string">&quot;dev&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">transformRequest</span><span class="token punctuation">(</span>
  url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  serverContext<span class="token operator">:</span> ServerContext
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> pluginContainer <span class="token punctuation">}</span> <span class="token operator">=</span> serverContext<span class="token punctuation">;</span>
  url <span class="token operator">=</span> <span class="token function">cleanUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 简单来说，就是依次调用插件容器的 resolveId、load、transform 方法</span>
  <span class="token keyword">const</span> resolvedResult <span class="token operator">=</span> <span class="token keyword">await</span> pluginContainer<span class="token punctuation">.</span><span class="token function">resolveId</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> transformResult<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>resolvedResult<span class="token operator">?.</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> code <span class="token operator">=</span> <span class="token keyword">await</span> pluginContainer<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>resolvedResult<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> code <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span> <span class="token operator">&amp;&amp;</span> code <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      code <span class="token operator">=</span> code<span class="token punctuation">.</span>code<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      transformResult <span class="token operator">=</span> <span class="token keyword">await</span> pluginContainer<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>
        code <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
        resolvedResult<span class="token operator">?.</span>id
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> transformResult<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">transformMiddleware</span><span class="token punctuation">(</span>
  serverContext<span class="token operator">:</span> ServerContext
<span class="token punctuation">)</span><span class="token operator">:</span> NextHandleFunction <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">!==</span> <span class="token string">&quot;GET&quot;</span> <span class="token operator">||</span> <span class="token operator">!</span>req<span class="token punctuation">.</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span>url<span class="token punctuation">;</span>
    <span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;transformMiddleware: %s&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// transform JS request</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isJSRequest</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 核心编译函数</span>
      <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">transformRequest</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> serverContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> result <span class="token operator">!==</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result <span class="token operator">=</span> result<span class="token punctuation">.</span>code<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// 编译完成，返回响应给浏览器</span>
      res<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
      res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/javascript&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时，我们也需要补充如下的工具函数和常量定义:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/node/utils.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">JS_TYPES_RE</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./constants.ts&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> isJSRequest <span class="token operator">=</span> <span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  id <span class="token operator">=</span> <span class="token function">cleanUrl</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">JS_TYPES_RE</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>id<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> cleanUrl <span class="token operator">=</span> <span class="token punctuation">(</span>url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=&gt;</span>
  url<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">HASH_RE</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">QEURY_RE</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
<span class="token comment">// src/node/constants.ts</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">JS_TYPES_RE</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(?:j|t)sx?$|\\.mjs$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">QEURY_RE</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\?.*$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">s</span></span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">HASH_RE</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">#.*$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">s</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从如上的核心编译函数<code>transformRequest</code>可以看出，Vite 对于 JS/TS/JSX/TSX 文件的编译流程主要是依次调用插件容器的如下方法:</p><ul><li>resolveId</li><li>load</li><li>transform</li></ul><p>其中会经历众多插件的处理逻辑，那么，对于 TSX 文件的编译逻辑，也分散到了各个插件当中，具体来说主要包含以下的插件:</p><ul><li>路径解析插件</li><li>Esbuild 语法编译插件</li><li>import 分析插件</li></ul><p>接下来，我们就开始依次实现这些插件。</p><h3 id="_1-路径解析插件" tabindex="-1"><a class="header-anchor" href="#_1-路径解析插件" aria-hidden="true">#</a> 1. 路径解析插件</h3><p>当浏览器解析到如下的标签时:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/src/main.tsx<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>会自动发送一个路径为<code>/src/main.tsx</code>的请求，但如果服务端不做任何处理，是无法定位到源文件的，随之会返回 404 状态码:</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/13e2fee3e7a44950b2a1820576013d3a~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>因此，我们需要开发一个路径解析插件，对请求的路径进行处理，使之能转换真实文件系统中的路径。你可以新建文件<code>src/node/plugins/resolve.ts</code>，内容如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> resolve <span class="token keyword">from</span> <span class="token string">&quot;resolve&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Plugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../plugin&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ServerContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../server/index&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">&quot;path&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> pathExists <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;fs-extra&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">DEFAULT_EXTERSIONS</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../constants&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> cleanUrl<span class="token punctuation">,</span> normalizePath <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../utils&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">resolvePlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Plugin <span class="token punctuation">{</span>
  <span class="token keyword">let</span> serverContext<span class="token operator">:</span> ServerContext<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">&quot;m-vite:resolve&quot;</span><span class="token punctuation">,</span>
    <span class="token function">configureServer</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 保存服务端上下文</span>
      serverContext <span class="token operator">=</span> s<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">async</span> <span class="token function">resolveId</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> importer<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 1. 绝对路径</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">isAbsolute</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">pathExists</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">{</span> id <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 加上 root 路径前缀，处理 /src/main.tsx 的情况</span>
        id <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>serverContext<span class="token punctuation">.</span>root<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">pathExists</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">{</span> id <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// 2. 相对路径</span>
      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>importer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;\`importer\` should not be undefined&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">const</span> hasExtension <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> resolvedId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
        <span class="token comment">// 2.1 包含文件名后缀</span>
        <span class="token comment">// 如 ./App.tsx</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>hasExtension<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          resolvedId <span class="token operator">=</span> <span class="token function">normalizePath</span><span class="token punctuation">(</span>resolve<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token punctuation">{</span> basedir<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span>importer<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">pathExists</span><span class="token punctuation">(</span>resolvedId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> resolvedId <span class="token punctuation">}</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> 
        <span class="token comment">// 2.2 不包含文件名后缀</span>
        <span class="token comment">// 如 ./App</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token comment">// ./App -&gt; ./App.tsx</span>
          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> extname <span class="token keyword">of</span> <span class="token constant">DEFAULT_EXTERSIONS</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
              <span class="token keyword">const</span> withExtension <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>extname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
              resolvedId <span class="token operator">=</span> <span class="token function">normalizePath</span><span class="token punctuation">(</span>resolve<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span>withExtension<span class="token punctuation">,</span> <span class="token punctuation">{</span>
                basedir<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span>importer<span class="token punctuation">)</span><span class="token punctuation">,</span>
              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">pathExists</span><span class="token punctuation">(</span>resolvedId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> resolvedId <span class="token punctuation">}</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样对于 <code>/src/main.tsx</code>，在插件中会转换为文件系统中的真实路径，从而让模块在 load 钩子中能够正常加载(加载逻辑在 Esbuild 语法编译插件实现)。</p><p>接着我们来补充一下目前缺少的常量:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/node/constants.ts</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">DEFAULT_EXTERSIONS</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;.tsx&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.ts&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.jsx&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;js&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-esbuild-语法编译插件" tabindex="-1"><a class="header-anchor" href="#_2-esbuild-语法编译插件" aria-hidden="true">#</a> 2. Esbuild 语法编译插件</h3><p>这个插件的作用比较好理解，就是将 JS/TS/JSX/TSX 编译成浏览器可以识别的 JS 语法，可以利用 Esbuild 的 Transform API 来实现。你可以新建<code>src/node/plugins/esbuild.ts</code>文件，内容如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> readFile <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;fs-extra&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Plugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../plugin&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> isJSRequest <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../utils&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> esbuild <span class="token keyword">from</span> <span class="token string">&quot;esbuild&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">&quot;path&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">esbuildTransformPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Plugin <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">&quot;m-vite:esbuild-transform&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// 加载模块</span>
    <span class="token keyword">async</span> <span class="token function">load</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isJSRequest</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> code <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readFile</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">return</span> code<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">async</span> <span class="token function">transform</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isJSRequest</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> extname <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> <span class="token punctuation">{</span> code<span class="token operator">:</span> transformedCode<span class="token punctuation">,</span> map <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> esbuild<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> <span class="token punctuation">{</span>
          target<span class="token operator">:</span> <span class="token string">&quot;esnext&quot;</span><span class="token punctuation">,</span>
          format<span class="token operator">:</span> <span class="token string">&quot;esm&quot;</span><span class="token punctuation">,</span>
          sourcemap<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
          loader<span class="token operator">:</span> extname <span class="token keyword">as</span> <span class="token string">&quot;js&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;ts&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;jsx&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;tsx&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
          code<span class="token operator">:</span> transformedCode<span class="token punctuation">,</span>
          map<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-import-分析插件" tabindex="-1"><a class="header-anchor" href="#_3-import-分析插件" aria-hidden="true">#</a> 3. import 分析插件</h3><p>在将 TSX 转换为浏览器可以识别的语法之后，是不是就可以直接返回给浏览器执行了呢？</p><p>显然不是，我们还考虑如下的一些问题:</p><ul><li>对于第三方依赖路径(bare import)，需要重写为预构建产物路径；</li><li>对于绝对路径和相对路径，需要借助之前的路径解析插件进行解析。</li></ul><p>好，接下来，我们就在 import 分析插件中一一解决这些问题:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 新建 src/node/plugins/importAnalysis.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> init<span class="token punctuation">,</span> parse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;es-module-lexer&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>
  <span class="token constant">BARE_IMPORT_RE</span><span class="token punctuation">,</span>
  <span class="token constant">DEFAULT_EXTERSIONS</span><span class="token punctuation">,</span>
  <span class="token constant">PRE_BUNDLE_DIR</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../constants&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>
  cleanUrl<span class="token punctuation">,</span>
  isJSRequest<span class="token punctuation">,</span>
  normalizePath
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../utils&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// magic-string 用来作字符串编辑</span>
<span class="token keyword">import</span> MagicString <span class="token keyword">from</span> <span class="token string">&quot;magic-string&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">&quot;path&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Plugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../plugin&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ServerContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../server/index&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> pathExists <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;fs-extra&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> resolve <span class="token keyword">from</span> <span class="token string">&quot;resolve&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">importAnalysisPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Plugin <span class="token punctuation">{</span>
  <span class="token keyword">let</span> serverContext<span class="token operator">:</span> ServerContext<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">&quot;m-vite:import-analysis&quot;</span><span class="token punctuation">,</span>
    <span class="token function">configureServer</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 保存服务端上下文</span>
      serverContext <span class="token operator">=</span> s<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">async</span> <span class="token function">transform</span><span class="token punctuation">(</span>code<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 只处理 JS 相关的请求</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isJSRequest</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">await</span> init<span class="token punctuation">;</span>
      <span class="token comment">// 解析 import 语句</span>
      <span class="token keyword">const</span> <span class="token punctuation">[</span>imports<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> ms <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MagicString</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 对每一个 import 语句依次进行分析</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> importInfo <span class="token keyword">of</span> imports<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 举例说明: const str = \`import React from &#39;react&#39;\`</span>
        <span class="token comment">// str.slice(s, e) =&gt; &#39;react&#39;</span>
        <span class="token keyword">const</span> <span class="token punctuation">{</span> s<span class="token operator">:</span> modStart<span class="token punctuation">,</span> e<span class="token operator">:</span> modEnd<span class="token punctuation">,</span> n<span class="token operator">:</span> modSource <span class="token punctuation">}</span> <span class="token operator">=</span> importInfo<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>modSource<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token comment">// 第三方库: 路径重写到预构建产物的路径</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">BARE_IMPORT_RE</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>modSource<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token keyword">const</span> bundlePath <span class="token operator">=</span> <span class="token function">normalizePath</span><span class="token punctuation">(</span>
            path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token constant">PRE_BUNDLE_DIR</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>modSource<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.js</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
          ms<span class="token punctuation">.</span><span class="token function">overwrite</span><span class="token punctuation">(</span>modStart<span class="token punctuation">,</span> modEnd<span class="token punctuation">,</span> bundlePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>modSource<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span> <span class="token operator">||</span> modSource<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 直接调用插件上下文的 resolve 方法，会自动经过路径解析插件的处理</span>
          <span class="token keyword">const</span> resolved <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>modSource<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>resolved<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ms<span class="token punctuation">.</span><span class="token function">overwrite</span><span class="token punctuation">(</span>modStart<span class="token punctuation">,</span> modEnd<span class="token punctuation">,</span> resolved<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        code<span class="token operator">:</span> ms<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token comment">// 生成 SourceMap</span>
        map<span class="token operator">:</span> ms<span class="token punctuation">.</span><span class="token function">generateMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们便完成了 JS 代码的 import 分析工作。接下来，我们把上面实现的三个插件进行注册:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/node/plugin/index.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> esbuildTransformPlugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./esbuild&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> importAnalysisPlugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./importAnalysis&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> resolvePlugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./resolve&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Plugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../plugin&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">resolvePlugins</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Plugin<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token function">resolvePlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">esbuildTransformPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">importAnalysisPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，我们需要注册 transformMiddleware 中间件，在<code>src/node/server/index.ts</code>中增加代码如下:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">transformMiddleware</span><span class="token punctuation">(</span>serverContext<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后在<code>playground</code>项目下执行<code>pnpm dev</code>，在浏览器里面访问<code>http://localhost:3000</code>，你可以在网络面板中发现 <code>main.tsx</code> 的内容以及被编译为下面这样:</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c788e41eb93c4727958b501f2314ad7d~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>同时，页面内容也能被渲染出来了:</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dd414e4167204fa08547e27e7d465c33~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>OK，目前为止我们就基本上完成 JS/TS/JSX/TSX 文件的编译。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>本小节的内容就到这里，相信你如果能一直跟着做到这里，也已经收获满满了。我们最后来回顾和小结一下，这一节我们主要来手写 Vite 的 no-bundle 服务，完成了<strong>开发环境搭建</strong>、<strong>预构建功能的开发</strong>、<strong>插件机制的搭建</strong>、<strong>入口 HTML 加载</strong>和 <strong>JS/TS/JSX/TSX 的编译功能</strong>。</p><p>在下一小节，我们将继续完善当前的 no-bundle 服务器，完成 CSS 编译、静态资源加载和 HMR 系统的实现，让我们下一节再见👋🏻</p>`,117);function g(y,f){const t=o("ExternalLinkIcon");return c(),i("div",null,[u,s("blockquote",null,[s("p",null,[n("注: 手写 Vite 项目的所有代码，我已经放到了小册的 Github 仓库中，"),s("a",r,[n("点击查看"),p(t)]),n("。")])]),k,s("p",null,[n("如此一来，我们就可以在业务项目中使用 "),d,n(" 这个命令了。在小册的 Github 仓库中我为你准备了一个示例的 "),v,n(" 项目，你可以拿来进行测试，"),s("a",m,[n("点击查看项目"),p(t)]),n("。")]),b])}const q=e(l,[["render",g],["__file","di24zhang—shouxieVite：shixianno-bundlekaifafuwu(shang).html.vue"]]);export{q as default};
