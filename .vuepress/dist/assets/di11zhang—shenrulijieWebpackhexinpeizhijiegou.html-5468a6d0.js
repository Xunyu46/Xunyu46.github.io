import{_ as p,r as o,o as c,c as l,b as n,d as s,e,a as t}from"./app-48690364.js";const r={},i=t(`<p>Webpack 是一种 <strong>「配置」</strong> 驱动的构建工具，所以站在应用的角度，必须深入学习 Webpack 的各项配置规则，才能灵活应对各种构建需求。本文将作为小册应用系列的一个总结，汇总与应用配置相关的各项知识点，包括：</p><ol><li>剖析配置结构规则，解释对象、数组、函数三种形态的写法，以及各自应对的场景；</li><li>详细讲解环境治理的意义，以及如何借助多文件实现环境治理；</li><li>完整、清晰地介绍若干核心配置项：<code>entry/output/target/mode</code>，帮助你更深入理解配置规则。</li></ol><h2 id="配置结构详解" tabindex="-1"><a class="header-anchor" href="#配置结构详解" aria-hidden="true">#</a> 配置结构详解</h2><p>在前面章节中，我们已经编写了许多 Webpack 配置示例，其大多数都以单文件导出单个配置对象方式实现，类似：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">,</span>
  <span class="token comment">// 其它配置...</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上，Webpack 还支持以数组、函数方式配置运行参数，以适配不同场景应用需求，它们之间大致上区别：</p><ul><li><strong>单个配置对象</strong>：比较常用的一种方式，逻辑简单，适合大多数业务项目；</li><li><strong>配置对象数组</strong>：每个数组项都是一个完整的配置对象，每个对象都会触发一次单独的构建，通常用于需要为同一份代码构建多种产物的场景，如 Library；</li><li><strong>函数</strong>：Webpack 启动时会执行该函数获取配置，我们可以在函数中根据环境参数(如 <code>NODE_ENV</code>)动态调整配置对象。</li></ul><p>下面我们着重介绍数组、函数两种方式。</p><blockquote><p><strong>使用配置数组：</strong></p></blockquote><p>导出数组的方式很简单，如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">,</span>
  <span class="token comment">// 其它配置...</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">,</span>
  <span class="token comment">// 其它配置...</span>
<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用数组方式时，Webpack 会在启动后创建多个 <code>Compilation</code> 实例，并行执行构建工作，但需要注意，<code>Compilation</code> 实例间基本上不作通讯，这意味着这种并行构建对运行性能并没有任何正向收益，例如某个 Module 在 <code>Compilation</code> 实例 A 中完成解析、构建后，在其它 <code>Compilation</code> 中依然需要完整经历构建流程，无法直接复用结果。</p><p>数组方式主要用于应对“同一份代码打包出多种产物”的场景，例如在构建 Library 时，我们通常需要同时构建出 ESM/CMD/UMD 等模块方案的产物，如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;./dist-amd.js&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">libraryTarget</span><span class="token operator">:</span> <span class="token string">&#39;amd&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;amd&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./app.js&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;./dist-commonjs.js&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">libraryTarget</span><span class="token operator">:</span> <span class="token string">&#39;commonjs&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;commonjs&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./app.js&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>提示：使用配置数组时，还可以通过 <code>--config-name</code> 参数指定需要构建的配置对象，例如上例配置中若执行 <code>npx webpack --config-name=&#39;amd&#39;</code>，则仅使用数组中 <code>name=&#39;amd&#39;</code> 的项做构建。</p></blockquote><p>此时适合使用配置数组方式解决；若是“多份代码打包多份产物”的场景，则建议使用 <code>entry</code> 配置多个应用入口。</p>`,16),u={href:"https://www.npmjs.com/package/webpack-merge",target:"_blank",rel:"noopener noreferrer"},d=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> merge <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;webpack-merge&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> baseConfig <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;./dist&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;amd&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&quot;./app.js&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&quot;production&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token function">merge</span><span class="token punctuation">(</span>baseConfig<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;[name]-amd.js&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">libraryTarget</span><span class="token operator">:</span> <span class="token string">&quot;amd&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">merge</span><span class="token punctuation">(</span>baseConfig<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;./[name]-commonjs.js&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">libraryTarget</span><span class="token operator">:</span> <span class="token string">&quot;commonjs&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>提示：<code>webpack-merge</code> 是 Webpack 生态内专门用于合并配置对象的工具，后面我们还会展开讲解使用方法。</p></blockquote><p>示例中将公共配置抽取为 <code>baseConfig</code> 对象，之后配合 <code>webpack-merge</code> 创建不同目标数组项，这种方式可有效减少重复的配置代码，非常推荐使用。</p><blockquote><p><strong>使用配置函数：</strong></p></blockquote><p>配置函数方式要求在配置文件中导出一个函数，并在函数中返回 Webpack 配置对象，或配置数组，或 <code>Promise</code> 对象，如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">env<span class="token punctuation">,</span> argv</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">// 其它配置...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行时，Webpack 会传入两个环境参数对象：</p><ul><li><code>env</code>：通过 <code>--env</code> 传递的命令行参数，适用于自定义参数，例如：</li></ul><p>​</p><table><thead><tr><th>命令：</th><th><code>env</code> 参数值：</th></tr></thead><tbody><tr><td>npx webpack --env prod</td><td>{ prod: true }</td></tr><tr><td>npx webpack --env prod --env min</td><td>{ prod: true, min: true }</td></tr><tr><td>npx webpack --env platform=app --env production</td><td>{ platform: &quot;app&quot;, production: true }</td></tr><tr><td>npx webpack --env foo=bar=app</td><td>{ foo: &quot;bar=app&quot;}</td></tr><tr><td>npx webpack --env app.platform=&quot;staging&quot; --env app.name=&quot;test&quot;</td><td>{ app: { platform: &quot;staging&quot;, name: &quot;test&quot; }</td></tr></tbody></table>`,10),k=n("code",null,"argv",-1),m={href:"https://webpack.js.org/api/cli/#flags",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"entry",-1),b=n("code",null,"output-path",-1),g=n("code",null,"mode",-1),h=n("code",null,"merge",-1),y=t(`<p>“<strong>配置函数</strong>”这种方式的意义在于，允许用户根据命令行参数动态创建配置对象，可用于实现简单的多环境治理策略，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// npx webpack --env app.type=miniapp --mode=production</span>
module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">env<span class="token punctuation">,</span> argv</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">mode</span><span class="token operator">:</span> argv<span class="token punctuation">.</span>mode <span class="token operator">?</span> <span class="token string">&quot;production&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;development&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">devtool</span><span class="token operator">:</span> argv<span class="token punctuation">.</span>mode <span class="token operator">?</span> <span class="token string">&quot;source-map&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;eval&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">./dist/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>env<span class="token punctuation">.</span>app<span class="token punctuation">.</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;[name].js&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token keyword">new</span> <span class="token class-name">TerserPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">terserOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">compress</span><span class="token operator">:</span> argv<span class="token punctuation">.</span>mode <span class="token operator">===</span> <span class="token string">&quot;production&quot;</span><span class="token punctuation">,</span> 
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例支持通过命令行传入 <code>env.app.type</code> 与 <code>argv.mode</code> 值，决定最终配置结构，我们可以为不同场景传入不同命令行参数，从而实现环境隔离效果。</p><p>不过这种方式并不常用，一是因为需要在配置函数内做许多逻辑判断，复杂场景下可能可读性会很低，维护成本高；二是强依赖于命令行参数，可能最终需要写出一串很长的运行命令，应用体验较差。目前社区比较流行通过不同配置文件区分不同环境的运行配置，配合 <code>--config</code> 参数实现环境治理，下面我们会展开讲解这种方案。</p><p>最后简单总结下，Webpack 支持三种配置方式：对象、数组、函数，其中对象方式最简单，且能够应对大多数业务开发场景，所以使用率最高；数组方式主要用于构建 Library 场景；函数方式灵活性较高，可用于实现一些简单的环境治理策略。同学们可根据实际场景，择优选用。</p><h2 id="环境治理策略" tabindex="-1"><a class="header-anchor" href="#环境治理策略" aria-hidden="true">#</a> 环境治理策略</h2><p>在现代前端工程化实践中，通常需要将同一个应用项目部署在不同环境(如生产环境、开发环境、测试环境)中，以满足项目参与各方的不同需求。这就要求我们能根据部署环境需求，对同一份代码执行各有侧重的打包策略，例如：</p><ul><li>开发环境需要使用 <code>webpack-dev-server</code> 实现 Hot Module Replacement；</li><li>测试环境需要带上完整的 Soucemap 内容，以帮助更好地定位问题；</li><li>生产环境需要尽可能打包出更快、更小、更好的应用代码，确保用户体验。</li></ul><p>Webpack 中有许多实现环境治理的方案，比如上面介绍过的，使用“配置函数”配合命令行参数动态计算配置对象。除此之外，业界比较流行将不同环境配置分别维护在单独的配置文件中，如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>.
└── config
  ├── webpack.common.js
  ├── webpack.development.js
  ├── webpack.testing.js
  └── webpack.production.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后配合 <code>--config</code> 选项指定配置目标，如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npx webpack --config webpack.development.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,12),f=n("code",null,"webpack.common.js",-1),_={href:"https://www.npmjs.org/package/webpack-merge",target:"_blank",rel:"noopener noreferrer"},j=n("code",null,"webpack-merge",-1),q=n("code",null,"merge",-1),w={href:"https://devdocs.io/lodash~4/index#merge",target:"_blank",rel:"noopener noreferrer"},x={href:"https://devdocs.io/javascript/global_objects/object/assign",target:"_blank",rel:"noopener noreferrer"},W=t(`<ul><li>支持数组属性合并，例如：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">arr</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">arr</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token punctuation">{</span> <span class="token literal-property property">arr</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>支持函数属性合并，例如：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>
  <span class="token punctuation">{</span> <span class="token function-variable function">func</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token function-variable function">func</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
res<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// =&gt; 1,2 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>支持设定对象合并策略，支持 <code>match/append/prepend/replace/merge</code> 规则；</li><li>支持传入自定义对象合并函数；</li><li>等等。</li></ul><p>这些特性能更好地支持 Webpack 这种高度复杂的数据合并场景，例如对于 <code>module.rules</code> 数组，若只是使用 <code>Object.assign</code> 做合并，则只会导致后面对象属性替换了前面对象属性；而使用 <code>webpack-merge</code> 能够实现两个数组项合并，更符合预期。</p>`,6),C={href:"https://github.com/Tecvan-fe/webpack-book-samples/blob/main/env-manage/webpack.common.js",target:"_blank",rel:"noopener noreferrer"},E=n("code",null,"webpack-merge",-1),B=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.common.js</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> HTMLWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;html-webpack-plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">main</span><span class="token operator">:</span> <span class="token string">&quot;./src/index.js&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;[name].js&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;dist&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;babel-loader&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">HTMLWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其次，需要安装 <code>webpack-merge</code> 做配置合并操作：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yarn add -D webpack-merge
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>之后，创建对应环境配置文件，如 <code>webpack.development.js</code>，并输入开发环境专用配置代码，如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.development.js</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> merge <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;webpack-merge&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> baseConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./webpack.common&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使用 webpack-merge 合并配置对象</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>baseConfig<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&quot;development&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token string">&quot;source-map&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">hot</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，执行构建命令并通过 <code>--config</code> 参数传入配置文件路径，如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npx webpack --config=webpack.development.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>至此，样例大致搭建完毕，接下来我们还可以继续为更多构建环境配备特定的配置文件，流程同上，此处不再赘述。</p><h2 id="核心配置项汇总" tabindex="-1"><a class="header-anchor" href="#核心配置项汇总" aria-hidden="true">#</a> 核心配置项汇总</h2><p>在前面章节中，我们已经基于各种应用场景综合讲解了 Webpack 方方面面的应用方法，其中涉及多达上百种配置项，不太可能一一详细讲解，但大致上可以划分下图中展示的几种分类：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1b0350016e9e4d92868ecbdcbbded33d~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>包括：流程配置、性能优化类配置、日志类配置、开发效率类配置等，这里面较常用，需要着重学习的配置有：</p><ul><li><code>entry</code>：声明项目入口文件，Webpack 会从这个文件开始递归找出所有文件依赖；</li><li><code>output</code>：声明构建结果的存放位置；</li><li><code>target</code>：用于配置编译产物的目标运行环境，支持 <code>web</code>、<code>node</code>、<code>electron</code> 等值，不同值最终产物会有所差异；</li><li><code>mode</code>：编译模式短语，支持 <code>development</code>、<code>production</code> 等值，Webpack 会根据该属性推断默认配置；</li><li><code>optimization</code>：用于控制如何优化产物包体积，内置 Dead Code Elimination、Scope Hoisting、代码混淆、代码压缩等功能；</li><li><code>module</code>：用于声明模块加载规则，例如针对什么类型的资源需要使用哪些 Loader 进行处理；</li><li><code>plugin</code>：Webpack 插件列表。</li></ul><p>其中，<code>optimization/module/plugin</code> 属性将在后续章节做专门介绍，此处先不展开。接下来我们将集中讲解 <code>entry/output/target/mode</code> 属性，帮你更全面、立体、透彻地理解 Webpack 配置项逻辑。</p><h2 id="entry-配置详解" tabindex="-1"><a class="header-anchor" href="#entry-配置详解" aria-hidden="true">#</a> <code>entry</code> 配置详解</h2>`,15),N=n("strong",null,"「入口文件」",-1),L={href:"https://webpack.js.org/configuration/entry-context/",target:"_blank",rel:"noopener noreferrer"},O=n("code",null,"entry",-1),P=t(`<ul><li>字符串：指定入口文件路径；</li><li>对象：对象形态功能比较完备，除了可以指定入口文件列表外，还可以指定入口依赖、Runtime 打包方式等；</li><li>函数：动态生成 Entry 配置信息，函数中可返回字符串、对象或数组；</li><li>数组：指明多个入口文件，数组项可以为上述介绍的文件路径字符串、对象、函数形式，Webpack 会将数组指明的入口全部打包成一个 Bundle。</li></ul><p>例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 字符串形态</span>
    <span class="token literal-property property">home</span><span class="token operator">:</span> <span class="token string">&#39;./home.js&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">// 数组形态</span>
    <span class="token literal-property property">shared</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;react&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;react-dom&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;redux&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;react-redux&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment">// 对象形态</span>
    <span class="token literal-property property">personal</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token keyword">import</span><span class="token operator">:</span> <span class="token string">&#39;./personal.js&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;pages/personal.js&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">dependOn</span><span class="token operator">:</span> <span class="token string">&#39;shared&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">chunkLoading</span><span class="token operator">:</span> <span class="token string">&#39;jsonp&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">asyncChunks</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 函数形态</span>
    <span class="token function-variable function">admin</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token string">&#39;./admin.js&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这其中，<strong>「对象」</strong> 形态的配置逻辑最为复杂，支持如下配置属性：</p>`,4),M=n("li",null,[n("code",null,"import"),s("：声明入口文件，支持路径字符串或路径数组(多入口)；")],-1),T=n("li",null,[n("code",null,"dependOn"),s("：声明该入口的前置依赖 Bundle；")],-1),S=n("li",null,[n("code",null,"runtime"),s("：设置该入口的 Runtime Chunk，若该属性不为空，Webpack 会将该入口的运行时代码抽离成单独的 Bundle；")],-1),z=n("code",null,"filename",-1),X={href:"https://webpack.js.org/configuration/output/#outputfilename",target:"_blank",rel:"noopener noreferrer"},A=n("code",null,"library",-1),D={href:"https://webpack.js.org/configuration/output/#outputlibrary",target:"_blank",rel:"noopener noreferrer"},Y=n("code",null,"publicPath",-1),R={href:"https://webpack.js.org/configuration/output/#outputpublicpath",target:"_blank",rel:"noopener noreferrer"},V=n("code",null,"chunkLoading",-1),F={href:"https://webpack.js.org/configuration/output/#outputchunkloading",target:"_blank",rel:"noopener noreferrer"},H=n("code",null,"false/jsonp/require/import",-1),U=n("code",null,"asyncChunks",-1),I={href:"https://webpack.js.org/configuration/output/#outputasyncchunks",target:"_blank",rel:"noopener noreferrer"},J=n("code",null,"true",-1),$=t(`<p>而这些属性中，<code>dependOn</code> 与 <code>runtime</code> 最为晦涩难懂，有必要构造实例，展开讲解。</p><blockquote><p>使用 <code>entry.dependOn</code> 声明入口依赖：</p></blockquote><p><code>dependOn</code> 属性用于声明前置 Bundle 依赖，从效果上看能够减少重复代码，优化构建产物质量。例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">main</span><span class="token operator">:</span> <span class="token string">&quot;./src/index.js&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token keyword">import</span><span class="token operator">:</span> <span class="token string">&quot;./src/foo.js&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">dependOn</span><span class="token operator">:</span> <span class="token string">&quot;main&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),G={href:"https://github1s.com/Tecvan-fe/webpack-book-samples/blob/main/entry-obj/webpack.config.js",target:"_blank",rel:"noopener noreferrer"},K=t('<p>示例中，<code>foo</code> 入口的 <code>dependOn</code> 属性指向 <code>main</code> 入口，此时 Webpack 认为：客户端在加载 <code>foo</code> 产物之前必然会加载 <code>main</code>，因此可以将重复的模块代码、运行时代码等都放到 <code>main</code> 产物，减少不必要的重复，最终打包结果：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1558bef8b4cf42f5994750000e1b3725~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>左边为 <code>main</code> 产物，包含所有模块、运行时代码，与普通 Bundle 无异；右边为 <code>foo</code> 产物，代码结构非常清爽。作为对比，若不指定 <code>dependOn</code> 属性，则构建结果：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5271c309cfb54c26a3d7d32ec1558001~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>可以看出两边内容并无差异。</p><p><code>dependOn</code> 适用于哪些有明确入口依赖的场景，例如我们构建了一个主框架 Bundle，其中包含了项目基本框架(如 React)，之后还需要为每个页面单独构建 Bundle，这些页面代码也都依赖于主框架代码，此时可用 <code>dependOn</code> 属性优化产物内容，减少代码重复。</p><blockquote><p>使用 <code>entry.runtime</code> 管理运行时代码：</p></blockquote><p>为支持产物代码在各种环境中正常运行，Webpack 会在产物文件中注入一系列运行时代码，用以支撑起整个应用框架。运行时代码的多寡取决于我们用到多少特性，例如：</p><ul><li>需要导入导出文件时，将注入 <code>__webpack_require__.r</code> 等；</li><li>使用异步加载时，将注入 <code>__webpack_require__.l</code> 等；</li><li>等等。</li></ul>',9),Q={href:"https://webpack.js.org/concepts/entry-points/#entrydescription-object",target:"_blank",rel:"noopener noreferrer"},Z=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&quot;development&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">main</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token keyword">import</span><span class="token operator">:</span> <span class="token string">&quot;./src/index.js&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">runtime</span><span class="token operator">:</span> <span class="token string">&quot;common-runtime&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token keyword">import</span><span class="token operator">:</span> <span class="token string">&quot;./src/foo.js&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">runtime</span><span class="token operator">:</span> <span class="token string">&quot;common-runtime&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">clean</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;[name].js&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;dist&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),nn={href:"https://github1s.com/Tecvan-fe/webpack-book-samples/blob/main/entry-runtime/webpack.config.js",target:"_blank",rel:"noopener noreferrer"},sn=t('<p>示例中，<code>main</code> 与 <code>foo</code> 入口均将 <code>runtime</code> 声明为 <code>common-runtime</code>，此时 Webpack 会将这两个入口的运行时代码都抽取出来，放在 <code>common-runtime</code> Bundle 中，效果：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/44051543ac17436abab8dd1844500435~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p><code>entry.runtime</code> 是一种常用的应用性能优化手段，建议大家多做尝试、使用。</p><h2 id="使用-output-声明输出方式" tabindex="-1"><a class="header-anchor" href="#使用-output-声明输出方式" aria-hidden="true">#</a> 使用 <code>output</code> 声明输出方式</h2>',4),an={href:"https://webpack.js.org/configuration/output/",target:"_blank",rel:"noopener noreferrer"},en=n("code",null,"output",-1),tn={href:"https://webpack.js.org/configuration/output/#outputpath",target:"_blank",rel:"noopener noreferrer"},pn={href:"https://webpack.js.org/configuration/output/#outputfilename",target:"_blank",rel:"noopener noreferrer"},on=n("code",null,"[name]/[hash]",-1),cn={href:"https://webpack.js.org/configuration/output/#outputpublicpath",target:"_blank",rel:"noopener noreferrer"},ln={href:"https://webpack.js.org/configuration/output/#outputclean",target:"_blank",rel:"noopener noreferrer"},rn=n("code",null,"path",-1),un={href:"https://webpack.js.org/configuration/output/#outputlibrary",target:"_blank",rel:"noopener noreferrer"},dn={href:"https://webpack.js.org/configuration/output/#outputchunkloading",target:"_blank",rel:"noopener noreferrer"},kn=n("code",null,"false/jsonp/require",-1),mn=n("li",null,"等等。",-1),vn=n("p",null,[s("对于 Web 应用场景，多数情况下我们只需要使用 "),n("code",null,"path/filename/publicPath"),s(" 即可满足需求，其它属性使用率不高，篇幅关系，此处不再赘述。")],-1),bn=n("h2",{id:"使用-target-设置构建目标",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#使用-target-设置构建目标","aria-hidden":"true"},"#"),s(" 使用 "),n("code",null,"target"),s(" 设置构建目标")],-1),gn={href:"https://webpack.js.org/configuration/target/",target:"_blank",rel:"noopener noreferrer"},hn=t("<li><code>node[[X].Y]</code>：编译为 Node 应用，此时将使用 Node 的 <code>require</code> 方法加载其它 Chunk，支持指定 Node 版本，如：<code>node12.13</code>；</li><li><code>async-node[[X].Y]</code>：编译为 Node 应用，与 <code>node</code> 相比主要差异在于：<code>async-node</code> 方式将以异步(Promise)方式加载异步模块(<code>node</code> 时直接使用 <code>require</code>)。支持指定 Node 版本，如：<code>async-node12.13</code>；</li><li><code>nwjs[[X].Y]</code>：编译为 NW.js 应用；</li><li><code>node-webkit[[X].Y]</code>：同 <code>nwjs</code>；</li>",4),yn=n("code",null,"electron[[X].Y]-main",-1),fn={href:"https://www.electronjs.org/zh/docs/latest/tutorial/process-model#%E4%B8%BB%E8%BF%9B%E7%A8%8B",target:"_blank",rel:"noopener noreferrer"},_n=n("code",null,"electron[[X].Y]-renderer",-1),jn={href:"https://www.electronjs.org/zh/docs/latest/tutorial/process-model#%E6%B8%B2%E6%9F%93%E5%99%A8%E8%BF%9B%E7%A8%8B",target:"_blank",rel:"noopener noreferrer"},qn=n("code",null,"electron[[X].Y]-preload",-1),wn={href:"https://www.electronjs.org/zh/docs/latest/tutorial/process-model#preload-%E8%84%9A%E6%9C%AC",target:"_blank",rel:"noopener noreferrer"},xn=n("li",null,[n("code",null,"web"),s("：构建为 Web 应用；")],-1),Wn=n("li",null,[n("code",null,"esX"),s("：构建为特定版本 ECMAScript 兼容的代码，支持 "),n("code",null,"es5"),s("、"),n("code",null,"es2020"),s(" 等；")],-1),Cn=n("code",null,"browserslist",-1),En={href:"https://github.com/browserslist/browserslist#queries",target:"_blank",rel:"noopener noreferrer"},Bn=n("code",null,"browserslist: 'last 2 major versions'",-1),Nn=t(`<p>不同构建目标会根据平台特性打包出略有差异的结果(主要体现在运行时与 NPM Library)，例如对于下面这种使用了异步导入的代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// foo.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// index.js </span>
<span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;./foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用如下配置，同时构建 <code>node</code> 与 <code>web</code> 版本：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> merge <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;webpack-merge&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> baseConfig <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&quot;development&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&quot;web&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">main</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token keyword">import</span><span class="token operator">:</span> <span class="token string">&quot;./src/index.js&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">clean</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;dist&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token function">merge</span><span class="token punctuation">(</span>baseConfig<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&quot;web&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;web-[name].js&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">merge</span><span class="token punctuation">(</span>baseConfig<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&quot;node&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;node-[name].js&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),Ln={href:"https://github1s.com/Tecvan-fe/webpack-book-samples/blob/main/target-node-web/webpack.config.js",target:"_blank",rel:"noopener noreferrer"},On=t('<p>之后，执行构建命令，结果：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/000c2d30c12940018df57f172d33c3b0~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>可以看到左边 <code>web</code> 版本中需要注入使用 JSONP 异步加载 JS 文件的运行时代码；而右边 <code>node</code> 版本则可以直接使用 Node 环境下的 <code>require</code> 实现异步加载，因此不需要注入相关运行时。</p><h2 id="使用-mode-短语" tabindex="-1"><a class="header-anchor" href="#使用-mode-短语" aria-hidden="true">#</a> 使用 <code>mode</code> 短语</h2>',4),Pn={href:"https://github.com/webpack/webpack/blob/main/lib/config/defaults.js",target:"_blank",rel:"noopener noreferrer"},Mn={href:"https://webpack.js.org/configuration/mode/",target:"_blank",rel:"noopener noreferrer"},Tn=t('<ul><li><code>production</code>：默认值，生产模式，使用该值时 Webpack 会自动帮我们开启一系列优化措施：Three-Shaking、Terser 压缩代码、SplitChunk 提起公共代码，通常用于生产环境构建；</li><li><code>development</code>：开发模式，使用该值时 Webpack 会保留更语义化的 Module 与 Chunk 名称，更有助于调试，通常用于开发环境构建；</li><li><code>none</code>：关闭所有内置优化规则。</li></ul><p><code>mode</code> 规则比较简单，一般在开发模式使用 <code>mode = &#39;development&#39;</code>，生产模式使用 <code>mode = &#39;production&#39;</code> 即可。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>至此，关于 Webpack 配置规则的重要知识点就补充完毕了，我们主要需要理解：</p><ul><li>Webpack 配置文件支持导出对象、数组、函数三种形态，其中对象形式最为常用，足够应对多数业务项目场景；数组形式适用于需要为同一份代码同时构建多种产物的场景，如 NPM Library；函数形态适用于需要动态生成配置规则的场景；</li><li>为方便管理配置逻辑，我们通常需要引入一些环境治理策略，目前业界比较常用单独配置文件管理单个构建环境；</li><li><code>entry</code> 配置项支持字符串、对象、函数、数组等方式，其中对象形式下的 <code>dependOn/runtime</code> 规则比较复杂，建议深入学习；</li><li><code>output</code> 用于声明构建产物的输出规则；</li><li><code>target</code> 用于设置构建目标，不同目标会导致产物内容有轻微差异，支持 Node、Web、Electron、WebWorker 等场景；</li><li><code>mode</code> 构建模式，支持 <code>development/production/none</code> 三种值。</li></ul><p>结合前面若干应用介绍的章节，相信已经帮你搭建起一套体系化的应用方法论，已经足以应付大多数业务场景。后续章节我们将转入更高阶的内容，包括：如何开发 Loader、Plugin；如何优化构建与应用性能；Webpack 构建原理等。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题" aria-hidden="true">#</a> 思考题</h2><p>假设在配置文件中需要通过远程接口动态获取配置片段，如何实现比较优雅？请试试。</p>',8);function Sn(zn,Xn){const a=o("ExternalLinkIcon");return c(),l("div",null,[i,n("p",null,[s("使用数组方式时，我们还可以借助 "),n("a",u,[s("webpack-merge"),e(a)]),s(" 工具简化配置逻辑，如：")]),d,n("ul",null,[n("li",null,[k,s("：命令行 "),n("a",m,[s("Flags"),e(a)]),s(" 参数，支持 "),v,s("/"),b,s("/"),g,s("/"),h,s(" 等。")])]),y,n("p",null,[s("这种模式下通常会将部分通用配置放在基础文件中，如上例的 "),f,s("，之后在其它文件中引入该模块并使用 "),n("a",_,[s("webpack-merge"),e(a)]),s(" 合并配置对象。")]),n("p",null,[j,s(" 是一个专为 Webpack 设计的数据合并("),q,s(")的工具，功能逻辑与 Lodash 的 "),n("a",w,[s("merge"),e(a)]),s(" 函数、 "),n("a",x,[s("Object.assign"),e(a)]),s(" 等相似，但支持更多特性，如：")]),W,n("p",null,[s("接下来，我们用一个 "),n("a",C,[s("示例"),e(a)]),s(" 简单串一下与 "),E,s(" 实现环境管理的过程。首先我们需要将通用配置放在公共文件中，如：")]),B,n("p",null,[s("Webpack 的基本运行逻辑是从 "),N,s(" 开始，递归加载、构建所有项目资源，所以几乎所有项目都必须使用 "),n("a",L,[s("entry"),e(a)]),s(" 配置项明确声明项目入口。"),O,s(" 配置规则比较复杂，支持如下形态：")]),P,n("ul",null,[M,T,S,n("li",null,[z,s("：效果与 "),n("a",X,[s("output.filename"),e(a)]),s(" 类同，用于声明该模块构建产物路径；")]),n("li",null,[A,s("：声明该入口的 "),n("a",D,[s("output.library"),e(a)]),s(" 配置，一般在构建 NPM Library 时使用；")]),n("li",null,[Y,s("：效果与 "),n("a",R,[s("output.publicPath"),e(a)]),s(" 相同，用于声明该入口文件的发布 URL；")]),n("li",null,[V,s("：效果与 "),n("a",F,[s("output.chunkLoading"),e(a)]),s(" 相同，用于声明异步模块加载的技术方案，支持 "),H,s(" 等值；")]),n("li",null,[U,s("：效果与 "),n("a",I,[s("output.asyncChunks"),e(a)]),s(" 相同，用于声明是否支持异步模块加载，默认值为 "),J,s("。")])]),$,n("blockquote",null,[n("p",null,[s("提示：示例代码已上传到 "),n("a",G,[s("小册仓库"),e(a)]),s("。")])]),K,n("p",null,[s("不要小看运行时代码量，极端情况下甚至有可能超过业务代码总量！为此，必要时我们可以尝试使用 "),n("a",Q,[s("runtime"),e(a)]),s(" 配置将运行时抽离为独立 Bundle，例如：")]),Z,n("blockquote",null,[n("p",null,[s("提示：示例代码已上传到 "),n("a",nn,[s("小册仓库"),e(a)]),s("。")])]),sn,n("p",null,[s("Webpack 的 "),n("a",an,[s("output"),e(a)]),s(" 配置项用于声明：如何输出构建结果，比如产物放在什么地方、文件名是什么、文件编码等。"),en,s(" 支持许多子配置项，包括：")]),n("ul",null,[n("li",null,[n("a",tn,[s("output.path"),e(a)]),s("：声明产物放在什么文件目录下；")]),n("li",null,[n("a",pn,[s("output.filename"),e(a)]),s("：声明产物文件名规则，支持 "),on,s(" 等占位符；")]),n("li",null,[n("a",cn,[s("output.publicPath"),e(a)]),s("：文件发布路径，在 Web 应用中使用率较高；")]),n("li",null,[n("a",ln,[s("output.clean"),e(a)]),s("：是否自动清除 "),rn,s(" 目录下的内容，调试时特别好用；")]),n("li",null,[n("a",un,[s("output.library"),e(a)]),s("：NPM Library 形态下的一些产物特性，例如：Library 名称、模块化(UMD/CMD 等)规范；")]),n("li",null,[n("a",dn,[s("output.chunkLoading"),e(a)]),s("：声明加载异步模块的技术方案，支持 "),kn,s(" 等方式。")]),mn]),vn,bn,n("p",null,[s("虽然多数时候 Webpack 都被用于打包 Web 应用，但实际上 Webpack 还支持构建 Node、Electron、NW.js、WebWorker 等应用形态，这一特性主要通过 "),n("a",gn,[s("target"),e(a)]),s(" 配置控制，支持如下数值：")]),n("ul",null,[hn,n("li",null,[yn,s("：构建为 Electron "),n("a",fn,[s("主进程"),e(a)]),s("；")]),n("li",null,[_n,s("：构建为 Electron "),n("a",jn,[s("渲染进程"),e(a)]),s("；")]),n("li",null,[qn,s("：构建为 Electron Preload "),n("a",wn,[s("脚本"),e(a)]),s("；")]),xn,Wn,n("li",null,[Cn,s("：根据浏览器平台与版本，推断需要兼容的 ES 特性，数据来源于 "),n("a",En,[s("Browserslist"),e(a)]),s(" 项目，用法如："),Bn,s("。")])]),Nn,n("blockquote",null,[n("p",null,[s("提示：相关示例已上传到小册"),n("a",Ln,[s("仓库"),e(a)]),s("，强烈建议你拉下来，对比两种目标下构建产物的差异。")])]),On,n("p",null,[s("Webpack "),n("a",Pn,[s("内置"),e(a)]),s(" 了许多构建优化策略，我们可以通过 "),n("a",Mn,[s("mode"),e(a)]),s(" 配置项切换默认优化规则，支持如下值：")]),Tn])}const Dn=p(r,[["render",Sn],["__file","di11zhang—shenrulijieWebpackhexinpeizhijiegou.html.vue"]]);export{Dn as default};
