import{_ as e,r as o,o as c,c as l,b as n,d as s,e as t,a as p}from"./app-48690364.js";const i={},u=n("p",null,"Webpack 之所以能够应对 Web 场景下极度复杂、多样的构建需求，关键就在于其健壮、扩展性极强的插件架构，而插件架构的精髓又在于其灵活多变的 Hook 体系，可以说，只有真正掌握 Hook 底层设计与实现逻辑，深入理解不同 Hook 的运行特性与用法，才能灵活处理各种问题，更快更好地编写出 Webpack 插件。",-1),k=n("p",null,"本文将聚焦在 Webpack Hook 底层的 Tapable 框架，详细枚举了 Tapable 提供的钩子及各类型钩子的特点、运行逻辑、实现原理，并进一步讨论 Tapable 框架在 Webpack 的作用，进而揭示 Webpack 插件架构的核心逻辑。阅读本文，你将：",-1),d=n("ul",null,[n("li",null,"深入了解 Hook 类型，以及不同类型的特点、运行特性；"),n("li",null,"理解如何识别 Webpack 特定钩子类型，正确调用处理。")],-1),r=n("h2",{id:"tapable-全解析",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#tapable-全解析","aria-hidden":"true"},"#"),s(" Tapable 全解析")],-1),v=n("p",null,"网上不少资料将 Webpack 的插件架构归类为“事件/订阅”模式，我认为这种归纳有失偏颇。订阅模式是一种松耦合架构，发布器只是在特定时机发布事件消息，订阅者并不或者很少与事件直接发生交互，举例来说，我们平常在使用 HTML 事件的时候很多时候只是在这个时机触发业务逻辑，很少调用上下文操作。",-1),m={href:"https://github.com/webpack/tapable",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/webpack/tapable",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"订阅/发布",-1),g=p(`<ul><li>有些场景需要支持将前一个处理器的结果传入下一个回调处理器；</li><li>有些场景需要支持异步并行调用这些回调处理器。</li></ul><p>先简单看看 Tapable 的用法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> SyncHook <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;tapable&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 1. 创建钩子实例</span>
<span class="token keyword">const</span> sleep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SyncHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 2. 调用订阅接口注册回调</span>
sleep<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;callback A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 3. 调用发布接口触发回调</span>
<span class="token function">sleep</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 运行结果：</span>
<span class="token comment">// callback A</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 Tapable 时通常需要经历三个步骤：</p><ul><li>创建钩子实例，如上例第 4 行；</li><li>调用订阅接口注册回调，包括：<code>tap</code>、<code>tapAsync</code>、<code>tapPromise</code>，如上例第 7 行；</li><li>调用发布接口触发回调，包括：<code>call</code>、<code>callAsync</code>、<code>promise</code>，如上例第 12 行。</li></ul><p>Webpack 内部的钩子大体上都遵循上面三个步骤，只是在某些钩子中还可以使用异步风格的 <code>tapAsync/callAsync</code>、promise 风格 <code>tapPromise/promise</code>，具体使用哪一类函数与钩子类型有关。</p><h2 id="hook-类型汇总" tabindex="-1"><a class="header-anchor" href="#hook-类型汇总" aria-hidden="true">#</a> Hook 类型汇总</h2><p>Tabable 提供如下类型的钩子：</p><table data-ace-table-col-widths="231;180;526;" class="ace-table author-6857319138482798593"><colgroup><col width="231"><col width="180"><col width="526"></colgroup><tbody><tr><td style="border:1px solid rgb(222, 224, 227);"><div style="white-space:pre;" data-line-index="0" data-zone-id="xr1bcem81hueopshd3562hebk3nc1agp71txc14cq5p9uz8ppmklmekzrbekueyfiukp18">名称</div></td><td style="border:1px solid rgb(222, 224, 227);"><div style="white-space:pre;" data-line-index="0" data-zone-id="xr1bcem81hueopshd3562hebk3nc1agp71txc1qhtovo04njlapok94mopi4cu4ro6e645">简介</div></td><td style="border:1px solid rgb(222, 224, 227);"><div style="white-space:pre;" data-line-index="0" data-zone-id="xr1bcem81hueopshd3562hebk3nc1agp71txc10bo0cuj91aj9hq75tp6ll4c9ot1vmegq">统计</div></td></tr><tr><td style="border:1px solid rgb(222, 224, 227);"><div style="white-space:pre;" data-line-index="0" data-zone-id="xr1w572whktjb8jifh8qjw4gg0scglciladxc14cq5p9uz8ppmklmekzrbekueyfiukp18"><code style="font-family:SourceCodeProMac;border:1px solid #dee0e3;background-color:#f5f6f7;border-radius:4px;margin-left:2px;margin-right:2px;">SyncHook</code></div></td><td style="border:1px solid rgb(222, 224, 227);"><div style="white-space:pre;" data-line-index="0" data-zone-id="xr1w572whktjb8jifh8qjw4gg0scglciladxc1qhtovo04njlapok94mopi4cu4ro6e645">同步钩子</div></td><td style="border:1px solid rgb(222, 224, 227);"><div style="white-space:pre;" data-line-index="0" data-zone-id="xr1w572whktjb8jifh8qjw4gg0scglciladxc10bo0cuj91aj9hq75tp6ll4c9ot1vmegq">Webpack 共出现 71 次，如 <code style="font-family:SourceCodeProMac;border:1px solid #dee0e3;background-color:#f5f6f7;border-radius:4px;margin-left:2px;margin-right:2px;">Compiler.hooks.compilation</code></div></td></tr><tr><td style="border:1px solid rgb(222, 224, 227);"><div style="white-space:pre;" data-line-index="0" data-zone-id="xr1fqo2khidh6lefyohph22htdcsc8fku8vxc14cq5p9uz8ppmklmekzrbekueyfiukp18"><code style="font-family:SourceCodeProMac;border:1px solid #dee0e3;background-color:#f5f6f7;border-radius:4px;margin-left:2px;margin-right:2px;">SyncBailHook</code></div></td><td style="border:1px solid rgb(222, 224, 227);"><div style="white-space:pre;" data-line-index="0" data-zone-id="xr1fqo2khidh6lefyohph22htdcsc8fku8vxc1qhtovo04njlapok94mopi4cu4ro6e645">同步熔断钩子</div></td><td style="border:1px solid rgb(222, 224, 227);"><div style="white-space:pre;" data-line-index="0" data-zone-id="xr1fqo2khidh6lefyohph22htdcsc8fku8vxc10bo0cuj91aj9hq75tp6ll4c9ot1vmegq">Webpack 共出现 66 次，如 <code style="font-family:SourceCodeProMac;border:1px solid #dee0e3;background-color:#f5f6f7;border-radius:4px;margin-left:2px;margin-right:2px;">Compiler.hooks.shouldEmit</code></div></td></tr><tr><td style="border:1px solid rgb(222, 224, 227);"><div style="white-space:pre;" data-line-index="0" data-zone-id="xr17yaadu4b084z2jlfo2aas7298khe2m71xc14cq5p9uz8ppmklmekzrbekueyfiukp18"><code style="font-family:SourceCodeProMac;border:1px solid #dee0e3;background-color:#f5f6f7;border-radius:4px;margin-left:2px;margin-right:2px;">SyncWaterfallHook</code></div></td><td style="border:1px solid rgb(222, 224, 227);"><div style="white-space:pre;" data-line-index="0" data-zone-id="xr17yaadu4b084z2jlfo2aas7298khe2m71xc1qhtovo04njlapok94mopi4cu4ro6e645">同步瀑布流钩子</div></td><td style="border:1px solid rgb(222, 224, 227);"><div style="white-space:pre;" data-line-index="0" data-zone-id="xr17yaadu4b084z2jlfo2aas7298khe2m71xc10bo0cuj91aj9hq75tp6ll4c9ot1vmegq">Webpack 共出现 37 次，如 <code style="font-family:SourceCodeProMac;border:1px solid #dee0e3;background-color:#f5f6f7;border-radius:4px;margin-left:2px;margin-right:2px;">Compilation.hooks.assetPath</code></div></td></tr><tr><td style="border:1px solid rgb(222, 224, 227);"><div style="white-space:pre;" data-line-index="0" data-zone-id="xr1alqztjrgvrhaw70j93bkdgf8bkw3kgnkxc14cq5p9uz8ppmklmekzrbekueyfiukp18"><code style="font-family:SourceCodeProMac;border:1px solid #dee0e3;background-color:#f5f6f7;border-radius:4px;margin-left:2px;margin-right:2px;">SyncLoopHook</code></div></td><td style="border:1px solid rgb(222, 224, 227);"><div style="white-space:pre;" data-line-index="0" data-zone-id="xr1alqztjrgvrhaw70j93bkdgf8bkw3kgnkxc1qhtovo04njlapok94mopi4cu4ro6e645">同步循环钩子</div></td><td style="border:1px solid rgb(222, 224, 227);"><div style="white-space:pre;" data-line-index="0" data-zone-id="xr1alqztjrgvrhaw70j93bkdgf8bkw3kgnkxc10bo0cuj91aj9hq75tp6ll4c9ot1vmegq">Webpack 中未使用</div></td></tr><tr><td style="border:1px solid rgb(222, 224, 227);"><div style="white-space:pre;" data-line-index="0" data-zone-id="xr1qqdbchebq1sc4vv0kqlbeanv2nd8nwqqxc14cq5p9uz8ppmklmekzrbekueyfiukp18"><code style="font-family:SourceCodeProMac;border:1px solid #dee0e3;background-color:#f5f6f7;border-radius:4px;margin-left:2px;margin-right:2px;">AsyncParallelHook</code></div></td><td style="border:1px solid rgb(222, 224, 227);"><div style="white-space:pre;" data-line-index="0" data-zone-id="xr1qqdbchebq1sc4vv0kqlbeanv2nd8nwqqxc1qhtovo04njlapok94mopi4cu4ro6e645">异步并行钩子</div></td><td style="border:1px solid rgb(222, 224, 227);"><div style="white-space:pre;" data-line-index="0" data-zone-id="xr1qqdbchebq1sc4vv0kqlbeanv2nd8nwqqxc10bo0cuj91aj9hq75tp6ll4c9ot1vmegq">Webpack 仅出现 1 次：<code style="font-family:SourceCodeProMac;border:1px solid #dee0e3;background-color:#f5f6f7;border-radius:4px;margin-left:2px;margin-right:2px;">Compiler.hooks.make</code></div></td></tr><tr><td style="border:1px solid rgb(222, 224, 227);"><div style="white-space:pre;" data-line-index="0" data-zone-id="xr19uuej2bj88tdaejgm0u0f4du7ufpdji2xc14cq5p9uz8ppmklmekzrbekueyfiukp18"><code style="font-family:SourceCodeProMac;border:1px solid #dee0e3;background-color:#f5f6f7;border-radius:4px;margin-left:2px;margin-right:2px;">AsyncParallelBailHook</code></div></td><td style="border:1px solid rgb(222, 224, 227);"><div style="white-space:pre;" data-line-index="0" data-zone-id="xr19uuej2bj88tdaejgm0u0f4du7ufpdji2xc1qhtovo04njlapok94mopi4cu4ro6e645">异步并行熔断钩子</div></td><td style="border:1px solid rgb(222, 224, 227);"><div style="white-space:pre;" data-line-index="0" data-zone-id="xr19uuej2bj88tdaejgm0u0f4du7ufpdji2xc10bo0cuj91aj9hq75tp6ll4c9ot1vmegq">Webpack 中未使用</div></td></tr><tr><td style="border:1px solid rgb(222, 224, 227);"><div style="white-space:pre;" data-line-index="0" data-zone-id="xr1q50uu3lru8bn8gl1hny6tcmbfe5zjc1qxc14cq5p9uz8ppmklmekzrbekueyfiukp18"><code style="font-family:SourceCodeProMac;border:1px solid #dee0e3;background-color:#f5f6f7;border-radius:4px;margin-left:2px;margin-right:2px;">AsyncSeriesHook</code></div></td><td style="border:1px solid rgb(222, 224, 227);"><div style="white-space:pre;" data-line-index="0" data-zone-id="xr1q50uu3lru8bn8gl1hny6tcmbfe5zjc1qxc1qhtovo04njlapok94mopi4cu4ro6e645">异步串行钩子</div></td><td style="border:1px solid rgb(222, 224, 227);"><div style="white-space:pre;" data-line-index="0" data-zone-id="xr1q50uu3lru8bn8gl1hny6tcmbfe5zjc1qxc10bo0cuj91aj9hq75tp6ll4c9ot1vmegq">Webpack 共出现 16 次，如 <code style="font-family:SourceCodeProMac;border:1px solid #dee0e3;background-color:#f5f6f7;border-radius:4px;margin-left:2px;margin-right:2px;">Compiler.hooks.done</code></div></td></tr><tr><td style="border:1px solid rgb(222, 224, 227);"><div style="white-space:pre;" data-line-index="0" data-zone-id="xr1294lhk7hulw9oo9uot4pywnyzo5aici7xc14cq5p9uz8ppmklmekzrbekueyfiukp18"><code style="font-family:SourceCodeProMac;border:1px solid #dee0e3;background-color:#f5f6f7;border-radius:4px;margin-left:2px;margin-right:2px;">AsyncSeriesBailHook</code></div></td><td style="border:1px solid rgb(222, 224, 227);"><div style="white-space:pre;" data-line-index="0" data-zone-id="xr1294lhk7hulw9oo9uot4pywnyzo5aici7xc1qhtovo04njlapok94mopi4cu4ro6e645">异步串行熔断钩子</div></td><td style="border:1px solid rgb(222, 224, 227);"><div style="white-space:pre;" data-line-index="0" data-zone-id="xr1294lhk7hulw9oo9uot4pywnyzo5aici7xc10bo0cuj91aj9hq75tp6ll4c9ot1vmegq">Webpack 中未使用</div></td></tr><tr><td style="border:1px solid rgb(222, 224, 227);"><div style="white-space:pre;" data-line-index="0" data-zone-id="xr1ksaliremb7gg7jvwt9lt543d3t2vis6ixc14cq5p9uz8ppmklmekzrbekueyfiukp18"><code style="font-family:SourceCodeProMac;border:1px solid #dee0e3;background-color:#f5f6f7;border-radius:4px;margin-left:2px;margin-right:2px;">AsyncSeriesLoopHook</code></div></td><td style="border:1px solid rgb(222, 224, 227);"><div style="white-space:pre;" data-line-index="0" data-zone-id="xr1ksaliremb7gg7jvwt9lt543d3t2vis6ixc1qhtovo04njlapok94mopi4cu4ro6e645">异步串行循环钩子</div></td><td style="border:1px solid rgb(222, 224, 227);"><div style="white-space:pre;" data-line-index="0" data-zone-id="xr1ksaliremb7gg7jvwt9lt543d3t2vis6ixc10bo0cuj91aj9hq75tp6ll4c9ot1vmegq">Webpack 中未使用</div></td></tr><tr><td style="border:1px solid rgb(222, 224, 227);"><div style="white-space:pre;" data-line-index="0" data-zone-id="xr1lalt6m4dmi308e6kwv044oewcp8njeh7xc14cq5p9uz8ppmklmekzrbekueyfiukp18"><code style="font-family:SourceCodeProMac;border:1px solid #dee0e3;background-color:#f5f6f7;border-radius:4px;margin-left:2px;margin-right:2px;">AsyncSeriesWaterfallHook</code></div></td><td style="border:1px solid rgb(222, 224, 227);"><div style="white-space:pre;" data-line-index="0" data-zone-id="xr1lalt6m4dmi308e6kwv044oewcp8njeh7xc1qhtovo04njlapok94mopi4cu4ro6e645">异步串行瀑布流钩子</div></td><td style="border:1px solid rgb(222, 224, 227);"><div style="white-space:pre;" data-line-index="0" data-zone-id="xr1lalt6m4dmi308e6kwv044oewcp8njeh7xc10bo0cuj91aj9hq75tp6ll4c9ot1vmegq">Webpack 共出现 5 次，如 <code style="font-family:SourceCodeProMac;border:1px solid #dee0e3;background-color:#f5f6f7;border-radius:4px;margin-left:2px;margin-right:2px;">NormalModuleFactory.hooks.beforeResolve</code></div></td></tr></tbody></table><p>类型虽多，但整体遵循两种分类规则：</p><ul><li>按回调逻辑，分为： <ul><li>基本类型，名称不带 <code>Waterfall/Bail/Loop</code> 关键字：与通常 <code>订阅/回调</code> 模式相似，按钩子注册顺序，逐次调用回调；</li><li><code>waterfall</code> 类型：前一个回调的返回值会被带入下一个回调；</li><li><code>bail</code> 类型：逐次调用回调，若有任何一个回调返回非 <code>undefined</code> 值，则终止后续调用；</li><li><code>loop</code> 类型：逐次、循环调用，直到所有回调函数都返回 <code>undefined</code> 。</li></ul></li><li>按执行回调的并行方式，分为： <ul><li><code>sync</code> ：同步执行，启动后会按次序逐个执行回调，支持 <code>call/tap</code> 调用语句；</li><li><code>async</code> ：异步执行，支持传入 callback 或 promise 风格的异步回调函数，支持 <code>callAsync/tapAsync</code> 、<code>promise/tapPromise</code> 两种调用语句。</li></ul></li></ul><p>所有钩子都可以按名称套进这两条规则里面，对插件开发者来说不同类型的钩子会直接影响到回调函数的写法，以及插件与其他插件的互通关系，但是有一些基本能力、概念是通用的：<code>tap/call</code>、<code>intercept</code>、<code>context</code>、动态编译等。</p><p>接下来展开详细介绍每种钩子的特点与执行逻辑。</p><h2 id="synchook-钩子" tabindex="-1"><a class="header-anchor" href="#synchook-钩子" aria-hidden="true">#</a> <code>SyncHook</code> 钩子</h2><p><code>SyncHook</code> 算的上是简单的钩子了，触发后会按照注册的顺序逐个调用回调，且不关心这些回调的返回值，底层逻辑大致如下述代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">syncCall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> callbacks <span class="token operator">=</span> <span class="token punctuation">[</span>fn1<span class="token punctuation">,</span> fn2<span class="token punctuation">,</span> fn3<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> callbacks<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> cb <span class="token operator">=</span> callbacks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>举个例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> SyncHook <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;tapable&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Somebody</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>hooks <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">sleep</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">SyncHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//   触发回调</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Somebody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 注册回调</span>
person<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>sleep<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;callback A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
person<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>sleep<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;callback B&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
person<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>sleep<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;callback C&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

person<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 输出结果：</span>
<span class="token comment">// callback A</span>
<span class="token comment">// callback B</span>
<span class="token comment">// callback C</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例中，<code>Somebody</code> 初始化时声明了一个 <code>sleep</code> 钩子，并在后续调用 <code>sleep.tap</code> 函数连续注册三次回调，在调用 <code>person.sleep()</code> 语句触发 <code>sleep.call</code> 之后，tapable 会按照注册的先后按序执行三个回调。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b92ebab230e746caaa7a0ae4b90ae581~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>上述示例中，触发回调时用到了钩子的 <code>call</code> 函数，我们也可以选择异步风格的 <code>callAsync</code> ，选用 <code>call</code> 或 <code>callAsync</code> 并不会影响回调的执行逻辑：按注册顺序依次执行 + 忽略回调执行结果，两者唯一的区别是 <code>callAsync</code> 需要传入 <code>callback</code> 函数，用于处理回调队列可能抛出的异常：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// call 风格</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 错误处理逻辑</span>
<span class="token punctuation">}</span>
<span class="token comment">// callAsync 风格</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>sleep<span class="token punctuation">.</span><span class="token function">callAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 错误处理逻辑</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于调用方式不会 Hook 本身的规则，所以对使用者来说，无需关心底层到底用的是 <code>call</code> 还是 <code>callAsync</code>，上面的例子只需要做简单的修改就可以适配 <code>callAsync</code> 场景：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> SyncHook <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;tapable&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Somebody</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>hooks <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">sleep</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">SyncHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//   触发回调</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>sleep<span class="token punctuation">.</span><span class="token function">callAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">interrupt with &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>err<span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Somebody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 注册回调</span>
person<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>sleep<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;callback A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;我就是要报错&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 第一个回调出错后，后续回调不会执行</span>
person<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>sleep<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;callback B&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

person<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 输出结果：</span>
<span class="token comment">// callback A</span>
<span class="token comment">// interrupt with &quot;我就是要报错&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="syncbailhook-钩子" tabindex="-1"><a class="header-anchor" href="#syncbailhook-钩子" aria-hidden="true">#</a> <code>SyncBailHook</code> 钩子</h2><p><code>bail</code> 单词有熔断的意思，而 <code>bail</code> 类型钩子的特点是在回调队列中，若任一回调返回了非 <code>undefined</code> 的值，则中断后续处理，直接返回该值，用一段伪代码来表示：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">bailCall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> callbacks <span class="token operator">=</span> <span class="token punctuation">[</span>fn1<span class="token punctuation">,</span> fn2<span class="token punctuation">,</span> fn3<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> callbacks<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> cb <span class="token operator">=</span> callbacks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">cb</span><span class="token punctuation">(</span>lastResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 如果有任意一个回调返回结果，则停止调用剩下的回调</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 熔断</span>
      <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>SyncBailHook</code> 的调用顺序与规则都跟 <code>SyncHook</code> 相似，主要区别一是 <code>SyncBailHook</code> 增加了熔断逻辑，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> SyncBailHook <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;tapable&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Somebody</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>hooks <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">sleep</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">SyncBailHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Somebody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 注册回调</span>
person<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>sleep<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;callback A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 熔断点</span>
  <span class="token comment">// 返回非 undefined 的任意值都会中断回调队列</span>
  <span class="token keyword">return</span> <span class="token string">&#39;返回值：tecvan&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
person<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>sleep<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;callback B&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 运行结果：</span>
<span class="token comment">// callback A</span>
<span class="token comment">// 返回值：tecvan</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其次，相比于 <code>SyncHook</code> ，<code>SyncBailHook</code> 运行结束后，会将熔断值返回给call函数，例如上例第20行， <code>callback A</code> 返回的 <code>返回值：tecvan</code> 会成为 <code>this.hooks.sleep.call</code> 的调用结果。</p><blockquote><p>在 Webpack 中被如何使用</p></blockquote><p><code>SyncBailHook</code> 通常用在发布者需要关心订阅回调运行结果的场景， Webpack 内部有接近 100 个地方用到这种钩子，举个例子： <code>compiler.hooks.shouldEmit</code>，对应的 call 语句：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Compiler</span> <span class="token punctuation">{</span>
  <span class="token function">run</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//   ...</span>

    <span class="token keyword">const</span> <span class="token function-variable function">onCompiled</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> compilation</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">.</span><span class="token function">shouldEmit</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>compilation<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此处 Webpack 会根据 <code>shouldEmit</code> 钩子的运行结果确定是否执行后续的操作，其它场景也有相似逻辑，如：</p><ul><li><code>NormalModuleFactory.hooks.createModule</code> ：预期返回新建的 Module 对象；</li><li><code>Compilation.hooks.needAdditionalSeal</code> ：预期返回 bool 值，判定是否进入 <code>unseal</code> 状态；</li><li><code>Compilation.hooks.optimizeModules</code> ：预期返回 bool 值，用于判定是否继续执行优化操作。</li></ul><h2 id="syncwaterfallhook-钩子" tabindex="-1"><a class="header-anchor" href="#syncwaterfallhook-钩子" aria-hidden="true">#</a> <code>SyncWaterfallHook</code> 钩子</h2><p><code>waterfall</code> 钩子的执行逻辑跟 lodash 的 <code>flow</code> 函数有点像，大致上就是将前一个函数的返回值作为参数传入下一个函数，逻辑如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">waterfallCall</span><span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> callbacks <span class="token operator">=</span> <span class="token punctuation">[</span>fn1<span class="token punctuation">,</span> fn2<span class="token punctuation">,</span> fn3<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> lastResult <span class="token operator">=</span> arg<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> callbacks<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> cb <span class="token operator">=</span> callbacks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// 上次执行结果作为参数传入下一个函数</span>
    lastResult <span class="token operator">=</span> <span class="token function">cb</span><span class="token punctuation">(</span>lastResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> lastResult<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>理解上述逻辑后，<code>SyncWaterfallHook</code> 的特点也就很明确了：</p><ol><li>上一个函数的结果会被带入下一个函数；</li><li>最后一个回调的结果会作为 <code>call</code> 调用的结果返回。</li></ol><p>例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> SyncWaterfallHook <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;tapable&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Somebody</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>hooks <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">sleep</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">SyncWaterfallHook</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Somebody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 注册回调</span>
person<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>sleep<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">call 调用传入： </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>arg<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token string">&quot;tecvan&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

person<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>sleep<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">A 回调返回： </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>arg<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;最终结果：&quot;</span> <span class="token operator">+</span> person<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 运行结果：</span>
<span class="token comment">// call 调用传入： hello</span>
<span class="token comment">// A 回调返回： tecvan</span>
<span class="token comment">// 最终结果：world</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例中，<code>sleep</code> 钩子为 <code>SyncWaterfallHook</code> 类型，之后注册了两个回调，从处理结果可以看到，第一个回调收到的 <code>arg = hello</code> ，即第10行 call 调用时传入的参数；第二个回调收到的是第一个回调返回的结果 <code>tecvan</code>；之后 <code>call</code> 调用返回的是第二个回调的结果 <code>world</code> 。</p><p>使用时，<code>SyncWaterfallHook</code> 钩子有一些注意事项：</p><ul><li>初始化时必须提供参数，例如上例 <code>new SyncWaterfallHook([&quot;msg&quot;])</code> 构造函数中，必须传入参数 <code>[&quot;msg&quot;]</code> ，用于动态编译 <code>call</code> 的参数依赖，后面我们会讲到 <strong>动态编译</strong> 的细节；</li><li>发布调用 <code>call</code> 时，需要传入初始参数。</li></ul><blockquote><p>在 Webpack 中被如何使用</p></blockquote><p><code>SyncWaterfallHook</code> 在 Webpack 中总共出现了 50+次，其中比较有代表性的例子是 <code>NormalModuleFactory.hooks.factory</code> ，在 Webpack 内部实现中，会在这个钩子内根据资源类型 <code>resolve</code> 出对应的 <code>module</code> 对象：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">NormalModuleFactory</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>hooks <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">factory</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">SyncWaterfallHook</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;filename&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;data&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>factory<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">&quot;NormalModuleFactory&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter">result<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> resolver <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">.</span><span class="token function">resolver</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>resolver<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token function">resolver</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// direct module</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> data<span class="token punctuation">.</span>source <span class="token operator">===</span> <span class="token string">&quot;function&quot;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// ...</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">create</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//   ...</span>
    <span class="token keyword">const</span> factory <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">.</span><span class="token function">factory</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大致上就是在创建模块，通过 <code>factory</code> 钩子将 <code>module</code> 的创建过程外包出去，在钩子回调队列中依据 <code>waterfall</code> 的特性逐步推断出最终的 <code>module</code> 对象。</p><h2 id="syncloophook-钩子" tabindex="-1"><a class="header-anchor" href="#syncloophook-钩子" aria-hidden="true">#</a> <code>SyncLoopHook</code> 钩子</h2><p><code>loop</code> 型钩子的特点是循环执行，直到所有回调都返回 <code>undefined</code> ，不过这里循环的维度是单个回调函数，例如有回调队列 <code>[fn1, fn2, fn3]</code> ，<code>loop</code> 钩子先执行 <code>fn1</code> ，如果此时 <code>fn1</code> 返回了非 <code>undefined</code> 值，则继续执行 <code>fn1</code> 直到返回 <code>undefined</code> 后，才向前推进执行 <code>fn2</code> 。伪代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">loopCall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> callbacks <span class="token operator">=</span> <span class="token punctuation">[</span>fn1<span class="token punctuation">,</span> fn2<span class="token punctuation">,</span> fn3<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> callbacks<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> cb <span class="token operator">=</span> callbacks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// 重复执行</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于 <code>loop</code> 钩子循环执行的特性，使用时务必十分注意，避免陷入死循环。示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> SyncLoopHook <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;tapable&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Somebody</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>hooks <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">sleep</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">SyncLoopHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Somebody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> times <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token comment">// 注册回调</span>
person<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>sleep<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token operator">++</span>times<span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">第 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>times<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 次执行回调A</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>times <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> times<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

person<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>sleep<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">执行回调B</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

person<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 运行结果</span>
<span class="token comment">// 第 1 次执行回调A</span>
<span class="token comment">// 第 2 次执行回调A</span>
<span class="token comment">// 第 3 次执行回调A</span>
<span class="token comment">// 第 4 次执行回调A</span>
<span class="token comment">// 执行回调B</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到示例中一直在执行回调 A，直到满足判定条件 <code>times &gt;= 4</code> ，A 返回 <code>undefined</code> 后，才开始执行回调B。</p><p>虽然 Tapable 提供了 <code>SyncLoopHook</code> 钩子，但 Webpack 源码中并没有使用到，所以大家理解用法就行，不用深究。</p><h2 id="asyncserieshook-钩子" tabindex="-1"><a class="header-anchor" href="#asyncserieshook-钩子" aria-hidden="true">#</a> <code>AsyncSeriesHook</code> 钩子</h2><p>前面这些以 <code>Sync</code> 开头的都是同步风格的钩子，执行逻辑相对简单，但不支持异步回调，所以 Tapable 还提供了一系列 <code>Async</code> 开头的异步钩子，支持在回调函数中执行异步操作，执行逻辑比较复杂。</p><p>例如 <code>AsyncSeriesHook</code>，它有这样一些特点：</p><ul><li>支持异步回调，可以在回调函数中写 <code>callback</code> 或 <code>promise</code> 风格的异步操作；</li><li>回调队列依次执行，前一个执行结束后，才会开始执行下一个；</li><li>与 <code>SyncHook</code> 一样，不关心回调的执行结果。</li></ul><p>用一段伪代码来表示：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">asyncSeriesCall</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> callbacks <span class="token operator">=</span> <span class="token punctuation">[</span>fn1<span class="token punctuation">,</span> fn2<span class="token punctuation">,</span> fn3<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">//   执行回调 1</span>
  <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err1</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">callback</span><span class="token punctuation">(</span>err1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">//   执行回调 2</span>
      <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>err2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">callback</span><span class="token punctuation">(</span>err2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token comment">//   执行回调 3</span>
          <span class="token function">fn3</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err3</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>err3<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token function">callback</span><span class="token punctuation">(</span>err2<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先来看一个 <code>callback</code> 风格的示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> AsyncSeriesHook <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;tapable&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> hook <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AsyncSeriesHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 注册回调</span>
hook<span class="token punctuation">.</span><span class="token function">tapAsync</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;callback A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;callback A 异步操作结束&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 回调结束时，调用 cb 通知 tapable 当前回调已结束</span>
    <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

hook<span class="token punctuation">.</span><span class="token function">tapAsync</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;callback B&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

hook<span class="token punctuation">.</span><span class="token function">callAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 运行结果：</span>
<span class="token comment">// callback A</span>
<span class="token comment">// callback A 异步操作结束</span>
<span class="token comment">// callback B</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从代码输出结果可以看出，A 回调内部的 <code>setTimeout</code> 执行完毕调用 <code>cb</code> 函数，<code>tapable</code> 才认为当前回调执行完毕，开始执行 B 回调。</p><p>除了 <code>callback</code> 风格外，也可以使用 promise 风格调用 <code>tap/call</code> 函数，改造上例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> AsyncSeriesHook <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;tapable&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> hook <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AsyncSeriesHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 注册回调</span>
hook<span class="token punctuation">.</span><span class="token function">tapPromise</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;callback A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;callback A 异步操作结束&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

hook<span class="token punctuation">.</span><span class="token function">tapPromise</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;callback B&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

hook<span class="token punctuation">.</span><span class="token function">promise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 运行结果：</span>
<span class="token comment">// callback A</span>
<span class="token comment">// callback A 异步操作结束</span>
<span class="token comment">// callback B</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有三个改动点：</p><ul><li>将 <code>tapAsync</code> 更改为 <code>tapPromise</code>；</li><li>Tap 回调需要返回 promise 对象，如上例第 8 行；</li><li><code>callAsync</code> 调用更改为 <code>promise</code>。</li></ul><blockquote><p>在 Webpack 中被如何使用</p></blockquote><p><code>AsyncSeriesHook</code> 钩子在 Webpack 中总共出现了 30+ 次，相对来说都是一些比较容易理解的时机，比如在构建完毕后触发 <code>compiler.hooks.done</code> 钩子，用于通知单次构建已经结束：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Compiler</span> <span class="token punctuation">{</span>
  <span class="token function">run</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">finalCallback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emitAssets</span><span class="token punctuation">(</span>compilation<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">finalCallback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>compilation<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span><span class="token function">needAdditionalPass</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>done<span class="token punctuation">.</span><span class="token function">callAsync</span><span class="token punctuation">(</span>stats<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">finalCallback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>

          <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>additionalPass<span class="token punctuation">.</span><span class="token function">callAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">finalCallback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>onCompiled<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emitRecords</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">finalCallback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// ...</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>done<span class="token punctuation">.</span><span class="token function">callAsync</span><span class="token punctuation">(</span>stats<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">finalCallback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">return</span> <span class="token function">finalCallback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> stats<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="asyncparallelhook-钩子" tabindex="-1"><a class="header-anchor" href="#asyncparallelhook-钩子" aria-hidden="true">#</a> <code>AsyncParallelHook</code> 钩子</h2><p>与 <code>AsyncSeriesHook</code> 类似，<code>AsyncParallelHook</code> 也支持异步风格的回调，不过 <code>AsyncParallelHook</code> 是以并行方式，同时执行回调队列里面的所有回调，逻辑上近似于：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">asyncParallelCall</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> callbacks <span class="token operator">=</span> <span class="token punctuation">[</span>fn1<span class="token punctuation">,</span> fn2<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">// 内部维护了一个计数器</span>
  <span class="token keyword">var</span> _counter <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

  <span class="token keyword">var</span> <span class="token function-variable function">_done</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">_callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>_counter <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token comment">// 按序执行回调</span>
  <span class="token keyword">var</span> _fn0 <span class="token operator">=</span> callbacks<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">_fn0</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">_err0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_err0<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>_counter <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 出错时，忽略后续回调，直接退出</span>
        <span class="token function">_callback</span><span class="token punctuation">(</span>_err0<span class="token punctuation">)</span><span class="token punctuation">;</span>
        _counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span>_counter <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">_done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>_counter <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token comment">// 不需要等待前面回调结束，直接开始执行下一个回调</span>
  <span class="token keyword">var</span> _fn1 <span class="token operator">=</span> callbacks<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">_fn1</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">_err1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_err1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>_counter <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">_callback</span><span class="token punctuation">(</span>_err1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        _counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span>_counter <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">_done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>AsyncParallelHook</code> 钩子的特点：</p><ul><li>支持异步风格；</li><li>并行执行回调队列，不需要做任何等待；</li><li>与 <code>SyncHook</code> 一样，不关心回调的执行结果。</li></ul><h2 id="实践应用" tabindex="-1"><a class="header-anchor" href="#实践应用" aria-hidden="true">#</a> 实践应用</h2><p>综上，Tapable 合计提供了 10 种钩子，支持同步、异步、熔断、循环、waterfall 等功能特性，以此支撑起 Webpack 复杂的构建需求。虽然多数情况下我们不需要手动调用 Tapable，但编写插件时可以借助这些知识，识别 Hook 类型与执行特性后，正确地调用，正确地实现交互。</p>`,79),y={href:"https://webpack.js.org/api/compiler-hooks/#done",target:"_blank",rel:"noopener noreferrer"},h=p('<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4a27c1a2560c4926aa76f9a8adefa035~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>这是一个 <code>AsyncSeriesHook</code> 钩子，意味着：</p><ul><li>支持异步语法，我们可以用 <code>tap/tapAsync/tapPromise</code> 方式注册回调；</li><li>Webpack 会按照注册顺序串行执行回调；</li><li>Webpack 不关心回调的返回值，但可以通过 <code>callback</code> 函数传递 Error 信息。</li></ul>',3),w={href:"https://webpack.js.org/api/compilation-hooks/#optimizemodules",target:"_blank",rel:"noopener noreferrer"},x=p(`<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba180e097d804216800ec285758b9a44~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>这是一个 <code>SyncBailHook</code> 钩子，因此：</p><ul><li>不支持异步语法，我们只能用 <code>tap</code> 注册回调；</li><li>若任意回调有返回值，则中断 Hook 流程，后面回调不再执行，所以使用时需要谨慎。</li></ul><p>其它 Hook 也能用类似方法，参照分析出钩子的应用技巧。</p><blockquote><p>提示：Webpack 官方文档并没有覆盖介绍所有钩子，必要时建议读者直接翻阅 Webpack 源码，分析钩子类型。</p></blockquote><h2 id="hook-动态编译" tabindex="-1"><a class="header-anchor" href="#hook-动态编译" aria-hidden="true">#</a> Hook 动态编译</h2><p>至此，Webpack 中用到的 Hook 子类都已介绍完毕，不同 Hook 适用于不同场景，解决不同问题，而它们底层都基于 Tapable 的“动态编译”实现，可以说，理解了动态编译，也就掌握了 Tapable 的核心实现逻辑。</p><p>动态编译是一个非常大胆的设计，不同 Hook 所谓的同步、异步、bail、waterfall、loop 等回调规则都是 Tapable 根据 Hook 类型、参数、回调队列等参数，调用 <code>new Function</code> 语句动态拼装出一段控制执行流程的 JavaScript 代码实现控制的。例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> SyncHook <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;tapable&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> sleep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SyncHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

sleep<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;callback A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">sleep</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用 <code>sleep.call</code> 时，Tapable 内部处理流程大致为：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1353e6ffa8794086b3dadb91a1de8b04~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>编译过程主要涉及三个实体：</p><ul><li><code>tapable/lib/SyncHook.js</code> ：定义 <code>SyncHook</code> 的入口文件；</li><li><code>tapable/lib/Hook.js</code> ：<code>SyncHook</code> 只是一个代理接口，内部实际上调用了 <code>Hook</code> 类，由 <code>Hook</code> 负责实现钩子的逻辑（其它钩子也是一样的套路）；</li><li><code>tapable/lib/HookCodeFactory.js</code> ：动态编译出 <code>call</code>、<code>callAsync</code>、<code>promise</code> 函数内容的工厂类，注意，其他钩子也都会用到 <code>HookCodeFactory</code> 工厂函数。</li></ul><p><code>SyncHook</code> （其他钩子类似)）调用 <code>call</code> 后，<code>Hook</code> 基类收集上下文信息并调用 <code>createCall</code> 及子类传入的 <code>compiler</code> 函数；<code>compiler</code> 调用 <code>HookCodeFactory</code> 进而使用 <code>new Function</code> 方法动态拼接出回调执行函数。上面例子对应的生成函数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">anonymous</span><span class="token punctuation">(</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> _context<span class="token punctuation">;</span>
<span class="token keyword">var</span> _x <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_x<span class="token punctuation">;</span>
<span class="token keyword">var</span> _fn0 <span class="token operator">=</span> _x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">_fn0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么问题来了，通过 <code>new Function</code>、<code>eval</code> 等方式实现的动态编译，存在诸如性能、安全性等方面的问题，所以社区很少见到类似的设计，真的有必要用这种方式实现 Hook 吗？</p><p>这放在 <code>SyncHook</code> 这种简单场景确实大可不必，但若是更复杂的 Hook，如 <code>AsyncSeriesWaterfallHook</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> AsyncSeriesWaterfallHook <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;tapable&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> sleep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AsyncSeriesWaterfallHook</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

sleep<span class="token punctuation">.</span><span class="token function">tapAsync</span><span class="token punctuation">(</span><span class="token string">&quot;test1&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">执行 A 回调： 参数 name=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token string">&quot;tecvan2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

sleep<span class="token punctuation">.</span><span class="token function">tapAsync</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">执行 B 回调： 参数 name=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token string">&quot;tecvan3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

sleep<span class="token punctuation">.</span><span class="token function">tapAsync</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">执行 C 回调： 参数 name=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token string">&quot;tecvan4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

sleep<span class="token punctuation">.</span><span class="token function">callAsync</span><span class="token punctuation">(</span><span class="token string">&quot;tecvan&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> name</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">回调结束， name=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 运行结果：</span>
<span class="token comment">// 执行 A 回调： 参数 name=tecvan</span>
<span class="token comment">// 执行 B 回调： 参数 name=tecvan2</span>
<span class="token comment">// 执行 C 回调： 参数 name=tecvan3</span>
<span class="token comment">// 回调结束， name=tecvan4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>AsyncSeriesWaterfallHook</code> 的特点是异步 + 串行 + 前一个回调的返回值会传入下一个回调，对应生成函数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">anonymous</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> _callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> _context<span class="token punctuation">;</span>
  <span class="token keyword">var</span> _x <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_x<span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">_next1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> _fn2 <span class="token operator">=</span> _x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">_fn2</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">_err2<span class="token punctuation">,</span> _result2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>_err2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">_callback</span><span class="token punctuation">(</span>_err2<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>_result2 <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          name <span class="token operator">=</span> _result2<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">_callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">_next0</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> _fn1 <span class="token operator">=</span> _x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">_fn1</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">_err1<span class="token punctuation">,</span> _result1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>_err1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">_callback</span><span class="token punctuation">(</span>_err1<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>_result1 <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          name <span class="token operator">=</span> _result1<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">_next1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">var</span> _fn0 <span class="token operator">=</span> _x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">_fn0</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">_err0<span class="token punctuation">,</span> _result0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_err0<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">_callback</span><span class="token punctuation">(</span>_err0<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>_result0 <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        name <span class="token operator">=</span> _result0<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token function">_next0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>核心逻辑：</p><ul><li>生成函数将回调队列各个项封装为 <code>_next0/_next1</code> 函数，这些 <code>next</code> 函数内在逻辑高度相似；</li><li>按回调定义的顺序，逐次执行，上一个回调结束后，才调用下一个回调，例如生成代码中的第39行、27行。</li></ul><p>相比于用递归、循环之类的手段实现 <code>AsyncSeriesWaterfallHook</code>，这段动态生成的函数逻辑确实会更清晰，更容易理解，这种场景下用动态编译，确实是一个不错的选择。</p>`,23),q=n("code",null,"Hook + HookCodeFactory",-1),j={href:"https://github1s.com/webpack/tapable/blob/master/lib/Hook.js#L12",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"CALL_DELEGATE/CALL_ASYNC_DELEGATE/PROMISE_DELEGATE",-1),H=n("p",null,[n("img",{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3b5b6274428f46649a9fd71ffa3d7834~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"})],-1),S={href:"https://github.com/GoogleChromeLabs/ndb",target:"_blank",rel:"noopener noreferrer"},z=p(`<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/472e9bca1ddf442a9d44970ae700f59c~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h2 id="高级特性-intercept" tabindex="-1"><a class="header-anchor" href="#高级特性-intercept" aria-hidden="true">#</a> 高级特性：Intercept</h2><p>除了通常的 <code>tap/call</code> 之外，tapable 还提供了简易的中间件机制 —— <code>intercept</code> 接口，例如</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> sleep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SyncHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

sleep<span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">context</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;before call&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;before loop&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">tap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;before each callback&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;every time call tap&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>intercept</code> 支持注册如下类型的中间件：</p><table data-ace-table-col-widths="100;286;491;" class="ace-table author-6857319138482798593"><colgroup><col width="100"><col width="286"><col width="491"></colgroup><tbody><tr><td style="border:1px solid rgb(222, 224, 227);"><div style="white-space:pre;" data-line-index="0" data-zone-id="xr164cg6rvtu80r9q99ksthu6me5wn1teozxc1ky297uuvvq8ngej65km1c7l8tnsnjwhk"></div></td><td style="border:1px solid rgb(222, 224, 227);"><div style="white-space:pre;" data-line-index="0" data-zone-id="xr164cg6rvtu80r9q99ksthu6me5wn1teozxc1z6s95brk9fgpv28lg0omkuuw9l32fr3q">签名</div></td><td style="border:1px solid rgb(222, 224, 227);"><div style="white-space:pre;" data-line-index="0" data-zone-id="xr164cg6rvtu80r9q99ksthu6me5wn1teozxc16h5t5jijbgu438q5pcluwj3l9v3wv5y7">解释</div></td></tr><tr><td style="border:1px solid rgb(222, 224, 227);"><div style="white-space:pre;" data-line-index="0" data-zone-id="xr1ozy0qlb1wel71mc9lz61rhi0uhg6gg4pxc1ky297uuvvq8ngej65km1c7l8tnsnjwhk"><code style="font-family:SourceCodeProMac;border:1px solid #dee0e3;background-color:#f5f6f7;border-radius:4px;margin-left:2px;margin-right:2px;">call</code></div></td><td style="border:1px solid rgb(222, 224, 227);"><div style="white-space:pre;" data-line-index="0" data-zone-id="xr1ozy0qlb1wel71mc9lz61rhi0uhg6gg4pxc1z6s95brk9fgpv28lg0omkuuw9l32fr3q"><code style="font-family:SourceCodeProMac;border:1px solid #dee0e3;background-color:#f5f6f7;border-radius:4px;margin-left:2px;margin-right:2px;">(...args) =&gt; void</code></div></td><td style="border:1px solid rgb(222, 224, 227);"><div style="white-space:pre;" data-line-index="0" data-zone-id="xr1ozy0qlb1wel71mc9lz61rhi0uhg6gg4pxc16h5t5jijbgu438q5pcluwj3l9v3wv5y7">调用 <code style="font-family:SourceCodeProMac;border:1px solid #dee0e3;background-color:#f5f6f7;border-radius:4px;margin-left:2px;margin-right:2px;">call/callAsync/promise</code> 时触发</div></td></tr><tr><td style="border:1px solid rgb(222, 224, 227);"><div style="white-space:pre;" data-line-index="0" data-zone-id="xr14h2c1lmv77dt7uhy287nuqps2oa47wv9xc1ky297uuvvq8ngej65km1c7l8tnsnjwhk"><code style="font-family:SourceCodeProMac;border:1px solid #dee0e3;background-color:#f5f6f7;border-radius:4px;margin-left:2px;margin-right:2px;">tap</code></div></td><td style="border:1px solid rgb(222, 224, 227);"><div style="white-space:pre;" data-line-index="0" data-zone-id="xr14h2c1lmv77dt7uhy287nuqps2oa47wv9xc1z6s95brk9fgpv28lg0omkuuw9l32fr3q"><code style="font-family:SourceCodeProMac;border:1px solid #dee0e3;background-color:#f5f6f7;border-radius:4px;margin-left:2px;margin-right:2px;">(tap: Tap) =&gt; void</code></div></td><td style="border:1px solid rgb(222, 224, 227);"><div style="white-space:pre;" data-line-index="0" data-zone-id="xr14h2c1lmv77dt7uhy287nuqps2oa47wv9xc16h5t5jijbgu438q5pcluwj3l9v3wv5y7">调用 <code style="font-family:SourceCodeProMac;border:1px solid #dee0e3;background-color:#f5f6f7;border-radius:4px;margin-left:2px;margin-right:2px;">call</code> 类函数后，每次调用回调之前触发</div></td></tr><tr><td style="border:1px solid rgb(222, 224, 227);"><div style="white-space:pre;" data-line-index="0" data-zone-id="xr1f8t26s9oywoqpj72p19r10y9lcdyeddqxc1ky297uuvvq8ngej65km1c7l8tnsnjwhk"><code style="font-family:SourceCodeProMac;border:1px solid #dee0e3;background-color:#f5f6f7;border-radius:4px;margin-left:2px;margin-right:2px;">loop</code></div></td><td style="border:1px solid rgb(222, 224, 227);"><div style="white-space:pre;" data-line-index="0" data-zone-id="xr1f8t26s9oywoqpj72p19r10y9lcdyeddqxc1z6s95brk9fgpv28lg0omkuuw9l32fr3q"><code style="font-family:SourceCodeProMac;border:1px solid #dee0e3;background-color:#f5f6f7;border-radius:4px;margin-left:2px;margin-right:2px;">(...args) =&gt; void</code></div></td><td style="border:1px solid rgb(222, 224, 227);"><div style="white-space:pre;" data-line-index="0" data-zone-id="xr1f8t26s9oywoqpj72p19r10y9lcdyeddqxc16h5t5jijbgu438q5pcluwj3l9v3wv5y7">仅 <code style="font-family:SourceCodeProMac;border:1px solid #dee0e3;background-color:#f5f6f7;border-radius:4px;margin-left:2px;margin-right:2px;">loop</code> 型的钩子有效，在循环开始之前触发</div></td></tr><tr><td style="border:1px solid rgb(222, 224, 227);"><div style="white-space:pre;" data-line-index="0" data-zone-id="xr1eeopciskpuzdyad2o7bgsod218rmmn6ixc1ky297uuvvq8ngej65km1c7l8tnsnjwhk"><code style="font-family:SourceCodeProMac;border:1px solid #dee0e3;background-color:#f5f6f7;border-radius:4px;margin-left:2px;margin-right:2px;">register</code></div></td><td style="border:1px solid rgb(222, 224, 227);"><div style="white-space:pre;" data-line-index="0" data-zone-id="xr1eeopciskpuzdyad2o7bgsod218rmmn6ixc1z6s95brk9fgpv28lg0omkuuw9l32fr3q"><code style="font-family:SourceCodeProMac;border:1px solid #dee0e3;background-color:#f5f6f7;border-radius:4px;margin-left:2px;margin-right:2px;">(tap: Tap) =&gt; Tap | undefined</code></div></td><td style="border:1px solid rgb(222, 224, 227);"><div style="white-space:pre;" data-line-index="0" data-zone-id="xr1eeopciskpuzdyad2o7bgsod218rmmn6ixc16h5t5jijbgu438q5pcluwj3l9v3wv5y7">调用 <code style="font-family:SourceCodeProMac;border:1px solid #dee0e3;background-color:#f5f6f7;border-radius:4px;margin-left:2px;margin-right:2px;">tap/tapAsync/tapPromise</code> 时触发</div></td></tr></tbody></table><p>其中 <code>register</code> 在每次调用 <code>tap</code> 时被调用；其他三种中间件的触发时机大致如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">var</span> _context<span class="token punctuation">;</span>
  <span class="token keyword">const</span> callbacks <span class="token operator">=</span> <span class="token punctuation">[</span>fn1<span class="token punctuation">,</span> fn2<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> _interceptors <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>interceptors<span class="token punctuation">;</span>
  <span class="token comment">// 调用 call 函数，立即触发</span>
  _interceptors<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">intercept</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">intercept</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>_context<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> _loop<span class="token punctuation">;</span>
  <span class="token keyword">var</span> cursor <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">do</span> <span class="token punctuation">{</span>
    _loop <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token comment">// 每次循环开始时触发 \`loop\`</span>
    _interceptors<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">intercept</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> intercept<span class="token punctuation">.</span><span class="token function">loop</span><span class="token punctuation">(</span>_context<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 触发 \`tap\`</span>
    <span class="token keyword">var</span> _fn0 <span class="token operator">=</span> callbacks<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    _interceptors<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">intercept</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> intercept<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span>_context<span class="token punctuation">,</span> _fn0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> _result0 <span class="token operator">=</span> <span class="token function">_fn0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_result0 <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      _loop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> _fn1 <span class="token operator">=</span> callbacks<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token comment">// 再次触发 \`tap\`</span>
      _interceptors<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">intercept</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> intercept<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span>_context<span class="token punctuation">,</span> _fn1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">var</span> _result1 <span class="token operator">=</span> <span class="token function">_fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>_result1 <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        _loop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>_loop<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>intercept</code> 特性在 Webpack 内主要被用作进度提示，如 <code>Webpack/lib/ProgressPlugin.js</code> 插件中，分别对 <code>compiler.hooks.emit</code> 、<code>compiler.hooks.afterEmit</code> 钩子应用了记录进度的中间件函数。其他类型的插件应用较少。</p><h2 id="高级特性-hookmap" tabindex="-1"><a class="header-anchor" href="#高级特性-hookmap" aria-hidden="true">#</a> 高级特性：HookMap</h2><p>Tapable 还有一个值得注意的特性 —— <code>HookMap</code>，它提供了一种集合操作能力，能够降低创建与使用的复杂度，用法比较简单：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> SyncHook<span class="token punctuation">,</span> HookMap <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;tapable&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> sleep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HookMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">SyncHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 通过 for 函数过滤集合中的特定钩子</span>
sleep<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&quot;statement&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;callback for statement&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 触发 statement 类型的钩子</span>
sleep<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;statement&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>HookMap</code> 能够用于实现的动态获取钩子功能，例如在 Webpack 的 <code>lib/parser.js</code> 文件中，<code>parser</code> 文件主要完成将资源内容解析为 AST 集合，之后遍历 AST 并以 <code>HookMap</code> 方式对外通知遍历到的内容。</p><p>例如，遇到表达式的时候触发 <code>Parser.hooks.expression</code> 钩子，问题是 AST 结构和内容都很复杂，如果所有情景都以独立的钩子实现，那代码量会急剧膨胀。这种场景就很适合用 <code>HookMap</code> 解决，以 <code>expression</code> 为例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Parser</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>hooks <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token comment">// 定义钩子</span>
      <span class="token comment">// 这里用到 HookMap ，所以不需要提前遍历枚举所有 expression 场景</span>
      <span class="token literal-property property">expression</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">HookMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">SyncBailHook</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;expression&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">//   不同场景下触发钩子</span>
  <span class="token function">walkMemberExpression</span><span class="token punctuation">(</span><span class="token parameter">expression</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> exprName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getNameForExpression</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>exprName <span class="token operator">&amp;&amp;</span> exprName<span class="token punctuation">.</span>free<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 触发特定类型的钩子</span>
      <span class="token keyword">const</span> expressionHook <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>expression<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>exprName<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>expressionHook <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">expressionHook</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>

  <span class="token function">walkThisExpression</span><span class="token punctuation">(</span><span class="token parameter">expression</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> expressionHook <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>expression<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;this&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>expressionHook <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">expressionHook</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上例代码第 15、25 行都通过 <code>this.hooks.expression.get(xxx)</code> 语句动态获取对应钩子实例，之后再调用 <code>call</code> 触发。HookMap 的消费逻辑与普通 Hook 类似，只需要增加 <code>for</code> 函数过滤出你实际监听的 Hook 实例即可，如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 钩子消费逻辑</span>
<span class="token comment">// 选取 CommonJsStuffPlugin 仅起示例作用</span>
<span class="token keyword">class</span> <span class="token class-name">CommonJsStuffPlugin</span> <span class="token punctuation">{</span>
  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>compilation<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span>
      <span class="token string">&quot;CommonJsStuffPlugin&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">(</span><span class="token parameter">compilation<span class="token punctuation">,</span> <span class="token punctuation">{</span> normalModuleFactory <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> <span class="token function-variable function">handler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">parser<span class="token punctuation">,</span> parserOptions</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token comment">// 通过 for 精确消费钩子</span>
          parser<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>expression
            <span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&quot;require.main.require&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span>
              <span class="token string">&quot;CommonJsStuffPlugin&quot;</span><span class="token punctuation">,</span>
              ParserHelpers<span class="token punctuation">.</span><span class="token function">expressionIsUnsupported</span><span class="token punctuation">(</span>
                parser<span class="token punctuation">,</span>
                <span class="token string">&quot;require.main.require is not supported by Webpack.&quot;</span>
              <span class="token punctuation">)</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
          parser<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>expression
            <span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&quot;module.parent.require&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span>
              <span class="token string">&quot;CommonJsStuffPlugin&quot;</span><span class="token punctuation">,</span>
              ParserHelpers<span class="token punctuation">.</span><span class="token function">expressionIsUnsupported</span><span class="token punctuation">(</span>
                parser<span class="token punctuation">,</span>
                <span class="token string">&quot;module.parent.require is not supported by Webpack.&quot;</span>
              <span class="token punctuation">)</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
          parser<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>expression
            <span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&quot;require.main&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span>
              <span class="token string">&quot;CommonJsStuffPlugin&quot;</span><span class="token punctuation">,</span>
              ParserHelpers<span class="token punctuation">.</span><span class="token function">toConstantDependencyWithWebpackRequire</span><span class="token punctuation">(</span>
                parser<span class="token punctuation">,</span>
                <span class="token string">&quot;__Webpack_require__.c[__Webpack_require__.s]&quot;</span>
              <span class="token punctuation">)</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">// ...</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>借助这种能力我们就不需要为每一种情况都单独创建 Hook，只需要在使用时动态创建、获取对应实例即可，能有效降低开发与维护成本。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>为了应对构建场景下各种复杂需求，Webpack 内部使用了多种类型的 Hook，分别用于实现同步、异步、熔断、串行、并行的流程逻辑，开发插件时需要注意识别 Hook 类型，据此做出正确的调用与交互逻辑。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题" aria-hidden="true">#</a> 思考题</h2><p>为什么 Webpack 内部需要这些不同类型的流程逻辑？比如，为什么需要 <code>SyncBailHook</code> 这种具有熔断特性的钩子？适用于怎么样的场景？在我们日常业务开发中，能否复用这一类流程控制能力？</p>`,22);function A(C,W){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,k,d,r,v,n("p",null,[s("而 Webpack 的插件体系是一种基于 "),n("a",m,[s("Tapable"),t(a)]),s(" 实现的强耦合架构，它在特定时机触发钩子时会附带上足够的上下文信息，插件定义的钩子回调中，能也只能与这些上下文背后的数据结构、接口交互产生 side effect，进而影响到编译状态和后续流程。")]),n("p",null,[n("a",b,[s("Tapable"),t(a)]),s(" 是 Webpack 插件架构的核心支架，但它的代码量其实很少，本质上就是围绕着 "),f,s(" 模式叠加各种特化逻辑，适配 Webpack 体系下复杂的事件源-处理器之间交互需求，比如：")]),g,n("p",null,[s("例如：对于 "),n("a",y,[s("compiler.hooks.done"),t(a)]),s(" 钩子，官网介绍：")]),h,n("p",null,[s("又或者，对于 "),n("a",w,[s("compilation.hooks.optimizeChunkModules"),t(a)]),s(" 钩子，官网介绍：")]),x,n("p",null,[s("Tapable 提供的大多数特性都是基于 "),q,s(" 实现的，如果大家对此有兴趣，可以在 "),n("a",j,[s("tapable/lib/Hook.js"),t(a)]),s(" 的 "),_,s(" 几个函数打断点：")]),H,n("p",null,[s("之后，使用 "),n("a",S,[s("ndb"),t(a)]),s(" 命令断点调试，查看动态编译出的代码：")]),z])}const M=e(i,[["render",A],["__file","di23zhang—chajianjiagou：HooktixishiruheyingxiangWebpackjiagoude.html.vue"]]);export{M as default};
